function Z=callCGIR(X,Y,M,K,N,matrixMultiplicationParameters,W)




%#codegen

    coder.allowpcode('plain');
    coder.inline('always');

    if nargin<7

        Z=zeros(M,N,'like',X);
    else





        if coder.const(coder.internal.isConst(N)&&size(W,2)==N)
            Z=W;
        else
            coder.internal.assert(size(W,2)==1,'dlcoder_spkg:cnncodegen:DLCoderInternalError');
            Z=repmat(W,1,N);
        end
    end






    useMultiThreading=coder.const(coder.internal.coderNetworkUtils.canUseMultiThreading())&&...
    coder.const(matrixMultiplicationParameters.AllowMultiThreading);

    if coder.const(coder.isRowMajor)





        coder.ceval("-layout:any","#__matmul_anchor",...
        N,K,M,...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeN),...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeK),...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeM),...
        coder.rref(Y),coder.rref(X),coder.ref(Z),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.SimdRegistersPerColumn)),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.RegisterBlockWidth)),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.SimdWidth)),...
        coder.const(matrixMultiplicationParameters.UsePackingA),...
        coder.const(matrixMultiplicationParameters.UsePackingB),...
        coder.const(useMultiThreading)...
        );
    else
        coder.ceval("-layout:any","#__matmul_anchor",...
        M,K,N,...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeM),...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeK),...
        coder.internal.indexInt(matrixMultiplicationParameters.CacheBlockSizeN),...
        coder.rref(X),coder.rref(Y),coder.ref(Z),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.SimdRegistersPerColumn)),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.RegisterBlockWidth)),...
        coder.const(coder.internal.indexInt(matrixMultiplicationParameters.SimdWidth)),...
        coder.const(matrixMultiplicationParameters.UsePackingA),...
        coder.const(matrixMultiplicationParameters.UsePackingB),...
        coder.const(useMultiThreading)...
        );
    end

end
