classdef helperGlobeViewer<matlab.mixin.SetGet
    properties(Hidden)
        Parent matlab.ui.Figure
GlobeViewer
InfoBox
    end

    properties






        ReferenceLocation=[0,0,0];
    end

    properties(Hidden)
        IsEarthCentered=true;
    end

    properties
        TargetHistoryLength=1000
        TrackHistoryLength=2000
        ShowTrackCovariance=true
        ShowDetectionCovariance=true
        ShowDeletedTracks=true





        SensorPlotRange=463000;

        CoverageMode='Coverage';
    end

    properties(Access=protected)
        ColorsDark=[255,255,17;...
        19,159,255;...
        255,105,41;...
        100,212,19;...
        183,70,255;...
        15,255,255;...
        255,19,166]/255;

        pDisplayTime=0
        pDisplayNumDebris=0
        pDisplayNumTracks=0
    end

    properties(Access=protected)
        TrackIDs=[];

        TrackPointGlobeIDs={};
        TrackHistoryGlobeIDs={};
        TrackCovarianceGlobeIDs={};
        pDetectionCovarianceIDs={};

        pFullTrajectoryDone logical=false;
    end

    properties(Access=protected)

        pCommercialServiceAirportCore30=...
        [33.4343,-112.0116;...
        33.9425,-118.4081;...
        32.7336,-117.1897;...
        37.619,-122.3749;...
        39.8617,-104.6732;...
        38.8519,-77.0377;...
        38.9474,-77.4599;...
        26.0726,-80.1527;...
        25.7954,-80.2901;...
        28.4294,-81.309;...
        27.9755,-82.5332;...
        33.6367,-84.4279;...
        21.3187,-157.9224;...
        41.786,-87.7524;...
        41.9816,-87.9067;...
        42.363,-71.0064;...
        39.1754,-76.6683;...
        42.2124,-83.3534;...
        44.882,-93.2218;...
        35.2137,-80.9491;...
        40.6925,-74.1687;...
        36.0801,-115.1522;...
        40.6398,-73.7789;...
        40.7773,-73.8726;...
        39.8722,-75.2409...
        ];

        pCommercialServiceAirportAll=...
        [33.4343,-112.0116;...
        33.9425,-118.4081;...
        32.7336,-117.1897;...
        37.619,-122.3749;...
        39.8617,-104.6732;...
        38.8519,-77.0377;...
        38.9474,-77.4599;...
        26.0726,-80.1527;...
        25.7954,-80.2901;...
        28.4294,-81.309;...
        27.9755,-82.5332;...
        33.6367,-84.4279;...
        21.3187,-157.9224;...
        41.786,-87.7524;...
        41.9816,-87.9067;...
        42.363,-71.0064;...
        39.1754,-76.6683;...
        42.2124,-83.3534;...
        44.882,-93.2218;...
        35.2137,-80.9491;...
        40.6925,-74.1687;...
        36.0801,-115.1522;...
        40.6398,-73.7789;...
        40.7773,-73.8726;...
        39.8722,-75.2409;...
        35.0424,-89.9767;...
        32.8968,-97.038;...
        29.9844,-95.3414;...
        40.7884,-111.9778;...
        47.4499,-122.3118;...
        61.5816,-159.543;...
        60.7786,-161.8372;...
        55.2052,-162.7245;...
        70.1955,-148.4658;...
        59.0447,-158.5055;...
        64.7362,-156.9374;...
        62.7861,-164.4907;...
        64.8151,-147.8564;...
        58.4253,-135.7074;...
        59.2438,-135.5235;...
        59.6456,-151.4766;...
        59.7556,-154.9178;...
        58.355,-134.5763;...
        60.5733,-151.2448;...
        55.3541,-131.7112;...
        58.6765,-156.6487;...
        57.75,-152.4938;...
        58.9321,-158.9019;...
        60.4918,-145.4776;...
        61.2135,-149.8447;...
        64.5122,-165.4452;...
        57.9422,-152.465;...
        56.8015,-132.9462;...
        66.8847,-162.5985;...
        55.3137,-160.5214;...
        59.4601,-135.3157;...
        57.1663,-170.2226;...
        61.1741,-149.9982;...
        63.8885,-160.7991;...
        53.8989,-166.545;...
        61.1342,-146.2448;...
        71.2849,-156.7686;...
        56.4843,-132.3698;...
        59.5033,-139.6602;...
        33.5639,-86.7523;...
        31.321,-85.4495;...
        34.6372,-86.7751;...
        30.6914,-88.2428;...
        32.3006,-86.394;...
        34.7453,-87.6102;...
        34.7294,-92.2248;...
        36.2615,-93.1547;...
        35.3366,-94.3674;...
        35.8317,-90.6464;...
        36.2816,-94.3078;...
        33.221,-92.8133;...
        33.4537,-93.991;...
        34.6544,-112.4196;...
        35.1403,-111.6693;...
        35.9524,-112.147;...
        35.156,-114.5594;...
        36.9261,-111.4484;...
        33.3078,-111.6555;...
        34.2655,-110.0057;...
        32.1161,-110.941;...
        32.6566,-114.606;...
        40.9778,-124.1085;...
        34.2007,-118.3587;...
        37.3805,-120.5682;...
        38.509,-122.8129;...
        39.7954,-121.8584;...
        36.7762,-119.7181;...
        32.8342,-115.5787;...
        35.6587,-117.8295;...
        41.7802,-124.2365;...
        33.6757,-117.8682;...
        33.8178,-118.1517;...
        37.6241,-118.8388;...
        33.1283,-117.2801;...
        35.4339,-119.0577;...
        37.2848,-120.5139;...
        37.7213,-122.2207;...
        37.6258,-120.9544;...
        36.587,-121.8429;...
        37.3627,-121.9291;...
        34.056,-117.6012;...
        33.8297,-116.5067;...
        40.509,-122.2934;...
        38.6954,-121.5908;...
        35.2373,-120.6426;...
        34.4262,-119.8415;...
        34.8999,-120.4581;...
        37.8942,-121.2383;...
        36.3187,-119.3929;...
        39.2219,-106.8682;...
        38.8058,-104.7008;...
        37.303,-108.6281;...
        37.1515,-107.7538;...
        39.6427,-106.9159;...
        40.4518,-105.0113;...
        39.1224,-108.5267;...
        38.5339,-106.933;...
        38.5098,-107.8942;...
        38.2891,-104.4965;...
        37.4349,-105.8666;...
        37.9538,-107.9087;...
        40.4812,-107.2177;...
        41.9391,-72.6834;...
        41.2638,-72.8868;...
        29.1799,-81.0581;...
        29.6901,-82.2718;...
        30.4941,-81.6879;...
        24.5561,-81.7596;...
        28.1028,-80.6453;...
        30.3583,-85.7956;...
        28.7767,-81.2355;...
        26.6832,-80.0956;...
        30.4734,-87.1866;...
        26.9189,-81.9909;...
        27.3954,-82.5544;...
        26.5362,-81.7552;...
        27.91,-82.6874;...
        30.3965,-84.3503;...
        33.3699,-81.9645;...
        31.259,-81.4663;...
        32.5163,-84.9389;...
        32.1276,-81.2021;...
        31.5355,-84.1945;...
        30.7814,-83.2762;...
        19.7203,-155.0485;...
        20.8986,-156.4305;...
        21.211,-156.9736;...
        19.7388,-156.0456;...
        20.7856,-156.9514;...
        21.976,-159.339;...
        21.1529,-157.0963;...
        41.534,-93.6631;...
        42.402,-90.7095;...
        42.5512,-94.1918;...
        43.1578,-93.3312;...
        42.4026,-96.3844;...
        40.7832,-91.1255;...
        41.8847,-91.7108;...
        42.5571,-92.4003;...
        43.5644,-116.2229;...
        43.5038,-114.2956;...
        43.5137,-112.0708;...
        42.4818,-114.4878;...
        46.3745,-117.0154;...
        42.9098,-112.5959;...
        39.8442,-89.6781;...
        40.4771,-88.9159;...
        42.1954,-89.0972;...
        39.8346,-88.8657;...
        40.6642,-89.6933;...
        41.4483,-90.5075;...
        39.9429,-91.1946;...
        40.0388,-88.2778;...
        37.755,-89.0111;...
        38.0384,-87.5309;...
        40.9785,-85.1952;...
        41.6163,-87.4128;...
        39.7173,-86.2947;...
        41.7082,-86.3173;...
        37.7631,-99.9654;...
        37.9275,-100.7244;...
        38.8422,-99.2732;...
        37.0442,-100.9599;...
        39.1412,-96.6718;...
        38.7906,-97.6522;...
        37.6499,-97.4331;...
        37.0603,-88.773;...
        38.0367,-84.6086;...
        39.0488,-84.6678;...
        38.1741,-85.7365;...
        37.7388,-87.1668;...
        31.3274,-92.5486;...
        30.5329,-91.1499;...
        30.2052,-91.9876;...
        30.1261,-93.2234;...
        29.9934,-90.258;...
        32.5109,-92.0377;...
        32.4466,-93.8256;...
        41.6693,-70.2804;...
        42.4699,-71.289;...
        41.3934,-70.6139;...
        41.2531,-70.0603;...
        41.6766,-70.9578;...
        42.0723,-70.2207;...
        39.7085,-77.7265;...
        38.3402,-75.5095;...
        44.3206,-69.7973;...
        44.8074,-68.8281;...
        44.4498,-68.3616;...
        44.0601,-69.0993;...
        46.689,-68.0448;...
        43.6462,-70.3093;...
        45.0781,-83.5603;...
        45.6922,-85.5666;...
        42.9654,-83.7437;...
        42.7786,-84.5862;...
        45.3048,-85.2753;...
        44.7416,-85.5824;...
        46.2507,-84.4724;...
        45.7227,-87.0937;...
        45.8184,-88.1146;...
        42.8808,-85.5228;...
        46.5275,-90.1314;...
        47.1684,-88.4891;...
        42.2344,-85.5516;...
        44.2725,-86.2469;...
        43.5329,-84.0796;...
        43.1677,-86.2354;...
        42.6656,-83.4205;...
        45.5709,-84.7967;...
        46.3536,-87.3954;...
        47.5107,-94.9347;...
        46.4042,-94.1338;...
        46.8421,-92.1936;...
        48.5656,-93.4022;...
        47.3866,-92.839;...
        43.9083,-92.5;...
        48.0657,-96.185;...
        37.2253,-89.5707;...
        38.8181,-92.2196;...
        37.1518,-94.4983;...
        39.2976,-94.7139;...
        40.0935,-92.5449;...
        38.7487,-90.37;...
        37.2457,-93.3886;...
        37.7416,-92.1407;...
        33.4483,-88.5914;...
        30.4073,-89.0701;...
        31.4671,-89.3371;...
        32.3112,-90.0759;...
        32.3326,-88.7519;...
        33.4829,-90.9856;...
        34.2681,-88.7699;...
        45.9548,-112.4975;...
        45.8077,-108.5429;...
        48.3105,-114.256;...
        47.4827,-111.3706;...
        46.6068,-111.9827;...
        48.0945,-105.5751;...
        46.9163,-114.0906;...
        47.7069,-104.1926;...
        44.6884,-111.1176;...
        34.8292,-77.6121;...
        35.4362,-82.5418;...
        35.073,-77.0429;...
        34.9912,-78.8803;...
        36.1013,-79.9411;...
        35.6352,-77.3853;...
        35.8776,-78.7875;...
        34.2706,-77.9026;...
        46.7727,-100.7458;...
        48.1146,-98.9083;...
        46.7973,-102.8019;...
        47.9473,-97.1738;...
        46.9207,-96.8158;...
        46.9297,-98.6782;...
        48.2576,-101.278;...
        48.1779,-103.6423;...
        40.9675,-98.3096;...
        41.3032,-95.8941;...
        40.727,-99.0068;...
        40.8509,-96.7591;...
        41.1262,-100.6837;...
        41.874,-103.5956;...
        43.6261,-72.3042;...
        42.9328,-71.4357;...
        39.4576,-74.5772;...
        40.2767,-74.8135;...
        35.0402,-106.6092;...
        32.3374,-104.2634;...
        36.7413,-108.2299;...
        32.6875,-103.2173;...
        33.3016,-104.5306;...
        35.6171,-106.0894;...
        35.9475,-114.8611;...
        40.8249,-115.7917;...
        39.4991,-119.7681;...
        44.3853,-74.2062;...
        42.7491,-73.802;...
        42.9404,-78.7306;...
        42.1534,-79.258;...
        42.1599,-76.8917;...
        42.2086,-75.9797;...
        43.1191,-77.6719;...
        42.4914,-76.4587;...
        40.7953,-73.1002;...
        44.9362,-74.8451;...
        43.1076,-78.9458;...
        44.6819,-75.4655;...
        44.6509,-73.4681;...
        40.7288,-73.4134;...
        41.5041,-74.1048;...
        43.1112,-76.1063;...
        43.9919,-76.0207;...
        41.0669,-73.7076;...
        40.9151,-81.4436;...
        41.4094,-81.8547;...
        39.9023,-84.2194;...
        39.998,-82.892;...
        39.8138,-82.9278;...
        41.5868,-83.8078;...
        41.2607,-80.6791;...
        34.5677,-98.4166;...
        36.1984,-95.8881;...
        35.3931,-97.6008;...
        45.6951,-118.8414;...
        42.1561,-121.7332;...
        44.1246,-123.212;...
        45.5887,-122.5969;...
        44.2541,-121.15;...
        42.3742,-122.8735;...
        43.4169,-124.247;...
        40.2964,-78.32;...
        40.2746,-79.4068;...
        41.1783,-78.8987;...
        42.082,-80.1762;...
        40.1932,-76.7626;...
        40.3156,-78.8347;...
        40.1224,-76.2944;...
        40.6524,-75.4404;...
        40.4915,-80.2329;...
        40.8493,-77.8487;...
        41.3385,-75.7234;...
        41.2417,-76.9218;...
        18.1348,-65.4936;...
        18.2557,-67.1485;...
        18.4568,-66.0985;...
        18.2453,-65.6434;...
        18.4393,-66.002;...
        18.0083,-66.563;...
        18.4949,-67.1294;...
        41.1681,-71.5778;...
        41.724,-71.4282;...
        41.3496,-71.8034;...
        32.8986,-80.0405;...
        33.9388,-81.1195;...
        34.1854,-79.7239;...
        34.8957,-82.2189;...
        32.2244,-80.6975;...
        33.6797,-78.9283;...
        45.4491,-98.4218;...
        43.582,-96.7419;...
        44.3827,-100.286;...
        44.0453,-103.0574;...
        44.914,-97.1547;...
        35.0352,-85.2036;...
        35.811,-83.994;...
        36.1245,-86.6782;...
        36.4752,-82.4074;...
        32.4113,-99.6819;...
        30.1945,-97.6699;...
        25.9068,-97.4258;...
        27.7704,-97.5012;...
        32.8471,-96.8518;...
        29.3742,-100.9272;...
        32.384,-94.7115;...
        30.5886,-96.3638;...
        31.8072,-106.3764;...
        29.9508,-94.0207;...
        27.5442,-99.4616;...
        33.6637,-101.8206;...
        26.1758,-98.2386;...
        31.9425,-102.2019;...
        35.2194,-101.7059;...
        31.0673,-97.8289;...
        31.3577,-100.4963;...
        29.5337,-98.4698;...
        33.9888,-98.4919;...
        32.3538,-95.4027;...
        26.2271,-97.6551;...
        28.8525,-96.9185;...
        31.6122,-97.2303;...
        29.6454,-95.2789;...
        38.755,-109.7548;...
        37.701,-113.0988;...
        41.1957,-112.0129;...
        40.2192,-111.7234;...
        37.0364,-113.5103;...
        40.4409,-109.5099;...
        38.1386,-78.4529;...
        37.3254,-79.2012;...
        37.1319,-76.493;...
        36.8946,-76.2012;...
        37.5052,-77.3197;...
        37.3255,-79.9754;...
        38.2638,-78.8964;...
        18.3373,-64.9734;...
        17.7016,-64.8017;...
        44.4719,-73.1533;...
        43.5299,-72.9496;...
        48.7927,-122.5375;...
        47.53,-122.302;...
        48.522,-123.0244;...
        48.7083,-122.9106;...
        47.3981,-120.2057;...
        46.7439,-117.1096;...
        47.619,-117.5352;...
        46.2647,-119.119;...
        46.0948,-118.289;...
        48.1202,-123.4997;...
        46.5682,-120.5441;...
        44.4846,-88.1297;...
        44.7776,-89.6668;...
        44.8658,-91.4843;...
        43.1399,-89.3375;...
        42.9469,-87.8971;...
        43.8793,-91.2566;...
        44.2581,-88.5191;...
        45.6309,-89.4666;...
        37.8583,-80.3995;...
        39.345,-81.4393;...
        39.6429,-79.9163;...
        39.2966,-80.2281;...
        37.7873,-81.1242;...
        38.3669,-82.5587;...
        38.3759,-81.593;...
        42.908,-106.4644;...
        41.1556,-104.8105;...
        44.3489,-105.5394;...
        43.6073,-110.7378;...
        41.3121,-105.675;...
        43.0642,-108.4598;...
        41.5942,-109.0652;...
        44.7692,-106.9803;...
        43.9629,-107.9505;...
        44.5202,-109.0238;...
        60.9106,-161.4997;...
        62.68,-164.6599;...
        68.1336,-151.7433;...
        66.976,-160.4365;...
        65.9816,-161.1491;...
        60.1536,-164.2846;...
        61.5408,-165.6009;...
        67.2522,-150.2039;...
        55.4788,-133.1478;...
        60.2137,-162.0439;...
        64.615,-162.2705;...
        66.5724,-145.2463;...
        63.7666,-171.7328;...
        58.0961,-135.4097;...
        61.5239,-166.1466;...
        65.6979,-156.3514;...
        61.5363,-160.3413;...
        60.8733,-162.5243;...
        59.933,-164.0305;...
        67.7362,-164.5635;...
        59.9608,-162.8812;...
        63.0306,-163.5326;...
        60.7903,-161.4437;...
        59.8765,-163.1685;...
        61.18,-149.9719;...
        57.5351,-153.9767;...
        61.8642,-162.0261;...
        62.9528,-155.607;...
        55.131,-131.5781;...
        62.0948,-163.6829;...
        59.3521,-151.9252;...
        60.9391,-164.6413;...
        67.5612,-162.9804;...
        60.906,-162.4406;...
        57.2185,-153.2692;...
        61.9346,-162.8996;...
        68.3487,-166.7993;...
        59.7551,-161.8454;...
        65.1744,-152.1094;...
        66.8175,-161.0223;...
        61.7749,-161.3194;...
        63.6863,-170.4932;...
        61.8445,-165.5737;...
        66.6001,-159.9857;...
        59.4424,-151.7041;...
        66.2496,-166.0894;...
        57.0471,-135.3616;...
        62.0608,-163.3018;...
        63.516,-162.278;...
        55.688,-132.5367;...
        60.5413,-165.0872;...
        61.0968,-160.9695;...
        60.3353,-162.667;...
        70.638,-159.9948;...
        35.9861,-113.8169;...
        45.7776,-111.152;...
        18.3133,-65.3043];

    end

    methods
        function obj=helperGlobeViewer(varargin)
            if~isempty(varargin)
                set(obj,varargin{:});
            end

            if isempty(obj.Parent)
                fig=uifigure("Position",[560,300,800,600],"Visible","off");
                obj.Parent=fig;
            end


            glopt=globe.internal.GlobeOptions;
            glopt.EnableHomeButton=true;
            glopt.EnableSceneModePicker=false;
            glopt.UseDebug=false;
            glopt.EnableBaseLayerPicker=false;
            gl=globe.graphics.GeographicGlobe("Parent",fig,...
            "Basemap",'streets-dark',"terrain","none","GlobeOptions",glopt);


            obj.GlobeViewer=gl.GlobeViewer;

            infotext=getInfoText(obj);
            box=uilabel(fig,'Text',infotext,'FontColor',[1,1,1],'FontSize',13,...
            'Position',[10,10,300,70],'Visible','off');
            obj.InfoBox=box;


            if~fig.Visible
                fig.Visible='on';
            end
        end
    end


    methods
        function showScenario(obj,scene,varargin)













            narginchk(2,4);
            validateattributes(scene,{'trackingScenario'},{'scalar'});

            obj.IsEarthCentered=scene.IsEarthCentered;

            [time,platforms,covcon]=obj.parseSceneForUpdate(scene);

            switch numel(varargin)
            case 0
                updateDisplay(obj,time,platforms,covcon);
            case 1
                detections=varargin{1};

                updateDisplay(obj,time,platforms,covcon,detections)
            case 2
                detections=varargin{1};
                tracks=varargin{2};


                updateDisplay(obj,time,platforms,covcon,detections,tracks);
            end
        end

        function updateDisplay(obj,time,platforms,covcon,detections,tracks)

            obj.pDisplayTime=round(time/60);


            obj.GlobeViewer.queuePlots


            if nargin>2&&~isempty(platforms)
                plotTarget(obj,[],platforms);
            end


            if nargin>3&&~isempty(covcon)
                if time<2
                    plotCoverage(obj,covcon);
                end
            end


            if nargin>4&&~isempty(detections)
                plotDetection(obj,detections);
            end


            if nargin>5
                plotTrack(obj,tracks);
            end


            obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);


            obj.InfoBox.Text=getInfoText(obj);
        end

        function plotPlatform(obj,platforms,markerstyle)
            if nargin<3
                markerstyle='^';
            end
            plotTarget(obj,[],platforms,markerstyle,'none');
        end

        function plotTarget(obj,~,platforms,markerstyle,trajmode)












            if nargin<4
                markerstyle='^';
            end

            if nargin<5
                trajmode='full';
            end

            if~obj.GlobeViewer.Queue
                obj.GlobeViewer.queuePlots;
                localqueue=true;
            else
                localqueue=false;
            end

            color=[1,1,1];
            N=numel(platforms);
            if iscell(platforms)
                platforms=[platforms{:}];
            end
            ids={platforms.PlatformID};

            allpositions=zeros(N,3);
            for i=1:N
                platform=platforms(i);
                position_lla=plat2lla(obj,platform);
                allpositions(i,:)=position_lla;

            end


            obj.GlobeViewer.marker(allpositions,markerstyle,...
            "Color",color,...
            "ID",ids,...
            "IconSize",[16,16],...
            "Animation",'none');


            if strcmpi(trajmode,'Full')&&~obj.pFullTrajectoryDone
                plotTrajectory(obj,platforms);
            elseif strcmpi(trajmode,'History')
                obj.plotHistoryLines(allpositions,...
                "Indices",{1:N},...
                "Color",color,...
                "Width",1,...
                "ID","lineCollection",...
                "HistoryDepth",obj.TargetHistoryLength);
            end




            if localqueue
                obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);
            end
        end

        function plotTrajectory(obj,arg,ids)







            if~obj.GlobeViewer.Queue
                obj.GlobeViewer.queuePlots;
                localqueue=true;
            else
                localqueue=false;
            end

            if isa(arg,'fusion.scenario.Platform')
                alltraj={arg.Trajectory};
                allids=arrayfun(@(x)"trajectoryID"+num2str(x),[arg.PlatformID]);
            else
                alltraj=arg;
                allids=arrayfun(@(x)"trajectoryID"+num2str(x),1:numel(alltraj));
            end

            if nargin==3
                allids=ids;
            end

            for i=1:numel(alltraj)
                traj=alltraj{i};
                if isprop(traj,'Waypoints')&&size(traj.Waypoints,1)>1
                    sampTimes=traj.TimeOfArrival(1):traj.TimeOfArrival(end);
                    samplePositions=lookupPose(traj,sampTimes);
                    if isa(traj,'waypointTrajectory')
                        sampleLLA=fusion.internal.frames.ned2lla(samplePositions,obj.ReferenceLocation);
                    else
                        sampleLLA=samplePositions;
                    end
                    plotLines(obj,sampleLLA(:,1),sampleLLA(:,2),sampleLLA(:,3),...
                    "ID",allids(i),...
                    "HistoryDepth",size(sampleLLA,1),...
                    "Color",{[1,1,1]});
                end
            end
            obj.pFullTrajectoryDone=true;

            if localqueue
                obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);
            end
        end

        function plotTrack(obj,tracks)

            if~obj.GlobeViewer.Queue
                obj.GlobeViewer.queuePlots;
                localqueue=true;
            else
                localqueue=false;
            end

            unit2meter=1;

            currentTrackIds=obj.TrackIDs;
            isCurrentTrackID=zeros(1,numel(currentTrackIds),'like',true);
            newTrackIds=[];

            N=numel(tracks);
            allpositions=zeros(N,3);
            allIDs=cell(N,1);
            allcolors=cell(1,N);

            for i=1:N

                track=tracks(i);
                ID=track.TrackID;
                j=find(currentTrackIds==ID);
                if~isempty(j)
                    isCurrentTrackID(j)=true;
                else
                    newTrackIds=[newTrackIds,ID];%#ok<AGROW>
                end

                name=['T',num2str(ID)];
                color=getColorByID(obj,ID);



                [posecef,covariance]=getTrackPositions(track,[1,0,0,0,0,0;0,0,1,0,0,0;0,0,0,0,1,0]);
                posecef=posecef*unit2meter;
                covariance=covariance*unit2meter^2;


                poslla=obj.ecef2lla(posecef);
                allpositions(i,:)=poslla;
                allcolors{i}=color;
                allIDs{i}=string(name);



                obj.plotHistoryLines(poslla,"Color",color,...
                "Width",1,...
                "Indices",{{1}},...
                "ID",[name,'History'],...
                "HistoryDepth",obj.TrackHistoryLength,...
                "Animation","none");

                if obj.ShowTrackCovariance
                    obj.plotCovarianceEllipse(poslla,covariance,['trackCovariance',num2str(ID)],color,0.3);
                end



                position=track(1).State([1,3,5]);
                velocity=track(1).State([2,4,6]);

                lla=fusion.internal.frames.ecef2lla(position');

                Recef2ned=fusion.internal.frames.ecef2nedrotmat(lla(1),lla(2));
                vned=Recef2ned*velocity;
                speed=norm(vned(1:2));
                climbrate=-(vned(3));
                heading=atan2d(vned(2),vned(1));
                trackInfo=sprintf('%s\n',...
                name,...
...
...
                "Altitude (m):                "+num2str(round(lla(3))),...
                "Heading (°):                 "+num2str(round(heading)),...
                "GroundSpeed (m/s):    "+num2str(round(speed*10)/10),...
                "ClimbRate (m/s):           "+num2str(round(climbrate*10)/10));
                label={{trackInfo}};
                label_id=[name,'Label'];
                plotLabel(obj,poslla,label,label_id,color);

            end
            obj.GlobeViewer.marker(allpositions,'s',...
            'Color',allcolors,'ID',allIDs,...
            'IconSize',[8,8],...
            "Animation","none");


            toDeleteTracks=currentTrackIds(~isCurrentTrackID);
            for k=1:numel(toDeleteTracks)

                covid=['trackCovariance',num2str(toDeleteTracks(k))];
                obj.GlobeViewer.remove({covid});

                pointid=['T',num2str(toDeleteTracks(k))];
                obj.GlobeViewer.remove({pointid});
                if~obj.ShowDeletedTracks

                    lineId=[pointid,'History'];
                    obj.GlobeViewer.remove({lineId});

                    labelId=[pointid,'Label'];
                    obj.GlobeViewer.remove({labelId});
                end
            end

            obj.TrackIDs=[currentTrackIds(isCurrentTrackID),newTrackIds];

            if localqueue
                obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);
            end
        end

        function plotCoverage(obj,configs)
            if~obj.GlobeViewer.Queue
                obj.GlobeViewer.queuePlots;
                localqueue=true;
            else
                localqueue=false;
            end

            color=[15,255,255]/255;
            for i=1:numel(configs)
                config=configs(i);
                if obj.IsEarthCentered
                    location=fusion.internal.frames.ecef2lla(config.Position);
                else
                    location=fusion.internal.frames.ned2lla(config.Position,obj.ReferenceLocation);
                end
                numPoints=32;
                fov=config.FieldOfView;
                if strcmpi(obj.SensorPlotRange,'auto')
                    range=config.Range;
                else
                    range=obj.SensorPlotRange;
                end

                if strcmp(obj.CoverageMode,'Beam')
                    vertices=radarfusion.internal.coveragePlotter.beamVertices(numPoints,fov,range);
                    beam2sens=radarfusion.internal.coveragePlotter.beamFrameTransform(config.LookAngle);
                elseif strcmp(obj.CoverageMode,'Coverage')
                    vertices=radarfusion.internal.coveragePlotter.coverageVertices(numPoints,fov,config.ScanLimits,range);
                    beam2sens=eye(4);
                end
                faces=getFaces(obj,numPoints,config.ScanLimits);
                sens2scenario=radarfusion.internal.coveragePlotter.coverageFrameTransform([0,0,0],config.Orientation);
                beam2scenario=sens2scenario*beam2sens;
                rotation=beam2scenario(1:3,1:3);
                vertices=(rotation*vertices')';
                faces=faces';
                indices=faces(:)-1;
                CData=repmat(color,numel(indices)/3+2,1);


                surfRotation=latlong2globerot(obj,location(1),location(2));

                obj.GlobeViewer.surface(location,vertices,indices,CData,...
                "Animation",'none',...
                "Transparency",0.1,...
                "Rotation",surfRotation,...
                "ID",['beamID',num2str(config.Index)]);
            end

            if localqueue
                obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);
            end
        end

        function plotLabel(obj,position,label,id,color)










            numlabel=size(label,1);


            obj.GlobeViewer.labelCollection(position,label,...
            "Indices",{{1:numlabel}},...
            "Scale",0.5,...
            "Color",color,...
            "ID",id);
        end

        function plotDetection(obj,detections)

            if isempty(detections)
                return
            end

            if~obj.GlobeViewer.Queue
                obj.GlobeViewer.queuePlots;
                localqueue=true;
            else
                localqueue=false;
            end

            detarray=[detections{:}];
            sensInd=[detarray.SensorIndex];
            uniqSensInd=unique(sensInd);
            numSensors=numel(uniqSensInd);
            for i=1:numSensors
                if uniqSensInd(i)==20
                    color=[255,19,166]/255;
                else
                    color=[15,255,255]/255;
                end
                dets=detarray(sensInd==uniqSensInd(i));
                allmeas=[dets.Measurement];
                allcov=zeros(3,3,numel(dets));

                for k=1:numel(dets)


                    adet=dets(k);

                    if strcmp(adet.MeasurementParameters.Frame,'Rectangular')

                        allcov(:,:,k)=adet.MeasurementNoise(1:3,1:3);
                    elseif strcmp(adet.MeasurementParameters.Frame,'Spherical')






                    end
                end

                pos=fusion.internal.frames.ecef2lla(allmeas(1:3,:)');


                obj.GlobeViewer.remove({"detectionID"+num2str(uniqSensInd(i))});
                obj.GlobeViewer.remove(obj.pDetectionCovarianceIDs(...
                contains(obj.pDetectionCovarianceIDs,...
                "detCovariance"+num2str(uniqSensInd(i)))));
                obj.pDetectionCovarianceIDs(contains(obj.pDetectionCovarianceIDs,...
                "detCovariance"+num2str(uniqSensInd(i))))=[];


                obj.GlobeViewer.point(pos,...
                "Color",color,...
                "ID",{"detectionID"+num2str(uniqSensInd(i))},...
                "Animation",'none');
                if obj.ShowDetectionCovariance
                    for j=1:numel(dets)
                        cov=allcov(:,:,j);
                        idx=obj.plotCovarianceEllipse(pos(j,:),cov,['detCovariance',num2str(uniqSensInd(i)),num2str(j)],color,0.2);
                        obj.pDetectionCovarianceIDs{end+1}=idx;
                    end
                end

            end


            if localqueue
                obj.GlobeViewer.submitPlots("Animation",'none',"WaitForResponse",false);
            end
        end
    end


    methods
        function clear(obj)

            obj.GlobeViewer.point([0,0,-2000],"Animation","none");

            clear(obj.GlobeViewer);
            obj.TrackIDs=[];

            obj.TrackPointGlobeIDs={};
            obj.TrackHistoryGlobeIDs={};
            obj.TrackCovarianceGlobeIDs={};
            obj.pDetectionCovarianceIDs={};
            obj.pFullTrajectoryDone=false;
        end

        function img=snap(obj)
            img=obj.GlobeViewer.Window.getScreenshot;
            if nargout==0
                imshow(img);
            end
        end

        function plotLocalNED(obj,lat,lon)
            plotLocalENU(obj,lat,lon,[90,0,180]);
        end

        function plotLocalENU(obj,lat,lon,rotation)
            if nargin==3
                rotation=[0,0,0];
            end

            width=5e4;
            length=2e6;

            theta=0:0.1:2*pi;
            Z=width*cos(theta);
            Y=width*sin(theta);
            X=length*ones(1,numel(theta));
            Z=[0,Z];
            Y=[0,Y];
            X=[0,X];
            numPts=numel(Z);
            V=ones(numPts-2,1);
            c2=2:1:numPts-1;
            V=[V,c2'];
            c3=3:1:numPts;
            V=[V,c3'];
            V=[V;[1,numPts,2]];
            V=V';
            indices=V(:);
            indices=indices-1;
            CData=repmat([1,0,0],numel(indices)/3+2,1);
            xyzData=[X',Y',Z'];

            obj.GlobeViewer.surface([lat,lon,0],xyzData,indices,CData,...
            "Animation",'none',...
            "ID",'localENUX',...
            "rotation",rotation);


            Z=width*sin(theta);
            Y=length*ones(1,numel(theta));
            X=width*cos(theta);
            Z=[0,Z];
            Y=[0,Y];
            X=[0,X];
            numPts=numel(Z);
            V=ones(numPts-2,1);
            c2=2:1:numPts-1;
            V=[V,c2'];
            c3=3:1:numPts;
            V=[V,c3'];
            V=[V;[1,numPts,2]];
            V=V';
            indices=V(:);
            indices=indices-1;
            CData=repmat([0,1,0],numel(indices)/3+2,1);
            xyzData=[X',Y',Z'];

            obj.GlobeViewer.surface([lat,lon,0],xyzData,indices,CData,...
            "Animation",'none',...
            "ID",'localENUY',...
            "rotation",rotation);


            Z=length*ones(1,numel(theta));
            Y=width*cos(theta);
            X=width*sin(theta);
            Z=[0,Z];
            Y=[0,Y];
            X=[0,X];
            numPts=numel(Z);
            V=ones(numPts-2,1);
            c2=2:1:numPts-1;
            V=[V,c2'];
            c3=3:1:numPts;
            V=[V,c3'];
            V=[V;[1,numPts,2]];
            V=V';
            indices=V(:);
            indices=indices-1;
            CData=repmat([0,0,1],numel(indices)/3+2,1);
            xyzData=[X',Y',Z'];

            obj.GlobeViewer.surface([lat,lon,0],xyzData,indices,CData,...
            "Animation",'none',...
            "ID",'localENUZ',...
            "rotation",rotation);
        end

        function plotLocalECEF(obj,lat,lon)
            eulxyz=enu2ecef(obj,lat,lon);
            eulzyx=euler2euler(obj,eulxyz,'xyz','zyx');

            eulglobe=eulzyx.*[1,-1,1];
            plotLocalENU(obj,lat,lon,eulglobe);
        end

        function setCamera(obj,position,orientation)













            if nargin<2
                return
            end

            setCameraPosition(obj,position);

            if nargin>2
                setCameraOrientation(obj,orientation);
            end
        end

        function[position,orientation]=getCamera(gl)
            campos=getCameraPosition(gl.GlobeViewer.Controller);
            position=[campos.latitude,campos.longitude,campos.height];
            camor=getCameraOrientation(gl.GlobeViewer.Controller);
            orientation=[camor.roll,camor.pitch,camor.heading];
        end
    end


    methods(Hidden)
        function position_lla=plat2lla(obj,platform)
            if isa(platform.Trajectory,'geoTrajectory')
                position_lla=platform.Position;
            else
                position_ned=platform.Position;
                position_lla=fusion.internal.frames.ned2lla(position_ned,obj.ReferenceLocation);
            end
        end

        function text=getInfoText(obj)
            text=string(['Elapsed simulation time: ',num2str(obj.pDisplayTime),' (min)']);
        end

        function plotPoints(obj,positions,varargin)
            obj.GlobeViewer.point(positions,varargin{:});
        end

        function plotHistoryLines(obj,positions,varargin)
            obj.GlobeViewer.lineCollection(num2cell(num2cell(positions,2)'),...
            varargin{:});
        end

        function plotLines(obj,lat,lon,alt,varargin)






            numLines=size(lat,2);
            allines=cell(1,numLines);
            for i=1:numLines
                line_i=[lat(:,i),lon(:,i),alt(:,i)];
                allines{i}=line_i;
            end

            obj.GlobeViewer.lineCollection(allines,varargin{:},...
            "Animation","None");
        end

        function varargout=plotCovarianceEllipse(obj,lla,cov,id,color,alpha)
            lat=lla(1);
            lon=lla(2);
            Renu2ecef=fusion.internal.frames.enu2ecefrotmat(lat,lon);


            cov_enu=Renu2ecef'*cov*Renu2ecef;
            [Renu2pa,sqradii]=eig((cov_enu+cov_enu')/2);
            radii=2*sqrt(diag(sqradii))';
            if det(Renu2pa)<0

                Renu2pa=Renu2pa(:,[2,1,3]);
                radii=radii([2,1,3]);
            end
            if any(~isreal(Renu2pa))
                disp('non symmetric');
            end
            eulzyx=eulerd(quaternion(Renu2pa','rotmat','frame'),'zyx','frame');


            eulglobe=eulzyx.*[1,-1,1];

            idx=ellipsoid(obj.GlobeViewer,lla,radii,...
            'Rotation',eulglobe,...
            'Color',color,...
            'Transparency',alpha,...
            'ID',id,...
            'Animation','none');

            if nargout>0
                varargout{1}=idx;
            end
        end

        function rgb=getColorByID(obj,id)

            clrid=mod(id,7);
            if clrid==0
                clrid=7;
            end
            rgb=obj.ColorsDark(clrid,:);
        end

        function[x,y,z]=makeEllipsoid(~,covariances,sdwidth)

            [v,d]=eig(covariances);


            v=real(v);
            d=real(d);


            d=sdwidth*sqrt(max(diag(d),0));


            x=d(1);
            y=d(2);
            z=d(3);
        end

        function faces=generateFaces(~,platform)

            L=platform.Dimensions.Length;
            W=platform.Dimensions.Width;
            H=platform.Dimensions.Height;



            f=[1,1,1;1,-1,1;1,-1,-1;1,1,-1].*[L,W,H];
            l=[1,1,1;1,1,-1;-1,1,-1;-1,1,1].*[L,W,H];
            u=[1,1,1;-1,1,1;-1,-1,1;1,-1,1].*[L,W,H];
            b=[-1,1,1;-1,1,-1;-1,-1,-1;-1,-1,1].*[L,W,H];
            r=[-1,-1,1;-1,-1,-1;1,-1,-1;1,-1,1].*[L,W,H];
            d=[1,1,-1;1,-1,-1;-1,-1,-1;-1,1,-1].*[L,W,H];

            faces=[f;l;u;b;r;d]/2;


            originOffset=platform.Dimensions.OriginOffset;
            faces=faces-originOffset;


            faces=reshape(faces',3,4,[]);
        end

        function plotExtent(obj,platform,position,color)

            if platform.Dimensions.Length~=0
                faces=generateFaces(obj,platform);
                [tri,xyzData]=surf2patch(squeeze(faces(1,:,:)),...
                squeeze(faces(2,:,:)),...
                squeeze(faces(3,:,:)),'triangles');
                tri=tri';
                tri=tri(:)-1;

                eulxyz=enu2ecef(obj,position(1),position(2));
                eulzyx=euler2euler(obj,eulxyz,'xyz','zyx');

                globe2scenario=eulzyx.*[1,-1,1];


                q=platform.Trajectory.CurrentOrientation;
                xyzData=rotatepoint(q,xyzData);

                surface(obj.GlobeViewer,position,xyzData,tri,repmat(color,size(tri,2)+2,1),...
                'Rotation',globe2scenario,...
                'Transparency',0.4,...
                'ID',['platformExtent',num2str(platform.PlatformID)],...
                'Animation','none');
            end
        end

        function plotMarker(obj,positions)
            num=size(positions,1);
            ids=arrayfun(@(x)"LandmarkID"+num2str(x),1:num)';
            obj.GlobeViewer.marker(positions,"d",...
            "Name",{"LandmarkMarker"},...
            "ID",ids,...
            "IconSize",[8,8],...
            "Animation","none");%#ok<STRSCALR>
        end

    end


    methods(Hidden)
        function eulglobe=latlong2globerot(obj,lat,lon)
            if obj.IsEarthCentered

                eulxyz=enu2ecef(obj,lat,lon);
                eulzyx=euler2euler(obj,eulxyz,'xyz','zyx');


            else

                eulzyx=[90,0,180];
            end

            eulglobe=eulzyx.*[1,-1,1];
        end

        function lla=ecef2lla(~,ecef)
            lla=fusion.internal.frames.ecef2lla(ecef);
        end

        function out=euler2euler(~,in,seqIn,seqOut)

            q=quaternion(in,'eulerd',seqIn,'frame');
            out=eulerd(q,seqOut,'frame');
        end

        function eulxyz=enu2ecef(~,lat,lon)
            eulxyz=[-(90-lat),0,-(90+lon)];
        end

        function[xB,cB]=frameTransform(xA,cA,frame)








            orient=frame.Orientation;
            offset=frame.Position(:);

            hasVel=size(xA,1)>3;
            if hasVel
                offset=[offset;frame.Velocity(:)];
            end

            hasCov=nargin>2;
            if hasCov
                [xB,cB]=fusion.internal.frames.transformChildToParent(xA,cA,orient,offset);
            else
                stateSz=size(xA,1);
                numVals=size(xA,2);
                unused=NaN(stateSz,stateSz,numVals,'like',xA);
                [xB,cB]=fusion.internal.frames.transformChildToParent(xA,unused,orient,offset);
            end
        end
    end


    methods(Access=protected)
        function setCameraPosition(obj,cameraPosition)
            gv=obj.GlobeViewer;
            if~isempty(gv)&&isvalid(gv)
                controller=gv.Controller;
                if~isempty(controller)&&isvalid(controller)
                    args.CameraPosition=cameraPosition;
                    setCameraPosition(controller,args);
                end
            end
        end

        function cameraPosition=getCameraPosition(obj,defaultCameraPosition)
            if nargin==1
                defaultCameraPosition=obj.GlobeOptions.CameraPosition;
            end
            cameraPosition=defaultCameraPosition;

            gv=obj.GlobeViewer;
            if~isempty(gv)&&isvalid(gv)
                controller=gv.Controller;
                if~isempty(controller)&&isvalid(controller)
                    position=getCameraPosition(controller);
                    if isstruct(position)
                        cameraPosition=[position.latitude,position.longitude,position.height];
                    else
                        cameraPosition=position;
                    end
                end
            end
        end

        function setCameraOrientation(obj,value)
            gv=obj.GlobeViewer;
            if~isempty(gv)&&isvalid(gv)
                controller=gv.Controller;
                if~isempty(controller)&&isvalid(controller)
                    roll=value(1);
                    pitch=value(2);
                    heading=value(3);
                    args.CameraOrientation.Roll=deg2rad(roll);
                    args.CameraOrientation.Pitch=deg2rad(pitch);
                    args.CameraOrientation.Heading=deg2rad(heading);
                    setCameraOrientation(controller,args)
                end
            end
        end

        function[roll,pitch,heading]=getCameraOrientation(obj,cameraOrientation)
            if nargin==1
                cameraOrientation=globe.internal.GlobeOptions.DefaultCameraOrientation;
            end
            roll=cameraOrientation(1);
            pitch=cameraOrientation(2);
            heading=cameraOrientation(3);

            gv=obj.GlobeViewer;
            if~isempty(gv)&&isvalid(gv)
                controller=gv.Controller;
                if~isempty(controller)&&isvalid(controller)
                    orientation=getCameraOrientation(controller);
                    if isstruct(orientation)
                        roll=orientation.roll;
                        pitch=orientation.pitch;
                        heading=orientation.heading;
                    else
                        roll=orientation(1);
                        pitch=orientation(2);
                        heading=orientation(3);
                    end
                end
            end
        end
    end


    methods(Hidden)
        function showAirports(obj,opt)

            if nargin==1||strcmpi(opt,'core')
                airportsLatLon=obj.pCommercialServiceAirportCore30;
            elseif strcmpi(opt,'all')
                airportsLatLon=obj.pCommercialServiceAirportAll;
            else
                return
            end
            nAirports=size(airportsLatLon,1);
            ids=arrayfun(@(x)"AirportLandmarkID"+num2str(x),1:nAirports);
            position=[airportsLatLon,zeros(nAirports,1)];
            obj.GlobeViewer.marker(position,"d",...
            "Name",{"Commercial Service Airport"},...
            "Description","Commercial Service Airport",...
            "ID",ids,...
            "IconSize",[8,8],...
            "Animation","none");%#ok<STRSCALR>
        end

    end

    methods(Static,Hidden)
        function[time,platforms,covcon]=parseSceneForUpdate(scene)


            time=scene.SimulationTime;
            platforms=[scene.Platforms{:}];
            if time<1
                covcon=coverageConfig(scene);
            else
                covcon=[];
            end
        end
    end


    methods(Access=private)
        function faces=getFaces(~,numPoints,scanlimits)


            azlimits=scanlimits(1,:);
            if diff(azlimits)>=360
                useSides=false;
            else
                useSides=true;
            end



            left=2:numPoints+1;
            top=(1:numPoints).*numPoints+1;
            bottom=2+((1:numPoints)-1).*numPoints;
            right=numPoints^2+2+(-numPoints:-1);

            if~useSides
                faces=zeros(2*numPoints*(numPoints-1),3);
                for i=1:numPoints-1
                    faces(i,:)=[1,bottom(i),bottom(i+1)];
                end
                for i=1:numPoints-1
                    faces(numPoints-1+i,:)=[1,top(i),top(i+1)];
                end
                count=2*(numPoints-1);
            else
                faces=zeros(2*(numPoints^2-1),3);
                for i=1:numPoints-1
                    faces(i,:)=[1,left(i),left(i+1)];
                end
                for i=1:numPoints-1
                    faces(numPoints-1+i,:)=[1,top(i),top(i+1)];
                end
                for i=1:numPoints-1
                    faces(2*(numPoints-1)+i,:)=[1,right(i),right(i+1)];
                end
                for i=1:numPoints-1
                    faces(3*(numPoints-1)+i,:)=[1,bottom(i),bottom(i+1)];
                end
                count=4*(numPoints-1);
            end


            for j=1:numPoints-1
                for k=1:numPoints-1

                    count=count+1;
                    faces(count,:)=[...
                    1+k+(j-1)*numPoints...
                    ,1+k+1+(j-1)*numPoints...
                    ,1+k+(j)*numPoints];

                    count=count+1;
                    faces(count,:)=[...
                    1+k+1+(j-1)*numPoints...
                    ,1+k+1+(j)*numPoints...
                    ,1+k+(j)*numPoints];
                end
            end
        end
    end
end
