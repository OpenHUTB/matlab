function exportWaveformScript(View,Wave,Comp)


    sw=StringWriter;
    dateTimeStr=datestr(now);
    ml=ver('matlab');
    pat=ver('phased');
    addcr(sw)
    add(sw,'% MATLAB Code from Radar Waveform Analyzer App')
    addcr(sw)
    addcr(sw)
    add(sw,'% Generated by MATLAB ')

    add(sw,ml.Version)
    add(sw,' and Phased Array System Toolbox ')
    add(sw,pat.Version)
    addcr(sw)
    addcr(sw)
    add(sw,'% Generated on ')
    add(sw,dateTimeStr)
    addcr(sw)
    addcr(sw)
    WaveformType=phased.apps.internal.WaveformViewer.getWaveformString(class(Wave));
    switch WaveformType
    case 'RectangularWaveform'


        addcr(sw,'% Create a Rectangular Waveform object');
        add(sw,'Waveform = phased.RectangularWaveform(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','PulseWidth')
        add(sw,sprintf('%g',Wave.PulseWidth))
        add(sw,',''%s'',','PRF')
        add(sw,sprintf('%g',Wave.PRF))
        add(sw,',''%s'',','NumPulses')
        add(sw,sprintf('%d',Wave.NumPulses))
        add(sw,',''%s'',','FrequencyOffset')
        add(sw,sprintf('%g',Wave.FrequencyOffset))
        add(sw,');')
        addcr(sw)
    case 'LinearFMWaveform'


        if strcmp(Wave.SweepDirection,getString(message('phased:apps:waveformapp:up')))
            sweepdir='Up';
        elseif strcmp(Wave.SweepDirection,getString(message('phased:apps:waveformapp:dwn')))
            sweepdir='Down';
        end
        if strcmp(Wave.SweepInterval,getString(message('phased:apps:waveformapp:positive')))
            sweepint='Positive';
        elseif strcmp(Wave.SweepInterval,getString(message('phased:apps:waveformapp:symmetric')))
            sweepint='Symmetric';
        end
        if strcmp(Wave.Envelope,getString(message('phased:apps:waveformapp:RectangularEnv')))
            envelope='Rectangular';
        elseif strcmp(Wave.Envelope,getString(message('phased:apps:waveformapp:gaussian')))
            envelope='Gaussian';
        end
        addcr(sw,'% Create a Linear FM Waveform object');
        add(sw,'Waveform = phased.LinearFMWaveform(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','PulseWidth')
        add(sw,sprintf('%g',Wave.PulseWidth))
        add(sw,',''%s'',','PRF')
        add(sw,sprintf('%g',Wave.PRF))
        add(sw,',''%s'',','SweepBandwidth')
        add(sw,sprintf('%g',Wave.SweepBandwidth))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','SweepDirection')
        add(sw,sprintf('''%s''',sweepdir))
        add(sw,',''%s'',','SweepInterval')
        add(sw,sprintf('''%s''',sweepint))
        add(sw,'...')
        addcr(sw)
        add(sw,',''%s'',','Envelope')
        add(sw,sprintf('''%s''',envelope))
        add(sw,',''%s'',','NumPulses')
        add(sw,sprintf('%d',Wave.NumPulses))
        add(sw,',''%s'',','FrequencyOffset')
        add(sw,sprintf('%g',Wave.FrequencyOffset))
        add(sw,');')
        addcr(sw)
    case 'SteppedFMWaveform'


        addcr(sw,'% Create a Stepped FM Waveform object');
        add(sw,'Waveform = phased.SteppedFMWaveform(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','PulseWidth')
        add(sw,sprintf('%g',Wave.PulseWidth))
        add(sw,',''%s'',','PRF')
        add(sw,sprintf('%g',Wave.PRF))
        add(sw,',''%s'',','FrequencyStep')
        add(sw,sprintf('%g',Wave.FrequencyStep))
        add(sw,',''%s'',','NumSteps')
        add(sw,sprintf('%d',Wave.NumSteps))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','NumPulses')
        add(sw,sprintf('%d',Wave.NumPulses))
        add(sw,',''%s'',','FrequencyOffset')
        add(sw,sprintf('%g',Wave.FrequencyOffset))
        add(sw,');')
        addcr(sw)
    case 'PhaseCodedWaveform'
        if strcmp(Wave.Code,getString(message('phased:apps:waveformapp:Barker')))
            code='Barker';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:Frank')))
            code='Frank';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:P1')))
            code='P1';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:P2')))
            code='P2';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:P3')))
            code='P3';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:P4')))
            code='P4';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:Px')))
            code='Px';
        elseif strcmp(Wave.Code,getString(message('phased:apps:waveformapp:ZadoffChu')))
            code='Zadoff-Chu';
        end


        addcr(sw,'% Create a Phase Coded Waveform object');
        add(sw,'Waveform = phased.PhaseCodedWaveform(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','Code')
        add(sw,sprintf('''%s''',code))
        add(sw,',''%s'',','ChipWidth')
        add(sw,sprintf('%g',Wave.ChipWidth))
        add(sw,',''%s'',','NumChips')
        numchips=str2double(Wave.NumChips);
        add(sw,sprintf('%d',numchips))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','PRF')
        add(sw,sprintf('%g',Wave.PRF))
        add(sw,',''%s'',','NumPulses')
        add(sw,sprintf('%d',Wave.NumPulses))
        if strcmp(code,'Zadoff-Chu')
            add(sw,',''%s'',','SequenceIndex')
            add(sw,sprintf('%d',Wave.SequenceIndex))
        end
        add(sw,',''%s'',','FrequencyOffset')
        add(sw,sprintf('%g',Wave.FrequencyOffset))
        add(sw,');')
        addcr(sw)
    case 'FMCWWaveform'


        if strcmp(Wave.SweepDirection,getString(message('phased:apps:waveformapp:up')))
            sweepdir='Up';
        elseif strcmp(Wave.SweepDirection,getString(message('phased:apps:waveformapp:dwn')))
            sweepdir='Down';
        elseif strcmp(Wave.SweepDirection,getString(message('phased:apps:waveformapp:triangle')))
            sweepdir='Triangle';
        end
        if strcmp(Wave.SweepInterval,getString(message('phased:apps:waveformapp:positive')))
            sweepint='Positive';
        elseif strcmp(Wave.SweepInterval,getString(message('phased:apps:waveformapp:symmetric')))
            sweepint='Symmetric';
        end
        addcr(sw,'% Create a FMCW Waveform object');
        add(sw,'Waveform = phased.FMCWWaveform(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','SweepTime')
        add(sw,sprintf('%g',Wave.SweepTime))
        add(sw,',''%s'',','SweepBandwidth')
        add(sw,sprintf('%g',Wave.SweepBandwidth))
        add(sw,',''%s'',','SweepDirection')
        add(sw,sprintf('''%s''',sweepdir))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','SweepInterval')
        add(sw,sprintf('''%s''',sweepint))
        add(sw,',''%s'',','NumSweeps')
        add(sw,sprintf('%d',Wave.NumSweeps))
        add(sw,');')
        addcr(sw)
    end
    addcr(sw,'Fs = Waveform.SampleRate;')
    addcr(sw,'% Call step method of Waveform to generate IQ samples of Waveform')
    addcr(sw,'x = Waveform();')
    addcr(sw,'% Create figure for Real and Imaginary');
    addcr(sw,'figure;');

    View.RealAndImaginary.genCode(sw);
    if any(ismember(findall(0,'type','figure'),View.MagnitudeAndPhaseFig))
        addcr(sw,'% Create figure for Magnitude and Phase');
        addcr(sw,'figure;');

        View.MagnitudeAndPhase.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.SpectrumFig))
        addcr(sw,'% Create figure for Spectrum');
        addcr(sw,'figure;');

        View.Spectrum.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.PSpectrumFig))
        addcr(sw,'% Create figure for Persistence spectrum');
        addcr(sw,'figure;');

        View.PSpectrum.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.SpectrogramFig))
        addcr(sw,'% Create figure for Spectrogram');
        add(sw,'figure;');

        View.Spectrogram.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.AmbiguityFunctionContourFig))
        addcr(sw,'% Create figure for Ambiguity Function Contour');
        addcr(sw,'figure;');
        if isa(Wave,'phased.apps.internal.WaveformViewer.FMCWWaveform')
            addcr(sw,'prf = 1/Waveform.SweepTime;');
        else
            addcr(sw,'prf = Waveform.PRF;');
        end

        View.AmbiguityFunctionContour.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.AmbiguityFunctionSurfaceFig))
        addcr(sw,'% Create figure for Ambiguity Function Surface');
        addcr(sw,'figure;');
        if isa(Wave,'phased.apps.internal.WaveformViewer.FMCWWaveform')
            addcr(sw,'prf = 1/Waveform.SweepTime;');
        else
            addcr(sw,'prf = Waveform.PRF;');
        end

        View.AmbiguityFunctionSurface.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.AmbiguityFunctionDelayCutFig))
        addcr(sw,'% Create figure for Ambiguity Function Delay Cut');
        addcr(sw,'figure;');
        if isa(Wave,'phased.apps.internal.WaveformViewer.FMCWWaveform')
            addcr(sw,'prf = 1/Waveform.SweepTime;');
        else
            addcr(sw,'prf = Waveform.PRF;');
        end

        View.AmbiguityFunctionDelayCut.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.AmbiguityFunctionDopplerCutFig))
        addcr(sw,'% Create figure for Ambiguity Function Doppler Cut');
        addcr(sw,'figure;');
        if isa(Wave,'phased.apps.internal.WaveformViewer.FMCWWaveform')
            addcr(sw,'prf = 1/Waveform.SweepTime;');
        else
            addcr(sw,'prf = Waveform.PRF;');
        end

        View.AmbiguityFunctionDopplerCut.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.AutoCorrelationFig))
        addcr(sw,'% Create figure for AutoCorrelation');
        addcr(sw,'figure;');
        if isa(Wave,'phased.apps.internal.WaveformViewer.FMCWWaveform')
            addcr(sw,'prf = 1/Waveform.SweepTime;');
        else
            addcr(sw,'prf = Waveform.PRF;');
        end

        View.AutoCorrelation.genCode(sw);
    end

    ProcessType=phased.apps.internal.WaveformViewer.getWaveformString(class(Comp));
    switch ProcessType
    case 'MatchedFilter'


        addcr(sw,'% Create a Matched Filter object');
        addcr(sw,'coeff = getMatchedFilter(Waveform);');
        add(sw,'Compression = phased.MatchedFilter(');
        add(sw,'''%s'',','Coefficients')
        addcr(sw,'coeff(:,1), ...')
        add(sw,'''%s'',','SpectrumWindow')
        add(sw,sprintf('''%s''',Comp.SpectrumWindow))
        if strcmp(Comp.SpectrumWindow,'Taylor')
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SampleRate')
            add(sw,sprintf('%g',Wave.SampleRate))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SpectrumRange')
            add(sw,sprintf(sprintf('[%.15g %.15g]',Comp.SpectrumRange(1),Comp.SpectrumRange(2))))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SidelobeAttenuation')
            add(sw,sprintf('%.15g',Comp.SideLobeAttenuation))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','Nbar')
            add(sw,sprintf('%.15g',Comp.Nbar))
        elseif strcmp(Comp.SpectrumWindow,'Chebyshev')
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SampleRate')
            add(sw,sprintf('%g',Wave.SampleRate))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SpectrumRange')
            add(sw,sprintf(sprintf('[%.15g %.15g]',Comp.SpectrumRange(1),Comp.SpectrumRange(2))))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SidelobeAttenuation')
            add(sw,sprintf('%.15g',Comp.SideLobeAttenuation))
        elseif strcmp(Comp.SpectrumWindow,'Kaiser')
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SampleRate')
            add(sw,sprintf('%g',Wave.SampleRate))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SpectrumRange')
            add(sw,sprintf(sprintf('[%.15g %.15g]',Comp.SpectrumRange(1),Comp.SpectrumRange(2))))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','Beta')
            add(sw,sprintf('%.15g',Comp.Beta))
        elseif strcmp(Comp.SpectrumWindow,'None')
        else
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SampleRate')
            add(sw,sprintf('%g',Wave.SampleRate))
            add(sw,',...')
            addcr(sw)
            add(sw,'''%s'',','SpectrumRange')
            add(sw,sprintf(sprintf('[%.15g %.15g]',Comp.SpectrumRange(1),Comp.SpectrumRange(2))))
        end
        add(sw,');')
        addcr(sw)
        addcr(sw,'y = Compression(x);')
    case 'StretchProcessor'
        addcr(sw,'% Create a Stretch Processor object');
        add(sw,'Compression = phased.StretchProcessor(');
        add(sw,'''%s'',','SampleRate')
        add(sw,sprintf('%g',Wave.SampleRate))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','PulseWidth')
        add(sw,sprintf('%g',Wave.PulseWidth))
        add(sw,',''%s'',','PRF')
        add(sw,sprintf('%g',Wave.PRF))
        add(sw,',''%s'',','SweepInterval')
        add(sw,sprintf('''%s''',Wave.SweepInterval))
        add(sw,',...')
        addcr(sw)
        add(sw,'''%s'',','ReferenceRange')
        add(sw,sprintf('%.15g',Comp.ReferenceRange))
        add(sw,',''%s'',','RangeSpan')
        add(sw,sprintf('%.15g',Comp.RangeSpan))
        add(sw,',''%s'',','PropagationSpeed')
        add(sw,sprintf('%.15g',Wave.PropagationSpeed))
        add(sw,',''%s'',','SweepSlope')
        add(sw,sprintf('%.15g',Wave.SweepBandwidth./Wave.PulseWidth))
        add(sw,');')
        addcr(sw)

        addcr(sw,'y = Compression(x(1:numel(x)/Waveform.NumPulses));')
        addcr(sw,'numRangeSamples = Waveform.SampleRate/Waveform.PRF;')
        switch Comp.RangeWindow
        case 'None'
            addcr(sw,'wincoeff = ones(numRangeSamples,1);')
        case 'Hamming'
            addcr(sw,'wincoeff = hamming(numRangeSamples);')
        case 'Hann'
            addcr(sw,'wincoeff = hann(numRangeSamples);')
        case 'Kaiser'
            addcr(sw,'beta = %d;',Comp.Beta)
            addcr(sw,'wincoeff = kaiser(numRangeSamples,beta);')
        case 'Chebyshev'
            addcr(sw,'sidelobeAttenuation = %d;',Comp.SideLobeAttenuation)
            addcr(sw,'wincoeff = chebwin(numRangeSamples,sidelobeAttenuation);')
        case 'Taylor'
            addcr(sw,'nbar = %d;',Comp.Nbar)
            addcr(sw,'sidelobeAttenuation = %d;',Comp.SideLobeAttenuation)
            addcr(sw,'wincoeff = taylorwin(numRangeSamples,nbar,-sidelobeAttenuation);')
        end
        addcr(sw,'y_1 = y.*wincoeff;')
        addcr(sw,'yout = fftshift(fft(y_1,%.15g));',Comp.RangeFFTLength)
    case 'Dechirp'
        addcr(sw,'% Create a Dechirp FMCW Signal');
        addcr(sw,'y=dechirp(x,x);');
    end
    if any(ismember(findall(0,'type','figure'),View.MatchedFilterCoefficientsFig))&&strcmp(View.MatchedFilterCoefficientsFig.Visible,'on')
        addcr(sw,'% Create figure for MatchedFilterResponse');
        addcr(sw,'figure;');

        View.MatchedFilterCoefficients.genCode(sw);
    end
    if any(ismember(findall(0,'type','figure'),View.StretchProcessorFig))&&strcmp(View.StretchProcessorFig.Visible,'on')
        addcr(sw,'% Create figure for Stretch Processor');
        addcr(sw,'figure;');

        View.StretchProcessor.genCode(sw);
    end
    matlab.desktop.editor.newDocument(sw.string);
end