function simrfV2switch( block, action )





top_sys = bdroot( block );
if strcmpi( get_param( top_sys, 'BlockDiagramType' ), 'library' ) &&  ...
strcmpi( top_sys, 'simrfV2junction1' )
return ;
end 





switch ( action )
case 'simrfInit'
SimStatus = get_param( top_sys, 'SimulationStatus' );

if any( strcmpi( SimStatus, { 'running', 'paused' } ) )
return 
end 


MaskWSValues = simrfV2getblockmaskwsvalues( block );
switch MaskWSValues.SwitchType
case 'switchSPST'
MaskDisplay = sprintf( '%s\n%s\n%s',  ...
'simrfV2icon_switch_spst',  ...
'port_label(''LConn'', 1,''In'')',  ...
'port_label(''RConn'', 1,''Out'')' );
SrcBlock = 'SWITCH_SPST_RF';
case 'switchSPDT'
MaskDisplay = sprintf( '%s\n%s\n%s\n%s',  ...
'simrfV2icon_switch_spdt',  ...
'port_label(''LConn'', 1,''In'')',  ...
'port_label(''RConn'', 1,''Out1'')',  ...
'port_label(''RConn'', 2,''Out2'')' );
SrcBlock = 'SWITCH_SPDT_RF';
end 
set_param( block, 'MaskDisplay', MaskDisplay )


switch lower( MaskWSValues.InternalGrounding )
case 'on'

replace_gnd_complete = simrfV2repblk( struct( 'RepBlk', 'Sub',  ...
'SrcBlk', 'simrfV2elements/Gnd',  ...
'SrcLib', 'simrfV2elements', 'DstBlk', 'Gnd1' ), block );

if replace_gnd_complete
simrfV2connports( struct( 'SrcBlk', SrcBlock,  ...
'SrcBlkPortStr', 'LConn', 'SrcBlkPortIdx', 2,  ...
'DstBlk', 'Gnd1', 'DstBlkPortStr', 'LConn',  ...
'DstBlkPortIdx', 1 ), block );
end 

case 'off'

replace_gnd_complete = simrfV2repblk( struct(  ...
'RepBlk', 'Gnd1',  ...
'SrcBlk', 'nesl_utility_internal/Connection Port',  ...
'SrcLib', 'nesl_utility_internal',  ...
'DstBlk', 'Sub', 'Param',  ...
{ { 'Side', 'Left', 'Orientation', 'Up', 'Port', '4' } } ),  ...
block );
if replace_gnd_complete
simrfV2connports( struct( 'SrcBlk', SrcBlock,  ...
'SrcBlkPortStr', 'LConn', 'SrcBlkPortIdx', 2,  ...
'DstBlk', 'Sub', 'DstBlkPortStr', 'RConn',  ...
'DstBlkPortIdx', 1 ), block );
end 
MaskDisplay = sprintf( '%s\n%s', MaskDisplay,  ...
'port_label(''LConn'', 2,''Ref'')' );
end 
if MaskWSValues.LoadType == 1
textStr = 'Absorptive';
else 
textStr = 'Reflective';
end 
MaskDisplay = sprintf( [ '%s\nport_label(''input'',%d,''%s'')\n' ...
, 'text(.30,.1,''%s'');' ], MaskDisplay, 1, 'Vctl', textStr );
set_param( block, 'MaskDisplay', MaskDisplay );


if regexpi( get_param( top_sys, 'SimulationStatus' ),  ...
'^(updating|initializing)$' )
validateattributes( MaskWSValues.Vthres, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'finite', 'real' },  ...
mfilename, 'Switch threshold voltage' );
set_param( [ block, '/', SrcBlock ],  ...
'Vthres', num2str( MaskWSValues.Vthres, 16 ) );
if MaskWSValues.CharType == 1

validateattributes( MaskWSValues.Ron, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'On resistance' );
set_param( [ block, '/', SrcBlock ],  ...
'Ron', num2str( MaskWSValues.Ron, 16 ),  ...
'Ron_unit', MaskWSValues.Ron_unit, 'CharType', '1' );
validateattributes( MaskWSValues.Roff, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'Off resistance' );
set_param( [ block, '/', SrcBlock ],  ...
'Roff', num2str( MaskWSValues.Roff, 16 ),  ...
'Roff_unit', MaskWSValues.Roff_unit )
validateattributes( MaskWSValues.Roff, { 'numeric' },  ...
{ '>', MaskWSValues.Ron }, mfilename, 'Off resistance' );
else 

validateattributes( MaskWSValues.Iloss, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'Insertion loss (dB)' );
set_param( [ block, '/', SrcBlock ],  ...
'Iloss', num2str( MaskWSValues.Iloss, 16 ), 'CharType', '2' )
validateattributes( MaskWSValues.Iiso, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'Isolation (dB)' );
set_param( [ block, '/', SrcBlock ],  ...
'Iiso', num2str( MaskWSValues.Iiso, 16 ) )
validateattributes( MaskWSValues.Iiso, { 'numeric' },  ...
{ '>', MaskWSValues.Iloss }, mfilename, 'Isolation (dB)' );
end 

if ~( MaskWSValues.CharType == 1 && MaskWSValues.LoadType == 2 )
if strcmpi( MaskWSValues.SwitchType, 'switchSPST' )
vecLen = 2;
else 
vecLen = 3;
end 
validateattributes( MaskWSValues.Z0, { 'numeric' },  ...
{ 'nonempty', 'vector', 'positive', 'finite', 'real' },  ...
mfilename, 'Port termination values' );
if length( MaskWSValues.Z0 ) ~= vecLen &&  ...
length( MaskWSValues.Z0 ) ~= 1
error( message( 'simrf:simrfV2errors:ArraySizeBad',  ...
'Port termination values', 1, vecLen ) );
end 
set_param( [ block, '/', SrcBlock ], 'Z0',  ...
simrfV2vector2str( MaskWSValues.Z0 ),  ...
'Z0_unit', MaskWSValues.Z0_unit )
end 

set_param( [ block, '/', SrcBlock ], 'LoadType',  ...
int2str( MaskWSValues.LoadType ) );
end 

case 'simrfCheckPot'
SimStatus = get_param( top_sys, 'SimulationStatus' );

if any( strcmpi( SimStatus, { 'running', 'paused' } ) )
return 
end 


MaskWSValues = simrfV2getblockmaskwsvalues( block );
validateattributes( MaskWSValues.Ron, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'Ron' );
validateattributes( MaskWSValues.Roff, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'Roff' );
if ( simrfV2convert2baseunit( MaskWSValues.Roff,  ...
MaskWSValues.Roff_unit ) <=  ...
simrfV2convert2baseunit( MaskWSValues.Ron,  ...
MaskWSValues.Ron_unit ) )
error( message( 'simrf:simrfV2errors:ValidRange',  ...
'Off resistance', num2str( MaskWSValues.Roff ),  ...
[ 'Roff&gt;Ron=', num2str( MaskWSValues.Ron ) ] ) );
end 
if MaskWSValues.CurveType == 2
validateattributes( MaskWSValues.PercentLog, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'PercentLog' );
if MaskWSValues.PercentLog <= 0 || MaskWSValues.PercentLog >= 50
error( message( 'simrf:simrfV2errors:ValidRange',  ...
'Percent', num2str( MaskWSValues.PercentLog ),  ...
'0&lt;Percent&lt;50' ) );
end 
end 
if MaskWSValues.CurveType == 3
validateattributes( MaskWSValues.PercentAnti, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'positive', 'finite', 'real' },  ...
mfilename, 'AntiLog' );
if MaskWSValues.PercentAnti <= 50 || MaskWSValues.PercentAnti >= 100
error( message( 'simrf:simrfV2errors:ValidRange',  ...
'Percent', num2str( MaskWSValues.PercentAnti ),  ...
'50&lt;Percent&lt;100' ) );
end 
end 

case 'simrfCheckBasic'
SimStatus = get_param( top_sys, 'SimulationStatus' );

if any( strcmpi( SimStatus, { 'running', 'paused' } ) )
return 
end 


MaskWSValues = simrfV2getblockmaskwsvalues( block );
validateattributes( MaskWSValues.Ron, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'nonnegative', 'nonnan', 'real' },  ...
mfilename, 'Ron' );
validateattributes( MaskWSValues.Roff, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'nonnegative', 'nonnan', 'real' },  ...
mfilename, 'Roff' );
validateattributes( MaskWSValues.Vthres, { 'numeric' },  ...
{ 'nonempty', 'scalar', 'finite', 'real' },  ...
mfilename, 'Threshold voltage' );
end 

end 
% Decoded using De-pcode utility v1.2 from file /tmp/tmpgP2tVR.p.
% Please follow local copyright laws when handling this file.

