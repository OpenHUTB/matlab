function iqModMaskParams=simrfV2iqmod(block,action)








    switch(action)
    case{'simrfInit','simrfInitForced','simrfInitForcedExp'}
        top_sys=bdroot(block);

        if any(strcmpi(get_param(top_sys,'SimulationStatus'),...
            {'running','paused'}))
            return
        end






        mwsv=get_param(block,'MaskWSVariables');
        if~ismember({mwsv.Name},'iqModParams')
            evalin('caller',['iqModParams.MixerI.Gain=0;',...
            'iqModParams.MixerI.Zin=50;',...
            'iqModParams.MixerI.Zout=50;',...
            'iqModParams.MixerI.Poly_Coeffs=[0 1];',...
            'iqModParams.MixerI.IP2=inf;',...
            'iqModParams.MixerI.IP3=inf;',...
            'iqModParams.MixerI.P1dB=inf;',...
            'iqModParams.MixerI.Psat=inf;',...
            'iqModParams.MixerI.Gcomp=inf;',...
            'iqModParams.MixerQ.Gain=0;',...
            'iqModParams.MixerQ.Zin=50;',...
            'iqModParams.MixerQ.Zout=50;',...
            'iqModParams.MixerQ.Poly_Coeffs=[0 1];',...
            'iqModParams.MixerQ.IP2=inf;',...
            'iqModParams.MixerQ.IP3=inf;',...
            'iqModParams.MixerQ.P1dB=inf;',...
            'iqModParams.MixerQ.Psat=inf;',...
            'iqModParams.MixerQ.Gcomp=inf;',...
            'iqModParams.Rout.Resistance=50;',...
            'iqModParams.PhaseShifter.PhaseShift=90;',...
            'iqModParams.LO.CarrierFreq=0;']);
        end


        MaskVals=get_param(block,'MaskValues');
        idxMaskNames=simrfV2getblockmaskparamsindex(block);
        MaskDisplay_3term=simrfV2_add_portlabel('',...
        2,{'I','Q'},1,{'Out'},true);
        MaskDisplay_6term=simrfV2_add_portlabel('',...
        4,{'I','Q'},2,{'Out'},false);
        currentMaskDisplay=get_param(block,'MaskDisplay');
        if isequal(currentMaskDisplay,MaskDisplay_6term)&&...
            strcmpi(MaskVals{idxMaskNames.InternalGrounding},'on')
            set_param(block,'MaskDisplay',MaskDisplay_3term)
        end

        wasGrounded=strcmp(get_param([block,'/LO'],...
        'InternalGrounding'),'on');

        grounded=lower(MaskVals{idxMaskNames.InternalGrounding});
        switch grounded
        case 'on'
            MaskDisplay=MaskDisplay_3term;
            if(~wasGrounded)


                action='simrfInitForced';
                OldElems=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on',...
                'Name','.[^+]$');
                [~,blkname]=fileparts(block);
                OldElems=...
                OldElems(~strcmp(get(OldElems,'Name'),blkname));
                if~isempty(OldElems)
                    OldLines=find_system(block,'LookUnderMasks',...
                    'all','FollowLinks','on','SearchDepth',...
                    1,'FindAll','on','Type','Line');
                    delete_line(OldLines)
                    delete(OldElems)
                end
                libMod='simrfV2private';
                load_system(libMod);
                SrcBlk='InterIQModulatorGrounded';
                add_block([libMod,'/',SrcBlk],[block,'/',SrcBlk],...
                'Position',[195,207,780,603],'LinkStatus',...
                'breakWithoutHierarchy','Mask','off')
                Simulink.BlockDiagram.expandSubsystem([block,'/'...
                ,SrcBlk]);
                ah=find_system(block,'LookUnderMasks','all',...
                'FollowLinks','on','SearchDepth',1,...
                'FindAll','on','type','annotation');
                ao=get_param(ah(1),'Object');
                ao.Selected='on';
                ao.delete;



                SigCombPos=get_param([block,'/SignalCombiner'],...
                'Position');

                OutPosPos=get_param([block,'/Out+'],'Position');
                OutPosPos_dx=OutPosPos(3)-OutPosPos(1);
                dx2SigComb=320;
                OutPosPos(1)=SigCombPos(3)+dx2SigComb;
                OutPosPos(3)=OutPosPos(1)+OutPosPos_dx;
                set_param([block,'/Out+'],'Position',OutPosPos);

                MixerIPos=get_param([block,'/MixerI'],'Position');
                dx2MixerI=235;
                IPosPos=get_param([block,'/I+'],'Position');
                IPosPos_dx=IPosPos(3)-IPosPos(1);
                IPosPos(3)=MixerIPos(1)-dx2MixerI;
                IPosPos(1)=IPosPos(3)-IPosPos_dx;
                set_param([block,'/I+'],'Position',IPosPos);

                QPosPos=get_param([block,'/Q+'],'Position');
                QPosPos_dx=QPosPos(3)-QPosPos(1);
                QPosPos(3)=MixerIPos(1)-dx2MixerI;
                QPosPos(1)=QPosPos(3)-QPosPos_dx;
                set_param([block,'/Q+'],'Position',QPosPos);

                phtemp=get_param([block,'/Rout'],...
                'PortHandles');
                simrfV2deletelines(get(phtemp.LConn(1),'Line'));
                simrfV2connports(struct('DstBlk','Rout',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','Out+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                phtemp=get_param([block,'/MixerQ'],'PortHandles');
                simrfV2deletelines(get(phtemp.LConn(1),'Line'));
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','Q+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                phtemp=get_param([block,'/MixerI'],'PortHandles');
                simrfV2deletelines(get(phtemp.LConn(1),'Line'));
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','I+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
            end
        case 'off'
            MaskDisplay=MaskDisplay_6term;
            if(wasGrounded)


                action='simrfInitForced';

                OldElems=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on',...
                'Name','.[^+]$');
                [~,blkname]=fileparts(block);
                OldElems=...
                OldElems(~strcmp(get(OldElems,'Name'),blkname));
                if~isempty(OldElems)
                    OldLines=find_system(block,'LookUnderMasks',...
                    'all','FollowLinks','on','SearchDepth',...
                    1,'FindAll','on','Type','Line');
                    delete_line(OldLines)
                    delete(OldElems)
                end


                libMod='simrfV2util1';
                load_system(libMod);
                SrcBlk='Connection Port';
                posTermPorts=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on','Name','+$');
                for posTermPortInd=1:length(posTermPorts)
                    PortName=...
                    get_param(posTermPorts(posTermPortInd),'Name');
                    PortName(end)='-';
                    PortPosDelta=[0,40,0,40];
                    PortSide='Left';
                    PortOrient='Right';
                    PortNum='2';
                    switch(PortName(1))
                    case 'Q'


                        PortPosDelta=-PortPosDelta;
                        PortNum='4';
                    case 'O'
                        PortSide='Right';
                        PortOrient='Left';
                        PortPosDelta=[0,35,0,35];
                        PortNum='6';
                    end
                    add_block([libMod,'/',SrcBlk],...
                    [block,'/',PortName],'Position',...
                    get_param(posTermPorts(posTermPortInd),...
                    'Position')+PortPosDelta,'LinkStatus',...
                    'breakWithoutHierarchy','Side',PortSide,...
                    'Orientation',PortOrient,'Port',PortNum);






                    if~strcmpi(get_param([block,'/',PortName],...
                        'Side'),PortSide)
                        set_param([block,'/',PortName],'Side',...
                        PortSide);
                    end

                end
                libMod='simrfV2private';
                load_system(libMod);
                SrcBlk='InterIQModulator';
                add_block([libMod,'/',SrcBlk],[block,'/',SrcBlk],...
                'Position',[195,207,780,603],'LinkStatus',...
                'breakWithoutHierarchy','Mask','off')
                Simulink.BlockDiagram.expandSubsystem([block,'/'...
                ,SrcBlk]);
                ah=find_system(block,'LookUnderMasks','all',...
                'FollowLinks','on','SearchDepth',1,...
                'FindAll','on','type','annotation');
                ao=get_param(ah(1),'Object');
                ao.delete;



                SigCombPos=get_param([block,'/SignalCombiner'],...
                'Position');
                dx2SigComb=320;

                OutPosPos=get_param([block,'/Out+'],'Position');
                OutPosPos_dx=OutPosPos(3)-OutPosPos(1);
                OutPosPos(1)=SigCombPos(3)+dx2SigComb;
                OutPosPos(3)=OutPosPos(1)+OutPosPos_dx;
                set_param([block,'/Out+'],'Position',OutPosPos);

                OutNegPos=get_param([block,'/Out-'],'Position');
                OutPosPos_dx=OutNegPos(3)-OutNegPos(1);
                OutNegPos(1)=SigCombPos(3)+dx2SigComb;
                OutNegPos(3)=OutNegPos(1)+OutPosPos_dx;
                set_param([block,'/Out-'],'Position',OutNegPos);

                MixerIPos=get_param([block,'/MixerI'],'Position');
                dx2MixerI=235;
                IPosPos=get_param([block,'/I+'],'Position');
                IPosPos_dx=IPosPos(3)-IPosPos(1);
                IPosPos(3)=MixerIPos(1)-dx2MixerI;
                IPosPos(1)=IPosPos(3)-IPosPos_dx;
                set_param([block,'/I+'],'Position',IPosPos);

                INegPos=get_param([block,'/I-'],'Position');
                INegPos_dx=INegPos(3)-INegPos(1);
                INegPos(3)=MixerIPos(1)-dx2MixerI;
                INegPos(1)=INegPos(3)-INegPos_dx;
                set_param([block,'/I-'],'Position',INegPos);

                QPosPos=get_param([block,'/Q+'],'Position');
                QPosPos_dx=QPosPos(3)-QPosPos(1);
                QPosPos(3)=MixerIPos(1)-dx2MixerI;
                QPosPos(1)=QPosPos(3)-QPosPos_dx;
                set_param([block,'/Q+'],'Position',QPosPos);

                QNegPos=get_param([block,'/Q-'],'Position');
                QNegPos_dx=QNegPos(3)-QNegPos(1);
                QNegPos(3)=MixerIPos(1)-dx2MixerI;
                QNegPos(1)=QNegPos(3)-QNegPos_dx;
                set_param([block,'/Q-'],'Position',QNegPos);

                phtemp=get_param([block,'/Rout'],'PortHandles');
                simrfV2deletelines(get(phtemp.LConn(1),'Line'));
                simrfV2connports(struct('DstBlk','Rout',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','Out+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);

                phtemp=get_param([block,'/SignalCombiner'],...
                'PortHandles');
                simrfV2deletelines(get(phtemp.RConn(2),'Line'));
                simrfV2connports(struct('DstBlk','SignalCombiner',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',2,...
                'SrcBlk','Out-','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);

                phtemp=get_param([block,'/MixerI'],'PortHandles');
                simrfV2deletelines(get(phtemp.LConn([1,2]),'Line'));
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','I+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',2,...
                'SrcBlk','I-','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);

                phtemp=get_param([block,'/MixerQ'],'PortHandles');
                simrfV2deletelines(get(phtemp.LConn([1,2]),'Line'));
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',1,...
                'SrcBlk','Q+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','LConn','DstBlkPortIdx',2,...
                'SrcBlk','Q-','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
            end
        end
        simrfV2_set_param(block,'MaskDisplay',MaskDisplay);

        iqModMaskParams=createMaskParamsStruct(block,...
        strcmp(action,'simrfInitForcedExp'));

        mo=Simulink.Mask.get(block);
        if isempty(iqModMaskParams.NFloor)||...
            ~isscalar(iqModMaskParams.NFloor)||...
            ~isnumeric(iqModMaskParams.NFloor)||...
            iqModMaskParams.NFloor==-inf
            mo.BlockDVGIcon='RFBlksIcons.iqmod';
        else
            mo.BlockDVGIcon='RFBlksIcons.iqmodnflooron';
        end


        if strcmpi(top_sys,'simrfV2systems')
            return
        end


        current_risolationI=simrfV2_find_repblk(block,...
        '^(R_IsolationI|RisInf_IsolationI)$');


        current_risolationQ=simrfV2_find_repblk(block,...
        '^(R_IsolationQ|RisInf_IsolationQ)$');


        current_zout=simrfV2_find_repblk(block,...
        '^(Rout|Zout)$');




        if strcmpi(MaskVals{idxMaskNames.ForceNextInit},'on')
            action='simrfInitForced';
            set_param(block,'ForceNextInit','Off');
        end

        if(any(strcmp(action,{'simrfInitForced',...
            'simrfInitForcedExp'}))||...
            (~isempty(regexpi(get_param(top_sys,...
            'SimulationStatus'),'^(updating|initializing)$','once'))))


            simrfV2_set_param([block,'/MixerI'],'Source_linear_gain',...
            iqModMaskParams.Source_linear_gain)
            simrfV2_set_param([block,'/MixerQ'],'Source_linear_gain',...
            iqModMaskParams.Source_linear_gain)

            MaskParamsStructValidations(iqModMaskParams);

            if any(strcmpi(iqModMaskParams.Source_linear_gain,...
                {'Available power gain','Open circuit voltage gain'}))
                simrfV2_set_param([block,'/MixerI'],'Source_Poly',...
                iqModMaskParams.Source_Poly)
                simrfV2_set_param([block,'/MixerI'],'IPType',...
                iqModMaskParams.IPType)
                simrfV2_set_param([block,'/MixerQ'],'Source_Poly',...
                iqModMaskParams.Source_Poly)
                simrfV2_set_param([block,'/MixerQ'],'IPType',...
                iqModMaskParams.IPType)
            end


            repCSFiltBlkFullPath=find_system(block,'LookUnderMasks',...
            'all','FollowLinks','on','SearchDepth',1,'Name',...
            'CSFilter');
            if isempty(repCSFiltBlkFullPath)
                RConnBlk='Out+';
                PortSide='RConn';
            else
                RConnBlk='CSFilter';
                PortSide='LConn';
            end
            repNoiseBlkFullPath=find_system(block,'LookUnderMasks',...
            'all','FollowLinks','on','SearchDepth',1,'Name',...
            'ThermalNoise');

            if(iqModMaskParams.AddNoise)
                evalin('caller',...
                ['iqModParams.ThermalNoise.NoisePSD=0;'...
                ,'iqModParams.ThermalNoise.CarrierFreq=0;']);
                if isempty(repNoiseBlkFullPath)

                    posZoutBlk=get_param([block,'/',current_zout],...
                    'Position');
                    phLConnBlk=get_param([block,'/',current_zout],...
                    'PortHandles');
                    simrfV2deletelines(get(phLConnBlk.LConn,'Line'));
                    posOutPortBlk=get_param([block,'/Out+'],...
                    'Position');
                    posSigCombBlk_dx=posZoutBlk(3)-posZoutBlk(1);
                    posZoutBlk_y_mid=(posZoutBlk(2)+posZoutBlk(4))/2;
                    posZoutBlk_x_mid=(posZoutBlk(1)+posZoutBlk(3))/2;
                    Blks_halfway=1*(-posZoutBlk(1)+posOutPortBlk(1))/3;
                    add_block('simrfV2sources1/Noise',...
                    [block,'/ThermalNoise'],...
                    'SimulinkInputSignalType','Ideal voltage',...
                    'NoiseType','Piece-wise linear',...
                    'NoisePSD',...
                    'iqModParams.ThermalNoise.NoisePSD',...
                    'CarrierFreq',...
                    'iqModParams.ThermalNoise.CarrierFreq',...
                    'CarrierFreq_unit','Hz',...
                    'Position',[posZoutBlk_x_mid-...
                    1.2*posSigCombBlk_dx/2+Blks_halfway...
                    ,posZoutBlk_y_mid-1.2*posSigCombBlk_dx/2...
                    ,posZoutBlk_x_mid+1.2*posSigCombBlk_dx/2+...
                    Blks_halfway,posZoutBlk_y_mid+...
                    1.2*posSigCombBlk_dx/2],...
                    'InternalGrounding','off',...
                    'Orientation','left',...
                    'NamePlacement','Alternate');
                    simrfV2connports(struct('SrcBlk','ThermalNoise',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk',current_zout,'DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','ThermalNoise',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk',RConnBlk,'DstBlkPortStr',PortSide,...
                    'DstBlkPortIdx',1),block);
                    repNoiseBlkFullPath=[block,'/ThermalNoise'];
                end
            else
                if~isempty(repNoiseBlkFullPath)


                    phCSFiltBlk=get_param(repNoiseBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phCSFiltBlk{1}.LConn,...
                    'Line'));

                    simrfV2deletelines(get(phCSFiltBlk{1}.RConn,...
                    'Line'));
                    delete_block(repNoiseBlkFullPath);
                    simrfV2connports(struct('SrcBlk',RConnBlk,...
                    'SrcBlkPortStr',PortSide,'SrcBlkPortIdx',1,...
                    'DstBlk',current_zout,'DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);
                    repNoiseBlkFullPath='';
                end
            end

            if isempty(repNoiseBlkFullPath)
                LConnBlk=current_zout;
            else
                LConnBlk='ThermalNoise';
            end


            if(iqModMaskParams.AddCSFilter)
                if isempty(repCSFiltBlkFullPath)

                    posZoutBlk=get_param([block,'/',current_zout],...
                    'Position');
                    posSigCombBlk=get_param([block,'/SignalCombiner'],...
                    'Position');
                    phLConnBlk=get_param([block,'/',LConnBlk],...
                    'PortHandles');
                    simrfV2deletelines(get(phLConnBlk.LConn,'Line'));
                    posOutPortBlk=get_param([block,'/Out+'],...
                    'Position');
                    posSigCombBlk_dx=posSigCombBlk(3)-posSigCombBlk(1);
                    posZoutBlk_x_mid=(posZoutBlk(1)+posZoutBlk(3))/2;
                    Blks_halfway=2*(-posZoutBlk(1)+posOutPortBlk(1))/3;
                    add_block('simrfV2elements/Filter',...
                    [block,'/CSFilter'],...
                    'Position',[posZoutBlk_x_mid-...
                    posSigCombBlk_dx/2+Blks_halfway...
                    ,posSigCombBlk(2)...
                    ,posZoutBlk_x_mid+posSigCombBlk_dx/2+...
                    Blks_halfway,posSigCombBlk(4)],...
                    'InternalGrounding',grounded,...
                    'Orientation','right',...
                    'NamePlacement','Alternate');
                    simrfV2connports(struct('SrcBlk','CSFilter',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk',LConnBlk,'DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','CSFilter',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','Out+','DstBlkPortStr','RConn',...
                    'DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))



                        set_param([block,'/CSFilter'],'Position',...
                        [(posZoutBlk_x_mid-posSigCombBlk_dx/2+...
                        Blks_halfway),posSigCombBlk(2)...
                        ,(posZoutBlk_x_mid+posSigCombBlk_dx/2+...
                        Blks_halfway),posSigCombBlk(4)]);
                        phtemp=get_param([block,'/SignalCombiner'],...
                        'PortHandles');
                        simrfV2deletelines(get(phtemp.RConn(2),'Line'));
                        simrfV2connports(struct('SrcBlk','CSFilter',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',...
                        2,'DstBlk','SignalCombiner',...
                        'DstBlkPortStr','RConn','DstBlkPortIdx',...
                        2),block);
                        simrfV2connports(struct('SrcBlk','CSFilter',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',...
                        2,'DstBlk','Out-','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',1),block);
                        phBlk=get_param([block,'/CSFilter'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            posSigCombBlk_dy=posSigCombBlk(4)-...
                            posSigCombBlk(2);
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)+posSigCombBlk_dy/2;
                            linePts(3,2)=linePts(3,2)+posSigCombBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end

                    end
                end

                fnames=fieldnames(iqModMaskParams);
                CSfnames=fnames(cellfun(@(x)~isempty(x),...
                regexp(fnames,'CS$')));
                paramNameValPair={};
                for CSfnameInd=1:length(CSfnames)
                    CSfname=CSfnames{CSfnameInd};
                    ParamVal=iqModMaskParams.(CSfname);
                    if isnumeric(ParamVal)
                        ParamVal=mat2str(ParamVal);
                    end
                    paramNameValPair(:,end+1)=...
                    {CSfname(1:end-2);ParamVal};%#ok<AGROW>
                end
                set_param([block,'/CSFilter'],paramNameValPair{:});
            else
                if~isempty(repCSFiltBlkFullPath)


                    phCSFiltBlk=get_param(repCSFiltBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phCSFiltBlk{1}.LConn,...
                    'Line'));

                    simrfV2deletelines(get(phCSFiltBlk{1}.RConn,...
                    'Line'));
                    delete_block(repCSFiltBlkFullPath);
                    simrfV2connports(struct('SrcBlk','Out+',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk',LConnBlk,'DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))



                        phOutNegBlk=get_param([block,'/Out-'],...
                        'PortHandles');
                        simrfV2deletelines(get(phOutNegBlk.RConn,'Line'));
                        simrfV2connports(struct('SrcBlk','Out-',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                        'DstBlk','SignalCombiner','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',2),block);
                    end
                end
            end


            repIRFiltIBlkFullPath=find_system(block,'LookUnderMasks',...
            'all','FollowLinks','on','SearchDepth',1,'Name',...
            'IRFilterI');
            if(iqModMaskParams.AddIRFilters)
                if isempty(repIRFiltIBlkFullPath)

                    posMixerIBlk=get_param([block,'/MixerI'],...
                    'Position');
                    posSigCombBlk=get_param([block,'/SignalCombiner'],...
                    'Position');
                    phIPosBlk=get_param([block,'/I+'],'PortHandles');
                    simrfV2deletelines(get(phIPosBlk.RConn,'Line'));
                    posIPortBlk=get_param([block,'/I+'],'Position');
                    posSigCombBlk_dx=posSigCombBlk(3)-posSigCombBlk(1);
                    posSigCombBlk_dy=posSigCombBlk(4)-posSigCombBlk(2);
                    posIPortBlk_x_mid=(posIPortBlk(1)+...
                    posIPortBlk(3))/2;
                    posIPortBlk_y_mid=(posIPortBlk(2)+...
                    posIPortBlk(4))/2;
                    Blks_halfway=1*(posMixerIBlk(1)-posIPortBlk(1))/3;
                    add_block('simrfV2elements/Filter',...
                    [block,'/IRFilterI'],...
                    'Position',[posIPortBlk_x_mid-...
                    posSigCombBlk_dx/2+Blks_halfway...
                    ,posIPortBlk_y_mid-posSigCombBlk_dy/2...
                    ,posIPortBlk_x_mid+posSigCombBlk_dx/2+...
                    Blks_halfway,posIPortBlk_y_mid+...
                    posSigCombBlk_dy/2],...
                    'InternalGrounding',grounded,...
                    'Orientation','right',...
                    'NamePlacement','Alternate');
                    simrfV2connports(struct('SrcBlk','IRFilterI',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk','I+','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','IRFilterI',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerI','DstBlkPortStr','LConn',...
                    'DstBlkPortIdx',1),block);

                    phIPosBlk=get_param([block,'/Q+'],'PortHandles');
                    simrfV2deletelines(get(phIPosBlk.RConn,'Line'));
                    posQPortBlk=get_param([block,'/Q+'],'Position');
                    posQPortBlk_y_mid=(posQPortBlk(2)+...
                    posQPortBlk(4))/2;
                    add_block('simrfV2elements/Filter',...
                    [block,'/IRFilterQ'],...
                    'Position',[posIPortBlk_x_mid-...
                    posSigCombBlk_dx/2+Blks_halfway...
                    ,posQPortBlk_y_mid-posSigCombBlk_dy/2...
                    ,posIPortBlk_x_mid+posSigCombBlk_dx/2+...
                    Blks_halfway,posQPortBlk_y_mid+...
                    posSigCombBlk_dy/2],...
                    'InternalGrounding',grounded,...
                    'BlockRotation','180',...
                    'BlockMirror','on',...
                    'NamePlacement','normal');
                    simrfV2connports(struct('SrcBlk','IRFilterQ',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk','Q+','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','IRFilterQ',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerQ','DstBlkPortStr','LConn',...
                    'DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))





                        negIPortBlk=get_param([block,'/I-'],'Position');
                        IPortBlks_y_mid=(negIPortBlk(2)+...
                        posIPortBlk(4))/2;
                        set_param([block,'/IRFilterI'],'Position',...
                        [posIPortBlk_x_mid-...
                        1.1*posSigCombBlk_dx/2+Blks_halfway...
                        ,IPortBlks_y_mid-1.1*posSigCombBlk_dy/2...
                        ,posIPortBlk_x_mid+1.1*posSigCombBlk_dx/2+...
                        Blks_halfway,IPortBlks_y_mid+...
                        1.1*posSigCombBlk_dy/2]);
                        phtemp=get_param([block,'/I-'],'PortHandles');
                        simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                        simrfV2connports(struct('SrcBlk','IRFilterI',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',...
                        2,'DstBlk','I-',...
                        'DstBlkPortStr','RConn','DstBlkPortIdx',...
                        1),block);
                        simrfV2connports(struct('SrcBlk','IRFilterI',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',...
                        2,'DstBlk','MixerI','DstBlkPortStr',...
                        'LConn','DstBlkPortIdx',2),block);
                        phBlk=get_param([block,'/IRFilterI'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)+posSigCombBlk_dy/2;
                            linePts(3,2)=linePts(3,2)+posSigCombBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end
                        negQPortBlk=get_param([block,'/Q-'],'Position');
                        QPortBlks_y_mid=(negQPortBlk(2)+...
                        posQPortBlk(4))/2;
                        set_param([block,'/IRFilterQ'],'Position',...
                        [posIPortBlk_x_mid-...
                        1.1*posSigCombBlk_dx/2+Blks_halfway...
                        ,QPortBlks_y_mid-1.1*posSigCombBlk_dy/2...
                        ,posIPortBlk_x_mid+1.1*posSigCombBlk_dx/2+...
                        Blks_halfway,QPortBlks_y_mid+...
                        1.1*posSigCombBlk_dy/2]);
                        phtemp=get_param([block,'/Q-'],'PortHandles');
                        simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                        simrfV2connports(struct('SrcBlk','IRFilterQ',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',...
                        2,'DstBlk','Q-',...
                        'DstBlkPortStr','RConn','DstBlkPortIdx',...
                        1),block);
                        simrfV2connports(struct('SrcBlk','IRFilterQ',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',...
                        2,'DstBlk','MixerQ','DstBlkPortStr',...
                        'LConn','DstBlkPortIdx',2),block);
                        phBlk=get_param([block,'/IRFilterQ'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)-posSigCombBlk_dy/2;
                            linePts(3,2)=linePts(3,2)-posSigCombBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end
                    end
                end

                fnames=fieldnames(iqModMaskParams);
                IRfnames=fnames(cellfun(@(x)~isempty(x),...
                regexp(fnames,'IR$')));
                paramNameValPair={};
                for IRfnameInd=1:length(IRfnames)
                    IRfname=IRfnames{IRfnameInd};
                    ParamVal=iqModMaskParams.(IRfname);
                    if isnumeric(ParamVal)
                        ParamVal=mat2str(ParamVal);
                    end
                    paramNameValPair(:,end+1)=...
                    {IRfname(1:end-2);ParamVal};%#ok<AGROW>
                end
                set_param([block,'/IRFilterI'],paramNameValPair{:});
                set_param([block,'/IRFilterQ'],paramNameValPair{:});
            else
                if~isempty(repIRFiltIBlkFullPath)


                    phIRFiltIBlk=get_param(repIRFiltIBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phIRFiltIBlk{1}.LConn,'Line'));

                    simrfV2deletelines(get(phIRFiltIBlk{1}.RConn,'Line'));
                    delete_block(repIRFiltIBlkFullPath);
                    simrfV2connports(struct('SrcBlk','I+',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerI','DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);


                    repIRFiltQBlkFullPath=find_system(block,...
                    'LookUnderMasks','all','FollowLinks','on',...
                    'SearchDepth',1,'Name','IRFilterQ');
                    phIRFiltQBlk=get_param(repIRFiltQBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phIRFiltQBlk{1}.LConn,...
                    'Line'));

                    simrfV2deletelines(get(phIRFiltQBlk{1}.RConn,...
                    'Line'));
                    delete_block(repIRFiltQBlkFullPath);
                    simrfV2connports(struct('SrcBlk','Q+',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerQ','DstBlkPortStr',...
                    'LConn','DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))



                        phINegBlk=get_param([block,'/I-'],'PortHandles');
                        simrfV2deletelines(get(phINegBlk.RConn,'Line'));
                        phQNegBlk=get_param([block,'/Q-'],'PortHandles');
                        simrfV2deletelines(get(phQNegBlk.RConn,'Line'));
                        simrfV2connports(struct('SrcBlk','I-',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                        'DstBlk','MixerI','DstBlkPortStr',...
                        'LConn','DstBlkPortIdx',2),block);
                        simrfV2connports(struct('SrcBlk','Q-',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                        'DstBlk','MixerQ','DstBlkPortStr',...
                        'LConn','DstBlkPortIdx',2),block);
                    end
                end
            end



            evalin('caller',['iqModParams.LO.CarrierFreq=0;',...
            'iqModParams.LO.PhaseNoiseOffset=1;',...
            'iqModParams.LO.PhaseNoiseLevel=-Inf;']);
            set_param([block,'/LO'],'AddPhaseNoise',...
            iqModMaskParams.AddPhaseNoise);
            set_param([block,'/LO'],'AutoImpulseLength',...
            iqModMaskParams.AutoImpulseLengthPN);
            if ischar(iqModMaskParams.ImpulseLengthPN)
                set_param([block,'/LO'],'ImpulseLength',...
                iqModMaskParams.ImpulseLengthPN);
            else
                set_param([block,'/LO'],'ImpulseLength',...
                mat2str(iqModMaskParams.ImpulseLengthPN));
            end
            set_param([block,'/LO'],'ImpulseLength_unit',...
            iqModMaskParams.ImpulseLength_unitPN);


            if isinf(iqModMaskParams.Isolation)
                R_IsolationI_str='RisInf_IsolationI';
                R_IsolationQ_str='RisInf_IsolationQ';
                srcBlk='simrfV2_lib/Elements/OPEN_RF';
            else
                R_IsolationI_str='R_IsolationI';
                R_IsolationQ_str='R_IsolationQ';
                srcBlk='simrfV2elements/R';
            end
            if~strcmpi(current_risolationI,R_IsolationI_str)
                replacedBlk=replace_block(block,'FollowLinks',...
                'on','SearchDepth','1','name',...
                current_risolationI,srcBlk,'noprompt');
                if~isempty(replacedBlk)
                    set_param(replacedBlk{1},'name',R_IsolationI_str);
                end
            end
            if~strcmpi(current_risolationQ,R_IsolationQ_str)
                replacedBlk=replace_block(block,'FollowLinks',...
                'on','SearchDepth','1','name',...
                current_risolationQ,srcBlk,...
                'noprompt');
                if~isempty(replacedBlk)
                    set_param(replacedBlk{1},'name',R_IsolationQ_str);
                end
            end



            if strcmp(R_IsolationI_str,'R_IsolationI')
                evalin('caller',...
                ['iqModParams.R_IsolationI.Resistance=50;'...
                ,'iqModParams.R_IsolationQ.Resistance=50;']);
                simrfV2_set_param([block,'/',R_IsolationI_str],...
                'Resistance','iqModParams.R_IsolationI.Resistance');
                simrfV2_set_param([block,'/',R_IsolationQ_str],...
                'Resistance','iqModParams.R_IsolationQ.Resistance');

                simrfV2_set_param([block,'/',R_IsolationI_str],...
                'AddNoise','off');
                simrfV2_set_param([block,'/',R_IsolationQ_str],...
                'AddNoise','off');

            end

            if isreal(iqModMaskParams.Zout)
                Zout_str='Rout';
                srcBlk='simrfV2elements/R';
            else
                Zout_str='Zout';
                srcBlk='simrfV2elements/Z';
            end
            if~strcmpi(current_zout,Zout_str)
                replacedBlk=replace_block(block,'FollowLinks',...
                'on','SearchDepth','1','name',...
                current_zout,srcBlk,'noprompt');
                if~isempty(replacedBlk)
                    set_param(replacedBlk{1},'NamePlacement',...
                    'Alternate');
                    set_param(replacedBlk{1},'name',Zout_str);
                end
            end

            if strcmp(Zout_str,'Zout')
                evalin('caller','iqModParams.Zout.Impedance=50;');
                simrfV2_set_param([block,'/',Zout_str],...
                'Impedance','iqModParams.Zout.Impedance');
            else
                evalin('caller','iqModParams.Rout.Resistance=50;');
                simrfV2_set_param([block,'/',Zout_str],...
                'Resistance','iqModParams.Rout.Resistance');

                simrfV2_set_param([block,'/',Zout_str],'AddNoise',...
                'off');
            end
        end

    case 'simrfInitValidateOnly'
        top_sys=bdroot(block);

        if any(strcmpi(get_param(top_sys,'SimulationStatus'),...
            {'running','paused'}))
            return
        end

        if strcmpi(top_sys,'simrfV2systems')
            return
        end
        iqModMaskParams=createMaskParamsStruct(block,false);
        MaskParamsStructValidations(iqModMaskParams);

    case 'simrfDelete'

    case 'simrfCopy'

    case 'simrfDefault'

    end

end

function MaskParamsStruct=createMaskParamsStruct(block,copyInvisible)
    mwsv=get_param(block,'MaskWSVariables');
    iqModParmNames={mwsv.Name};
    iqModParmValues={mwsv.Value};
    iqModParmUnitsIdxs=zeros(1,length(iqModParmNames));
    for iqModParmIdx=1:length(iqModParmNames)
        iqModParmName=iqModParmNames{iqModParmIdx};
        Inval=iqModParmValues{iqModParmIdx};
        iqModParmUnitInx=ismember(iqModParmNames,...
        [iqModParmName,'_unit']);
        if any(iqModParmUnitInx)

            UnitVal=iqModParmValues{iqModParmUnitInx};
            if strcmpi(UnitVal,'None')
                Source_linear_gain=...
                iqModParmValues(strcmpi(iqModParmNames,...
                'Source_linear_gain'));


                if strcmpi(Source_linear_gain,'Available power gain')
                    Outval=10*log10(iqModParmValues{iqModParmIdx});
                else
                    Outval=20*log10(iqModParmValues{iqModParmIdx});
                end
            elseif strcmpi(UnitVal,'Rad')
                Outval=iqModParmValues{iqModParmIdx}*180/pi;
            elseif strcmpi(UnitVal,'W')
                Outval=10*log10(iqModParmValues{iqModParmIdx})+30;
            elseif strcmpi(UnitVal,'mW')
                Outval=10*log10(iqModParmValues{iqModParmIdx});
            elseif strcmpi(UnitVal,'dBW')
                Outval=iqModParmValues{iqModParmIdx}+30;
            else
                first_letter_of_unit=UnitVal(1);
                switch first_letter_of_unit
                case 'k'
                    Outval=1e3*Inval;
                case 'M'
                    Outval=1e6*Inval;
                case 'G'
                    Outval=1e9*Inval;
                case 'T'
                    Outval=1e12*Inval;
                case 'm'
                    Outval=1e-3*Inval;
                case 'u'
                    Outval=1e-6*Inval;
                case 'n'
                    Outval=1e-9*Inval;
                case 'p'
                    Outval=1e-12*Inval;
                otherwise
                    Outval=Inval;
                end
            end
            iqModParmValues{iqModParmIdx}=Outval;
            iqModParmUnitsIdxs=or(iqModParmUnitsIdxs,...
            iqModParmUnitInx);
        end




        keepFieldsEmpty={'IP2','IP3','P1dB','Psat'};
        if isempty(iqModParmValues{iqModParmIdx})
            MaskNames=get_param(block,'MaskNames');
            idxMaskParams=cell2struct(num2cell(1:length(MaskNames)),...
            MaskNames,2);
            maskVis=get_param(block,'MaskVisibilities');
            if(copyInvisible&&~strcmpi(maskVis{idxMaskParams.(...
                iqModParmNames{iqModParmIdx})},'on')&&...
                ~any(strcmpi(iqModParmNames{iqModParmIdx},...
                keepFieldsEmpty)))
                iqModParmValues{iqModParmIdx}=...
                get_param(block,iqModParmNames{iqModParmIdx});
            end
        end
    end

    iqModParmRemoveInx=or(iqModParmUnitsIdxs,...
    ismember(iqModParmNames,'InternalGrounding'));

    iqModParmRemoveInx=or(iqModParmRemoveInx,...
    ismember(iqModParmNames,'classname'));

    iqModParmRemoveInx=or(iqModParmRemoveInx,...
    ismember(iqModParmNames,'iqModParams'));

    iqModParmRemoveInx=or(iqModParmRemoveInx,...
    ismember(iqModParmNames,'iqModMaskParams'));

    MaskParamsStruct=cell2struct(iqModParmValues(...
    not(iqModParmRemoveInx)),...
    iqModParmNames(not(iqModParmRemoveInx)),2);


    top_sys=bdroot(block);
    [~,~,AddNoise,envtempK]=...
    simrfV2_find_solverparams(top_sys,block,1);

    if MaskParamsStruct.NFloor==-inf
        AddNoise=false;
    end
    T=envtempK;
    RF_Const=simrfV2_constants();
    K=value(RF_Const.Boltz,'J/K');
    MaskParamsStruct.KT=K*T;
    MaskParamsStruct.AddNoise=AddNoise;

end

function MaskParamsStructValidations(MaskParamsStruct)
    if any(strcmpi(MaskParamsStruct.Source_linear_gain,...
        {'Available power gain','Open circuit voltage gain'}))
        validateattributes(MaskParamsStruct.linear_gain,...
        {'numeric'},{'nonempty','scalar','real','finite'},...
        '',MaskParamsStruct.Source_linear_gain);
        validateattributes(MaskParamsStruct.IP3,{'numeric'},...
        {'nonempty','scalar','real'},'','IP3');
        if strcmpi(MaskParamsStruct.Source_Poly,...
            'Even and odd order')
            validateattributes(MaskParamsStruct.IP2,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'IP2');
        else
            validateattributes(MaskParamsStruct.P1dB,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            '1-dB gain compression power');
            validateattributes(MaskParamsStruct.Psat,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'Output saturation power');
            validateattributes(MaskParamsStruct.Gcomp,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'Gain compression at saturation');
        end
    else
        validateattributes(MaskParamsStruct.Poly_Coeffs,...
        {'numeric'},{'nonempty','vector','real','finite'},...
        '','Polynomial coefficients');
    end
    validateattributes(MaskParamsStruct.LOFreq,{'numeric'},...
    {'nonempty','scalar','finite','real','nonnegative'},...
    '','Local Oscillator frequency');
    [~]=simrfV2checkimpedance(MaskParamsStruct.Zin,0,...
    'Input impedance of IQ modulator',0,1);
    [~]=simrfV2checkimpedance(MaskParamsStruct.Zout,0,...
    'Output impedance of IQ modulator',1,0);
    validateattributes(MaskParamsStruct.GainMismatch,...
    {'numeric'},{'nonempty','scalar','finite','real'},'',...
    'I/Q gain mismatch');
    validateattributes(MaskParamsStruct.PhaseMismatch,...
    {'numeric'},{'nonempty','scalar','finite','real'},'',...
    'I/Q phase mismatch');
    validateattributes(MaskParamsStruct.Isolation,{'numeric'},...
    {'nonempty','nonnan','scalar','real','positive'},'',...
    'LO to RF isolation');
    validateattributes(MaskParamsStruct.NFloor,{'numeric'},...
    {'nonempty','scalar','real'},'',...
    'IQ modulator Noise floor');
    if((~isfinite(MaskParamsStruct.NFloor))&&...
        ((MaskParamsStruct.NFloor~=-inf)))
        error(message('simrf:simrfV2errors:IQModNoiseFloorIsInf'))
    end
    if(strcmpi(MaskParamsStruct.AddPhaseNoise,'on'))


        validateattributes(MaskParamsStruct.PhaseNoiseOffset,...
        {'numeric'},{'nonempty','vector','positive','finite'},'',...
        'Phase noise frequency offsets');
        validateattributes(MaskParamsStruct.PhaseNoiseLevel,...
        {'numeric'},{'nonempty','vector','real'},'',...
        'Phase noise level');
        if any(size(MaskParamsStruct.PhaseNoiseOffset)~=...
            size(MaskParamsStruct.PhaseNoiseLevel))
            error(message('simrf:simrfV2errors:MatrixSizeNotSameAs',...
            'Phase noise frequency offsets','Phase noise level'));
        end
        if(strcmpi(MaskParamsStruct.AutoImpulseLengthPN,'off'))
            validateattributes(MaskParamsStruct.ImpulseLengthPN,...
            {'numeric'},...
            {'nonempty','scalar','real','finite','positive'},'',...
            'Phase noise impulse response duration');
        end
    end
end