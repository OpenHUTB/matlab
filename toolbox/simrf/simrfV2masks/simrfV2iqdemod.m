function iqDemodMaskParams=simrfV2iqdemod(block,action)








    switch(action)
    case{'simrfInit','simrfInitForced','simrfInitForcedExp'}
        top_sys=bdroot(block);

        if any(strcmpi(get_param(top_sys,'SimulationStatus'),...
            {'running','paused'}))
            return
        end






        mwsv=get_param(block,'MaskWSVariables');
        if~ismember({mwsv.Name},'iqDemodParams')
            evalin('caller',['iqDemodParams.MixerI.Gain=0;',...
            'iqDemodParams.MixerI.Zin=50;',...
            'iqDemodParams.MixerI.Zout=50;',...
            'iqDemodParams.MixerI.Poly_Coeffs=[0 1];',...
            'iqDemodParams.MixerI.IP2=inf;',...
            'iqDemodParams.MixerI.IP3=inf;',...
            'iqDemodParams.MixerI.P1dB=inf;',...
            'iqDemodParams.MixerI.Psat=inf;',...
            'iqDemodParams.MixerI.Gcomp=inf;',...
            'iqDemodParams.MixerI.NF=0;',...
            'iqDemodParams.MixerQ.Gain=0;',...
            'iqDemodParams.MixerQ.Zin=50;',...
            'iqDemodParams.MixerQ.Zout=50;',...
            'iqDemodParams.MixerQ.Poly_Coeffs=[0 1];',...
            'iqDemodParams.MixerQ.IP2=inf;',...
            'iqDemodParams.MixerQ.IP3=inf;',...
            'iqDemodParams.MixerQ.P1dB=inf;',...
            'iqDemodParams.MixerQ.Psat=inf;',...
            'iqDemodParams.MixerQ.Gcomp=inf;',...
            'iqDemodParams.MixerQ.NF=0;',...
            'iqDemodParams.PhaseShifter.PhaseShift=90;',...
            'iqDemodParams.LO.CarrierFreq=0;',...
            'iqDemodParams.LO.PhaseNoiseOffset=1;',...
            'iqDemodParams.LO.PhaseNoiseLevel=-Inf;']);
        end


        MaskVals=get_param(block,'MaskValues');
        idxMaskNames=simrfV2getblockmaskparamsindex(block);
        MaskDisplay_3term=simrfV2_add_portlabel('',...
        1,{'In'},2,{'I','Q'},true);
        MaskDisplay_6term=simrfV2_add_portlabel('',...
        2,{'In'},4,{'I','Q'},false);
        currentMaskDisplay=get_param(block,'MaskDisplay');
        if isequal(currentMaskDisplay,MaskDisplay_6term)&&...
            strcmpi(MaskVals{idxMaskNames.InternalGrounding},'on')
            set_param(block,'MaskDisplay',MaskDisplay_3term)
        end

        wasGrounded=strcmp(get_param([block,'/LO'],...
        'InternalGrounding'),'on');

        grounded=lower(MaskVals{idxMaskNames.InternalGrounding});
        switch grounded
        case 'on'
            MaskDisplay=MaskDisplay_3term;
            if(~wasGrounded)


                action='simrfInitForced';
                OldElems=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on',...
                'Name','.[^+]$');
                [~,blkname]=fileparts(block);
                OldElems=...
                OldElems(~strcmp(get(OldElems,'Name'),blkname));
                if~isempty(OldElems)
                    OldLines=find_system(block,'LookUnderMasks',...
                    'all','FollowLinks','on','SearchDepth',...
                    1,'FindAll','on','Type','Line');
                    delete_line(OldLines)
                    delete(OldElems)
                end
                libMod='simrfV2private';
                load_system(libMod);
                SrcBlk='InterIQDemodulatorGrounded';
                add_block([libMod,'/',SrcBlk],[block,'/',SrcBlk],...
                'Position',[195,207,780,603],'LinkStatus',...
                'breakWithoutHierarchy','Mask','off')
                Simulink.BlockDiagram.expandSubsystem([block,'/'...
                ,SrcBlk]);
                ah=find_system(block,'LookUnderMasks','all',...
                'FollowLinks','on','SearchDepth',1,...
                'FindAll','on','type','annotation');
                ao=get_param(ah(1),'Object');
                ao.Selected='on';
                ao.delete;



                PhShiftPos=get_param([block,'/PhaseShifter'],...
                'Position');

                InPosPos=get_param([block,'/In+'],'Position');
                InPosPos_dx=InPosPos(3)-InPosPos(1);
                dx2PhShift=380;
                InPosPos(3)=PhShiftPos(1)-dx2PhShift;
                InPosPos(1)=InPosPos(3)-InPosPos_dx;
                set_param([block,'/In+'],'Position',InPosPos);

                MixerIPos=get_param([block,'/MixerI'],'Position');
                dx2MixerI=235;
                IPosPos=get_param([block,'/I+'],'Position');
                IPosPos_dx=IPosPos(3)-IPosPos(1);
                IPosPos(1)=MixerIPos(3)+dx2MixerI;
                IPosPos(3)=IPosPos(1)+IPosPos_dx;
                set_param([block,'/I+'],'Position',IPosPos);

                QPosPos=get_param([block,'/Q+'],'Position');
                QPosPos_dx=QPosPos(3)-QPosPos(1);
                QPosPos(1)=MixerIPos(3)+dx2MixerI;
                QPosPos(3)=QPosPos(1)+QPosPos_dx;
                set_param([block,'/Q+'],'Position',QPosPos);

                phtemp=get_param([block,'/MixerI'],'PortHandles');
                simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',1,...
                'SrcBlk','I+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                phtemp=get_param([block,'/MixerQ'],'PortHandles');
                simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',1,...
                'SrcBlk','Q+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);

                notConLine=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','Type','Line',...
                'Connected','off');
                origLinePoints=get(notConLine,'Points');
                phtemp=get_param([block,'/In+'],'PortHandles');
                set(notConLine,'Points',[get(phtemp.RConn,...
                'Position');origLinePoints(end,:)])
            end

        case 'off'
            MaskDisplay=MaskDisplay_6term;
            if(wasGrounded)


                action='simrfInitForced';

                OldElems=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on',...
                'Name','.[^+]$');

                [~,blkname]=fileparts(block);
                OldElems=...
                OldElems(~strcmp(get(OldElems,'Name'),blkname));
                if~isempty(OldElems)
                    OldLines=find_system(block,'LookUnderMasks',...
                    'all','FollowLinks','on','SearchDepth',...
                    1,'FindAll','on','Type','Line');
                    delete_line(OldLines)
                    delete(OldElems)
                end


                libMod='simrfV2util1';
                load_system(libMod);
                SrcBlk='Connection Port';
                posTermPorts=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','RegExp','on','Name','+$');
                for posTermPortInd=1:length(posTermPorts)
                    PortName=...
                    get_param(posTermPorts(posTermPortInd),'Name');
                    PortName(end)='-';
                    PortPosDelta=[0,40,0,40];
                    PortSide='Right';
                    PortOrient='Left';
                    PortNum='4';
                    switch(PortName(1:end-1))
                    case 'Q'


                        PortPosDelta=-PortPosDelta;
                        PortNum='6';
                    case 'In'
                        PortSide='Left';
                        PortOrient='Right';
                        PortNum='2';
                    end
                    add_block([libMod,'/',SrcBlk],...
                    [block,'/',PortName],'Position',...
                    get_param(posTermPorts(posTermPortInd),...
                    'Position')+PortPosDelta,'LinkStatus',...
                    'breakWithoutHierarchy','Side',PortSide,...
                    'Orientation',PortOrient,'Port',PortNum);






                    if~strcmpi(get_param([block,'/',PortName],...
                        'Side'),PortSide)
                        set_param([block,'/',PortName],'Side',...
                        PortSide);
                    end
                end
                libMod='simrfV2private';
                load_system(libMod);
                SrcBlk='InterIQDemodulator';
                add_block([libMod,'/',SrcBlk],[block,'/',SrcBlk],...
                'Position',[195,207,780,603],'LinkStatus',...
                'breakWithoutHierarchy','Mask','off')
                Simulink.BlockDiagram.expandSubsystem([block,'/'...
                ,SrcBlk]);
                ah=find_system(block,'LookUnderMasks','all',...
                'FollowLinks','on','SearchDepth',1,...
                'FindAll','on','type','annotation');
                ao=get_param(ah(1),'Object');
                ao.delete;



                PhShiftPos=get_param([block,'/PhaseShifter'],...
                'Position');
                dx2PhShift=380;

                InPosPos=get_param([block,'/In+'],'Position');
                InPosPos_dx=InPosPos(3)-InPosPos(1);
                InPosPos(3)=PhShiftPos(1)-dx2PhShift;
                InPosPos(1)=InPosPos(3)-InPosPos_dx;
                set_param([block,'/In+'],'Position',InPosPos);

                InNegPos=get_param([block,'/In-'],'Position');
                InPosPos_dx=InNegPos(3)-InNegPos(1);
                InNegPos(3)=PhShiftPos(1)-dx2PhShift;
                InNegPos(1)=InNegPos(3)-InPosPos_dx;
                set_param([block,'/In-'],'Position',InNegPos);

                MixerIPos=get_param([block,'/MixerI'],'Position');
                dx2MixerI=235;
                IPosPos=get_param([block,'/I+'],'Position');
                IPosPos_dx=IPosPos(3)-IPosPos(1);
                IPosPos(1)=MixerIPos(3)+dx2MixerI;
                IPosPos(3)=IPosPos(1)+IPosPos_dx;
                set_param([block,'/I+'],'Position',IPosPos);

                INegPos=get_param([block,'/I-'],'Position');
                INegPos_dx=INegPos(3)-INegPos(1);
                INegPos(1)=MixerIPos(3)+dx2MixerI;
                INegPos(3)=INegPos(1)+INegPos_dx;
                set_param([block,'/I-'],'Position',INegPos);

                QPosPos=get_param([block,'/Q+'],'Position');
                QPosPos_dx=QPosPos(3)-QPosPos(1);
                QPosPos(1)=MixerIPos(3)+dx2MixerI;
                QPosPos(3)=QPosPos(1)+QPosPos_dx;
                set_param([block,'/Q+'],'Position',QPosPos);

                QNegPos=get_param([block,'/Q-'],'Position');
                QNegPos_dx=QNegPos(3)-QNegPos(1);
                QNegPos(1)=MixerIPos(3)+dx2MixerI;
                QNegPos(3)=QNegPos(1)+QNegPos_dx;
                set_param([block,'/Q-'],'Position',QNegPos);

                phtemp=get_param([block,'/MixerI'],'PortHandles');
                simrfV2deletelines(get(phtemp.RConn([1,2]),'Line'));
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',1,...
                'SrcBlk','I+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                simrfV2connports(struct('DstBlk','MixerI',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',2,...
                'SrcBlk','I-','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);

                phtemp=get_param([block,'/MixerQ'],'PortHandles');
                simrfV2deletelines(get(phtemp.RConn([1,2]),'Line'));
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',1,...
                'SrcBlk','Q+','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);
                simrfV2connports(struct('DstBlk','MixerQ',...
                'DstBlkPortStr','RConn','DstBlkPortIdx',2,...
                'SrcBlk','Q-','SrcBlkPortStr','RConn',...
                'SrcBlkPortIdx',1),block);


                notConLine=find_system(block,'LookUnderMasks',...
                'all','FollowLinks','on','SearchDepth',1,...
                'FindAll','on','Type','Line',...
                'Connected','off');
                origLinePoints=get(notConLine,'Points');


                [~,UpperLineInd]=min([max(origLinePoints{1}(1,2))...
                ,max(origLinePoints{2}(1,2))]);

                LowerLineInd=mod(UpperLineInd,2)+1;
                phtemp=get_param([block,'/In+'],'PortHandles');
                [~,RightMostPoint]=max(origLinePoints{UpperLineInd...
                }(:,1));
                if(RightMostPoint==1)
                    set(notConLine(UpperLineInd),'Points',...
                    [origLinePoints{...
                    UpperLineInd}(RightMostPoint,:);...
                    get(phtemp.RConn,'Position')]);
                else
                    set(notConLine(UpperLineInd),'Points',...
                    [get(phtemp.RConn,'Position');...
                    origLinePoints{UpperLineInd}(RightMostPoint,...
                    :)]);
                end
                phtemp=get_param([block,'/In-'],'PortHandles');
                [~,RightMostPoint]=max(origLinePoints{LowerLineInd...
                }(:,1));
                if(RightMostPoint==1)
                    set(notConLine(LowerLineInd),'Points',...
                    [origLinePoints{...
                    LowerLineInd}(RightMostPoint,:);...
                    get(phtemp.RConn,'Position')]);
                else
                    set(notConLine(LowerLineInd),'Points',...
                    [get(phtemp.RConn,'Position');...
                    origLinePoints{LowerLineInd}(RightMostPoint,...
                    :)]);
                end
            end
        end
        simrfV2_set_param(block,'MaskDisplay',MaskDisplay);

        iqDemodMaskParams=createMaskParamsStruct(block,...
        strcmp(action,'simrfInitForcedExp'));

        mo=Simulink.Mask.get(block);
        if isempty(iqDemodMaskParams.NF)||...
            ~isscalar(iqDemodMaskParams.NF)||...
            ~isnumeric(iqDemodMaskParams.NF)||...
            iqDemodMaskParams.NF<=0
            mo.BlockDVGIcon='RFBlksIcons.iqdemod';
        else
            mo.BlockDVGIcon='RFBlksIcons.iqdemodnfon';
        end


        if strcmpi(top_sys,'simrfV2systems')
            return
        end


        current_zisolationI=simrfV2_find_repblk(block,...
        '^(R_IsolationI|Z_IsolationI|ZisInf_IsolationI)$');


        current_zisolationQ=simrfV2_find_repblk(block,...
        '^(R_IsolationQ|Z_IsolationQ|ZisInf_IsolationQ)$');




        if strcmpi(MaskVals{idxMaskNames.ForceNextInit},'on')
            action='simrfInitForced';
            set_param(block,'ForceNextInit','Off');
        end

        if(any(strcmp(action,{'simrfInitForced',...
            'simrfInitForcedExp'}))||...
            (~isempty(regexpi(get_param(top_sys,...
            'SimulationStatus'),'^(updating|initializing)$','once'))))


            simrfV2_set_param([block,'/MixerI'],'Source_linear_gain',...
            iqDemodMaskParams.Source_linear_gain)
            simrfV2_set_param([block,'/MixerQ'],'Source_linear_gain',...
            iqDemodMaskParams.Source_linear_gain)

            MaskParamsStructValidations(iqDemodMaskParams);

            if any(strcmpi(iqDemodMaskParams.Source_linear_gain,...
                {'Available power gain','Open circuit voltage gain'}))
                simrfV2_set_param([block,'/MixerI'],'Source_Poly',...
                iqDemodMaskParams.Source_Poly)
                simrfV2_set_param([block,'/MixerI'],'IPType',...
                iqDemodMaskParams.IPType)
                simrfV2_set_param([block,'/MixerQ'],'Source_Poly',...
                iqDemodMaskParams.Source_Poly)
                simrfV2_set_param([block,'/MixerQ'],'IPType',...
                iqDemodMaskParams.IPType)
            end


            repIRFiltBlkFullPath=find_system(block,'LookUnderMasks',...
            'all','FollowLinks','on','SearchDepth',1,'Name',...
            'IRFilter');
            if(iqDemodMaskParams.AddIRFilter)
                if isempty(repIRFiltBlkFullPath)

                    posMixerIBlk=get_param([block,'/MixerI'],'Position');
                    phInPosBlk=get_param([block,'/In+'],'PortHandles');
                    posInPortBlk=get_param([block,'/In+'],'Position');
                    posMixerIBlk_dx=posMixerIBlk(3)-posMixerIBlk(1);
                    posMixerIBlk_dy=posMixerIBlk(4)-posMixerIBlk(2);
                    posInPortBlk_x_mid=(posInPortBlk(1)+...
                    posInPortBlk(3))/2;
                    posInPortBlk_y_mid=(posInPortBlk(2)+...
                    posInPortBlk(4))/2;
                    Blks_halfway=1*(posMixerIBlk(1)-posInPortBlk(1))/5;
                    add_block('simrfV2elements/Filter',...
                    [block,'/IRFilter'],...
                    'Position',[posInPortBlk_x_mid-...
                    posMixerIBlk_dx/2+Blks_halfway...
                    ,posInPortBlk_y_mid-posMixerIBlk_dy/2...
                    ,posInPortBlk_x_mid+posMixerIBlk_dx/2+...
                    Blks_halfway,posInPortBlk_y_mid+...
                    posMixerIBlk_dy/2],...
                    'InternalGrounding',grounded,...
                    'Orientation','right',...
                    'NamePlacement','Alternate');
                    lineFromInPos=get(phInPosBlk.RConn,'Line');
                    phIRFilter=get_param([block,'/IRFilter'],...
                    'PortHandles');
                    PointsLineFromInPos=get(lineFromInPos,'Points');
                    [~,maxInd]=max(PointsLineFromInPos(:,1));
                    delete_line(lineFromInPos);
                    hAddedLine=add_line(block,...
                    [get(phIRFilter.RConn(1),'Position');...
                    PointsLineFromInPos(maxInd,:)]);
                    if(strcmpi(get(hAddedLine,'Connected'),'off'))




                        delete_line(hAddedLine);
                        isolationIBlkFullPath=find_system(block,...
                        'LookUnderMasks','all','FollowLinks',...
                        'on','SearchDepth',1,'RegExp','on',...
                        'Name','\w*IsolationI');
                        [~,isolationIBlk]=...
                        fileparts(isolationIBlkFullPath{1});
                        simrfV2connports(struct('SrcBlk',...
                        'IRFilter','SrcBlkPortStr','RConn',...
                        'SrcBlkPortIdx',1,'DstBlk',isolationIBlk,...
                        'DstBlkPortStr','LConn','DstBlkPortIdx',...
                        1),block);
                    end
                    simrfV2connports(struct('SrcBlk','IRFilter',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk','In+','DstBlkPortStr','RConn',...
                    'DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))



                        negInPortBlk=get_param([block,'/In-'],...
                        'Position');
                        IPortBlks_y_mid=(negInPortBlk(2)+...
                        posInPortBlk(4))/2;
                        set_param([block,'/IRFilter'],'Position',...
                        [posInPortBlk_x_mid-posMixerIBlk_dx/2+...
                        Blks_halfway,IPortBlks_y_mid-...
                        posMixerIBlk_dy/2,posInPortBlk_x_mid+...
                        posMixerIBlk_dx/2+Blks_halfway...
                        ,IPortBlks_y_mid+posMixerIBlk_dy/2]);
                        phInPosBlk=get_param([block,'/In-'],...
                        'PortHandles');
                        lineFromInNeg=get(phInPosBlk.RConn,'Line');
                        phIRFilter=get_param([block,'/IRFilter'],...
                        'PortHandles');
                        PointsLineFromInNeg=get(lineFromInNeg,'Points');
                        [~,maxInd]=max(PointsLineFromInNeg(:,1));
                        delete_line(lineFromInNeg);
                        hAddedLine=add_line(block,...
                        [get(phIRFilter.RConn(2),'Position');...
                        PointsLineFromInNeg(maxInd,:)]);
                        if(strcmpi(get(hAddedLine,'Connected'),'off'))




                            delete_line(hAddedLine);
                            simrfV2connports(struct('SrcBlk',...
                            'IRFilter','SrcBlkPortStr','RConn',...
                            'SrcBlkPortIdx',2,'DstBlk',...
                            'PhaseShifter','DstBlkPortStr',...
                            'RConn','DstBlkPortIdx',2),block);
                        end
                        simrfV2connports(struct('SrcBlk','IRFilter',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',2,...
                        'DstBlk','In-','DstBlkPortStr','RConn',...
                        'DstBlkPortIdx',1),block);
                        phBlk=get_param([block,'/IRFilter'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)+posMixerIBlk_dy/2;
                            linePts(3,2)=linePts(3,2)+posMixerIBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end
                    end
                end

                fnames=fieldnames(iqDemodMaskParams);
                IRfnames=fnames(cellfun(@(x)~isempty(x),...
                regexp(fnames,'IR$')));
                paramNameValPair={};
                for IRfnameInd=1:length(IRfnames)
                    IRfname=IRfnames{IRfnameInd};
                    ParamVal=iqDemodMaskParams.(IRfname);
                    if isnumeric(ParamVal)
                        ParamVal=mat2str(ParamVal);
                    end
                    paramNameValPair(:,end+1)=...
                    {IRfname(1:end-2);ParamVal};%#ok<AGROW>
                end
                set_param([block,'/IRFilter'],paramNameValPair{:});
            else
                if~isempty(repIRFiltBlkFullPath)


                    phIRFiltBlk=get_param(repIRFiltBlkFullPath,...
                    'PortHandles');
                    phInPosBlk=get_param([block,'/In+'],'PortHandles');

                    simrfV2deletelines(get(phIRFiltBlk{1}.LConn,...
                    'Line'));
                    if(strcmp(grounded,'off'))


                        phInNegBlk=get_param([block,'/In-'],...
                        'PortHandles');
                        simrfV2deletelines(get(phInNegBlk.RConn,'Line'));
                    end

                    lineFromIRFilter=get(phIRFiltBlk{1}.RConn,'Line');
                    delete_block(repIRFiltBlkFullPath);
                    if(~iscell(lineFromIRFilter))
                        origLinePoints=get(lineFromIRFilter,'Points');
                        [~,maxInd]=max(origLinePoints(:,1));
                        set(lineFromIRFilter,'Points',...
                        [get(phInPosBlk.RConn,'Position');...
                        origLinePoints(maxInd,:)]);
                    else
                        origLinePoints=get(lineFromIRFilter{1},'Points');
                        [~,maxInd]=max(origLinePoints(:,1));
                        set(lineFromIRFilter{1},'Points',...
                        [get(phInPosBlk.RConn,'Position');...
                        origLinePoints(maxInd,:)]);
                        origLinePoints=get(lineFromIRFilter{2},'Points');
                        [~,maxInd]=max(origLinePoints(:,1));
                        phInNegBlk=get_param([block,'/In-'],...
                        'PortHandles');
                        set(lineFromIRFilter{2},'Points',...
                        [get(phInNegBlk.RConn,'Position');...
                        origLinePoints(maxInd,:)]);
                    end
                end
            end


            repCSFiltIBlkFullPath=find_system(block,'LookUnderMasks',...
            'all','FollowLinks','on','SearchDepth',1,'Name',...
            'CSFilterI');
            if(iqDemodMaskParams.AddCSFilters)
                if isempty(repCSFiltIBlkFullPath)

                    posMixerIBlk=get_param([block,'/MixerI'],...
                    'Position');
                    phIPosBlk=get_param([block,'/I+'],'PortHandles');
                    simrfV2deletelines(get(phIPosBlk.RConn,'Line'));
                    posIPortBlk=get_param([block,'/I+'],'Position');
                    posMixerIBlk_dx=posMixerIBlk(3)-posMixerIBlk(1);
                    posMixerIBlk_dy=posMixerIBlk(4)-posMixerIBlk(2);
                    posIPortBlk_x_mid=(posIPortBlk(1)+...
                    posIPortBlk(3))/2;
                    posMixerIBlk_y_mid=(posMixerIBlk(2)+...
                    posMixerIBlk(4))/2;
                    Blks_halfway=1*(posMixerIBlk(1)-posIPortBlk(1))/3;
                    add_block('simrfV2elements/Filter',...
                    [block,'/CSFilterI'],...
                    'Position',[posIPortBlk_x_mid-...
                    posMixerIBlk_dx/2+Blks_halfway...
                    ,posMixerIBlk_y_mid-posMixerIBlk_dy/2...
                    ,posIPortBlk_x_mid+posMixerIBlk_dx/2+...
                    Blks_halfway,posMixerIBlk_y_mid+...
                    posMixerIBlk_dy/2],...
                    'InternalGrounding',grounded,...
                    'Orientation','right',...
                    'NamePlacement','Alternate');
                    simrfV2connports(struct('SrcBlk','CSFilterI',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','I+','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','CSFilterI',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerI','DstBlkPortStr','RConn',...
                    'DstBlkPortIdx',1),block);

                    phIPosBlk=get_param([block,'/Q+'],'PortHandles');
                    simrfV2deletelines(get(phIPosBlk.RConn,'Line'));
                    posMixerQBlk=get_param([block,'/MixerQ'],'Position');
                    posMixerQBlk_y_mid=(posMixerQBlk(2)+...
                    posMixerQBlk(4))/2;
                    add_block('simrfV2elements/Filter',...
                    [block,'/CSFilterQ'],...
                    'Position',[posIPortBlk_x_mid-...
                    posMixerIBlk_dx/2+Blks_halfway...
                    ,posMixerQBlk_y_mid-posMixerIBlk_dy/2...
                    ,posIPortBlk_x_mid+posMixerIBlk_dx/2+...
                    Blks_halfway,posMixerQBlk_y_mid+...
                    posMixerIBlk_dy/2],...
                    'InternalGrounding',grounded,...
                    'BlockRotation','180',...
                    'BlockMirror','on',...
                    'NamePlacement','normal');
                    simrfV2connports(struct('SrcBlk','CSFilterQ',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','Q+','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);
                    simrfV2connports(struct('SrcBlk','CSFilterQ',...
                    'SrcBlkPortStr','LConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerQ','DstBlkPortStr','RConn',...
                    'DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))





                        negIPortBlk=get_param([block,'/I-'],'Position');
                        IPortBlks_y_mid=(negIPortBlk(2)+...
                        posIPortBlk(4))/2;
                        set_param([block,'/CSFilterI'],'Position',...
                        [posIPortBlk_x_mid-...
                        posMixerIBlk_dx/2+Blks_halfway...
                        ,IPortBlks_y_mid-posMixerIBlk_dy/2...
                        ,posIPortBlk_x_mid+posMixerIBlk_dx/2+...
                        Blks_halfway,IPortBlks_y_mid+...
                        posMixerIBlk_dy/2]);
                        phtemp=get_param([block,'/I-'],'PortHandles');
                        simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                        simrfV2connports(struct('SrcBlk','CSFilterI',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',...
                        2,'DstBlk','I-',...
                        'DstBlkPortStr','RConn','DstBlkPortIdx',...
                        1),block);
                        simrfV2connports(struct('SrcBlk','CSFilterI',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',...
                        2,'DstBlk','MixerI','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',2),block);
                        phBlk=get_param([block,'/CSFilterI'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)+posMixerIBlk_dy/2;
                            linePts(3,2)=linePts(3,2)+posMixerIBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end
                        posQPortBlk=get_param([block,'/Q+'],'Position');
                        negQPortBlk=get_param([block,'/Q-'],'Position');
                        QPortBlks_y_mid=(negQPortBlk(2)+...
                        posQPortBlk(4))/2;
                        set_param([block,'/CSFilterQ'],'Position',...
                        [posIPortBlk_x_mid-...
                        posMixerIBlk_dx/2+Blks_halfway...
                        ,QPortBlks_y_mid-posMixerIBlk_dy/2...
                        ,posIPortBlk_x_mid+posMixerIBlk_dx/2+...
                        Blks_halfway,QPortBlks_y_mid+...
                        posMixerIBlk_dy/2]);
                        phtemp=get_param([block,'/Q-'],'PortHandles');
                        simrfV2deletelines(get(phtemp.RConn(1),'Line'));
                        simrfV2connports(struct('SrcBlk','CSFilterQ',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',...
                        2,'DstBlk','Q-',...
                        'DstBlkPortStr','RConn','DstBlkPortIdx',...
                        1),block);
                        simrfV2connports(struct('SrcBlk','CSFilterQ',...
                        'SrcBlkPortStr','LConn','SrcBlkPortIdx',...
                        2,'DstBlk','MixerQ','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',2),block);
                        phBlk=get_param([block,'/CSFilterQ'],...
                        'PortHandles');
                        hLine=add_line(block,phBlk.RConn(2),...
                        phBlk.LConn(2));
                        linePts=get(hLine,'Points');
                        if(size(linePts,1)==2)
                            linePts=[linePts(1,:);linePts(1,:);...
                            linePts(2,:);linePts(2,:)];
                            linePts(2,2)=linePts(2,2)-posMixerIBlk_dy/2;
                            linePts(3,2)=linePts(3,2)-posMixerIBlk_dy/2;
                            set(hLine,'Points',linePts);
                        end
                    end
                end

                fnames=fieldnames(iqDemodMaskParams);
                CSfnames=fnames(cellfun(@(x)~isempty(x),...
                regexp(fnames,'CS$')));
                paramNameValPair={};
                for CSfnameInd=1:length(CSfnames)
                    CSfname=CSfnames{CSfnameInd};
                    ParamVal=iqDemodMaskParams.(CSfname);
                    if isnumeric(ParamVal)
                        ParamVal=mat2str(ParamVal);
                    end
                    paramNameValPair(:,end+1)=...
                    {CSfname(1:end-2);ParamVal};%#ok<AGROW>
                end
                set_param([block,'/CSFilterI'],paramNameValPair{:});
                set_param([block,'/CSFilterQ'],paramNameValPair{:});
            else
                if~isempty(repCSFiltIBlkFullPath)


                    phCSFiltIBlk=get_param(repCSFiltIBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phCSFiltIBlk{1}.LConn,'Line'));

                    simrfV2deletelines(get(phCSFiltIBlk{1}.RConn,'Line'));
                    delete_block(repCSFiltIBlkFullPath);
                    simrfV2connports(struct('SrcBlk','I+',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerI','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);


                    repCSFiltQBlkFullPath=find_system(block,...
                    'LookUnderMasks','all','FollowLinks','on',...
                    'SearchDepth',1,'Name','CSFilterQ');
                    phCSFiltQBlk=get_param(repCSFiltQBlkFullPath,...
                    'PortHandles');

                    simrfV2deletelines(get(phCSFiltQBlk{1}.LConn,...
                    'Line'));

                    simrfV2deletelines(get(phCSFiltQBlk{1}.RConn,...
                    'Line'));
                    delete_block(repCSFiltQBlkFullPath);
                    simrfV2connports(struct('SrcBlk','Q+',...
                    'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                    'DstBlk','MixerQ','DstBlkPortStr',...
                    'RConn','DstBlkPortIdx',1),block);
                    if(strcmp(grounded,'off'))



                        phINegBlk=get_param([block,'/I-'],'PortHandles');
                        simrfV2deletelines(get(phINegBlk.RConn,'Line'));
                        phQNegBlk=get_param([block,'/Q-'],'PortHandles');
                        simrfV2deletelines(get(phQNegBlk.RConn,'Line'));
                        simrfV2connports(struct('SrcBlk','I-',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                        'DstBlk','MixerI','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',2),block);
                        simrfV2connports(struct('SrcBlk','Q-',...
                        'SrcBlkPortStr','RConn','SrcBlkPortIdx',1,...
                        'DstBlk','MixerQ','DstBlkPortStr',...
                        'RConn','DstBlkPortIdx',2),block);
                    end
                end
            end



            evalin('caller',['iqDemodParams.LO.CarrierFreq=0;',...
            'iqDemodParams.LO.PhaseNoiseOffset=1;',...
            'iqDemodParams.LO.PhaseNoiseLevel=-Inf;']);
            set_param([block,'/LO'],'AddPhaseNoise',...
            iqDemodMaskParams.AddPhaseNoise);
            set_param([block,'/LO'],'AutoImpulseLength',...
            iqDemodMaskParams.AutoImpulseLengthPN);
            if ischar(iqDemodMaskParams.ImpulseLengthPN)
                set_param([block,'/LO'],'ImpulseLength',...
                iqDemodMaskParams.ImpulseLengthPN);
            else
                set_param([block,'/LO'],'ImpulseLength',...
                mat2str(iqDemodMaskParams.ImpulseLengthPN));
            end
            set_param([block,'/LO'],'ImpulseLength_unit',...
            iqDemodMaskParams.ImpulseLength_unitPN);


            if isinf(iqDemodMaskParams.Isolation)
                Z_IsolationI_str='ZisInf_IsolationI';
                Z_IsolationQ_str='ZisInf_IsolationQ';
                srcBlk='simrfV2_lib/Elements/OPEN_RF';
            elseif isreal(iqDemodMaskParams.Zin)
                Z_IsolationI_str='R_IsolationI';
                Z_IsolationQ_str='R_IsolationQ';
                srcBlk='simrfV2elements/R';
            else
                Z_IsolationI_str='Z_IsolationI';
                Z_IsolationQ_str='Z_IsolationQ';
                srcBlk='simrfV2elements/Z';
            end
            if~strcmpi(current_zisolationI,Z_IsolationI_str)
                replacedBlk=replace_block(block,'FollowLinks',...
                'on','SearchDepth','1','name',...
                current_zisolationI,srcBlk,'noprompt');
                if~isempty(replacedBlk)
                    set_param(replacedBlk{1},'NamePlacement',...
                    'Alternate');
                    set_param(replacedBlk{1},'name',Z_IsolationI_str);
                end
            end
            if~strcmpi(current_zisolationQ,Z_IsolationQ_str)
                replacedBlk=replace_block(block,'FollowLinks',...
                'on','SearchDepth','1','name',...
                current_zisolationQ,srcBlk,...
                'noprompt');
                if~isempty(replacedBlk)
                    set_param(replacedBlk{1},'NamePlacement',...
                    'Alternate');
                    set_param(replacedBlk{1},'name',Z_IsolationQ_str);
                end
            end



            if strcmp(Z_IsolationI_str,'Z_IsolationI')




                evalin('caller',...
                ['iqDemodParams.Z_IsolationI.Impedance=50;',...
                'iqDemodParams.Z_IsolationQ.Impedance=50;']);
                simrfV2_set_param([block,'/',Z_IsolationI_str],...
                'Impedance','iqDemodParams.Z_IsolationI.Impedance');
                simrfV2_set_param([block,'/',Z_IsolationQ_str],...
                'Impedance','iqDemodParams.Z_IsolationQ.Impedance');
            elseif strcmp(Z_IsolationI_str,'R_IsolationI')
                evalin('caller',...
                ['iqDemodParams.R_IsolationI.Resistance=50;'...
                ,'iqDemodParams.R_IsolationQ.Resistance=50;']);
                simrfV2_set_param([block,'/',Z_IsolationI_str],...
                'Resistance','iqDemodParams.R_IsolationI.Resistance');
                simrfV2_set_param([block,'/',Z_IsolationQ_str],...
                'Resistance','iqDemodParams.R_IsolationQ.Resistance');

                simrfV2_set_param([block,'/',Z_IsolationI_str],...
                'AddNoise','off');
                simrfV2_set_param([block,'/',Z_IsolationQ_str],...
                'AddNoise','off');
            end
        end

    case 'simrfInitValidateOnly'
        top_sys=bdroot(block);

        if any(strcmpi(get_param(top_sys,'SimulationStatus'),...
            {'running','paused'}))
            return
        end

        if strcmpi(top_sys,'simrfV2systems')
            return
        end
        iqDemodMaskParams=createMaskParamsStruct(block,false);
        MaskParamsStructValidations(iqDemodMaskParams);

    case 'simrfDelete'

    case 'simrfCopy'

    case 'simrfDefault'

    end

end

function MaskParamsStruct=createMaskParamsStruct(block,copyInvisible)
    mwsv=get_param(block,'MaskWSVariables');
    iqDemodParmNames={mwsv.Name};
    iqDemodParmValues={mwsv.Value};
    iqDemodParmUnitsIdxs=zeros(1,length(iqDemodParmNames));
    for iqDemodParmIdx=1:length(iqDemodParmNames)
        iqDemodParmName=iqDemodParmNames{iqDemodParmIdx};
        Inval=iqDemodParmValues{iqDemodParmIdx};
        iqDemodParmUnitInx=ismember(iqDemodParmNames,...
        [iqDemodParmName,'_unit']);
        if any(iqDemodParmUnitInx)

            UnitVal=iqDemodParmValues{iqDemodParmUnitInx};
            if strcmpi(UnitVal,'None')
                Source_linear_gain=...
                iqDemodParmValues(strcmpi(iqDemodParmNames,...
                'Source_linear_gain'));


                if strcmpi(Source_linear_gain,'Available power gain')
                    Outval=10*log10(iqDemodParmValues{iqDemodParmIdx});
                else
                    Outval=20*log10(iqDemodParmValues{iqDemodParmIdx});
                end
            elseif strcmpi(UnitVal,'Rad')
                Outval=iqDemodParmValues{iqDemodParmIdx}*180/pi;
            elseif strcmpi(UnitVal,'W')
                Outval=10*...
                log10(iqDemodParmValues{iqDemodParmIdx})+30;
            elseif strcmpi(UnitVal,'mW')
                Outval=10*log10(iqDemodParmValues{iqDemodParmIdx});
            elseif strcmpi(UnitVal,'dBW')
                Outval=iqDemodParmValues{iqDemodParmIdx}+30;
            else
                first_letter_of_unit=UnitVal(1);
                switch first_letter_of_unit
                case 'k'
                    Outval=1e3*Inval;
                case 'M'
                    Outval=1e6*Inval;
                case 'G'
                    Outval=1e9*Inval;
                case 'T'
                    Outval=1e12*Inval;
                case 'm'
                    Outval=1e-3*Inval;
                case 'u'
                    Outval=1e-6*Inval;
                case 'n'
                    Outval=1e-9*Inval;
                case 'p'
                    Outval=1e-12*Inval;
                otherwise
                    Outval=Inval;
                end
            end
            iqDemodParmValues{iqDemodParmIdx}=Outval;
            iqDemodParmUnitsIdxs=or(iqDemodParmUnitsIdxs,...
            iqDemodParmUnitInx);
        end




        keepFieldsEmpty={'IP2','IP3','P1dB','Psat'};
        if isempty(iqDemodParmValues{iqDemodParmIdx})
            MaskNames=get_param(block,'MaskNames');
            idxMaskParams=cell2struct(num2cell(1:length(MaskNames)),...
            MaskNames,2);
            maskVis=get_param(block,'MaskVisibilities');
            if(copyInvisible&&~strcmpi(maskVis{idxMaskParams.(...
                iqDemodParmNames{iqDemodParmIdx})},'on')&&...
                ~any(strcmpi(iqDemodParmNames{iqDemodParmIdx},...
                keepFieldsEmpty)))
                iqDemodParmValues{iqDemodParmIdx}=...
                get_param(block,iqDemodParmNames{iqDemodParmIdx});
            end
        end
    end

    iqDemodParmRemoveInx=or(iqDemodParmUnitsIdxs,...
    ismember(iqDemodParmNames,'InternalGrounding'));

    iqDemodParmRemoveInx=or(iqDemodParmRemoveInx,...
    ismember(iqDemodParmNames,'classname'));

    iqDemodParmRemoveInx=or(iqDemodParmRemoveInx,...
    ismember(iqDemodParmNames,'iqDemodParams'));

    iqDemodParmRemoveInx=or(iqDemodParmRemoveInx,...
    ismember(iqDemodParmNames,'iqDemodMaskParams'));

    MaskParamsStruct=cell2struct(iqDemodParmValues(...
    not(iqDemodParmRemoveInx)),...
    iqDemodParmNames(not(iqDemodParmRemoveInx)),2);

end

function MaskParamsStructValidations(MaskParamsStruct)
    if any(strcmpi(MaskParamsStruct.Source_linear_gain,...
        {'Available power gain','Open circuit voltage gain'}))
        validateattributes(MaskParamsStruct.linear_gain,...
        {'numeric'},{'nonempty','scalar','real','finite'},...
        '',MaskParamsStruct.Source_linear_gain);
        validateattributes(MaskParamsStruct.IP3,{'numeric'},...
        {'nonempty','scalar','real'},'','IP3');
        if strcmpi(MaskParamsStruct.Source_Poly,...
            'Even and odd order')
            validateattributes(MaskParamsStruct.IP2,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'IP2');
        else
            validateattributes(MaskParamsStruct.P1dB,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            '1-dB gain compression power');
            validateattributes(MaskParamsStruct.Psat,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'Output saturation power');
            validateattributes(MaskParamsStruct.Gcomp,...
            {'numeric'},{'nonempty','scalar','real'},'',...
            'Gain compression at saturation');
        end
    else
        validateattributes(MaskParamsStruct.Poly_Coeffs,...
        {'numeric'},{'nonempty','vector','real','finite'},...
        '','Polynomial coefficients');
    end
    validateattributes(MaskParamsStruct.LOFreq,{'numeric'},...
    {'nonempty','scalar','finite','real','nonnegative'},...
    '','Local Oscillator frequency');
    [~]=simrfV2checkimpedance(MaskParamsStruct.Zin,0,...
    'Input impedance of mixer',0,1);
    [~]=simrfV2checkimpedance(MaskParamsStruct.Zout,0,...
    'Output impedance of mixer',1,0);
    validateattributes(MaskParamsStruct.GainMismatch,...
    {'numeric'},{'nonempty','scalar','finite','real'},'',...
    'I/Q gain mismatch');
    validateattributes(MaskParamsStruct.PhaseMismatch,...
    {'numeric'},{'nonempty','scalar','finite','real'},'',...
    'I/Q phase mismatch');
    validateattributes(MaskParamsStruct.Isolation,{'numeric'},...
    {'nonempty','nonnan','scalar','real','positive'},'',...
    'LO to RF isolation');
    validateattributes(MaskParamsStruct.NF,{'numeric'},...
    {'nonempty','scalar','real','nonnegative','finite'},...
    '','IQ demodulator Noise figure');
    if(strcmpi(MaskParamsStruct.AddPhaseNoise,'on'))


        validateattributes(MaskParamsStruct.PhaseNoiseOffset,...
        {'numeric'},{'nonempty','vector','positive','finite'},'',...
        'Phase noise frequency offsets');
        validateattributes(MaskParamsStruct.PhaseNoiseLevel,...
        {'numeric'},{'nonempty','vector','real'},'',...
        'Phase noise level');
        if any(size(MaskParamsStruct.PhaseNoiseOffset)~=...
            size(MaskParamsStruct.PhaseNoiseLevel))
            error(message('simrf:simrfV2errors:MatrixSizeNotSameAs',...
            'Phase noise frequency offsets','Phase noise level'));
        end
        if(strcmpi(MaskParamsStruct.AutoImpulseLengthPN,'off'))
            validateattributes(MaskParamsStruct.ImpulseLengthPN,...
            {'numeric'},...
            {'nonempty','scalar','real','finite','positive'},'',...
            'Phase noise impulse response duration');
        end
    end
end