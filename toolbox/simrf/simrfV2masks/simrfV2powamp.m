function simrfV2powamp(block,action)





    top_sys=bdroot(block);
    if strcmpi(get_param(top_sys,'BlockDiagramType'),'library')...
        &&strcmpi(get_param(block,'Parent'),'simrfV2elements')
        return;
    end





    switch(action)
    case 'simrfInit'

        MaskVals=get_param(block,'MaskValues');
        idxMaskNames=simrfV2getblockmaskparamsindex(block);
        MaskWSValues=simrfV2getblockmaskwsvalues(block);

        MaskDisplay='';
        set_param(block,'MaskDisplay',MaskDisplay)


        switch lower(MaskVals{idxMaskNames.InternalGrounding})
        case 'on'

            simrfV2repblk(struct('RepBlk','In-','SrcBlk',...
            'simrfV2elements/Gnd','SrcLib','simrfV2elements',...
            'DstBlk','Gnd1'),block);
            replace_gnd_complete=simrfV2repblk(struct('RepBlk',...
            'Out-','SrcBlk','simrfV2elements/Gnd',...
            'SrcLib','simrfV2elements','DstBlk','Gnd2'),block);

            if replace_gnd_complete
                simrfV2connports(struct('SrcBlk','PowerAmp',...
                'SrcBlkPortStr','LConn','SrcBlkPortIdx',2,...
                'DstBlk','Gnd1','DstBlkPortStr','LConn',...
                'DstBlkPortIdx',1),block);
                simrfV2connports(struct('SrcBlk','PowerAmp',...
                'SrcBlkPortStr','RConn','SrcBlkPortIdx',2,...
                'DstBlk','Gnd2','DstBlkPortStr','LConn',...
                'DstBlkPortIdx',1),block);
            end
            MaskDisplay=simrfV2_add_portlabel(MaskDisplay,1,...
            {'In'},1,{'Out'},true);

        case 'off'

            simrfV2repblk(struct('RepBlk','Gnd1','SrcBlk',...
            'nesl_utility_internal/Connection Port','SrcLib',...
            'nesl_utility_internal','DstBlk','In-','Param',...
            {{'Side','Left','Orientation','Up','Port','3'}}),...
            block);
            replace_gnd_complete=simrfV2repblk(struct(...
            'RepBlk','Gnd2',...
            'SrcBlk','nesl_utility_internal/Connection Port',...
            'SrcLib','nesl_utility_internal',...
            'DstBlk','Out-','Param',...
            {{'Side','Right','Orientation','Up','Port','4'}}),...
            block);
            if replace_gnd_complete
                simrfV2connports(struct('SrcBlk','PowerAmp',...
                'SrcBlkPortStr','LConn','SrcBlkPortIdx',2,...
                'DstBlk','In-','DstBlkPortStr','RConn',...
                'DstBlkPortIdx',1),block);
                simrfV2connports(struct('SrcBlk','PowerAmp',...
                'SrcBlkPortStr','RConn','SrcBlkPortIdx',2,...
                'DstBlk','Out-','DstBlkPortStr','RConn',...
                'DstBlkPortIdx',1),block);
            end
            MaskDisplay=simrfV2_add_portlabel(MaskDisplay,2,...
            {'In'},2,{'Out'},false);
        end
        set_param(block,'MaskDisplay',MaskDisplay);


        if regexpi(get_param(top_sys,'SimulationStatus'),...
            '^(updating|initializing)$')

            validateattributes(MaskWSValues.UnitDelay,{'numeric'},...
            {'nonempty','scalar','real','positive','finite','nonnan'},...
            '','Coefficient sample time')
            validateattributes(MaskWSValues.Rin,{'numeric'},...
            {'nonempty','scalar','real','positive','finite','nonnan'},...
            '','Rin')
            validateattributes(MaskWSValues.Rout,{'numeric'},...
            {'nonempty','scalar','real','positive','finite','nonnan'},...
            '','Rout')


            partDim=size(MaskWSValues.CoeffMatrix);
            switch(MaskVals{idxMaskNames.ModelType})
            case 'Generalized Hammerstein'
                validateattributes(MaskWSValues.CoeffMatrix,{'numeric'},...
                {'nonempty','2d','finite','nonnan','real'},...
                '','Coefficient matrix')
                coeffSet='coeff';
                coeffStr=mat2str(MaskWSValues.CoeffMatrix,16);
                repBlk='simrfV2_lib/Elements/PA_HAMMER_RF';
                load_system('simrfV2_lib')
            case 'Memory polynomial'
                validateattributes(MaskWSValues.CoeffMatrix,{'numeric'},...
                {'nonempty','2d','finite','nonnan'},'',...
                'Coefficient matrix')
                coeffSet='coeffMatrix';
                coeffStr=mat2str(MaskWSValues.CoeffMatrix,16);
                repBlk='simrfV2private/PA_MemPoly';
                load_system('simrfV2private')
            case 'Cross-Term Memory'
                validateattributes(MaskWSValues.CoeffMatrix,{'numeric'},...
                {'nonempty','2d','finite','nonnan'},'',...
                'Coefficient matrix')
                powTerms=(partDim(2)+partDim(1)-1)/partDim(1);
                if abs(round(powTerms)-powTerms)>eps(max(partDim))*1000
                    error(message('simrf:simrfV2errors:WrongNumberCols',...
                    partDim(2)))
                end
                coeffSet='coeffMatrix';
                coeffStr=mat2str(MaskWSValues.CoeffMatrix,16);
                repBlk='simrfV2private/PA_MemPoly';
                load_system('simrfV2private')
            case 'Cross-Term Hammerstein'
                validateattributes(MaskWSValues.CoeffMatrix,{'numeric'},...
                {'nonempty','2d','finite','nonnan','real'},...
                '','Coefficient matrix')
                powTerms=(partDim(2)+partDim(1)-1)/partDim(1);
                if abs(round(powTerms)-powTerms)>eps(max(partDim))*1000
                    error(message('simrf:simrfV2errors:WrongNumberCols',...
                    partDim(2)))
                end
                coeffSet='coeff';
                coeffStr=mat2str(MaskWSValues.CoeffMatrix,16);
                repBlk='simrfV2_lib/Elements/PA_HAMMER_RF';
                load_system('simrfV2_lib')
            end

            replace_block(block,'FollowLinks','on','Name','PowerAmp',...
            repBlk,'noprompt')
            set_param([block,'/PowerAmp'],coeffSet,coeffStr,...
            'unitDelay',num2str(MaskWSValues.UnitDelay,16))
            switch MaskVals{idxMaskNames.ModelType}
            case{'Memory polynomial','Generalized Hammerstein'}
                set_param([block,'/PowerAmp'],'modelType','1')
            case{'Cross-Term Memory','Cross-Term Hammerstein'}
                set_param([block,'/PowerAmp'],'modelType','2')
            end

            set_param([block,'/Rin'],...
            'Resistance',num2str(MaskWSValues.Rin,16),...
            'Resistance_unit','Ohm')
            set_param([block,'/Rout'],...
            'Resistance',num2str(MaskWSValues.Rout,16),...
            'Resistance_unit','Ohm')
        end
    end

end