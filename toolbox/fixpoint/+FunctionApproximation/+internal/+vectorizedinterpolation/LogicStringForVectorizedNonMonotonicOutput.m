classdef LogicStringForVectorizedNonMonotonicOutput<handle



    methods(Static)
        function string=getInterpolationLogicString(numInputs)
            string=['intermediateValue(index>=numel(tableValues)) = tableValues(end);',newline,...
            'tmpIdx = find(tableValues(index+1)>tableValues(index));',newline,...
            'intermediateValue(tmpIdx) = (frac(tmpIdx).* (tableValues(index(tmpIdx)+1) - tableValues(index(tmpIdx)))) + tableValues(index(tmpIdx));',newline,...
            'tmpIdx = find(tableValues(index+1)<tableValues(index));',newline,...
            'intermediateValue(tmpIdx) = tableValues(index(tmpIdx)) - (frac(tmpIdx).* (tableValues(index(tmpIdx)) - tableValues(index(tmpIdx)+1)));',newline,...
            'intermediateValue(frac == 0) = tableValues(index(frac == 0));',...
            newline,'output(:) = intermediateValue;'];
            if numInputs>1
                string=['bpIdx1 = double(index-1) * stride'' +1;',newline,...
                'k = 2;',newline,...
                'bpIdx1(bpIdx1 >= numel(tableValues)) = numel(tableValues);',newline,...
                'tmpIdx = find(tableValues(bpIdx1+1)>tableValues(bpIdx1));',newline,...
                'intermediateValue(tmpIdx,1) = (frac(tmpIdx,1).* (tableValues(bpIdx1(tmpIdx)+1) - tableValues(bpIdx1(tmpIdx)))) + tableValues(bpIdx1(tmpIdx));',newline,...
                'tmpIdx = find(tableValues(bpIdx1+1)<tableValues(bpIdx1));',newline,...
                'intermediateValue(tmpIdx,1) = tableValues(bpIdx1(tmpIdx)) - (frac(tmpIdx,1).* (tableValues(bpIdx1(tmpIdx)) - tableValues(bpIdx1(tmpIdx)+1)));',newline,...
                'bpIdx2 = bpIdx1 + stride(2);',newline,...
                'bpIdx2(bpIdx2 >= numel(tableValues)) = numel(tableValues);',newline,...
                'tmpIdx = find(tableValues(bpIdx2+1)>tableValues(bpIdx2));',newline,...
                'intermediateValue(tmpIdx,2) = (frac(tmpIdx,1).* (tableValues(bpIdx2(tmpIdx)+1) - tableValues(bpIdx2(tmpIdx)))) + tableValues(bpIdx2(tmpIdx));',newline,...
                'tmpIdx = find(tableValues(bpIdx2+1)<tableValues(bpIdx2));',newline,...
                'intermediateValue(tmpIdx,2) = tableValues(bpIdx2(tmpIdx)) - (frac(tmpIdx,1).* (tableValues(bpIdx2(tmpIdx)) - tableValues(bpIdx2(tmpIdx)+1)));',newline,...
                'intermediateValue(:,2) = (frac(:,2).* (intermediateValue(:,2) - intermediateValue(:,1))) + intermediateValue(:,1);',newline,...
                'while(k<=nargin-1)',newline,...
                'bpIdx1 = bpIdx1 + stride(k+1);',newline,...
                'bpIdx1(bpIdx1 >= numel(tableValues)) = numel(tableValues);',newline,...
                'tmpIdx = find(tableValues(bpIdx1+1)>tableValues(bpIdx1));',newline,...
                'intermediateValue(tmpIdx,1) = (frac(tmpIdx,1).* (tableValues(bpIdx1(tmpIdx)+1) - tableValues(bpIdx1(tmpIdx)))) + tableValues(bpIdx1(tmpIdx));',newline,...
                'tmpIdx = find(tableValues(bpIdx1+1)<tableValues(bpIdx1));',newline,...
                'intermediateValue(tmpIdx,1) = tableValues(bpIdx1(tmpIdx)) - (frac(tmpIdx,1).* (tableValues(bpIdx1(tmpIdx)) - tableValues(bpIdx1(tmpIdx)+1)));',newline,...
                'bpIdx2 = bpIdx1 + stride(k);',newline,...
                'bpIdx2(bpIdx2 >= numel(tableValues)) = numel(tableValues);',newline,...
                'tmpIdx = find(tableValues(bpIdx2+1)>tableValues(bpIdx2));',newline,...
                'intermediateValue(tmpIdx,k+1) = (frac(tmpIdx,1) .* (tableValues(bpIdx2(tmpIdx)+1) - tableValues(bpIdx2(tmpIdx)))) + tableValues(bpIdx2(tmpIdx));',newline,...
                'tmpIdx = find(tableValues(bpIdx2+1)<tableValues(bpIdx2));',newline,...
                'intermediateValue(tmpIdx,k+1) = tableValues(bpIdx2(tmpIdx)) - (frac(tmpIdx,1) .* (tableValues(bpIdx2(tmpIdx)) - tableValues(bpIdx2(tmpIdx)+1)));',newline,...
                'intermediateValue(:,k+1) = (frac(:,k) .* (intermediateValue(:,k+1) - intermediateValue(:,1))) + intermediateValue(:,1);',newline,...
                'intermediateValue(:,end) = (frac(:,k+1) .* (intermediateValue(:,k+1) - intermediateValue(:,2))) + intermediateValue(:,2);',newline,...
                'k = k+1;',newline,...
                'end',newline,...
                'output(:) = intermediateValue(:,end);'];
            end
        end
    end
end


