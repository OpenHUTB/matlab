classdef OperatorsWeight<handle




    properties(SetAccess=private,Hidden)
OperatorWeightsMap
    end

    methods(Static,Access=private,Hidden)

        function DefaultOperatorsWeightMap=getDefaultOperatorsWeightMap



            keySetOfOps={'ADD(+)',...
            'DIV(/)',...
            'MUL(*)',...
            'MINUS(-)',...
            'UMINUS(-u)',...
            'GT(>)',...
            'GE(>=)',...
            'LT(<)',...
            'LE(<=)',...
            'EQ(==)',...
            'NE(!=)',...
            'SHIFT_LEFT(<<)',...
            'SHIFT_RIGHT(>>)',...
            'SHIFT_RIGHT_LOG(>>l)',...
            'SHIFT_RIGHT_ARITH(>>a)',...
            'LOG_COND(conditional)',...
            'BIT_AND(&)',...
            'BIT_OR(|)',...
            'LOG_OR(||)',...
            'LOG_NOT(!)',...
            'ASSIGN(=)',...
            'LOG_AND(&&)',...
            'CAST((typecast))'};
            valueSetOfWeights=[1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1...
            ,1];

            DefaultOperatorsWeightMap=containers.Map(keySetOfOps,valueSetOfWeights);
        end
    end

    methods


        function obj=OperatorsWeight()
            obj.OperatorWeightsMap=designcostestimation.internal.OperatorsWeight.getDefaultOperatorsWeightMap();
        end


        function operations=getAllOperations(obj)
            operations=keys(obj.OperatorWeightsMap);
        end


        function weight=getWeightForOperation(obj,operation)


            if(isKey(obj.OperatorWeightsMap,operation))
                weight=obj.OperatorWeightsMap(operation);
            else
                weight=0;
            end
        end


        function setWeightForOperation(obj,operation,weight)

            if(isKey(obj.OperatorWeightsMap,operation))
                obj.OperatorWeightsMap(operation)=weight;
            end
        end


        function weight=getWeightForAdd(obj)
            weight=obj.OperatorWeightsMap('ADD(+)');
        end
        function setWeightForAdd(obj,weight)
            obj.OperatorWeightsMap('ADD(+)')=weight;
        end
        function weight=getWeightForMul(obj)
            weight=obj.OperatorWeightsMap('MUL(*)');
        end
        function setWeightForMul(obj,weight)
            obj.OperatorWeightsMap('MUL(*)')=weight;
        end
        function weight=getWeightForDiv(obj)
            weight=obj.OperatorWeightsMap('DIV(/)');
        end
        function setWeightForDiv(obj,weight)
            obj.OperatorWeightsMap('DIV(/)')=weight;
        end
        function weight=getWeightForMinus(obj)
            weight=obj.OperatorWeightsMap('MINUS(-)');
        end
        function setWeightForMinus(obj,weight)
            obj.OperatorWeightsMap('MINUS(-)')=weight;
        end
    end
end


