function list=PSLegacyList


    persistent listData;

    if isempty(listData)




        oldLib='fl_lib/Physical Signals';
        oldPth='foundation.physical_signal';
        newLib='fl_lib/Physical Signals';
        newPth='foundation.signal';
        legacyLib='fl_ps_legacy_lib/Legacy Physical Signals';


























        data={...
        'delays.constant_delay',...
        'Delays/PS Constant Delay',...
        'Delays/PS Constant Delay',...
        false,...
        {},...
        lPrms('InputHistory'),...
        {};
        'delays.variable_delay',...
        'Delays/PS Variable Delay',...
        'Delays/PS Variable Delay',...
        false,...
        {},...
        {},...
        {};
        'discrete.asynchronous_sample_and_hold',...
        'Discrete/Asynchronous Sample & Hold',...
        'Discrete/PS Asynchronous Sample & Hold',...
        false,...
        {},...
        lPrms('Y0'),...
        {'y_held','1','U','physmod:simscape:compiler:mli:diagnostics:PsAshTypeError'};
        'functions.add',...
        'Functions/PS Add',...
        'Functions/PS Add',...
        false,...
        {},...
        {},...
        {};
        'functions.divide',...
        'Functions/PS Divide',...
        'Functions/PS Divide',...
        false,...
        {},...
        {},...
        {};
        'functions.gain',...
        'Functions/PS Gain',...
        'Functions/PS Gain',...
        false,...
        {},...
        lPrms('gain'),...
        {};
        'functions.math_function',...
        'Functions/PS Math Function',...
        'Functions/PS Math Function',...
        false,...
        {},...
        {},...
        {};
        'functions.product',...
        'Functions/PS Product',...
        'Functions/PS Product',...
        false,...
        {},...
        {},...
        {};
        'functions.subtract',...
        'Functions/PS Subtract',...
        'Functions/PS Subtract',...
        false,...
        {},...
        {},...
        {};
        'linear.integrator',...
        'Linear Operators/PS Integrator',...
        'Linear Operators/PS Integrator',...
        false,...
        {'x0_unit','s'},...
        lPrms('x0'),...
        {'x','1/s','I','physmod:simscape:compiler:mli:diagnostics:PsIntegratorTypeError'};
        'lookup_tables.one_dimensional',...
        'Lookup Tables/PS Lookup Table (1D)',...
        'Lookup Tables/PS Lookup Table (1D)',...
        false,...
        {},...
        lPrms('x','f'),...
        {};
        'lookup_tables.two_dimensional',...
        'Lookup Tables/PS Lookup Table (2D)',...
        'Lookup Tables/PS Lookup Table (2D)',...
        false,...
        {},...
        lPrms('x1','x2','f'),...
        {};
        'lookup_tables.three_dimensional',...
        'Lookup Tables/PS Lookup Table (3D)',...
        'Lookup Tables/PS Lookup Table (3D)',...
        false,...
        {},...
        lPrms('x1','x2','x3','f'),...
        {};
        'lookup_tables.four_dimensional',...
        'Lookup Tables/PS Lookup Table (4D)',...
        'Lookup Tables/PS Lookup Table (4D)',...
        false,...
        {},...
        lPrms('x1','x2','x3','x4','f'),...
        {};
        'nonlinear.abs',...
        'Nonlinear Operators/PS Abs',...
        'Nonlinear Operators/PS Abs',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.ceil',...
        'Nonlinear Operators/PS Ceil',...
        'Nonlinear Operators/PS Ceil',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.dead_zone',...
        'Nonlinear Operators/PS Dead Zone',...
        'Nonlinear Operators/PS Dead Zone',...
        false,...
        {},...
        lPrms('upper_limit','lower_limit'),...
        {};
        'nonlinear.fix',...
        'Nonlinear Operators/PS Fix',...
        'Nonlinear Operators/PS Fix',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.floor',...
        'Nonlinear Operators/PS Floor',...
        'Nonlinear Operators/PS Floor',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.max',...
        'Nonlinear Operators/PS Max',...
        'Nonlinear Operators/PS Max',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.min',...
        'Nonlinear Operators/PS Min',...
        'Nonlinear Operators/PS Min',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.round',...
        'Nonlinear Operators/PS Round',...
        'Nonlinear Operators/PS Round',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.saturation',...
        'Nonlinear Operators/PS Saturation',...
        'Nonlinear Operators/PS Saturation',...
        false,...
        {},...
        lPrms('upper_limit','lower_limit'),...
        {};
        'nonlinear.sign',...
        'Nonlinear Operators/PS Sign',...
        'Nonlinear Operators/PS Sign',...
        false,...
        {},...
        {},...
        {};
        'nonlinear.controlled_switch',...
        'Nonlinear Operators/PS Switch',...
        'Nonlinear Operators/PS Switch',...
        false,...
        {},...
        lPrms('Threshold'),...
        {};
        'periodic_operators.constant_offset',...
        'Periodic Operators/PS Constant Offset Estimator',...
        'Periodic Operators/PS Constant Offset Estimator',...
        false,...
        {},...
        {},...
        {};
        'periodic_operators.harmonic_estimator_amplitude_phase',...
        'Periodic Operators/PS Harmonic Estimator (Amplitude, Phase)',...
        'Periodic Operators/PS Harmonic Estimator (Amplitude, Phase)',...
        false,...
        {},...
        lPrms('amplMin'),...
        {};
        'periodic_operators.harmonic_estimator_real_imag',...
        'Periodic Operators/PS Harmonic Estimator (Real, Imaginary)',...
        'Periodic Operators/PS Harmonic Estimator (Real, Imaginary)',...
        false,...
        {},...
        {},...
        {};
        'periodic_operators.RMS',...
        'Periodic Operators/PS RMS Estimator',...
        'Periodic Operators/PS RMS Estimator',...
        false,...
        {},...
        {},...
        {};
        'sinks.terminator',...
        'Sinks/PS Terminator',...
        'Sinks/PS Terminator',...
        true,...
        {},...
        {},...
        {};
        'sources.counter',...
        'Sources/Counter',...
        'Sources/PS Counter',...
        true,...
        {},...
        {},...
        {};
        'sources.constant',...
        'Sources/PS Constant',...
        'Sources/PS Constant',...
        true,...
        {},...
        lPrms('constant'),...
        {};
        'sources.random_number',...
        'Sources/Random Number',...
        'Sources/PS Random Number',...
        true,...
        {},...
        {},...
        {};
        'sources.repeating_sequence',...
        'Sources/Repeating Sequence',...
        'Sources/PS Repeating Sequence',...
        true,...
        {},...
        {},...
        {};
        'sources.uniform_random_number',...
        'Sources/Uniform Random Number',...
        'Sources/PS Uniform Random Number',...
        true,...
        {},...
        {},...
        {}
        };

        listData=struct('oldPth',strcat([oldPth,'.'],data(:,1)),...
        'oldLib',strcat([oldLib,'/'],data(:,2)),...
        'newPth',strcat([newPth,'.'],data(:,1)),...
        'newLib',strcat([newLib,'/'],data(:,3)),...
        'legacyLib',strcat([legacyLib,'/'],data(:,2)),...
        'auto',data(:,4),...
        'unitUpgrade',data(:,5),...
        'unitRevert',data(:,6),...
        'eqValidate',data(:,7));
    end

    list=listData;

end



function out=lPrms(varargin)
    out=[strcat(varargin,'_unit')',repmat({'1'},numel(varargin),1)];
end