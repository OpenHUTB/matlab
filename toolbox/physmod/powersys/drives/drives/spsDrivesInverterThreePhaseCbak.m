
function[]=spsDrivesInverterThreePhaseCbak(block,cbakMode)



    detailLevel=get_param(block,'detailLevel');
    internalBlock=block;
    maskObj=Simulink.Mask.get(block);
    machineGroup=maskObj.getDialogControl('machineGroup');
    inverterGroup=maskObj.getDialogControl('inverterGroup');

    switch detailLevel
    case 'Detailed'



        variant='Detailed';
        if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
            set_param(block,'LabelModeActiveChoice',variant);
        end

        deviceType=get_param(block,'Device');
        internalBlock=[internalBlock,'/Detailed/Detailed'];


        inverterGroup.Visible='on';


        machineGroup.Visible='off';

        switch cbakMode
        case 'init'


            set_param(internalBlock,'Device',deviceType);
            set_param(internalBlock,'Measurements',get_param(block,'Measurements'));
            set_param(internalBlock,'SnubberResistance',get_param(block,'SnubberResistance'));
            set_param(internalBlock,'SnubberCapacitance',get_param(block,'SnubberCapacitance'));
            set_param(internalBlock,'Ron',get_param(block,'Ron'));
        end

        switch deviceType
        case 'MOSFET / Diodes'
            forwardVoltages='off';
            fallTailTimeGto='off';
            fallTailTimeIgbt='off';
        case 'GTO / Diodes'
            forwardVoltages='on';
            fallTailTimeGto='on';
            fallTailTimeIgbt='off';
            switch cbakMode
            case 'init'


                set_param(internalBlock,'ForwardVoltages',get_param(block,'ForwardVoltages'));
                set_param(internalBlock,'GTOparameters',get_param(block,'GTOparameters'));
            end
        case 'IGBT / Diodes'
            forwardVoltages='on';
            fallTailTimeGto='off';
            fallTailTimeIgbt='on';
            switch cbakMode
            case 'init'


                set_param(internalBlock,'ForwardVoltages',get_param(block,'ForwardVoltages'));
                set_param(internalBlock,'IGBTparameters',get_param(block,'IGBTparameters'));
            end
        otherwise
            error(message('physmod:powersys:common:InvalidParameter',block,deviceType,'Power electronic device'));
        end

        maskEnables={'on',...
        'off',...
        'off',...
        'on',...
        'on',...
        'on',...
        'on',...
        'on',...
        'on',...
        'on',...
        'on',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        };
        maskVisibilities={'on',...
        'off',...
        'off',...
        'on',...
        'on',...
        'on',...
        'on',...
        forwardVoltages,...
        fallTailTimeGto,...
        fallTailTimeIgbt,...
        'on',...
        'off',...
        'on',...
        'on',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'off',...
        'on',...
        'on',...
        'on',...
        'on',...
        };

    case 'Average'

        driveType=get_param(block,'driveType');

        switch driveType
        case 'Field-oriented control'


            variant='Average_FOC';
            if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
                set_param(block,'LabelModeActiveChoice',variant);
            end


            inverterGroup.Visible='on';


            machineGroup.Visible='on';


            maskEnables={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'on',...
            'on',...
            };
            maskVisibilities={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'on',...
            'on',...
            };

        case 'Space vector modulation'


            variant='Average_SVM';
            if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
                set_param(block,'LabelModeActiveChoice',variant);
            end


            inverterGroup.Visible='off';


            machineGroup.Visible='off';

            maskEnables={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            };
            maskVisibilities={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            };

        case 'WFSM vector control'


            variant='Average_WFSM';
            if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
                set_param(block,'LabelModeActiveChoice',variant);
            end


            inverterGroup.Visible='on';


            machineGroup.Visible='on';

            maskEnables={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            };
            maskVisibilities={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            };
        case 'PMSM vector control'


            variant='Average_PMSM';
            if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
                set_param(block,'LabelModeActiveChoice',variant);
            end


            inverterGroup.Visible='on';


            machineGroup.Visible='on';

            maskEnables={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'on',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            };
            maskVisibilities=maskEnables;

        case 'Brushless DC'


            variant='Average_Brushless_DC';
            if~isequal(get_param(block,'LabelModeActiveChoice'),variant)
                set_param(block,'LabelModeActiveChoice',variant);
            end


            inverterGroup.Visible='on';


            machineGroup.Visible='on';

            maskEnables={'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'off',...
            };
            maskVisibilities=maskEnables;

        otherwise
            error(message('physmod:powersys:common:InvalidParameter',block,driveType,'Drive type'));
        end
    otherwise
        error(message('physmod:powersys:common:InvalidParameter',block,detailLevel,'Model detail level'));
    end
    if sps_Authoring(bdroot(block))
        set_param(block,'MaskEnables',maskEnables);
    end
    set_param(block,'MaskVisibilities',maskVisibilities);
