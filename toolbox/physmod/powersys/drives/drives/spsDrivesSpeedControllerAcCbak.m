function[]=spsDrivesSpeedControllerAcCbak(block,cbakMode)

    ctrlType=get_param(block,'ctrlType');
    regulType=get_param(block,'SwK');
    internalBlock=[block,'/Speed Controller (AC)'];
    ports=get_param(block,'Ports');
    nbInPorts=ports(1);
    haveFluxOutput=(nbInPorts==3);

    switch ctrlType
    case 'With flux reference output'
        variant='AC345';
        if~isequal(get_param(internalBlock,'LabelModeActiveChoice'),variant)
            set_param(internalBlock,'LabelModeActiveChoice',variant);
        end

        if(strcmp(cbakMode,'init')&&~haveFluxOutput)
            blk=replace_block(block,'FollowLinks','on','Name','MagC','Parent',block,'Inport','noprompt');
            set_param(blk{1},'ForegroundColor','blue');
            blk=replace_block(block,'FollowLinks','on','Name','Flux*','Parent',block,'Outport','noprompt');
            set_param(blk{1},'ForegroundColor','blue');
        end
        switch regulType
        case 'Speed regulation'
            maskEnables={...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
'on'...
            };
        case 'Torque regulation'
            maskEnables={...
            'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'on',...
            'on',...
'on'...
            };
        otherwise
            error(message('physmod:powersys:common:InvalidParameter',block,regulType,'Regulation type'));
        end
    case 'Without flux reference output'
        variant='AC678';
        if~isequal(get_param(internalBlock,'LabelModeActiveChoice'),variant)
            set_param(internalBlock,'LabelModeActiveChoice',variant);
        end
        if(strcmp(cbakMode,'init')&&haveFluxOutput)
            replace_block(block,'FollowLinks','on','Name','MagC','Parent',block,'Ground','noprompt');
            replace_block(block,'FollowLinks','on','Name','Flux*','Parent',block,'Terminator','noprompt');
        end
        switch regulType
        case 'Speed regulation'
            maskEnables={...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'on',...
            'off',...
            'off',...
'off'...
            };
        case 'Torque regulation'
            maskEnables={...
            'on',...
            'on',...
            'on',...
            'off',...
            'off',...
            'off',...
            'off',...
            'on',...
            'on',...
            'off',...
            'off',...
'off'...
            };
        otherwise
            error(message('physmod:powersys:common:InvalidParameter',block,regulType,'Regulation type'));
        end
    otherwise
        error(message('physmod:powersys:common:InvalidParameter',block,ctrlType,'Controller type'));
    end
    if sps_Authoring(bdroot(block))
        set_param(block,'MaskEnables',maskEnables);
    end
