classdef GeneralizedSymbolDemodulator<matlab.System






%#codegen


    properties(Nontunable)

        ModulationSource='Property';

        ModulationScheme='BPSK';

        MaxModulation='256-QAM';

        ConstOrder='Default';

        ConstMap=[2,3,1,0,6,7,5,4,14,15,13,12,10,11,9,8];

        DecisionType='Approximate log-likelihood ratio';

        PhaseOffset='pi/2';

        OutputType='Vector';

        NormMethod='Unit average power';

        MinSymDistance=2;

        NoiseVariance(1,1)logical=false;
    end

    properties(Constant,Hidden)
        ModulationSourceSet=matlab.system.StringSet({...
        'Input port','Property'});

        ConstOrderSet=matlab.system.StringSet({...
        'Default','User-defined'});

        ModulationSchemeSet=matlab.system.StringSet({...
        'BPSK','QPSK','8-PSK','16-PSK','16-QAM','32-PSK','64-QAM','256-QAM'});

        DecisionTypeSet=matlab.system.StringSet({...
        'Hard','Approximate log-likelihood ratio'});

        PhaseOffsetSet=matlab.system.StringSet({...
        'pi/2','pi/4','pi/8','pi/16','pi/32','0','-pi/32','-pi/16','-pi/8','-pi/4','-pi/2'});

        OutputTypeSet=matlab.system.StringSet({...
        'Scalar','Vector'});

        MaxModulationSet=matlab.system.StringSet({...
        'BPSK','QPSK','8-PSK','16-PSK','16-QAM','32-PSK','64-QAM','256-QAM'});

        NormMethodSet=matlab.system.StringSet({...
        'Unit average power','Custom'});
    end


    properties(Access=private)
        inpSCap;
        buffmodSelReg;
        buffmodSelReg1;
        buffindex;
        buffindexPlus2;
        buffindex1;
        outLLRReg;
        outLLRReg1;
        inpVecLLROut;
        buffAppendVecLLR;
        ctrlOut;
        ctrlOut1;
        tempLLROut;
        tempLLROut1;
        defaultLLROut;
        outValidReg;
        outValidReg1;
        InPhaseReg;
        QPhaseReg;
        InPhaseReg1;
        QPhaseReg1;
        pskMappedReg;
        pskMappedReg1;
        modSelReg;
        modSelReg1;
        refConstPoint;
        LValues;
        valueLReg;
        qamTableUpdate;
        qamTableUpdate1;
        qamTableUpdateScalar;
        lookUpTable02;
        lookUpTable04;
        lookUpTable08;
        lookUpTable16;
        lookUpTable32;
        lookUpSine02;
        lookUpCos02;
        lookUpSine04;
        lookUpCos04;
        lookUpSine08;
        lookUpCos08;
        lookUpSine16;
        lookUpCos16;
        lookUpSine32;
        lookUpCos32;
        llrComputeBlk;
        QAMBlockConv;
        PSKConvBlock;
        tempLvals;
        llrComputeVec1;
        llrComputeVec2;
        LValuesTemp;
        qValuesReal;
        qValuesImag;
        valid1;
        valid2;
        valid3;
        validpsk;
        validqam;
        validqam1;
        buffInPhaseReg;
        buffQPhaseReg;
        buffpskMappedReg;
        buffpskMappedReg1;
        buffqValuesReal;
        buffqValuesImag;
        buffqValuesReal1;
        buffqValuesImag1;
        buffindexBlock;
        count;
        count1;
        index;
        indexReg;
        readyReg;
        buffSCapBlk1;
        buffSCapBlk2;
        buffSCapBlk3;
        buffqRealBlk1;
        buffqImagBlk1;
        buffinpSCap;
        buffinpSCap1;
        reminpSCap2;
        reminpSCap3;
        remValid2;
        remValid3;
        delayUnit;
        delayUnit1;
        delayCoeffSign;
        delayEndBlk;
        delayStartBlk;
        startReg;
        endReg;
        startInp;
        validInp;
        endInp;
        delaypskConv;
        buffpskConvBlk;
        buffpskConvBlk1;
        valPSK;
        buffLLROutIndex;
        buffAppendIndex;
        startInDelayedSig;
        endInDelayedSig;
        endFirstOut;
        startFirstOut;
        nVariance;
        nVariance1;
        inpVecCntr1;
        inpVecCntr2;
        countFreeze;
        validLLRcomp;
        cond_val;
        keyInpScalar;
        pskInpScalar;
        pskInpScalar1;
        qamInpScalar;
        qamInpScalar1;
        remIndex;
        mappedBits;
        shuffleOrder;
        shuffleOrder16;
        shuffleOrder64;
        shuffleOrderFin;
        coeffSign;
        coeffSign16;
        coeffSign64;
        coeffSignFin;
        buffCoeffSign;
        signCalc;
        delaySignCalc;
        buffSignCalc;
        llrInVecOrder;
        llrQVecOrder;
        signCalcScalar;
        llrInVecOrderScalar;
        llrQVecOrderScalar;
        LValues16UnitPower;
        LValues64UnitPower;
        LValues256UnitPower;
        index1;
        index2;
        index3;
        llrvec1Index;
        tanConsts;
        gap;
        LUTvalue;
        LUTvalue2;
        LUTvalue4;
        LUTvalue8;
        LUTvalue16;
        LUTvalue32;
        distbwSymbols;
        dataIn;
        nVarDelay;
        countInVec;
        pipelineData;
        pipelineValid;
        pipelineStart;
        pipelineEnd;
        pipelineValidVec;
        LValues02;
        LValues04;
        LValues08;
    end

    properties(Access=private,Nontunable)
        llrLen;
        defaultLen;
    end

    methods

        function obj=GeneralizedSymbolDemodulator(varargin)

            coder.allowpcode('plain');
            if coder.target('MATLAB')
                if~(builtin('license','checkout','LTE_HDL_Toolbox'))
                    error(message('whdl:whdl:NoLicenseAvailable'));
                end
            else
                coder.license('checkout','LTE_HDL_Toolbox');
            end
            setProperties(obj,nargin,varargin{:})
        end
        function set.MinSymDistance(obj,val)
            validateattributes(val,{'double','single','embedded.fi'},{'real',...
            'scalar','>=',1/32,'<=',2},'GeneralizedSymbolDemodulator','MinSymDistance');
            if(isa(val,'embedded.fi'))
                WL=val.WordLength;
                FL=val.FractionLength;
                if(WL-FL)>2||val.Signed==1
                    coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidMinDisWordLength');
                end
            end
            obj.MinSymDistance=val;
        end
        function set.ConstMap(obj,val)
            coder.extrinsic('tostringInternalSlName')

            if((strcmpi(obj.ModulationSource,'Property'))&&((strcmpi(obj.ModulationScheme,'16-QAM'))||(strcmp(obj.ModulationScheme,'64-QAM'))||...
                (strcmp(obj.ModulationScheme,'256-QAM'))))||((~strcmpi(obj.ModulationSource,'Property'))&&((strcmpi(obj.MaxModulation,'16-QAM'))||...
                (strcmpi(obj.MaxModulation,'64-QAM'))||(strcmpi(obj.MaxModulation,'256-QAM'))))%#ok

                if(strcmpi(obj.ModulationSource,'Property'))%#ok
                    if(strcmpi(obj.ModulationScheme,'16-QAM'))%#ok
                        modulationIndex=16;
                        key=true;
                    elseif(strcmp(obj.ModulationScheme,'64-QAM'))%#ok
                        modulationIndex=64;
                        key=true;
                    else
                        modulationIndex=256;
                        key=true;
                    end
                    defaultOrder=[2,3,1,0,6,7,5,4,14,15,13,12,10,11,9,8];
                else
                    if(strcmpi(obj.MaxModulation,'16-QAM'))%#ok
                        modulationIndex=16;
                        key=true;
                    elseif(strcmp(obj.MaxModulation,'64-QAM'))%#ok
                        modulationIndex=64;
                        key=true;
                    else
                        modulationIndex=256;
                        key=true;
                    end
                    defaultOrder=[2,3,1,0,6,7,5,4,14,15,13,12,10,11,9,8];
                end

                if strcmpi(obj.ConstOrder,'Default')%#ok
                    key=false;
                end

                if isempty(coder.target)||~coder.internal.isAmbiguousTypes
                    if(key)
                        inOrder=zeros(1,sqrt(modulationIndex));
                        qOrder=zeros(1,sqrt(modulationIndex));
                        order1=zeros(1,sqrt(modulationIndex));
                        order2=zeros(1,sqrt(modulationIndex));
                        order3=zeros(1,sqrt(modulationIndex));
                        order4=zeros(1,sqrt(modulationIndex));
                        if((length(unique(val))==modulationIndex)&&(length(unique(val))==length(val)))
                            if(modulationIndex==16)
                                order1=[0,1,3,2];
                                order2=[2,3,1,0];
                                order3=[3,2,0,1];
                                order4=[1,0,2,3];
                                [inOrder(1),c1]=obj.mappedValueAtPosition(val(1:4),modulationIndex);
                                [inOrder(2),c2]=obj.mappedValueAtPosition(val(5:8),modulationIndex);
                                [inOrder(3),c3]=obj.mappedValueAtPosition(val(9:12),modulationIndex);
                                [inOrder(4),c4]=obj.mappedValueAtPosition(val(13:16),modulationIndex);
                                [qOrder(1),c5]=obj.mappedValueAtPosition(val(1:4:16),modulationIndex);
                                [qOrder(2),c6]=obj.mappedValueAtPosition(val(2:4:16),modulationIndex);
                                [qOrder(3),c7]=obj.mappedValueAtPosition(val(3:4:16),modulationIndex);
                                [qOrder(4),c8]=obj.mappedValueAtPosition(val(4:4:16),modulationIndex);
                                condition_val=c1&&c2&&c3&&c4&&c5&&c6&&c7&&c8;
                            elseif(modulationIndex==64)
                                order1=[0,1,3,2,6,7,5,4];
                                order2=[4,5,7,6,2,3,1,0];
                                order3=[7,6,4,5,1,0,2,3];
                                order4=[3,2,0,1,5,4,6,7];
                                [inOrder(1),c1]=obj.mappedValueAtPosition(val(1:8),modulationIndex);
                                [inOrder(2),c2]=obj.mappedValueAtPosition(val(9:16),modulationIndex);
                                [inOrder(3),c3]=obj.mappedValueAtPosition(val(17:24),modulationIndex);
                                [inOrder(4),c4]=obj.mappedValueAtPosition(val(25:32),modulationIndex);
                                [inOrder(5),c5]=obj.mappedValueAtPosition(val(33:40),modulationIndex);
                                [inOrder(6),c6]=obj.mappedValueAtPosition(val(41:48),modulationIndex);
                                [inOrder(7),c7]=obj.mappedValueAtPosition(val(49:56),modulationIndex);
                                [inOrder(8),c8]=obj.mappedValueAtPosition(val(57:64),modulationIndex);
                                [qOrder(1),b1]=obj.mappedValueAtPosition(val(1:8:64),modulationIndex);
                                [qOrder(2),b2]=obj.mappedValueAtPosition(val(2:8:64),modulationIndex);
                                [qOrder(3),b3]=obj.mappedValueAtPosition(val(3:8:64),modulationIndex);
                                [qOrder(4),b4]=obj.mappedValueAtPosition(val(4:8:64),modulationIndex);
                                [qOrder(5),b5]=obj.mappedValueAtPosition(val(5:8:64),modulationIndex);
                                [qOrder(6),b6]=obj.mappedValueAtPosition(val(6:8:64),modulationIndex);
                                [qOrder(7),b7]=obj.mappedValueAtPosition(val(7:8:64),modulationIndex);
                                [qOrder(8),b8]=obj.mappedValueAtPosition(val(8:8:64),modulationIndex);
                                condition_val=c1&&c2&&c3&&c4&&c5&&c6&&c7&&c8&&...
                                b1&&b2&&b3&&b4&&b5&&b6&&b7&&b8;
                            else
                                order1=[0,1,3,2,6,7,5,4,12,13,15,14,10,11,9,8];
                                order2=[8,9,11,10,14,15,13,12,4,5,7,6,2,3,1,0];
                                order3=[15,14,12,13,9,8,10,11,3,2,0,1,5,4,6,7];
                                order4=[7,6,4,5,1,0,2,3,11,10,8,9,13,12,14,15];
                                [inOrder(1),c1]=obj.mappedValueAtPosition(val(1:16),modulationIndex);
                                [inOrder(2),c2]=obj.mappedValueAtPosition(val(17:32),modulationIndex);
                                [inOrder(3),c3]=obj.mappedValueAtPosition(val(33:48),modulationIndex);
                                [inOrder(4),c4]=obj.mappedValueAtPosition(val(49:64),modulationIndex);
                                [inOrder(5),c5]=obj.mappedValueAtPosition(val(65:80),modulationIndex);
                                [inOrder(6),c6]=obj.mappedValueAtPosition(val(81:96),modulationIndex);
                                [inOrder(7),c7]=obj.mappedValueAtPosition(val(97:112),modulationIndex);
                                [inOrder(8),c8]=obj.mappedValueAtPosition(val(113:128),modulationIndex);
                                [inOrder(9),c9]=obj.mappedValueAtPosition(val(129:144),modulationIndex);
                                [inOrder(10),c10]=obj.mappedValueAtPosition(val(145:160),modulationIndex);
                                [inOrder(11),c11]=obj.mappedValueAtPosition(val(161:176),modulationIndex);
                                [inOrder(12),c12]=obj.mappedValueAtPosition(val(177:192),modulationIndex);
                                [inOrder(13),c13]=obj.mappedValueAtPosition(val(193:208),modulationIndex);
                                [inOrder(14),c14]=obj.mappedValueAtPosition(val(209:224),modulationIndex);
                                [inOrder(15),c15]=obj.mappedValueAtPosition(val(225:240),modulationIndex);
                                [inOrder(16),c16]=obj.mappedValueAtPosition(val(241:256),modulationIndex);
                                [qOrder(1),b1]=obj.mappedValueAtPosition(val(1:16:256),modulationIndex);
                                [qOrder(2),b2]=obj.mappedValueAtPosition(val(2:16:256),modulationIndex);
                                [qOrder(3),b3]=obj.mappedValueAtPosition(val(3:16:256),modulationIndex);
                                [qOrder(4),b4]=obj.mappedValueAtPosition(val(4:16:256),modulationIndex);
                                [qOrder(5),b5]=obj.mappedValueAtPosition(val(5:16:256),modulationIndex);
                                [qOrder(6),b6]=obj.mappedValueAtPosition(val(6:16:256),modulationIndex);
                                [qOrder(7),b7]=obj.mappedValueAtPosition(val(7:16:256),modulationIndex);
                                [qOrder(8),b8]=obj.mappedValueAtPosition(val(8:16:256),modulationIndex);
                                [qOrder(9),b9]=obj.mappedValueAtPosition(val(9:16:256),modulationIndex);
                                [qOrder(10),b10]=obj.mappedValueAtPosition(val(10:16:256),modulationIndex);
                                [qOrder(11),b11]=obj.mappedValueAtPosition(val(11:16:256),modulationIndex);
                                [qOrder(12),b12]=obj.mappedValueAtPosition(val(12:16:256),modulationIndex);
                                [qOrder(13),b13]=obj.mappedValueAtPosition(val(13:16:256),modulationIndex);
                                [qOrder(14),b14]=obj.mappedValueAtPosition(val(14:16:256),modulationIndex);
                                [qOrder(15),b15]=obj.mappedValueAtPosition(val(15:16:256),modulationIndex);
                                [qOrder(16),b16]=obj.mappedValueAtPosition(val(16:16:256),modulationIndex);
                                condition_val=c1&&c2&&c3&&c4&&c5&&c6&&c7&&c8&&...
                                c9&&c10&&c11&&c12&&c13&&c14&&c15&&c16&&...
                                b1&&b2&&b3&&b4&&b5&&b6&&b7&&b8&&...
                                b9&&b10&&b11&&b12&&b13&&b14&&b15&&b16;
                            end
                        else
                            condition_val=false;
                        end

                        if(condition_val)
                            if((isequal(inOrder,order1)||isequal(inOrder,order2)||isequal(inOrder,order3)||isequal(inOrder,order4))...
                                &&(isequal(qOrder,order1)||isequal(qOrder,order2)||isequal(qOrder,order3)||isequal(qOrder,order4)))
                                check=true;
                            else
                                check=false;
                            end
                        else
                            check=false;
                        end
                        if(~check)
                            coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidConstellationMap');
                        end
                    end
                end
                if~strcmpi(obj.ConstOrder,'Default')%#ok
                    obj.ConstMap=val;
                else
                    obj.ConstMap=defaultOrder;
                end

            end
        end
    end

    methods(Access=public)
        function latency=getLatency(obj)
            if(obj.NoiseVariance)&&strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                latency=0;
            else
                if(strcmp(obj.ModulationSource,'Property'))
                    if(strcmpi(obj.OutputType,'Vector'))
                        if(strcmp(obj.ModulationScheme,'BPSK'))
                            latency=7;
                        elseif(strcmp(obj.ModulationScheme,'QPSK'))
                            latency=5;
                        elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                            latency=7;
                        elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                            latency=9;
                        elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                            latency=11;
                        elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                            latency=6;
                        elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                            latency=11;
                        else
                            latency=11;
                        end
                    else
                        if(strcmp(obj.ModulationScheme,'BPSK'))
                            latency=5;
                        elseif(strcmp(obj.ModulationScheme,'QPSK'))
                            latency=7;
                        elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                            latency=7;
                        elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                            latency=9;
                        elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                            latency=12;
                        elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                            latency=11;
                        elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                            latency=15;
                        else
                            latency=15;
                        end
                    end
                else
                    if(strcmpi(obj.OutputType,'Vector'))
                        if(strcmp(obj.MaxModulation,'BPSK'))
                            latency=5;
                        elseif(strcmp(obj.MaxModulation,'QPSK'))
                            latency=7;
                        elseif(strcmp(obj.MaxModulation,'8-PSK'))
                            latency=9;
                        elseif(strcmp(obj.MaxModulation,'16-PSK'))
                            latency=12;
                        elseif(strcmp(obj.MaxModulation,'32-PSK'))
                            latency=12;
                        elseif(strcmp(obj.MaxModulation,'16-QAM'))
                            latency=14;
                        elseif(strcmp(obj.MaxModulation,'64-QAM'))
                            latency=16;
                        else
                            latency=16;
                        end
                    else
                        if(strcmp(obj.MaxModulation,'BPSK'))
                            latency=5;
                        elseif(strcmp(obj.MaxModulation,'QPSK'))
                            latency=8;
                        elseif(strcmp(obj.MaxModulation,'8-PSK'))
                            latency=8;
                        elseif(strcmp(obj.MaxModulation,'16-PSK'))
                            latency=10;
                        elseif(strcmp(obj.MaxModulation,'32-PSK'))
                            latency=11;
                        elseif(strcmp(obj.MaxModulation,'16-QAM'))
                            latency=12;
                        elseif(strcmp(obj.MaxModulation,'64-QAM'))
                            latency=15;
                        else
                            latency=15;
                        end
                    end
                end
            end
        end

    end

    methods(Access=protected)


        function supported=supportsMultipleInstanceImpl(~)

            supported=true;
        end

        function setupImpl(obj,varargin)
            dIn=varargin{1};
            if(strcmp(obj.ModulationSource,'Property'))
                if(strcmp(obj.ModulationScheme,'BPSK'))
                    defaultLength=1;
                elseif(strcmp(obj.ModulationScheme,'QPSK'))
                    defaultLength=2;
                elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                    defaultLength=3;
                elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                    defaultLength=4;
                elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                    defaultLength=5;
                elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                    defaultLength=4;
                elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                    defaultLength=6;
                else
                    defaultLength=8;
                end
                if(strcmpi(obj.OutputType,'Vector'))
                    llrLength=defaultLength;
                else
                    llrLength=1;
                end
            else
                if(strcmpi(obj.MaxModulation,'BPSK'))
                    defaultLength=1;
                elseif(strcmpi(obj.MaxModulation,'QPSK'))
                    defaultLength=2;
                elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                    defaultLength=3;
                elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                    defaultLength=4;
                elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                    defaultLength=5;
                elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                    defaultLength=4;
                elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                    defaultLength=6;
                else
                    defaultLength=8;
                end
                if(strcmpi(obj.OutputType,'Vector'))
                    llrLength=defaultLength;
                else
                    llrLength=1;
                end
            end

            obj.shuffleOrder=fi(zeros(1,8),0,9,0,hdlfimath);

            if(~isfloat(dIn))
                if(strcmp(obj.ModulationSource,'Property'))
                    if(obj.NoiseVariance)
                        bitGrowth=4;
                        noiseVar=varargin{3};
                        if isa(noiseVar,'uint8')
                            obj.nVariance=fi(1,0,8,0,hdlfimath);
                            obj.nVariance1=fi(1,0,8,0,hdlfimath);
                            nVar.WordLength=8;
                            nVar.FractionLength=0;
                        elseif isa(noiseVar,'uint16')
                            obj.nVariance=fi(1,0,16,0,hdlfimath);
                            obj.nVariance1=fi(1,0,16,0,hdlfimath);
                            nVar.WordLength=16;
                            nVar.FractionLength=0;
                        else
                            obj.nVariance=fi(1,0,noiseVar.WordLength,noiseVar.FractionLength,hdlfimath);
                            obj.nVariance1=fi(1,0,noiseVar.WordLength,noiseVar.FractionLength,hdlfimath);
                            nVar.WordLength=noiseVar.WordLength;
                            nVar.FractionLength=noiseVar.FractionLength;
                        end
                    else
                        bitGrowth=4;
                        nVar.WordLength=0;
                        nVar.FractionLength=0;
                        obj.nVariance1=fi(1,0,8,0,hdlfimath);
                    end
                else
                    if(obj.NoiseVariance)
                        bitGrowth=4;
                        noiseVar=varargin{4};
                        if isa(noiseVar,'uint8')
                            obj.nVariance=fi(1,0,8,0,hdlfimath);
                            obj.nVariance1=fi(1,0,8,0,hdlfimath);
                            nVar.WordLength=8;
                            nVar.FractionLength=0;
                        elseif isa(noiseVar,'uint16')
                            obj.nVariance=fi(1,0,16,0,hdlfimath);
                            obj.nVariance1=fi(1,0,16,0,hdlfimath);
                            nVar.WordLength=16;
                            nVar.FractionLength=0;
                        else
                            obj.nVariance=fi(1,0,noiseVar.WordLength,noiseVar.FractionLength,hdlfimath);
                            obj.nVariance1=fi(1,0,noiseVar.WordLength,noiseVar.FractionLength,hdlfimath);
                            nVar.WordLength=noiseVar.WordLength;
                            nVar.FractionLength=noiseVar.FractionLength;
                        end
                    else
                        bitGrowth=4;
                        nVar.WordLength=0;
                        nVar.FractionLength=0;
                        obj.nVariance1=fi(1,0,8,0,hdlfimath);
                    end
                end
                if isa(dIn,'int8')
                    inpData=fi(0,1,8+bitGrowth+11,11);
                elseif(isa(dIn,'int16'))
                    inpData=fi(0,1,16+bitGrowth+11,11);
                elseif(isa(dIn,'int32'))
                    inpData=fi(0,1,32+bitGrowth+11,11);
                else
                    inpData.WordLength=dIn.WordLength+bitGrowth;
                    inpData.FractionLength=dIn.FractionLength;
                end
                obj.dataIn=fi(complex(0),1,inpData.WordLength-bitGrowth,inpData.FractionLength,hdlfimath);
                obj.inpSCap=fi(complex(0),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffinpSCap=fi(complex(0),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffinpSCap1=fi(complex(0),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.modSelReg=fi(0,0,6,0,hdlfimath);
                obj.modSelReg1=fi(0,0,6,0,hdlfimath);
                obj.buffmodSelReg=fi(0,0,6,0,hdlfimath);
                obj.buffmodSelReg1=fi(0,0,6,0,hdlfimath);
                obj.InPhaseReg=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.QPhaseReg=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.InPhaseReg1=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.QPhaseReg1=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.pskMappedReg=fi(complex(zeros(4,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.pskMappedReg1=fi(complex(zeros(4,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.valueLReg=fi(0,1,16,11,hdlfimath);
                obj.tempLLROut=fi(zeros(llrLength,1),1,inpData.WordLength+nVar.FractionLength,inpData.FractionLength+nVar.FractionLength,'RoundingMethod','Zero','OverflowAction','Saturate');
                if isa(dIn,'int8')||(isa(dIn,'int16'))||(isa(dIn,'int32'))
                    if(obj.NoiseVariance)
                        obj.tempLLROut1=fi(zeros(llrLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,'RoundingMethod','Zero','OverflowAction','Saturate');
                        obj.inpVecLLROut=fi(zeros(2*llrLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,hdlfimath);
                        obj.buffAppendVecLLR=fi(zeros(2*llrLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,hdlfimath);
                        obj.outLLRReg=fi(zeros(llrLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,hdlfimath);
                        obj.outLLRReg1=fi(zeros(llrLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,hdlfimath);
                        obj.defaultLLROut=fi(zeros(defaultLength,1),1,inpData.WordLength+9-11,inpData.FractionLength-11,hdlfimath);
                    else
                        obj.tempLLROut1=fi(zeros(llrLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                        obj.inpVecLLROut=fi(zeros(2*llrLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                        obj.buffAppendVecLLR=fi(zeros(2*llrLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                        obj.outLLRReg=fi(zeros(llrLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                        obj.outLLRReg1=fi(zeros(llrLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                        obj.defaultLLROut=fi(zeros(defaultLength,1),1,inpData.WordLength-11,inpData.FractionLength-11,hdlfimath);
                    end
                else
                    if(obj.NoiseVariance)
                        obj.tempLLROut1=fi(zeros(llrLength,1),1,inpData.WordLength+9,inpData.FractionLength,'RoundingMethod','Zero','OverflowAction','Saturate');
                        obj.inpVecLLROut=fi(zeros(2*llrLength,1),1,inpData.WordLength+9,inpData.FractionLength,hdlfimath);
                        obj.buffAppendVecLLR=fi(zeros(2*llrLength,1),1,inpData.WordLength+9,inpData.FractionLength,hdlfimath);
                        obj.outLLRReg=fi(zeros(llrLength,1),1,inpData.WordLength+9,inpData.FractionLength,hdlfimath);
                        obj.outLLRReg1=fi(zeros(llrLength,1),1,inpData.WordLength+9,inpData.FractionLength,hdlfimath);
                        obj.defaultLLROut=fi(zeros(defaultLength,1),1,inpData.WordLength+9,inpData.FractionLength,hdlfimath);
                    else
                        obj.tempLLROut1=fi(zeros(llrLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                        obj.inpVecLLROut=fi(zeros(2*llrLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                        obj.buffAppendVecLLR=fi(zeros(2*llrLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                        obj.outLLRReg=fi(zeros(llrLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                        obj.outLLRReg1=fi(zeros(llrLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                        obj.defaultLLROut=fi(zeros(defaultLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                    end
                end
                obj.llrComputeVec1=fi(complex(zeros(llrLength,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.llrComputeVec2=fi(complex(zeros(llrLength,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.qamTableUpdate=fi(complex(zeros(10,1)),1,16,11,hdlfimath);
                obj.qamTableUpdate1=fi(complex(zeros(10,1)),1,16,11,hdlfimath);
                obj.qamTableUpdateScalar=fi(complex(zeros(10,1)),1,16,11,hdlfimath);
                obj.lookUpTable02=fi([exp(1i*(pi/2)),exp(1i*((3*pi)/2))],1,16,14,hdlfimath);
                obj.lookUpTable04=fi([exp(1i*(pi/4)),exp(1i*((3*pi)/4)),exp(1i*((7*pi)/4))],1,16,14,hdlfimath);
                obj.lookUpTable08=fi([exp(1i*(pi/8)),exp(1i*((5*pi)/8)),exp(1i*((15*pi)/8)),exp(1i*((3*pi)/8))],1,16,14,hdlfimath);
                obj.lookUpTable16=fi([exp(1i*(pi/16)),exp(1i*((9*pi)/16)),exp(1i*((31*pi)/16)),exp(1i*((5*pi)/16)),exp(1i*((3*pi)/16))],1,16,14,hdlfimath);
                obj.lookUpTable32=fi([exp(1i*(pi/32)),exp(1i*((17*pi)/32)),exp(1i*((63*pi)/32)),exp(1i*((9*pi)/32)),exp(1i*((5*pi)/32)),exp(1i*((3*pi)/32))],1,16,14,hdlfimath);
                obj.tempLvals=fi(zeros(3,1),1,16,11,hdlfimath);
                obj.qValuesReal=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.signCalc=fi(zeros(defaultLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffSignCalc=fi(zeros(defaultLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.signCalcScalar=fi(zeros(defaultLength,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.llrInVecOrder=fi(zeros(defaultLength,1),1,8,0,hdlfimath);
                obj.llrQVecOrder=fi(zeros(defaultLength,1),1,8,0,hdlfimath);
                obj.llrInVecOrderScalar=fi(zeros(defaultLength,1),1,8,0,hdlfimath);
                obj.llrQVecOrderScalar=fi(zeros(defaultLength,1),1,8,0,hdlfimath);
                obj.qValuesImag=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.LValuesTemp=fi(zeros(4,1),1,16,11,hdlfimath);
                obj.buffInPhaseReg=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffQPhaseReg=fi(zeros(9,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffpskMappedReg=fi(complex(zeros(4,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffpskMappedReg1=fi(complex(zeros(4,1)),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffqValuesReal=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffqValuesImag=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffqValuesReal1=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.buffqValuesImag1=fi(zeros(4,1),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.reminpSCap2=fi(complex(0),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.reminpSCap3=fi(complex(0),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.tanConsts=fi([tan(pi/8),tan(pi/16)],1,16,14,hdlfimath);
                obj.qamTableUpdate(1,:)=fi(-1+1i,1,16,11,hdlfimath);
                obj.qamTableUpdate(2,:)=fi(1-1i,1,16,11,hdlfimath);
                obj.lookUpSine02=fi(sin([0,pi/4,(3*pi)/8,(7*pi)/16,(15*pi)/32,pi/2,(17*pi)/32,(9*pi)/16,(5*pi)/8,(3*pi)/4,pi]),1,16,14,hdlfimath);
                obj.lookUpCos02=fi(cos([0,pi/4,(3*pi)/8,(7*pi)/16,(15*pi)/32,pi/2,(17*pi)/32,(9*pi)/16,(5*pi)/8,(3*pi)/4,pi]),1,16,14,hdlfimath);
                obj.lookUpSine04=fi(sin([-pi/4,0,pi/8,(3*pi)/16,(7*pi)/32,pi/4,(9*pi)/32,(5*pi)/16,(3*pi)/8,pi/2,(3*pi)/4]),1,16,14,hdlfimath);
                obj.lookUpCos04=fi(cos([-pi/4,0,pi/8,(3*pi)/16,(7*pi)/32,pi/4,(9*pi)/32,(5*pi)/16,(3*pi)/8,pi/2,(3*pi)/4]),1,16,14,hdlfimath);
                obj.lookUpSine08=fi(sin([-(3*pi)/8,-pi/8,0,pi/16,(3*pi)/32,pi/8,(5*pi)/32,(3*pi)/16,pi/4,(3*pi)/8,(5*pi)/8]),1,16,14,hdlfimath);
                obj.lookUpCos08=fi(cos([-(3*pi)/8,-pi/8,0,pi/16,(3*pi)/32,pi/8,(5*pi)/32,(3*pi)/16,pi/4,(3*pi)/8,(5*pi)/8]),1,16,14,hdlfimath);
                obj.lookUpSine16=fi(sin([-(7*pi)/16,-(3*pi)/16,-pi/16,0,pi/32,pi/16,(3*pi)/32,pi/8,(3*pi)/16,(5*pi)/16,(9*pi)/16]),1,16,14,hdlfimath);
                obj.lookUpCos16=fi(cos([-(7*pi)/16,-(3*pi)/16,-pi/16,0,pi/32,pi/16,(3*pi)/32,pi/8,(3*pi)/16,(5*pi)/16,(9*pi)/16]),1,16,14,hdlfimath);
                obj.lookUpSine32=fi(sin([-(15*pi)/32,-(7*pi)/32,-(3*pi)/32,-pi/32,0,pi/32,pi/16,(3*pi)/32,(5*pi)/32,(9*pi)/32,(17*pi)/32]),1,16,14,hdlfimath);
                obj.lookUpCos32=fi(cos([-(15*pi)/32,-(7*pi)/32,-(3*pi)/32,-pi/32,0,pi/32,pi/16,(3*pi)/32,(5*pi)/32,(9*pi)/32,(17*pi)/32]),1,16,14,hdlfimath);
                obj.LValues16UnitPower=fi([2,4,8,16]*(1/(sqrt(10))),1,16,11,hdlfimath);
                obj.LValues64UnitPower=fi([2,4,8,16]*(1/(sqrt(42))),1,16,11,hdlfimath);
                obj.LValues256UnitPower=fi([2,4,8,16]*(1/(sqrt(170))),1,16,11,hdlfimath);

                if(strcmp(obj.ModulationSource,'Property'))
                    if(strcmpi(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                        if(strcmpi(obj.NormMethod,'Unit average power'))
                            if(strcmpi(obj.ModulationScheme,'16-QAM'))
                                obj.distbwSymbols=fi(1/(sqrt(10)),1,16,11,hdlfimath);
                            elseif(strcmpi(obj.ModulationScheme,'64-QAM'))
                                obj.distbwSymbols=fi(1/(sqrt(42)),1,16,11,hdlfimath);
                            else
                                obj.distbwSymbols=fi(1/(sqrt(170)),1,16,11,hdlfimath);
                            end
                        else
                            obj.distbwSymbols=fi(obj.MinSymDistance/2,1,16,11,hdlfimath);
                        end
                    else
                        obj.distbwSymbols=fi(1,1,16,11,hdlfimath);
                    end
                else
                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmp(obj.MaxModulation,'64-QAM')||strcmp(obj.MaxModulation,'256-QAM'))
                        if(strcmpi(obj.NormMethod,'Custom'))
                            obj.distbwSymbols=fi(obj.MinSymDistance/2,1,16,11,hdlfimath);
                        else
                            if(strcmpi(obj.MaxModulation,'16-QAM'))
                                obj.distbwSymbols=fi(1/(sqrt(10)),1,16,11,hdlfimath);
                            elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                                obj.distbwSymbols=fi(1/(sqrt(42)),1,16,11,hdlfimath);
                            else
                                obj.distbwSymbols=fi(1/(sqrt(170)),1,16,11,hdlfimath);
                            end
                        end
                    else
                        obj.distbwSymbols=fi(1,1,16,11,hdlfimath);
                    end
                end
                obj.LValues=fi([2,4,8,16],1,16,11,hdlfimath);
                obj.refConstPoint=fi(obj.distbwSymbols+1i*obj.distbwSymbols,1,16,11,hdlfimath);
                obj.LValues02=fi(obj.distbwSymbols*2./(2.^[1,2,3,4,5,6,7]),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.LValues04=fi(obj.distbwSymbols*4./(2.^[1,2,3,4,5,6,7]),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
                obj.LValues08=fi(obj.distbwSymbols*8./(2.^[1,2,3,4,5,6,7]),1,inpData.WordLength,inpData.FractionLength,hdlfimath);
            else
                obj.dataIn=cast(complex(0),'like',dIn);
                obj.inpSCap=cast(complex(0),'like',dIn);
                obj.buffinpSCap=cast(complex(0),'like',dIn);
                obj.buffinpSCap1=cast(complex(0),'like',dIn);
                obj.modSelReg=cast(0,'like',real(dIn));
                obj.modSelReg1=cast(0,'like',real(dIn));
                obj.buffmodSelReg=cast(0,'like',real(dIn));
                obj.buffmodSelReg1=cast(0,'like',real(dIn));
                obj.nVariance=cast(1,'like',real(dIn));
                obj.nVariance1=cast(1,'like',real(dIn));
                obj.valueLReg=cast(0,'like',real(dIn));
                obj.InPhaseReg=cast(zeros(9,1),'like',real(dIn));
                obj.QPhaseReg=cast(zeros(9,1),'like',real(dIn));
                obj.InPhaseReg1=cast(zeros(9,1),'like',real(dIn));
                obj.QPhaseReg1=cast(zeros(9,1),'like',real(dIn));
                obj.pskMappedReg=cast(complex(zeros(4,1)),'like',dIn);
                obj.pskMappedReg1=cast(complex(zeros(4,1)),'like',dIn);
                obj.outLLRReg=cast(zeros(llrLength,1),'like',real(dIn));
                obj.outLLRReg1=cast(zeros(llrLength,1),'like',real(dIn));
                obj.defaultLLROut=cast(zeros(llrLength,1),'like',real(dIn));
                obj.tempLLROut=cast(zeros(llrLength,1),'like',real(dIn));
                obj.tempLLROut1=cast(zeros(llrLength,1),'like',real(dIn));
                obj.inpVecLLROut=cast(zeros(2*llrLength,1),'like',real(dIn));
                obj.buffAppendVecLLR=cast(zeros(2*llrLength,1),'like',real(dIn));
                obj.llrInVecOrder=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.llrQVecOrder=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.llrInVecOrderScalar=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.llrQVecOrderScalar=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.llrComputeVec1=cast(complex(zeros(llrLength,1)),'like',dIn);
                obj.llrComputeVec2=cast(complex(zeros(llrLength,1)),'like',dIn);
                obj.qamTableUpdate=cast(complex(zeros(10,1)),'like',dIn);
                obj.qamTableUpdate1=cast(complex(zeros(10,1)),'like',dIn);
                obj.qamTableUpdateScalar=cast(complex(zeros(10,1)),'like',dIn);
                obj.lookUpTable02=cast([exp(1i*(pi/2)),exp(1i*((3*pi)/2))],'like',dIn);
                obj.lookUpTable04=cast([exp(1i*(pi/4)),exp(1i*((3*pi)/4)),exp(1i*((7*pi)/4))],'like',dIn);
                obj.lookUpTable08=cast([exp(1i*(pi/8)),exp(1i*((5*pi)/8)),exp(1i*((15*pi)/8)),exp(1i*((3*pi)/8))],'like',dIn);
                obj.lookUpTable16=cast([exp(1i*(pi/16)),exp(1i*((9*pi)/16)),exp(1i*((31*pi)/16)),exp(1i*((5*pi)/16)),exp(1i*((3*pi)/16))],'like',dIn);
                obj.lookUpTable32=cast([exp(1i*(pi/32)),exp(1i*((17*pi)/32)),exp(1i*((63*pi)/32)),exp(1i*((9*pi)/32)),exp(1i*((5*pi)/32)),exp(1i*((3*pi)/32))],'like',dIn);
                obj.lookUpSine02=cast(sin([0,pi/4,(3*pi)/8,(7*pi)/16,(15*pi)/32,pi/2,(17*pi)/32,(9*pi)/16,(5*pi)/8,(3*pi)/4,pi]),'like',real(dIn));
                obj.lookUpCos02=cast(cos([0,pi/4,(3*pi)/8,(7*pi)/16,(15*pi)/32,pi/2,(17*pi)/32,(9*pi)/16,(5*pi)/8,(3*pi)/4,pi]),'like',real(dIn));
                obj.lookUpSine04=cast(sin([-pi/4,0,pi/8,(3*pi)/16,(7*pi)/32,pi/4,(9*pi)/32,(5*pi)/16,(3*pi)/8,pi/2,(3*pi)/4]),'like',real(dIn));
                obj.lookUpCos04=cast(cos([-pi/4,0,pi/8,(3*pi)/16,(7*pi)/32,pi/4,(9*pi)/32,(5*pi)/16,(3*pi)/8,pi/2,(3*pi)/4]),'like',real(dIn));
                obj.lookUpSine08=cast(sin([-(3*pi)/8,-pi/8,0,pi/16,(3*pi)/32,pi/8,(5*pi)/32,(3*pi)/16,pi/4,(3*pi)/8,(5*pi)/8]),'like',real(dIn));
                obj.lookUpCos08=cast(cos([-(3*pi)/8,-pi/8,0,pi/16,(3*pi)/32,pi/8,(5*pi)/32,(3*pi)/16,pi/4,(3*pi)/8,(5*pi)/8]),'like',real(dIn));
                obj.lookUpSine16=cast(sin([-(7*pi)/16,-(3*pi)/16,-pi/16,0,pi/32,pi/16,(3*pi)/32,pi/8,(3*pi)/16,(5*pi)/16,(9*pi)/16]),'like',real(dIn));
                obj.lookUpCos16=cast(cos([-(7*pi)/16,-(3*pi)/16,-pi/16,0,pi/32,pi/16,(3*pi)/32,pi/8,(3*pi)/16,(5*pi)/16,(9*pi)/16]),'like',real(dIn));
                obj.lookUpSine32=cast(sin([-(15*pi)/32,-(7*pi)/32,-(3*pi)/32,-pi/32,0,pi/32,pi/16,(3*pi)/32,(5*pi)/32,(9*pi)/32,(17*pi)/32]),'like',real(dIn));
                obj.lookUpCos32=cast(cos([-(15*pi)/32,-(7*pi)/32,-(3*pi)/32,-pi/32,0,pi/32,pi/16,(3*pi)/32,(5*pi)/32,(9*pi)/32,(17*pi)/32]),'like',real(dIn));
                obj.qamTableUpdate(1,:)=cast(-1+1i,'like',dIn);
                obj.qamTableUpdate(2,:)=cast(1-1i,'like',dIn);
                obj.tanConsts=cast([tan(pi/8),tan(pi/16)],'like',real(dIn));
                obj.tempLvals=cast(zeros(3,1),'like',real(dIn));
                obj.qValuesReal=cast(zeros(4,1),'like',real(dIn));
                obj.signCalc=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.buffSignCalc=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.signCalcScalar=cast(zeros(defaultLength,1),'like',real(dIn));
                obj.qValuesImag=cast(zeros(4,1),'like',real(dIn));
                obj.LValuesTemp=cast(zeros(4,1),'like',real(dIn));
                obj.buffInPhaseReg=cast(zeros(9,1),'like',real(dIn));
                obj.buffQPhaseReg=cast(zeros(9,1),'like',real(dIn));
                obj.buffpskMappedReg=cast(complex(zeros(4,1)),'like',dIn);
                obj.buffpskMappedReg1=cast(complex(zeros(4,1)),'like',dIn);
                obj.buffqValuesReal=cast(zeros(4,1),'like',real(dIn));
                obj.buffqValuesImag=cast(zeros(4,1),'like',real(dIn));
                obj.buffqValuesReal1=cast(zeros(4,1),'like',real(dIn));
                obj.buffqValuesImag1=cast(zeros(4,1),'like',real(dIn));
                obj.reminpSCap2=cast(complex(0),'like',dIn);
                obj.reminpSCap3=cast(complex(0),'like',dIn);
                obj.LValues16UnitPower=cast([2,4,8,16]*(1/(sqrt(10))),'like',real(dIn));
                obj.LValues64UnitPower=cast([2,4,8,16]*(1/(sqrt(42))),'like',real(dIn));
                obj.LValues256UnitPower=cast([2,4,8,16]*(1/(sqrt(170))),'like',real(dIn));

                if(strcmp(obj.ModulationSource,'Property'))
                    if(strcmpi(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                        if(strcmpi(obj.NormMethod,'Unit average power'))
                            if(strcmpi(obj.ModulationScheme,'16-QAM'))
                                obj.distbwSymbols=cast(1/(sqrt(10)),'like',real(dIn));
                            elseif(strcmpi(obj.ModulationScheme,'64-QAM'))
                                obj.distbwSymbols=cast(1/(sqrt(42)),'like',real(dIn));
                            else
                                obj.distbwSymbols=cast(1/(sqrt(170)),'like',real(dIn));
                            end
                        else
                            obj.distbwSymbols=cast(obj.MinSymDistance/2,'like',real(dIn));
                        end
                    else
                        obj.distbwSymbols=cast(1,'like',real(dIn));
                    end
                else
                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmp(obj.MaxModulation,'64-QAM')||strcmp(obj.MaxModulation,'256-QAM'))
                        if(strcmpi(obj.NormMethod,'Custom'))
                            obj.distbwSymbols=cast(obj.MinSymDistance/2,'like',real(dIn));
                        else
                            if(strcmpi(obj.MaxModulation,'16-QAM'))
                                obj.distbwSymbols=cast(1/(sqrt(10)),'like',real(dIn));
                            elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                                obj.distbwSymbols=cast(1/(sqrt(42)),'like',real(dIn));
                            else
                                obj.distbwSymbols=cast(1/(sqrt(170)),'like',real(dIn));
                            end
                        end
                    else
                        obj.distbwSymbols=cast(1,'like',real(dIn));
                    end
                end
                obj.LValues=cast([2,4,8,16],'like',real(dIn));
                obj.refConstPoint=cast(complex(obj.distbwSymbols,obj.distbwSymbols),'like',dIn);
                obj.LValues02=cast(obj.distbwSymbols*2./(2.^[1,2,3,4,5,6,7]),'like',real(dIn));
                obj.LValues04=cast(obj.distbwSymbols*4./(2.^[1,2,3,4,5,6,7]),'like',real(dIn));
                obj.LValues08=cast(obj.distbwSymbols*8./(2.^[1,2,3,4,5,6,7]),'like',real(dIn));
            end

            if(strcmp(obj.ModulationSource,'Property'))
                if(strcmpi(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                    if(strcmpi(obj.ConstOrder,'User-defined'))
                        if(strcmpi(obj.ModulationScheme,'16-QAM'))
                            defConstOrder=1:4;
                            obj.mappedBits=obj.ConstMap(1:4);
                            binaryMapped=de2bi(obj.mappedBits,4,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==4);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            inpBitOrder=[indFinal,defConstOrder(indOthers)];

                            for ind=1:8
                                if ind<5
                                    obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                                else
                                    obj.shuffleOrder(ind)=1;
                                end
                            end

                            signCalcBits=~de2bi(obj.ConstMap(10),4,'left-msb');
                            obj.coeffSign=fi([1-2*signCalcBits,0,0,0,0],1,3,0,hdlfimath);
                        elseif(strcmpi(obj.ModulationScheme,'64-QAM'))
                            defConstOrder=1:6;
                            obj.mappedBits=obj.ConstMap(1:8);
                            binaryMapped=de2bi(obj.mappedBits,6,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==8);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            inpBitOrder=[indFinal,defConstOrder(indOthers)];

                            for ind=1:8
                                if ind<7
                                    obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                                else
                                    obj.shuffleOrder(ind)=1;
                                end
                            end

                            signCalcBits=~de2bi(obj.ConstMap(36),6,'left-msb');
                            obj.coeffSign=fi([1-2*signCalcBits,0,0],1,3,0,hdlfimath);
                        elseif(strcmpi(obj.ModulationScheme,'256-QAM'))
                            defConstOrder=1:8;
                            obj.mappedBits=obj.ConstMap(1:16);
                            binaryMapped=de2bi(obj.mappedBits,8,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==16);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            inpBitOrder=[indFinal,defConstOrder(indOthers)];
                            for ind=1:8
                                obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                            end
                            signCalcBits=~de2bi(obj.ConstMap(136),8,'left-msb');
                            obj.coeffSign=fi(1-2*signCalcBits,1,3,0,hdlfimath);
                        end
                    else
                        if(strcmpi(obj.ModulationScheme,'16-QAM'))
                            obj.shuffleOrder=fi([1,2,3,4,1,1,1,1],0,9,0,hdlfimath);
                            signCalcBits=[0,0,0,0,0,0,0,0];
                        elseif(strcmpi(obj.ModulationScheme,'64-QAM'))
                            obj.shuffleOrder=fi([1,2,3,4,5,6,1,1],0,9,0,hdlfimath);
                            signCalcBits=[0,0,1,0,0,1,0,0];
                        else
                            obj.shuffleOrder=fi([1,2,3,4,5,6,7,8],0,9,0,hdlfimath);
                            signCalcBits=[0,0,1,1,0,0,1,1];
                        end
                        obj.coeffSign=fi(1-2*signCalcBits,1,3,0,hdlfimath);
                    end
                end
                obj.shuffleOrder16=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                obj.coeffSign16=fi(obj.coeffSign,1,3,0,hdlfimath);
                obj.shuffleOrder64=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                obj.coeffSign64=fi(obj.coeffSign,1,3,0,hdlfimath);
            else
                if(strcmpi(obj.MaxModulation,'16-QAM')||strcmp(obj.MaxModulation,'64-QAM')||strcmp(obj.MaxModulation,'256-QAM'))
                    if(strcmpi(obj.ConstOrder,'User-defined'))
                        if(strcmpi(obj.MaxModulation,'16-QAM'))
                            defConstOrder=1:4;
                            obj.mappedBits=obj.ConstMap(1:4);
                            binaryMapped=de2bi(obj.mappedBits,4,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==4);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            inpBitOrder=[indFinal,defConstOrder(indOthers)];
                            for ind=1:8
                                if ind<5
                                    obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                                else
                                    obj.shuffleOrder(ind)=1;
                                end
                            end
                            signCalcBits=~de2bi(obj.ConstMap(10),4,'left-msb');
                            obj.coeffSign=fi([1-2*signCalcBits,0,0,0,0],1,3,0,hdlfimath);
                            obj.shuffleOrder16=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                            obj.coeffSign16=fi(obj.coeffSign,1,3,0,hdlfimath);
                            obj.shuffleOrder64=fi([1,2,3,4,5,6,1,1],0,9,0,hdlfimath);
                            obj.coeffSign64=fi([1,1,1,1,1,1,0,0],1,3,0,hdlfimath);
                        elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                            defConstOrder=1:6;
                            obj.mappedBits=obj.ConstMap(1:8);
                            binaryMapped=de2bi(obj.mappedBits,6,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==8);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            indFinalLast=defConstOrder(indOthers);
                            inpBitOrder=[indFinal,indFinalLast];
                            for ind=1:8
                                if ind<7
                                    obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                                else
                                    obj.shuffleOrder(ind)=1;
                                end
                            end
                            signCalcBits=~de2bi(obj.ConstMap(36),6,'left-msb');
                            obj.coeffSign=fi([1-2*signCalcBits,0,0],1,3,0,hdlfimath);

                            inpBitOrder16=inpBitOrder(inpBitOrder<=4);
                            obj.shuffleOrder16=fi([defConstOrder(inpBitOrder16==1),defConstOrder(inpBitOrder16==2),defConstOrder(inpBitOrder16==3),defConstOrder(inpBitOrder16==4),1,1,1,1],0,9,0,hdlfimath);
                            signCalcBits16=[signCalcBits(indFinal(1:2)),signCalcBits(indFinalLast(1:2)),0,0,0,0];
                            obj.coeffSign16=fi([1-2*signCalcBits16(obj.shuffleOrder16(1:4)),0,0,0,0],1,3,0,hdlfimath);
                            obj.shuffleOrder64=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                            obj.coeffSign64=fi(obj.coeffSign,1,3,0,hdlfimath);
                        elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                            defConstOrder=1:8;
                            obj.mappedBits=obj.ConstMap(1:16);
                            binaryMapped=de2bi(obj.mappedBits,8,'left-msb');
                            sumColumns=sum(binaryMapped);
                            [~,indMax]=find(sumColumns==16);
                            [~,indMin]=find(sumColumns==0);
                            indFinal=union(indMin,indMax);
                            indOthers=~ismember(defConstOrder,indFinal);
                            indFinalLast=defConstOrder(indOthers);
                            inpBitOrder=[indFinal,indFinalLast];
                            for ind=1:8
                                obj.shuffleOrder(ind)=defConstOrder(inpBitOrder==ind);
                            end
                            signCalcBits=~de2bi(obj.ConstMap(136),8,'left-msb');
                            obj.coeffSign=fi(1-2*signCalcBits,1,3,0,hdlfimath);

                            inpBitOrder64=inpBitOrder(inpBitOrder<=6);
                            obj.shuffleOrder64=fi([defConstOrder(inpBitOrder64==1),defConstOrder(inpBitOrder64==2),defConstOrder(inpBitOrder64==3),defConstOrder(inpBitOrder64==4),...
                            defConstOrder(inpBitOrder64==5),defConstOrder(inpBitOrder64==6),1,1],0,9,0,hdlfimath);
                            signCalcBits64=[signCalcBits(indFinal(1:3)),signCalcBits(indFinalLast(1:3)),0,0];
                            obj.coeffSign64=fi([1-2*signCalcBits64(obj.shuffleOrder64(1:6)),0,0],1,3,0,hdlfimath);

                            inpBitOrder16=inpBitOrder(inpBitOrder<=4);
                            obj.shuffleOrder16=fi([defConstOrder(inpBitOrder16==1),defConstOrder(inpBitOrder16==2),defConstOrder(inpBitOrder16==3),defConstOrder(inpBitOrder16==4),1,1,1,1],0,9,0,hdlfimath);
                            signCalcBits16=[signCalcBits(indFinal(1:2)),signCalcBits(indFinalLast(1:2)),0,0,0,0];
                            obj.coeffSign16=fi([1-2*signCalcBits16(obj.shuffleOrder16(1:4)),0,0,0,0],1,3,0,hdlfimath);
                        end
                    else
                        if(strcmpi(obj.MaxModulation,'16-QAM'))
                            obj.shuffleOrder=fi([1,2,3,4,1,1,1,1],0,9,0,hdlfimath);
                            signCalcBits=[0,0,0,0,0,0,0,0];
                        elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                            obj.shuffleOrder=fi([1,2,3,4,5,6,1,1],0,9,0,hdlfimath);
                            signCalcBits=[0,0,1,0,0,1,0,0];
                        else
                            obj.shuffleOrder=fi([1,2,3,4,5,6,7,8],0,9,0,hdlfimath);
                            signCalcBits=[0,0,1,1,0,0,1,1];
                        end
                        obj.coeffSign=fi(1-2*signCalcBits,1,3,0,hdlfimath);
                        obj.shuffleOrder16=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                        obj.coeffSign16=fi([1,1,1,1,1,1,1,1],1,3,0,hdlfimath);
                        obj.shuffleOrder64=fi(obj.shuffleOrder,0,9,0,hdlfimath);
                        obj.coeffSign64=fi([1,1,-1,1,1,-1],1,3,0,hdlfimath);
                    end
                else
                    obj.shuffleOrder=fi([1,2,3,4,1,1,1,1],0,9,0,hdlfimath);
                    signCalcBits=[0,0,0,0,0,0,0,0];
                    obj.coeffSign=fi(1-2*signCalcBits,1,3,0,hdlfimath);
                end
            end

            phaseOffsetValues={'pi/2','pi/4','pi/8','pi/16','pi/32','0','-pi/32','-pi/16','-pi/8','-pi/4','-pi/2'};
            LUTindex=find(strcmp(phaseOffsetValues,obj.PhaseOffset));
            if(strcmp(obj.ModulationSource,'Property'))
                if(strcmp(obj.ModulationScheme,'BPSK'))
                    obj.LUTvalue=complex(obj.lookUpCos02(LUTindex),obj.lookUpSine02(LUTindex));
                elseif(strcmp(obj.ModulationScheme,'QPSK'))
                    obj.LUTvalue=complex(obj.lookUpCos04(LUTindex),obj.lookUpSine04(LUTindex));
                elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                    obj.LUTvalue=complex(obj.lookUpCos08(LUTindex),obj.lookUpSine08(LUTindex));
                elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                    obj.LUTvalue=complex(obj.lookUpCos16(LUTindex),obj.lookUpSine16(LUTindex));
                elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                    obj.LUTvalue=complex(obj.lookUpCos32(LUTindex),obj.lookUpSine32(LUTindex));
                else
                    obj.LUTvalue=cast(complex(1,0),'like',obj.lookUpCos02);
                end
                obj.LUTvalue2=complex(obj.lookUpCos02(LUTindex),obj.lookUpSine02(LUTindex));
                obj.LUTvalue4=complex(obj.lookUpCos04(LUTindex),obj.lookUpSine04(LUTindex));
                obj.LUTvalue8=complex(obj.lookUpCos08(LUTindex),obj.lookUpSine08(LUTindex));
                obj.LUTvalue16=complex(obj.lookUpCos16(LUTindex),obj.lookUpSine16(LUTindex));
                obj.LUTvalue32=complex(obj.lookUpCos32(LUTindex),obj.lookUpSine32(LUTindex));
            else
                obj.LUTvalue2=complex(obj.lookUpCos02(LUTindex),obj.lookUpSine02(LUTindex));
                obj.LUTvalue4=complex(obj.lookUpCos04(LUTindex),obj.lookUpSine04(LUTindex));
                obj.LUTvalue8=complex(obj.lookUpCos08(LUTindex),obj.lookUpSine08(LUTindex));
                obj.LUTvalue16=complex(obj.lookUpCos16(LUTindex),obj.lookUpSine16(LUTindex));
                obj.LUTvalue32=complex(obj.lookUpCos32(LUTindex),obj.lookUpSine32(LUTindex));
                obj.LUTvalue=cast(complex(1,0),'like',obj.lookUpCos02);
            end



            obj.outValidReg=false;
            obj.outValidReg1=false;
            obj.valid1=false;
            obj.valid2=false;
            obj.valid3=false;
            obj.validpsk=false;
            obj.validqam=false;
            obj.validqam1=false;
            obj.remValid2=false;
            obj.remValid3=false;
            obj.startReg=false;
            obj.endReg=false;
            obj.startInp=false;
            obj.validInp=false;
            obj.endInp=false;
            obj.endFirstOut=false;
            obj.startFirstOut=false;
            obj.startInDelayedSig=false;
            obj.endInDelayedSig=false;
            obj.validLLRcomp=false;
            obj.pskInpScalar=false;
            obj.pskInpScalar1=false;
            obj.qamInpScalar=false;
            obj.qamInpScalar1=false;
            obj.cond_val=false;

            obj.readyReg=true;
            obj.countInVec=fi(0,0,8,0,hdlfimath);
            obj.count=fi(0,0,6,0,hdlfimath);
            obj.count1=fi(0,0,6,0,hdlfimath);
            obj.index1=fi(1,0,6,0,hdlfimath);
            obj.index2=fi(1,0,6,0,hdlfimath);
            obj.index3=fi(1,0,6,0,hdlfimath);
            obj.llrvec1Index=fi(1,0,6,0,hdlfimath);
            obj.index=fi(0,0,6,0,hdlfimath);
            obj.indexReg=fi(0,0,6,0,hdlfimath);
            obj.buffindex=fi(0,0,6,0,hdlfimath);
            obj.buffindexPlus2=fi(0,0,6,0,hdlfimath);
            obj.remIndex=fi(1,0,6,0,hdlfimath);
            obj.buffindex1=fi(0,0,6,0,hdlfimath);
            obj.buffLLROutIndex=fi(1,0,6,0,hdlfimath);
            obj.buffAppendIndex=fi(1,0,6,0,hdlfimath);
            obj.inpVecCntr1=fi(0,0,8,0,hdlfimath);
            obj.inpVecCntr2=fi(0,0,8,0,hdlfimath);
            obj.countFreeze=fi(0,0,8,0,hdlfimath);
            obj.keyInpScalar=fi(2,0,8,0,hdlfimath);
            obj.gap=fi(0,0,8,0,hdlfimath);
            obj.llrLen=fi(llrLength,0,8,0,hdlfimath);
            obj.shuffleOrderFin=fi([1,2,3,4,5,6,7,8],0,9,0,hdlfimath);
            obj.coeffSignFin=fi(zeros(1,8),1,3,0,hdlfimath);
            obj.buffCoeffSign=fi(zeros(1,8),1,3,0,hdlfimath);

            obj.ctrlOut=struct('start',false,'end',false,'valid',false);
            obj.ctrlOut1=struct('start',false,'end',false,'valid',false);
            obj.PSKConvBlock=commhdl.internal.PSKSymbolConverter;
            obj.QAMBlockConv=commhdl.internal.QAMSymbolConverter;
            obj.llrComputeBlk=commhdl.internal.GeneralLLRComputationBlock;
            obj.buffSCapBlk1=dsp.Delay(2);
            obj.buffSCapBlk2=dsp.Delay(2);
            obj.buffSCapBlk3=dsp.Delay(3);
            obj.buffindexBlock=dsp.Delay(1);
            obj.buffqRealBlk1=commhdl.internal.DataRemBlock;
            obj.buffqImagBlk1=commhdl.internal.DataRemBlock;
            obj.buffpskConvBlk=commhdl.internal.DataRemBlock;
            obj.buffpskConvBlk1=commhdl.internal.DataRemBlock;
            obj.delayCoeffSign=commhdl.internal.DataRemBlock;
            obj.delaySignCalc=commhdl.internal.DataRemBlock;
            obj.delayUnit=dsp.Delay(2);
            obj.delayUnit1=dsp.Delay(1);
            obj.delaypskConv=dsp.Delay(1);
            obj.delayEndBlk=dsp.Delay(3);
            obj.delayStartBlk=dsp.Delay(3);
            if(strcmp(obj.ModulationSource,'Input port'))&&(strcmpi(obj.OutputType,'Vector'))
                obj.nVarDelay=dsp.Delay(2);
            else
                obj.nVarDelay=dsp.Delay(1);
            end

            if(obj.NoiseVariance)&&strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                if(~isfloat(dIn))
                    divInpWL=max(inpData.WordLength+nVar.FractionLength,nVar.WordLength)+5;
                else
                    divInpWL=0;
                end
            else
                divInpWL=0;
            end

            if(strcmpi(obj.OutputType,'Vector'))
                if(strcmp(obj.ModulationSource,'Property'))
                    if(strcmp(obj.ModulationScheme,'BPSK'))
                        obj.pipelineData=dsp.Delay(4+divInpWL);
                        obj.pipelineValid=dsp.Delay(4+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'QPSK'))
                        obj.pipelineData=dsp.Delay(2+divInpWL);
                        obj.pipelineValid=dsp.Delay(2+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                        obj.pipelineData=dsp.Delay(4+divInpWL);
                        obj.pipelineValid=dsp.Delay(4+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                        obj.pipelineData=dsp.Delay(6+divInpWL);
                        obj.pipelineValid=dsp.Delay(6+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                        obj.pipelineData=dsp.Delay(8+divInpWL);
                        obj.pipelineValid=dsp.Delay(8+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                        obj.pipelineData=dsp.Delay(3+divInpWL);
                        obj.pipelineValid=dsp.Delay(3+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                        obj.pipelineData=dsp.Delay(8+divInpWL);
                        obj.pipelineValid=dsp.Delay(8+divInpWL);
                    else
                        obj.pipelineData=dsp.Delay(8+divInpWL);
                        obj.pipelineValid=dsp.Delay(8+divInpWL);
                    end
                else
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        obj.pipelineData=dsp.Delay(2+divInpWL);
                        obj.pipelineValid=dsp.Delay(2+divInpWL);
                        obj.pipelineStart=dsp.Delay(2+divInpWL);
                        obj.pipelineEnd=dsp.Delay(2+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(2+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        obj.pipelineData=dsp.Delay(4+divInpWL);
                        obj.pipelineValid=dsp.Delay(4+divInpWL);
                        obj.pipelineStart=dsp.Delay(4+divInpWL);
                        obj.pipelineEnd=dsp.Delay(4+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(4+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        obj.pipelineData=dsp.Delay(6+divInpWL);
                        obj.pipelineValid=dsp.Delay(6+divInpWL);
                        obj.pipelineStart=dsp.Delay(6+divInpWL);
                        obj.pipelineEnd=dsp.Delay(6+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(6+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        obj.pipelineData=dsp.Delay(9+divInpWL);
                        obj.pipelineValid=dsp.Delay(9+divInpWL);
                        obj.pipelineStart=dsp.Delay(9+divInpWL);
                        obj.pipelineEnd=dsp.Delay(9+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(9+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        obj.pipelineData=dsp.Delay(9+divInpWL);
                        obj.pipelineValid=dsp.Delay(9+divInpWL);
                        obj.pipelineStart=dsp.Delay(9+divInpWL);
                        obj.pipelineEnd=dsp.Delay(9+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(9+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        obj.pipelineData=dsp.Delay(11+divInpWL);
                        obj.pipelineValid=dsp.Delay(11+divInpWL);
                        obj.pipelineStart=dsp.Delay(11+divInpWL);
                        obj.pipelineEnd=dsp.Delay(11+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(11+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        obj.pipelineData=dsp.Delay(13+divInpWL);
                        obj.pipelineValid=dsp.Delay(13+divInpWL);
                        obj.pipelineStart=dsp.Delay(13+divInpWL);
                        obj.pipelineEnd=dsp.Delay(13+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(13+divInpWL);
                    else
                        obj.pipelineData=dsp.Delay(13+divInpWL);
                        obj.pipelineValid=dsp.Delay(13+divInpWL);
                        obj.pipelineStart=dsp.Delay(13+divInpWL);
                        obj.pipelineEnd=dsp.Delay(13+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(13+divInpWL);
                    end
                end
            else
                if(strcmp(obj.ModulationSource,'Property'))
                    if(strcmp(obj.ModulationScheme,'BPSK'))
                        obj.pipelineData=dsp.Delay(2+divInpWL);
                        obj.pipelineValid=dsp.Delay(2+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'QPSK'))
                        obj.pipelineData=dsp.Delay(4+divInpWL);
                        obj.pipelineValid=dsp.Delay(4+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                        obj.pipelineData=dsp.Delay(4+divInpWL);
                        obj.pipelineValid=dsp.Delay(4+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                        obj.pipelineData=dsp.Delay(6+divInpWL);
                        obj.pipelineValid=dsp.Delay(6+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                        obj.pipelineData=dsp.Delay(9+divInpWL);
                        obj.pipelineValid=dsp.Delay(9+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                        obj.pipelineData=dsp.Delay(8+divInpWL);
                        obj.pipelineValid=dsp.Delay(8+divInpWL);
                    elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                        obj.pipelineData=dsp.Delay(12+divInpWL);
                        obj.pipelineValid=dsp.Delay(12+divInpWL);
                    else
                        obj.pipelineData=dsp.Delay(12+divInpWL);
                        obj.pipelineValid=dsp.Delay(12+divInpWL);
                    end
                else
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        obj.pipelineData=dsp.Delay(2+divInpWL);
                        obj.pipelineValid=dsp.Delay(2+divInpWL);
                        obj.pipelineStart=dsp.Delay(2+divInpWL);
                        obj.pipelineEnd=dsp.Delay(2+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(2+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        obj.pipelineData=dsp.Delay(5+divInpWL);
                        obj.pipelineValid=dsp.Delay(5+divInpWL);
                        obj.pipelineStart=dsp.Delay(5+divInpWL);
                        obj.pipelineEnd=dsp.Delay(5+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(5+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        obj.pipelineData=dsp.Delay(5+divInpWL);
                        obj.pipelineValid=dsp.Delay(5+divInpWL);
                        obj.pipelineStart=dsp.Delay(5+divInpWL);
                        obj.pipelineEnd=dsp.Delay(5+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(5+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        obj.pipelineData=dsp.Delay(7+divInpWL);
                        obj.pipelineValid=dsp.Delay(7+divInpWL);
                        obj.pipelineStart=dsp.Delay(7+divInpWL);
                        obj.pipelineEnd=dsp.Delay(7+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(7+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        obj.pipelineData=dsp.Delay(8+divInpWL);
                        obj.pipelineValid=dsp.Delay(8+divInpWL);
                        obj.pipelineStart=dsp.Delay(8+divInpWL);
                        obj.pipelineEnd=dsp.Delay(8+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(8+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        obj.pipelineData=dsp.Delay(9+divInpWL);
                        obj.pipelineValid=dsp.Delay(9+divInpWL);
                        obj.pipelineStart=dsp.Delay(9+divInpWL);
                        obj.pipelineEnd=dsp.Delay(9+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(9+divInpWL);
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        obj.pipelineData=dsp.Delay(12+divInpWL);
                        obj.pipelineValid=dsp.Delay(12+divInpWL);
                        obj.pipelineStart=dsp.Delay(12+divInpWL);
                        obj.pipelineEnd=dsp.Delay(12+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(12+divInpWL);
                    else
                        obj.pipelineData=dsp.Delay(12+divInpWL);
                        obj.pipelineValid=dsp.Delay(12+divInpWL);
                        obj.pipelineStart=dsp.Delay(12+divInpWL);
                        obj.pipelineEnd=dsp.Delay(12+divInpWL);
                        obj.pipelineValidVec=dsp.Delay(12+divInpWL);
                    end
                end
            end

            obj.valPSK=false;
        end

        function flag=getExecutionSemanticsImpl(obj)%#ok

            flag={'Classic','Synchronous'};
        end

        function varargout=isInputDirectFeedthroughImpl(obj,varargin)
            varargout{1}=false;
            varargout{2}=true;
            if strcmpi(obj.ModulationSource,'Input port')
                varargout{3}=true;
                if(obj.NoiseVariance)
                    varargout{4}=true;
                end
            else
                if(obj.NoiseVariance)
                    varargout{3}=true;
                end
            end
        end

        function resetImpl(obj)
            obj.dataIn(:)=0;
            obj.inpSCap(:)=0;
            obj.buffinpSCap(:)=0;
            obj.buffinpSCap1(:)=0;
            obj.outLLRReg(:)=0;
            obj.outLLRReg1(:)=0;
            obj.defaultLLROut(:)=0;
            obj.tempLLROut(:)=0;
            obj.tempLLROut1(:)=0;
            obj.inpVecLLROut(:)=0;
            obj.nVariance(:)=1;
            obj.nVariance1(:)=1;
            obj.outValidReg=false;
            obj.outValidReg1=false;
            obj.InPhaseReg(:)=0;
            obj.QPhaseReg(:)=0;
            obj.InPhaseReg1(:)=0;
            obj.QPhaseReg1(:)=0;
            obj.pskMappedReg(:)=0;
            obj.modSelReg(:)=0;
            obj.modSelReg1(:)=0;
            obj.buffmodSelReg(:)=0;
            obj.buffmodSelReg1(:)=0;
            obj.valueLReg(:)=0;
            obj.tempLvals(:)=0;
            obj.llrComputeVec1(:)=0;
            obj.llrComputeVec2(:)=0;
            obj.qValuesReal(:)=0;
            obj.qValuesImag(:)=0;
            obj.LValuesTemp(:)=0;
            obj.buffInPhaseReg(:)=0;
            obj.buffQPhaseReg(:)=0;
            obj.buffpskMappedReg(:)=0;
            obj.buffpskMappedReg1(:)=0;
            obj.buffAppendVecLLR(:)=0;
            obj.buffqValuesReal(:)=0;
            obj.buffqValuesImag(:)=0;
            obj.buffqValuesReal1(:)=0;
            obj.buffqValuesImag1(:)=0;
            obj.keyInpScalar(:)=2;
            obj.gap(:)=0;

            obj.valid1=false;
            obj.valid2=false;
            obj.valid3=false;
            obj.startInp=false;
            obj.startReg=false;
            obj.endReg=false;
            obj.validInp=false;
            obj.endInp=false;
            obj.validLLRcomp=false;
            obj.endFirstOut=false;
            obj.startFirstOut=false;
            obj.pskInpScalar=false;
            obj.pskInpScalar1=false;
            obj.qamInpScalar=false;
            obj.qamInpScalar1=false;
            obj.cond_val=false;

            obj.countInVec(:)=0;
            obj.count(:)=0;
            obj.count1(:)=1;
            obj.inpVecCntr1(:)=0;
            obj.inpVecCntr2(:)=0;
            obj.countFreeze(:)=0;
            obj.index(:)=0;
            obj.indexReg(:)=0;
            obj.buffindex(:)=0;
            obj.buffindexPlus2(:)=0;
            obj.buffindex1(:)=0;
            obj.remIndex(:)=1;
            obj.ctrlOut=struct('start',false,'end',false,'valid',false);
            obj.ctrlOut1=struct('start',false,'end',false,'valid',false);
            obj.readyReg=true;

            reset(obj.llrComputeBlk);
            reset(obj.QAMBlockConv);
            reset(obj.PSKConvBlock);
            reset(obj.buffSCapBlk1);
            reset(obj.buffSCapBlk2);
            reset(obj.buffSCapBlk3);
            reset(obj.buffindexBlock);
            reset(obj.buffqRealBlk1);
            reset(obj.buffqImagBlk1);
            reset(obj.buffpskConvBlk);
            reset(obj.buffpskConvBlk1);
            reset(obj.delayCoeffSign);
            reset(obj.delaySignCalc);
            reset(obj.delayUnit);
            reset(obj.delayUnit1);
            reset(obj.delaypskConv);
            reset(obj.delayEndBlk);
            reset(obj.delayStartBlk);
            reset(obj.nVarDelay);
            reset(obj.pipelineData);
            reset(obj.pipelineValid);
            if~(strcmp(obj.ModulationSource,'Property'))
                reset(obj.pipelineStart);
                reset(obj.pipelineEnd);
                reset(obj.pipelineValidVec);
            end
        end


        function s=saveObjectImpl(obj)
            s=saveObjectImpl@matlab.System(obj);

            if obj.isLocked
                s.dataIn=obj.dataIn;
                s.inpSCap=obj.inpSCap;
                s.buffinpSCap=obj.buffinpSCap;
                s.buffinpSCap1=obj.buffinpSCap1;
                s.modSelReg=obj.modSelReg;
                s.modSelReg1=obj.modSelReg1;
                s.buffmodSelReg=obj.buffmodSelReg;
                s.buffmodSelReg1=obj.buffmodSelReg1;
                s.nVariance=obj.nVariance;
                s.nVariance1=obj.nVariance1;
                s.InPhaseReg=obj.InPhaseReg;
                s.QPhaseReg=obj.QPhaseReg;
                s.InPhaseReg1=obj.InPhaseReg1;
                s.QPhaseReg1=obj.QPhaseReg1;
                s.pskMappedReg=obj.pskMappedReg;
                s.pskMappedReg1=obj.pskMappedReg1;
                s.valueLReg=obj.valueLReg;
                s.outLLRReg=obj.outLLRReg;
                s.outLLRReg1=obj.outLLRReg1;
                s.defaultLLROut=obj.defaultLLROut;
                s.tempLLROut=obj.tempLLROut;
                s.tempLLROut1=obj.tempLLROut1;
                s.inpVecLLROut=obj.inpVecLLROut;
                s.buffAppendVecLLR=obj.buffAppendVecLLR;
                s.llrComputeVec1=obj.llrComputeVec1;
                s.llrComputeVec2=obj.llrComputeVec2;
                s.qamTableUpdate=obj.qamTableUpdate;
                s.qamTableUpdate1=obj.qamTableUpdate1;
                s.qamTableUpdateScalar=obj.qamTableUpdateScalar;
                s.lookUpTable02=obj.lookUpTable02;
                s.lookUpTable04=obj.lookUpTable04;
                s.lookUpTable08=obj.lookUpTable08;
                s.lookUpTable16=obj.lookUpTable16;
                s.lookUpTable32=obj.lookUpTable32;
                s.tempLvals=obj.tempLvals;
                s.qValuesReal=obj.qValuesReal;
                s.signCalc=obj.signCalc;
                s.buffSignCalc=obj.buffSignCalc;
                s.signCalcScalar=obj.signCalcScalar;
                s.llrInVecOrder=obj.llrInVecOrder;
                s.llrQVecOrder=obj.llrQVecOrder;
                s.llrInVecOrderScalar=obj.llrInVecOrderScalar;
                s.llrQVecOrderScalar=obj.llrQVecOrderScalar;
                s.qValuesImag=obj.qValuesImag;
                s.LValuesTemp=obj.LValuesTemp;
                s.buffInPhaseReg=obj.buffInPhaseReg;
                s.buffQPhaseReg=obj.buffQPhaseReg;
                s.buffpskMappedReg=obj.buffpskMappedReg;
                s.buffpskMappedReg1=obj.buffpskMappedReg1;
                s.buffqValuesReal=obj.buffqValuesReal;
                s.buffqValuesImag=obj.buffqValuesImag;
                s.buffqValuesReal1=obj.buffqValuesReal1;
                s.buffqValuesImag1=obj.buffqValuesImag1;
                s.reminpSCap2=obj.reminpSCap2;
                s.reminpSCap3=obj.reminpSCap3;
                s.tanConsts=obj.tanConsts;
                s.lookUpSine02=obj.lookUpSine02;
                s.lookUpSine04=obj.lookUpSine04;
                s.lookUpSine08=obj.lookUpSine08;
                s.lookUpSine16=obj.lookUpSine16;
                s.lookUpSine32=obj.lookUpSine32;
                s.lookUpCos02=obj.lookUpCos02;
                s.lookUpCos04=obj.lookUpCos04;
                s.lookUpCos08=obj.lookUpCos08;
                s.lookUpCos16=obj.lookUpCos16;
                s.lookUpCos32=obj.lookUpCos32;
                s.LValues16UnitPower=obj.LValues16UnitPower;
                s.LValues64UnitPower=obj.LValues64UnitPower;
                s.LValues256UnitPower=obj.LValues256UnitPower;
                s.distbwSymbols=obj.distbwSymbols;
                s.LValues=obj.LValues;
                s.LValues02=obj.LValues02;
                s.LValues04=obj.LValues04;
                s.LValues08=obj.LValues08;
                s.refConstPoint=obj.refConstPoint;
                s.outValidReg=obj.outValidReg;
                s.outValidReg1=obj.outValidReg1;
                s.shuffleOrder=obj.shuffleOrder;
                s.coeffSign=obj.coeffSign;
                s.mappedBits=obj.mappedBits;
                s.shuffleOrder16=obj.shuffleOrder16;
                s.shuffleOrder64=obj.shuffleOrder64;
                s.coeffSign16=obj.coeffSign16;
                s.coeffSign64=obj.coeffSign64;
                s.valid1=obj.valid1;
                s.valid2=obj.valid2;
                s.valid3=obj.valid3;
                s.validpsk=obj.validpsk;
                s.validqam=obj.validqam;
                s.validqam1=obj.validqam1;
                s.remValid2=obj.remValid2;
                s.remValid3=obj.remValid3;
                s.startReg=obj.startReg;
                s.endReg=obj.endReg;
                s.startInp=obj.startInp;
                s.validInp=obj.validInp;
                s.endInp=obj.endInp;
                s.endFirstOut=obj.endFirstOut;
                s.startFirstOut=obj.startFirstOut;
                s.startInDelayedSig=obj.startInDelayedSig;
                s.endInDelayedSig=obj.endInDelayedSig;
                s.validLLRcomp=obj.validLLRcomp;
                s.pskInpScalar=obj.pskInpScalar;
                s.pskInpScalar1=obj.pskInpScalar1;
                s.qamInpScalar=obj.qamInpScalar;
                s.qamInpScalar1=obj.qamInpScalar1;
                s.cond_val=obj.cond_val;
                s.readyReg=obj.readyReg;
                s.countInVec=obj.countInVec;
                s.count=obj.count;
                s.count1=obj.count1;
                s.index=obj.index;
                s.indexReg=obj.indexReg;
                s.index1=obj.index1;
                s.index2=obj.index2;
                s.index3=obj.index3;
                s.llrvec1Index=obj.llrvec1Index;
                s.buffindex=obj.buffindex;
                s.buffindexPlus2=obj.buffindexPlus2;
                s.buffindex1=obj.buffindex1;
                s.remIndex=obj.remIndex;
                s.buffLLROutIndex=obj.buffLLROutIndex;
                s.buffAppendIndex=obj.buffAppendIndex;
                s.inpVecCntr1=obj.inpVecCntr1;
                s.inpVecCntr2=obj.inpVecCntr2;
                s.countFreeze=obj.countFreeze;
                s.keyInpScalar=obj.keyInpScalar;
                s.shuffleOrderFin=obj.shuffleOrderFin;
                s.coeffSignFin=obj.coeffSignFin;
                s.buffCoeffSign=obj.buffCoeffSign;
                s.ctrlOut=obj.ctrlOut;
                s.ctrlOut1=obj.ctrlOut1;
                s.QAMBlockConv=obj.QAMBlockConv;
                s.PSKConvBlock=obj.PSKConvBlock;
                s.llrComputeBlk=obj.llrComputeBlk;
                s.buffSCapBlk1=obj.buffSCapBlk1;
                s.buffSCapBlk2=obj.buffSCapBlk2;
                s.buffSCapBlk3=obj.buffSCapBlk3;
                s.buffindexBlock=obj.buffindexBlock;
                s.buffqRealBlk1=obj.buffqRealBlk1;
                s.buffqImagBlk1=obj.buffqImagBlk1;
                s.buffpskConvBlk=obj.buffpskConvBlk;
                s.buffpskConvBlk1=obj.buffpskConvBlk1;
                s.delayCoeffSign=obj.delayCoeffSign;
                s.delaySignCalc=obj.delaySignCalc;
                s.delayUnit=obj.delayUnit;
                s.nVarDelay=obj.nVarDelay;
                s.delayUnit1=obj.delayUnit1;
                s.delaypskConv=obj.delaypskConv;
                s.delayEndBlk=obj.delayEndBlk;
                s.delayStartBlk=obj.delayStartBlk;
                s.valPSK=obj.valPSK;
                s.gap=obj.gap;
                s.LUTvalue=obj.LUTvalue;
                s.LUTvalue2=obj.LUTvalue2;
                s.LUTvalue4=obj.LUTvalue4;
                s.LUTvalue8=obj.LUTvalue8;
                s.LUTvalue16=obj.LUTvalue16;
                s.LUTvalue32=obj.LUTvalue32;
                s.pipelineData=obj.pipelineData;
                s.pipelineValid=obj.pipelineValid;
                s.pipelineStart=obj.pipelineStart;
                s.pipelineEnd=obj.pipelineEnd;
                s.pipelineValidVec=obj.pipelineValidVec;
            end
        end

        function icon=getIconImpl(obj)

            if strcmpi(obj.ModulationSource,'Property')&&~obj.NoiseVariance
                icon=sprintf('Symbol Demodulator \nLatency = %d',getLatency(obj));
            else
                icon=sprintf('Symbol Demodulator');
            end
        end

        function varargout=getInputNamesImpl(obj)
            varargout=cell(1,getNumInputs(obj));
            inputPortInd=1;
            varargout{inputPortInd}='data';
            inputPortInd=inputPortInd+1;
            if strcmpi(obj.ModulationSource,'Input port')
                if strcmpi(obj.OutputType,'Scalar')
                    varargout{inputPortInd}='valid';
                else
                    varargout{inputPortInd}='ctrl';
                end
            else
                varargout{inputPortInd}='valid';
            end
            if strcmpi(obj.ModulationSource,'Input port')
                inputPortInd=inputPortInd+1;
                varargout{inputPortInd}='modSel';
            end
            if(obj.NoiseVariance)
                inputPortInd=inputPortInd+1;
                varargout{inputPortInd}='nVar';
            end
        end

        function varargout=getOutputNamesImpl(obj)
            varargout=cell(1,getNumOutputs(obj));
            outputPortInd=1;
            varargout{outputPortInd}='data';
            outputPortInd=outputPortInd+1;
            if strcmpi(obj.ModulationSource,'Input port')
                if strcmpi(obj.OutputType,'Scalar')
                    varargout{outputPortInd}='valid';
                else
                    varargout{outputPortInd}='ctrl';
                end
            else
                varargout{outputPortInd}='valid';
            end
            if strcmpi(obj.OutputType,'Scalar')
                outputPortInd=outputPortInd+1;
                varargout{outputPortInd}='ready';
            end
        end

        function varargout=getOutputSizeImpl(obj)
            varargout=cell(1,getNumOutputs(obj));
            outputPortInd=1;
            if(strcmp(obj.ModulationSource,'Property'))
                if(strcmpi(obj.OutputType,'Vector'))
                    if(strcmp(obj.ModulationScheme,'BPSK'))
                        sizeOut=1;
                    elseif(strcmp(obj.ModulationScheme,'QPSK'))
                        sizeOut=2;
                    elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                        sizeOut=3;
                    elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                        sizeOut=4;
                    elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                        sizeOut=5;
                    elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                        sizeOut=4;
                    elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                        sizeOut=6;
                    else
                        sizeOut=8;
                    end
                else
                    sizeOut=1;
                end
            else
                if(strcmpi(obj.OutputType,'Vector'))
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        sizeOut=1;
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        sizeOut=2;
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        sizeOut=3;
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        sizeOut=4;
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        sizeOut=5;
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        sizeOut=4;
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        sizeOut=6;
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        sizeOut=8;
                    end
                else
                    sizeOut=1;
                end
            end
            varargout{outputPortInd}=[sizeOut,1];
            outputPortInd=outputPortInd+1;
            if(strcmpi(obj.ModulationSource,'Input port')&&strcmpi(obj.OutputType,'Vector'))
                varargout{outputPortInd}=propagatedInputSize(obj,2);
            else
                varargout{outputPortInd}=[1,1];
            end
            if strcmpi(obj.OutputType,'Scalar')
                outputPortInd=outputPortInd+1;
                varargout{outputPortInd}=[1,1];
            end
        end

        function varargout=getOutputDataTypeImpl(obj,varargin)
            if(strcmp(obj.DecisionType,'Hard'))
                if strcmpi(obj.OutputType,'Scalar')
                    varargout={'logical','logical','logical'};
                else
                    if(strcmpi(obj.ModulationSource,'Property'))
                        varargout={'logical','logical'};
                    else
                        varargout={'logical',samplecontrolbustype};
                    end
                end
            else
                inputDT=propagatedInputDataType(obj,1);

                if(obj.NoiseVariance)
                    totalBitGrowth=13;
                else
                    totalBitGrowth=4;
                end

                if isnumerictype(inputDT)||isfi(inputDT)
                    outputDT=numerictype(1,inputDT.WordLength+totalBitGrowth,inputDT.FractionLength);
                elseif strcmpi(inputDT,'int8')
                    outputDT=numerictype(1,8+totalBitGrowth,0);
                elseif strcmpi(inputDT,'int16')
                    outputDT=numerictype(1,16+totalBitGrowth,0);
                elseif strcmpi(inputDT,'int32')
                    outputDT=numerictype(1,32+totalBitGrowth,0);
                else
                    outputDT=inputDT;
                end
                if strcmpi(obj.OutputType,'Scalar')
                    varargout={outputDT,'logical','logical'};
                else
                    if(strcmpi(obj.ModulationSource,'Property'))
                        varargout={outputDT,'logical'};
                    else
                        varargout={outputDT,samplecontrolbustype};
                    end
                end
            end
        end

        function varargout=isOutputComplexImpl(~)

            varargout=cell(1,nargout);
            for k=1:nargout
                varargout{k}=false;
            end
        end

        function flag=isInputComplexityMutableImpl(~,~)

            flag=true;
        end

        function varargout=isOutputFixedSizeImpl(~)

            varargout=cell(1,nargout);
            for k=1:nargout
                varargout{k}=true;
            end
        end

        function updateImpl(obj,varargin)
            obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
            if(strcmpi(obj.ModulationSource,'Property'))
                if(strcmpi(obj.OutputType,'Vector'))
                    dataValid=varargin{2};
                else
                    dataValid=varargin{2}&&obj.readyReg;
                end
            else
                if(strcmpi(obj.OutputType,'Vector'))

                    ctrl=varargin{2};
                    obj.sampleBusController(ctrl);
                    dataValid=obj.validInp;
                    if(obj.startReg)
                        if(obj.startInp)
                            obj.countFreeze(:)=0;
                            obj.inpVecCntr1(:)=1;
                        else
                            obj.inpVecCntr1(:)=obj.inpVecCntr1+1;
                        end
                    end
                    if(obj.endInp)
                        obj.inpVecCntr1(:)=0;
                    end
                else

                    dataValid=varargin{2}&&obj.readyReg;
                end
            end
            if(strcmpi(obj.ModulationSource,'Property'))
                obj.nVariance(:)=obj.nVarDelay(obj.nVariance1);
                if(dataValid==true)
                    obj.dataIn(:)=varargin{1};
                    if(obj.NoiseVariance)
                        obj.nVariance1(:)=varargin{3};
                        if(obj.nVariance1(:)==0)
                            coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidNvarValue');
                        end
                    end
                    if(strcmp(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                        obj.inpSCap(:)=(obj.dataIn);
                    else
                        obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue;
                    end
                end

                obj.reminpSCap2(:)=obj.buffSCapBlk1(complex(obj.inpSCap));

                if(strcmp(obj.ModulationScheme,'BPSK'))
                    [obj.pskMappedReg(:),obj.valid1]=obj.PSKConvBlock(obj.inpSCap,1,dataValid);
                    if(obj.valid1)
                        obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'QPSK'))
                    [obj.pskMappedReg(:),obj.valid1]=obj.PSKConvBlock(obj.inpSCap,2,dataValid);
                    if(obj.valid1)
                        obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                    [obj.pskMappedReg(:),obj.valid1]=obj.PSKConvBlock(obj.inpSCap,3,dataValid);
                    if(obj.valid1)
                        obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                    [obj.pskMappedReg(:),obj.valid1]=obj.PSKConvBlock(obj.inpSCap,4,dataValid);
                    if(obj.valid1)
                        obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                    [obj.pskMappedReg(:),obj.valid1]=obj.PSKConvBlock(obj.inpSCap,5,dataValid);
                    if(obj.valid1)
                        obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'16-QAM'))
                    obj.valueLReg(:)=obj.LValues(1);
                    [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.valid1]=obj.QAMBlockConv(obj.inpSCap,4,obj.distbwSymbols,dataValid);
                    if(obj.valid1)
                        obj.buffInPhaseReg(:)=obj.InPhaseReg;
                        obj.buffQPhaseReg(:)=obj.QPhaseReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                    obj.valueLReg(:)=obj.LValues(2);
                    obj.tempLvals(1,:)=obj.LValues(1);
                    [obj.InPhaseReg,obj.QPhaseReg,obj.valid1]=obj.QAMBlockConv(obj.inpSCap,6,obj.distbwSymbols,dataValid);
                    if(obj.valid1)
                        obj.buffInPhaseReg(:)=obj.InPhaseReg;
                        obj.buffQPhaseReg(:)=obj.QPhaseReg;
                    end
                elseif(strcmp(obj.ModulationScheme,'256-QAM'))
                    obj.valueLReg(:)=obj.LValues(3);
                    obj.tempLvals(1,:)=obj.LValues(2);
                    obj.tempLvals(2,:)=obj.LValues(1);
                    [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.valid1]=obj.QAMBlockConv(obj.inpSCap,8,obj.distbwSymbols,dataValid);
                    if(obj.valid1)
                        obj.buffInPhaseReg(:)=obj.InPhaseReg;
                        obj.buffQPhaseReg(:)=obj.QPhaseReg;
                    end
                end

                if(strcmp(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))

                    obj.reminpSCap3(:)=obj.buffSCapBlk2(complex(obj.inpSCap));

                    if(obj.valid1)
                        obj.qamTableUpdate(1,:)=complex(-obj.distbwSymbols,obj.distbwSymbols);
                        obj.qamTableUpdate(2,:)=complex(obj.distbwSymbols,-obj.distbwSymbols);
                        obj.qamTableUpdate(3,:)=complex(obj.valueLReg+obj.distbwSymbols,obj.distbwSymbols);
                        obj.qamTableUpdate(4,:)=complex(obj.distbwSymbols,obj.valueLReg+obj.distbwSymbols);
                        obj.qamTableUpdate(5,:)=complex(obj.tempLvals(1)+obj.distbwSymbols,obj.distbwSymbols);
                        obj.qamTableUpdate(6,:)=complex(obj.distbwSymbols,obj.tempLvals(1)+obj.distbwSymbols);
                        obj.qamTableUpdate(7,:)=complex(obj.tempLvals(2)+obj.distbwSymbols,obj.distbwSymbols);
                        obj.qamTableUpdate(8,:)=complex(obj.distbwSymbols,obj.tempLvals(2)+obj.distbwSymbols);
                        obj.qamTableUpdate(9,:)=complex(obj.tempLvals(3)+obj.distbwSymbols,obj.distbwSymbols);
                        obj.qamTableUpdate(10,:)=complex(obj.distbwSymbols,obj.tempLvals(3)+obj.distbwSymbols);

                        obj.LValuesTemp(:)=[obj.valueLReg;obj.tempLvals(1);obj.tempLvals(2);obj.tempLvals(3)];
                        obj.qValuesReal(:)=obj.LValuesTemp-obj.InPhaseReg(1:4);
                        obj.qValuesImag(:)=obj.LValuesTemp-obj.QPhaseReg(1:4);
                    end
                    if(strcmpi(obj.OutputType,'Vector'))
                        if(strcmp(obj.ModulationScheme,'16-QAM'))
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),imag(obj.reminpSCap3),obj.buffqValuesImag(1)];
                            obj.qamTableUpdate(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(:)=[1,2,2,2];
                            obj.llrQVecOrder(:)=[2,2,1,2];
                            obj.qamTableUpdate(1:4,:)=obj.qamTableUpdate(obj.shuffleOrder(1:4),:);
                            obj.signCalc(:)=obj.signCalc(obj.shuffleOrder(1:4));
                            obj.llrInVecOrder(:)=obj.llrInVecOrder(obj.shuffleOrder(1:4));
                            obj.llrQVecOrder(:)=obj.llrQVecOrder(obj.shuffleOrder(1:4));
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(complex(obj.InPhaseReg(2),obj.QPhaseReg(2))-obj.refConstPoint)*ones(4,1);
                                obj.llrComputeVec2(:)=complex(obj.InPhaseReg(obj.llrInVecOrder),obj.QPhaseReg(obj.llrQVecOrder))-obj.qamTableUpdate(1:4,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            obj.validLLRcomp=obj.valid1;

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.validLLRcomp);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if((obj.signCalc(1)<=0&&obj.coeffSign(1)>0)||(obj.signCalc(1)>0&&obj.coeffSign(1)<=0))
                                    obj.defaultLLROut(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.defaultLLROut(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.signCalc(2)<=0&&obj.coeffSign(2)>0)||(obj.signCalc(2)>0&&obj.coeffSign(2)<=0))
                                    obj.defaultLLROut(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.defaultLLROut(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.signCalc(3)<=0&&obj.coeffSign(3)>0)||(obj.signCalc(3)>0&&obj.coeffSign(3)<=0))
                                    obj.defaultLLROut(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.defaultLLROut(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.signCalc(4)<=0&&obj.coeffSign(4)>0)||(obj.signCalc(4)>0&&obj.coeffSign(4)<=0))
                                    obj.defaultLLROut(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.defaultLLROut(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outValidReg1=false;
                                obj.defaultLLROut(:)=0;
                            end

                            obj.outLLRReg1(:)=obj.defaultLLROut;
                            obj.remIndex(:)=1;
                        elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2)];
                            obj.qamTableUpdate(1:6,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                            obj.llrInVecOrder(:)=[1,2,3,3,3,3];
                            obj.llrQVecOrder(:)=[3,3,3,1,2,3];
                            obj.qamTableUpdate(1:6,:)=obj.qamTableUpdate(obj.shuffleOrder(1:6),:);
                            obj.signCalc(:)=obj.signCalc(obj.shuffleOrder(1:6));
                            obj.llrInVecOrder(:)=obj.llrInVecOrder(obj.shuffleOrder(1:6));
                            obj.llrQVecOrder(:)=obj.llrQVecOrder(obj.shuffleOrder(1:6));
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(complex(obj.InPhaseReg(3),obj.QPhaseReg(3))-obj.refConstPoint)*ones(6,1);
                                obj.llrComputeVec2(:)=complex(obj.InPhaseReg(obj.llrInVecOrder),obj.QPhaseReg(obj.llrQVecOrder))-obj.qamTableUpdate(1:6,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if((obj.signCalc(1)<=0&&obj.coeffSign(1)>0)||(obj.signCalc(1)>0&&obj.coeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.signCalc(2)<=0&&obj.coeffSign(2)>0)||(obj.signCalc(2)>0&&obj.coeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.signCalc(3)<=0&&obj.coeffSign(3)>0)||(obj.signCalc(3)>0&&obj.coeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.signCalc(4)<=0&&obj.coeffSign(4)>0)||(obj.signCalc(4)>0&&obj.coeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if((obj.signCalc(5)<=0&&obj.coeffSign(5)>0)||(obj.signCalc(5)>0&&obj.coeffSign(5)<=0))
                                    obj.outLLRReg1(5,:)=-obj.tempLLROut1(5);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                if((obj.signCalc(6)<=0&&obj.coeffSign(6)>0)||(obj.signCalc(6)>0&&obj.coeffSign(6)<=0))
                                    obj.outLLRReg1(6,:)=-obj.tempLLROut1(6);
                                else
                                    obj.outLLRReg1(6,:)=obj.tempLLROut1(6);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(strcmp(obj.ModulationScheme,'256-QAM'))
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),obj.buffqValuesReal(3),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2),obj.buffqValuesImag(3)];
                            obj.qamTableUpdate(1:8,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(7),obj.qamTableUpdate(2),...
                            obj.qamTableUpdate(4),obj.qamTableUpdate(6),obj.qamTableUpdate(8)];
                            obj.llrInVecOrder(:)=[1,2,3,4,4,4,4,4];
                            obj.llrQVecOrder(:)=[4,4,4,4,1,2,3,4];
                            obj.qamTableUpdate(1:8,:)=obj.qamTableUpdate(obj.shuffleOrder,:);
                            obj.signCalc(:)=obj.signCalc(obj.shuffleOrder);
                            obj.llrInVecOrder(:)=obj.llrInVecOrder(obj.shuffleOrder);
                            obj.llrQVecOrder(:)=obj.llrQVecOrder(obj.shuffleOrder);
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(complex(obj.InPhaseReg(4),obj.QPhaseReg(4))-obj.refConstPoint)*ones(8,1);
                                obj.llrComputeVec2(:)=complex(obj.InPhaseReg(obj.llrInVecOrder),obj.QPhaseReg(obj.llrQVecOrder))-obj.qamTableUpdate(1:8,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if((obj.signCalc(1)<=0&&obj.coeffSign(1)>0)||(obj.signCalc(1)>0&&obj.coeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.signCalc(2)<=0&&obj.coeffSign(2)>0)||(obj.signCalc(2)>0&&obj.coeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.signCalc(3)<=0&&obj.coeffSign(3)>0)||(obj.signCalc(3)>0&&obj.coeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.signCalc(4)<=0&&obj.coeffSign(4)>0)||(obj.signCalc(4)>0&&obj.coeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if((obj.signCalc(5)<=0&&obj.coeffSign(5)>0)||(obj.signCalc(5)>0&&obj.coeffSign(5)<=0))
                                    obj.outLLRReg1(5,:)=-obj.tempLLROut1(5);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                if((obj.signCalc(6)<=0&&obj.coeffSign(6)>0)||(obj.signCalc(6)>0&&obj.coeffSign(6)<=0))
                                    obj.outLLRReg1(6,:)=-obj.tempLLROut1(6);
                                else
                                    obj.outLLRReg1(6,:)=obj.tempLLROut1(6);
                                end
                                if((obj.signCalc(7)<=0&&obj.coeffSign(7)>0)||(obj.signCalc(7)>0&&obj.coeffSign(7)<=0))
                                    obj.outLLRReg1(7,:)=-obj.tempLLROut1(7);
                                else
                                    obj.outLLRReg1(7,:)=obj.tempLLROut1(7);
                                end
                                if((obj.signCalc(8)<=0&&obj.coeffSign(8)>0)||(obj.signCalc(8)>0&&obj.coeffSign(8)<=0))
                                    obj.outLLRReg1(8,:)=-obj.tempLLROut1(8);
                                else
                                    obj.outLLRReg1(8,:)=obj.tempLLROut1(8);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    else

                        obj.indexReg(:)=obj.index;
                        if(strcmp(obj.ModulationScheme,'16-QAM'))
                            obj.index(:)=3;
                            obj.llrvec1Index(:)=2;
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),imag(obj.reminpSCap3),obj.buffqValuesImag(1)];
                            obj.qamTableUpdate1(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(:)=[1,2,2,2];
                            obj.llrQVecOrder(:)=[2,2,1,2];
                            obj.qamTableUpdateScalar(1:4,:)=obj.qamTableUpdate1(obj.shuffleOrder(1:4));
                            obj.signCalcScalar(:)=obj.signCalc(obj.shuffleOrder(1:4));
                            obj.llrInVecOrderScalar(:)=obj.llrInVecOrder(obj.shuffleOrder(1:4));
                            obj.llrQVecOrderScalar(:)=obj.llrQVecOrder(obj.shuffleOrder(1:4));
                        elseif(strcmp(obj.ModulationScheme,'64-QAM'))
                            obj.index(:)=5;
                            obj.llrvec1Index(:)=3;
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2)];
                            obj.qamTableUpdate1(1:6,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                            obj.llrInVecOrder(:)=[1,2,3,3,3,3];
                            obj.llrQVecOrder(:)=[3,3,3,1,2,3];
                            obj.qamTableUpdateScalar(1:6,:)=obj.qamTableUpdate1(obj.shuffleOrder(1:6),:);
                            obj.signCalcScalar(:)=obj.signCalc(obj.shuffleOrder(1:6));
                            obj.llrInVecOrderScalar(:)=obj.llrInVecOrder(obj.shuffleOrder(1:6));
                            obj.llrQVecOrderScalar(:)=obj.llrQVecOrder(obj.shuffleOrder(1:6));
                        else
                            obj.index(:)=7;
                            obj.llrvec1Index(:)=4;
                            obj.signCalc(:)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),obj.buffqValuesReal(3),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2),obj.buffqValuesImag(3)];
                            obj.qamTableUpdate1(1:8,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(7),obj.qamTableUpdate(2),...
                            obj.qamTableUpdate(4),obj.qamTableUpdate(6),obj.qamTableUpdate(8)];
                            obj.llrInVecOrder(:)=[1,2,3,4,4,4,4,4];
                            obj.llrQVecOrder(:)=[4,4,4,4,1,2,3,4];
                            obj.qamTableUpdateScalar(1:8,:)=obj.qamTableUpdate1(obj.shuffleOrder(1:8),:);
                            obj.signCalcScalar(:)=obj.signCalc(obj.shuffleOrder(1:8));
                            obj.llrInVecOrderScalar(:)=obj.llrInVecOrder(obj.shuffleOrder(1:8));
                            obj.llrQVecOrderScalar(:)=obj.llrQVecOrder(obj.shuffleOrder(1:8));
                        end

                        if(obj.valid1)
                            obj.valid3=true;
                            obj.count1(:)=0;
                        end
                        if(obj.valid3)
                            obj.count1(:)=obj.counter(false,obj.index+1,false,obj.count1);
                        end
                        if(obj.count1>0&&obj.count1<=obj.index+1)
                            obj.index1(:)=obj.llrInVecOrderScalar(obj.count1);
                            obj.index2(:)=obj.llrQVecOrderScalar(obj.count1);
                            obj.index3(:)=obj.count1;
                        else
                            obj.valid3=false;
                            obj.index1(:)=obj.llrInVecOrderScalar(1);
                            obj.index2(:)=obj.llrQVecOrderScalar(1);
                            obj.index3(:)=1;
                        end

                        if(obj.valid3)
                            obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                            obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(obj.index1),obj.buffQPhaseReg(obj.index2))-obj.qamTableUpdateScalar(obj.index3));
                        else
                            obj.outLLRReg1(:)=0;
                            obj.outValidReg1=false;
                        end

                        obj.cond_val=obj.count1(:)~=0;
                        [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.cond_val&&obj.valid3);

                        if(obj.NoiseVariance)
                            if(obj.valid2)
                                if(obj.nVariance(:)~=0)
                                    if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                        obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                else
                                    obj.tempLLROut1(:)=obj.tempLLROut;
                                end
                            end
                        else
                            obj.tempLLROut1(:)=obj.tempLLROut;
                        end

                        if(obj.valid2)
                            if(obj.count1>1&&obj.count1<=obj.index+1)
                                coeff=(obj.signCalcScalar(obj.count1-1)<=0&&obj.coeffSign(obj.count1-1)>0)||(obj.signCalcScalar(obj.count1-1)>0&&obj.coeffSign(obj.count1-1)<=0);
                            else
                                coeff=(obj.signCalcScalar(obj.index+1)<=0&&obj.coeffSign(obj.index+1)>0)||(obj.signCalcScalar(obj.index+1)>0&&obj.coeffSign(obj.index+1)<=0);
                            end
                            if(coeff)
                                obj.outLLRReg1(:)=-(obj.tempLLROut1);
                            else
                                obj.outLLRReg1(:)=(obj.tempLLROut1);
                            end
                            obj.outValidReg1=true;
                        else
                            obj.outLLRReg1(:)=0;
                            obj.outValidReg1=false;
                        end

                        obj.count(:)=obj.counter(dataValid,obj.index,obj.readyReg,obj.count);
                        obj.readyReg=((obj.count==obj.index)||(obj.count==0&&~dataValid));
                    end
                    obj.outLLRReg(:)=obj.pipelineData(obj.outLLRReg1.').';
                    obj.outValidReg(:)=obj.pipelineValid(obj.outValidReg1);
                else

                    if(strcmpi(obj.OutputType,'Vector'))
                        if(strcmp(obj.ModulationScheme,'BPSK'))
                            obj.llrComputeVec1(:)=obj.inpSCap-obj.lookUpTable02(2);
                            obj.llrComputeVec2(:)=obj.inpSCap-obj.lookUpTable02(1);

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,dataValid);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance1(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance1;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                obj.outLLRReg1(:)=obj.tempLLROut1;
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(strcmp(obj.ModulationScheme,'QPSK'))
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(obj.pskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.pskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.pskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if(real(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(obj.pskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.pskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.pskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.pskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if(imag(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(obj.pskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.pskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.pskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.pskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.pskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if(imag(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(strcmp(obj.ModulationScheme,'32-PSK'))
                            if(obj.valid1)
                                obj.llrComputeVec1(:)=(obj.pskMappedReg(4)-obj.lookUpTable32(1))*ones(5,1);
                                obj.llrComputeVec2(1,:)=obj.pskMappedReg(1)-obj.lookUpTable32(2);
                                obj.llrComputeVec2(2,:)=obj.pskMappedReg(1)-obj.lookUpTable32(3);
                                obj.llrComputeVec2(3,:)=obj.pskMappedReg(2)-obj.lookUpTable32(4);
                                obj.llrComputeVec2(4,:)=obj.pskMappedReg(3)-obj.lookUpTable32(5);
                                obj.llrComputeVec2(5,:)=obj.pskMappedReg(4)-obj.lookUpTable32(6);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end

                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.valid1);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                if(imag(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap2)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if(imag(obj.buffpskMappedReg(3))<=obj.tanConsts(2)*real(obj.buffpskMappedReg(3)))
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5)*(-1);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                        obj.outLLRReg(:)=obj.pipelineData(obj.outLLRReg1.').';
                        obj.outValidReg(:)=obj.pipelineValid(obj.outValidReg1);
                    else

                        obj.indexReg(:)=obj.index;
                        if(strcmp(obj.ModulationScheme,'BPSK'))
                            obj.index(:)=0;
                            pskLookUp=obj.lookUpTable02;
                        elseif(strcmp(obj.ModulationScheme,'QPSK'))
                            obj.index(:)=1;
                            pskLookUp=obj.lookUpTable04;
                        elseif(strcmp(obj.ModulationScheme,'8-PSK'))
                            obj.index(:)=2;
                            pskLookUp=obj.lookUpTable08;
                        elseif(strcmp(obj.ModulationScheme,'16-PSK'))
                            obj.index(:)=3;
                            pskLookUp=obj.lookUpTable16;
                        else
                            obj.index(:)=4;
                            pskLookUp=obj.lookUpTable32;
                        end

                        if(obj.valid1)
                            obj.valid3=true;
                            obj.count1(:)=1;
                        end
                        if(obj.valid3)
                            if(strcmp(obj.ModulationScheme,'BPSK'))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.index)-pskLookUp(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.index,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-pskLookUp(ind2));
                            end
                            obj.cond_val=obj.count1(:)~=obj.index+2;
                            [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.cond_val);

                            if(obj.NoiseVariance)
                                if(obj.valid2)
                                    if(obj.nVariance(:)~=0)
                                        if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                            obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                        else
                                            obj.tempLLROut1(:)=obj.tempLLROut;
                                        end
                                    else
                                        obj.tempLLROut1(:)=obj.tempLLROut;
                                    end
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end

                            if(obj.valid2)
                                coeff=pskLLRSignCalc(obj,obj.index,obj.count1-2);
                                if(coeff)
                                    obj.outLLRReg1(:)=-(obj.tempLLROut1);
                                else
                                    obj.outLLRReg1(:)=(obj.tempLLROut1);
                                end

                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                            obj.count1(:)=obj.counter(false,obj.index+2,false,obj.count1);
                        else
                            obj.outLLRReg1(:)=0;
                            obj.outValidReg1=false;
                        end
                        obj.count(:)=obj.counter(dataValid,obj.index,obj.readyReg,obj.count);
                        obj.readyReg=((obj.count==obj.index)||(obj.count==0&&~dataValid));
                        if(obj.count1(:)==0)
                            obj.valid3=false;
                        end

                        obj.outLLRReg(:)=obj.pipelineData(obj.outLLRReg1.').';
                        obj.outValidReg(:)=obj.pipelineValid(obj.outValidReg1);
                    end
                end
            else

                obj.modSelReg1(:)=obj.modSelReg;
                obj.indexReg(:)=obj.index;
                obj.nVariance(:)=obj.nVarDelay(obj.nVariance1);
                if(strcmpi(obj.OutputType,'Vector'))
                    if(dataValid&&obj.startInp)
                        obj.modSelReg(:)=varargin{3};
                    end
                else
                    if(dataValid)
                        obj.modSelReg(:)=varargin{3};
                    end
                end

                if(dataValid)
                    obj.dataIn(:)=varargin{1};
                    if(obj.NoiseVariance)
                        obj.nVariance1(:)=varargin{4};
                        if(obj.nVariance1(:)==0)
                            coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidNvarValue');
                        end
                    end



                    if(strcmpi(obj.OutputType,'Vector'))
                        if(dataValid&&obj.startInp)
                            modSelSampled=varargin{3};
                        else
                            modSelTemp=varargin{3};
                            modSelSampled=cast(0,'like',modSelTemp);
                        end
                    else
                        modSelSampled=varargin{3};
                    end

                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        obj.index(:)=0;
                        if(obj.modSelReg==0)
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        elseif(obj.modSelReg==3)
                            obj.index(:)=3;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue16;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        elseif(obj.modSelReg==3)
                            obj.index(:)=3;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue16;
                        elseif(obj.modSelReg==4)
                            obj.index(:)=3;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(10);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        elseif(obj.modSelReg==3)
                            obj.index(:)=3;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue16;
                        elseif(obj.modSelReg==4)
                            obj.index(:)=3;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(10);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        elseif(obj.modSelReg==5)
                            obj.index(:)=4;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue32;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        elseif(obj.modSelReg==3)
                            obj.index(:)=3;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue16;
                        elseif(obj.modSelReg==4)
                            obj.index(:)=3;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(10);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        elseif(obj.modSelReg==5)
                            obj.index(:)=4;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue32;
                        elseif(obj.modSelReg==6)
                            obj.index(:)=5;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(42);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            else
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValueMaxMod');
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.modSelReg==0)
                            obj.index(:)=0;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                        elseif(obj.modSelReg==1)
                            obj.index(:)=1;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue4;
                        elseif(obj.modSelReg==2)
                            obj.index(:)=2;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue8;
                        elseif(obj.modSelReg==3)
                            obj.index(:)=3;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue16;
                        elseif(obj.modSelReg==4)
                            obj.index(:)=3;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(10);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        elseif(obj.modSelReg==5)
                            obj.index(:)=4;
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue32;
                        elseif(obj.modSelReg==6)
                            obj.index(:)=5;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(42);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        elseif(obj.modSelReg==7)
                            obj.index(:)=7;
                            if(strcmpi(obj.NormMethod,'Unit average power'))
                                obj.distbwSymbols(:)=1/sqrt(170);
                                obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                            end
                            obj.inpSCap(:)=obj.dataIn;
                        else
                            obj.inpSCap(:)=(obj.dataIn)*obj.LUTvalue2;
                            obj.modSelReg(:)=0;
                            obj.index(:)=0;
                            if~any((0:7)==(modSelSampled))
                                coder.internal.warning('whdl:GeneralizedSymbolDemodulator:InvalidModSelValue');
                            end
                        end
                    end
                    if(strcmpi(obj.OutputType,'Vector'))
                        obj.countInVec(:)=obj.countInVec(:)+obj.index+1;
                        if obj.countInVec>length(obj.outLLRReg1)
                            obj.countInVec(:)=obj.countInVec-length(obj.outLLRReg1);
                        end
                        if obj.endInp&&obj.countInVec~=length(obj.outLLRReg1)
                            coder.internal.warning('whdl:GeneralizedSymbolDemodulator:SymLenNonMultipleVecLen');
                        end
                    end
                end
                if(strcmpi(obj.OutputType,'Vector'))
                    obj.reminpSCap2(:)=obj.buffSCapBlk1(complex(obj.inpSCap(:)));
                    if dataValid
                        if obj.modSelReg==7||obj.modSelReg==6||obj.modSelReg==4
                            dataValidpsk=false;
                            dataValidqam=true;
                        else
                            dataValidpsk=true;
                            dataValidqam=false;
                        end
                    else
                        dataValidpsk=false;
                        dataValidqam=false;
                    end

                    if(strcmpi(obj.MaxModulation,'BPSK')||strcmpi(obj.MaxModulation,'QPSK')||strcmpi(obj.MaxModulation,'8-PSK')||strcmpi(obj.MaxModulation,'16-PSK'))
                        [obj.pskMappedReg1,obj.valPSK]=obj.PSKConvBlock(obj.inpSCap,obj.index+1,dataValid);
                        obj.validpsk=obj.delaypskConv(obj.valPSK);
                        [obj.pskMappedReg(:),~]=obj.buffpskConvBlk(obj.pskMappedReg1,obj.valPSK);
                        if(obj.validpsk)
                            obj.buffpskMappedReg(:)=obj.pskMappedReg;
                        end
                        obj.validqam=false;
                    elseif(strcmpi(obj.MaxModulation,'16-QAM')||strcmpi(obj.MaxModulation,'64-QAM')||strcmpi(obj.MaxModulation,'256-QAM')||strcmpi(obj.MaxModulation,'32-PSK'))
                        obj.InPhaseReg(:)=obj.InPhaseReg1;
                        obj.QPhaseReg(:)=obj.QPhaseReg1;
                        obj.validqam(:)=obj.validqam1;

                        [obj.InPhaseReg1,obj.QPhaseReg1,obj.validqam1]=obj.QAMBlockConv(obj.inpSCap,obj.index+1,obj.distbwSymbols,dataValidqam);
                        if obj.modSelReg1==7||obj.modSelReg1==6||obj.modSelReg1==4
                            if(obj.validqam)
                                obj.buffInPhaseReg(:)=obj.InPhaseReg;
                                obj.buffQPhaseReg(:)=obj.QPhaseReg;
                            end
                        end
                        [obj.pskMappedReg1(:),obj.valPSK]=obj.PSKConvBlock(obj.inpSCap,obj.index+1,dataValidpsk);
                        obj.validpsk=obj.delaypskConv(obj.valPSK);
                        [obj.pskMappedReg(:),~]=obj.buffpskConvBlk(obj.pskMappedReg1,obj.valPSK);
                        if(obj.validpsk)
                            obj.buffpskMappedReg(:)=obj.pskMappedReg;
                        end
                    end

                    obj.buffmodSelReg(:)=obj.delayUnit(obj.modSelReg);


                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmpi(obj.MaxModulation,'64-QAM')||strcmpi(obj.MaxModulation,'256-QAM')||strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.validqam)
                            if(obj.buffmodSelReg==4)
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(10);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end

                                obj.valueLReg(:)=obj.LValues(1);
                                obj.qamTableUpdate(1,:)=complex(-obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(2,:)=complex(obj.distbwSymbols,-obj.distbwSymbols);
                                obj.qamTableUpdate(3,:)=complex(obj.valueLReg+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(4,:)=complex(obj.distbwSymbols,obj.valueLReg+obj.distbwSymbols);
                                obj.LValuesTemp(:)=[obj.valueLReg;obj.tempLvals(1);obj.tempLvals(2);obj.tempLvals(3)];
                                obj.qValuesReal(:)=obj.LValuesTemp-obj.InPhaseReg(1:4);
                                obj.qValuesImag(:)=obj.LValuesTemp-obj.QPhaseReg(1:4);
                            end
                        end
                    end
                    if(strcmpi(obj.MaxModulation,'64-QAM')||strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.validqam)
                            if(obj.buffmodSelReg==6)
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(42);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end

                                obj.valueLReg(:)=obj.LValues(2);
                                obj.tempLvals(1,:)=obj.LValues(1);
                                obj.qamTableUpdate(1,:)=complex(-obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(2,:)=complex(obj.distbwSymbols,-obj.distbwSymbols);
                                obj.qamTableUpdate(3,:)=complex(obj.valueLReg+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(4,:)=complex(obj.distbwSymbols,obj.valueLReg+obj.distbwSymbols);
                                obj.qamTableUpdate(5,:)=complex(obj.tempLvals(1)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(6,:)=complex(obj.distbwSymbols,obj.tempLvals(1)+obj.distbwSymbols);
                                obj.LValuesTemp(:)=[obj.valueLReg;obj.tempLvals(1);obj.tempLvals(2);obj.tempLvals(3)];
                                obj.qValuesReal(:)=obj.LValuesTemp-obj.InPhaseReg(1:4);
                                obj.qValuesImag(:)=obj.LValuesTemp-obj.QPhaseReg(1:4);
                            end
                        end
                    end
                    if(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.validqam)
                            if(obj.buffmodSelReg==7)
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(170);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end
                                obj.valueLReg(:)=obj.LValues(3);
                                obj.tempLvals(1,:)=obj.LValues(2);
                                obj.tempLvals(2,:)=obj.LValues(1);
                                obj.qamTableUpdate(1,:)=complex(-obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(2,:)=complex(obj.distbwSymbols,-obj.distbwSymbols);
                                obj.qamTableUpdate(3,:)=complex(obj.valueLReg+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(4,:)=complex(obj.distbwSymbols,obj.valueLReg+obj.distbwSymbols);
                                obj.qamTableUpdate(5,:)=complex(obj.tempLvals(1)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(6,:)=complex(obj.distbwSymbols,obj.tempLvals(1)+obj.distbwSymbols);
                                obj.qamTableUpdate(7,:)=complex(obj.tempLvals(2)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(8,:)=complex(obj.distbwSymbols,obj.tempLvals(2)+obj.distbwSymbols);
                                obj.LValuesTemp(:)=[obj.valueLReg;obj.tempLvals(1);obj.tempLvals(2);obj.tempLvals(3)];
                                obj.qValuesReal(:)=obj.LValuesTemp-obj.InPhaseReg(1:4);
                                obj.qValuesImag(:)=obj.LValuesTemp-obj.QPhaseReg(1:4);
                            end
                        end
                    end

                    obj.reminpSCap3(:)=obj.buffSCapBlk3(complex(obj.inpSCap));


                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.buffmodSelReg==4)
                            obj.shuffleOrderFin(1:4)=obj.shuffleOrder(1:4);
                            obj.coeffSignFin(1:4)=obj.coeffSign(1:4);
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.buffmodSelReg==4)
                            obj.shuffleOrderFin(1:4)=obj.shuffleOrder16(1:4);
                            obj.coeffSignFin(1:4)=obj.coeffSign16(1:4);
                        else
                            obj.shuffleOrderFin(1:6)=obj.shuffleOrder(1:6);
                            obj.coeffSignFin(1:6)=obj.coeffSign(1:6);
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.buffmodSelReg==4)
                            obj.shuffleOrderFin(1:4)=obj.shuffleOrder16(1:4);
                            obj.coeffSignFin(1:4)=obj.coeffSign16(1:4);
                        elseif(obj.buffmodSelReg==6)
                            obj.shuffleOrderFin(1:6)=obj.shuffleOrder64(1:6);
                            obj.coeffSignFin(1:6)=obj.coeffSign64(1:6);
                        else
                            obj.shuffleOrderFin(:)=obj.shuffleOrder;
                            obj.coeffSignFin(:)=obj.coeffSign;
                        end
                    end

                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        if(obj.validpsk)
                            obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                            obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                        else
                            obj.llrComputeVec1(:)=0;
                            obj.llrComputeVec2(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==2)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:4,:)=(obj.buffpskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==2)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==3)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:4,:)=(obj.buffpskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            obj.signCalc(1:4)=[real(obj.reminpSCap2),obj.qValuesReal(1),imag(obj.reminpSCap2),obj.qValuesImag(1)];
                            obj.qamTableUpdate(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(1:4)=[1,2,2,2];
                            obj.llrQVecOrder(1:4)=[2,2,1,2];
                            obj.qamTableUpdate(1:4)=obj.qamTableUpdate(obj.shuffleOrderFin(1:4),:);
                            obj.signCalc(1:4)=obj.signCalc(obj.shuffleOrderFin(1:4));
                            obj.llrInVecOrder(1:4)=obj.llrInVecOrder(obj.shuffleOrderFin(1:4));
                            obj.llrQVecOrder(1:4)=obj.llrQVecOrder(obj.shuffleOrderFin(1:4));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:4)=(complex(obj.InPhaseReg(2),obj.QPhaseReg(2))-obj.refConstPoint)*ones(4,1);
                                obj.llrComputeVec2(1:4)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:4)),obj.QPhaseReg(obj.llrQVecOrder(1:4)))-obj.qamTableUpdate(1:4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==2)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==3)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:4,:)=(obj.buffpskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==4)
                            obj.signCalc(1:4)=[real(obj.reminpSCap2),obj.qValuesReal(1),imag(obj.reminpSCap2),obj.qValuesImag(1)];
                            obj.qamTableUpdate(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(1:4)=[1,2,2,2];
                            obj.llrQVecOrder(1:4)=[2,2,1,2];
                            obj.qamTableUpdate(1:4)=obj.qamTableUpdate(obj.shuffleOrderFin(1:4),:);
                            obj.signCalc(1:4)=obj.signCalc(obj.shuffleOrderFin(1:4));
                            obj.llrInVecOrder(1:4)=obj.llrInVecOrder(obj.shuffleOrderFin(1:4));
                            obj.llrQVecOrder(1:4)=obj.llrQVecOrder(obj.shuffleOrderFin(1:4));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:4)=(complex(obj.InPhaseReg(2),obj.QPhaseReg(2))-obj.refConstPoint)*ones(4,1);
                                obj.llrComputeVec2(1:4)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:4)),obj.QPhaseReg(obj.llrQVecOrder(1:4)))-obj.qamTableUpdate(1:4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:5,:)=(obj.buffpskMappedReg(4)-obj.lookUpTable32(1))*ones(5,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable32(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable32(5);
                                obj.llrComputeVec2(5,:)=obj.buffpskMappedReg(4)-obj.lookUpTable32(6);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==2)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==3)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:4,:)=(obj.buffpskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==4)
                            obj.signCalc(1:4)=[real(obj.reminpSCap2),obj.qValuesReal(1),imag(obj.reminpSCap2),obj.qValuesImag(1)];
                            obj.qamTableUpdate(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(1:4,:)=[1,2,2,2];
                            obj.llrQVecOrder(1:4,:)=[2,2,1,2];
                            obj.qamTableUpdate(1:4,:)=obj.qamTableUpdate(obj.shuffleOrderFin(1:4),:);
                            obj.signCalc(1:4)=obj.signCalc(obj.shuffleOrderFin(1:4));
                            obj.llrInVecOrder(1:4,:)=obj.llrInVecOrder(obj.shuffleOrderFin(1:4));
                            obj.llrQVecOrder(1:4,:)=obj.llrQVecOrder(obj.shuffleOrderFin(1:4));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:4,:)=(complex(obj.InPhaseReg(2),obj.QPhaseReg(2))-obj.refConstPoint)*ones(4,1);
                                obj.llrComputeVec2(1:4,:)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:4,:)),obj.QPhaseReg(obj.llrQVecOrder(1:4,:)))-obj.qamTableUpdate(1:4,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg(:)==5)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:5,:)=(obj.buffpskMappedReg(4)-obj.lookUpTable32(1))*ones(5,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable32(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable32(5);
                                obj.llrComputeVec2(5,:)=obj.buffpskMappedReg(4)-obj.lookUpTable32(6);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            obj.signCalc(1:6)=[real(obj.reminpSCap2),obj.qValuesReal(1),obj.qValuesReal(2),imag(obj.reminpSCap2),obj.qValuesImag(1),obj.qValuesImag(2)];
                            obj.qamTableUpdate(1:6)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                            obj.llrInVecOrder(1:6)=[1,2,3,3,3,3];
                            obj.llrQVecOrder(1:6)=[3,3,3,1,2,3];
                            obj.qamTableUpdate(1:6)=obj.qamTableUpdate(obj.shuffleOrderFin(1:6),:);
                            obj.signCalc(1:6)=obj.signCalc(obj.shuffleOrderFin(1:6));
                            obj.llrInVecOrder(1:6)=obj.llrInVecOrder(obj.shuffleOrderFin(1:6));
                            obj.llrQVecOrder(1:6)=obj.llrQVecOrder(obj.shuffleOrderFin(1:6));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:6)=(complex(obj.InPhaseReg(3),obj.QPhaseReg(3))-obj.refConstPoint)*ones(6,1);
                                obj.llrComputeVec2(1:6)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:6,:)),obj.QPhaseReg(obj.llrQVecOrder(1:6,:)))-obj.qamTableUpdate(1:6,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.buffmodSelReg==0)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1,:)=obj.reminpSCap2-obj.lookUpTable02(2);
                                obj.llrComputeVec2(1,:)=obj.reminpSCap2-obj.lookUpTable02(1);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==1)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:2,:)=(obj.buffpskMappedReg(1)-obj.lookUpTable04(1))*ones(2,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable04(3);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==2)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:3,:)=(obj.buffpskMappedReg(2)-obj.lookUpTable08(1))*ones(3,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable08(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable08(4);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==3)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:4,:)=(obj.buffpskMappedReg(3)-obj.lookUpTable16(1))*ones(4,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable16(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable16(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable16(5);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg==4)
                            obj.signCalc(1:4)=[real(obj.reminpSCap2),obj.qValuesReal(1),imag(obj.reminpSCap2),obj.qValuesImag(1)];
                            obj.qamTableUpdate(1:4)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                            obj.llrInVecOrder(1:4)=[1,2,2,2];
                            obj.llrQVecOrder(1:4)=[2,2,1,2];
                            obj.qamTableUpdate(1:4)=obj.qamTableUpdate(obj.shuffleOrderFin(1:4),:);
                            obj.signCalc(1:4)=obj.signCalc(obj.shuffleOrderFin(1:4));
                            obj.llrInVecOrder(1:4)=obj.llrInVecOrder(obj.shuffleOrderFin(1:4));
                            obj.llrQVecOrder(1:4)=obj.llrQVecOrder(obj.shuffleOrderFin(1:4));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:4)=(complex(obj.InPhaseReg(2),obj.QPhaseReg(2))-obj.refConstPoint)*ones(4,1);
                                obj.llrComputeVec2(1:4)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:4,:)),obj.QPhaseReg(obj.llrQVecOrder(1:4,:)))-obj.qamTableUpdate(1:4,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg(:)==5)
                            if(obj.validpsk)
                                obj.llrComputeVec1(1:5,:)=(obj.buffpskMappedReg(4)-obj.lookUpTable32(1))*ones(5,1);
                                obj.llrComputeVec2(1,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(2);
                                obj.llrComputeVec2(2,:)=obj.buffpskMappedReg(1)-obj.lookUpTable32(3);
                                obj.llrComputeVec2(3,:)=obj.buffpskMappedReg(2)-obj.lookUpTable32(4);
                                obj.llrComputeVec2(4,:)=obj.buffpskMappedReg(3)-obj.lookUpTable32(5);
                                obj.llrComputeVec2(5,:)=obj.buffpskMappedReg(4)-obj.lookUpTable32(6);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        elseif(obj.buffmodSelReg(:)==6)
                            obj.signCalc(1:6)=[real(obj.reminpSCap2),obj.qValuesReal(1),obj.qValuesReal(2),imag(obj.reminpSCap2),obj.qValuesImag(1),obj.qValuesImag(2)];
                            obj.qamTableUpdate(1:6)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                            obj.llrInVecOrder(1:6)=[1,2,3,3,3,3];
                            obj.llrQVecOrder(1:6)=[3,3,3,1,2,3];
                            obj.qamTableUpdate(1:6)=obj.qamTableUpdate(obj.shuffleOrderFin(1:6),:);
                            obj.signCalc(1:6)=obj.signCalc(obj.shuffleOrderFin(1:6));
                            obj.llrInVecOrder(1:6)=obj.llrInVecOrder(obj.shuffleOrderFin(1:6));
                            obj.llrQVecOrder(1:6)=obj.llrQVecOrder(obj.shuffleOrderFin(1:6));
                            if(obj.validqam)
                                obj.llrComputeVec1(1:6)=(complex(obj.InPhaseReg(3),obj.QPhaseReg(3))-obj.refConstPoint)*ones(6,1);
                                obj.llrComputeVec2(1:6)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:6,:)),obj.QPhaseReg(obj.llrQVecOrder(1:6,:)))-obj.qamTableUpdate(1:6,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        else
                            obj.signCalc(1:8)=[real(obj.reminpSCap2),obj.qValuesReal(1),obj.qValuesReal(2),obj.qValuesReal(3),imag(obj.reminpSCap2),obj.qValuesImag(1),obj.qValuesImag(2),obj.qValuesImag(3)];
                            obj.qamTableUpdate(1:8)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(7),obj.qamTableUpdate(2),...
                            obj.qamTableUpdate(4),obj.qamTableUpdate(6),obj.qamTableUpdate(8)];
                            obj.llrInVecOrder(1:8)=[1,2,3,4,4,4,4,4];
                            obj.llrQVecOrder(1:8)=[4,4,4,4,1,2,3,4];
                            obj.qamTableUpdate(1:8)=obj.qamTableUpdate(obj.shuffleOrderFin,:);
                            obj.signCalc(1:8)=obj.signCalc(obj.shuffleOrderFin);
                            obj.llrInVecOrder(1:8)=obj.llrInVecOrder(obj.shuffleOrderFin);
                            obj.llrQVecOrder(1:8)=obj.llrQVecOrder(obj.shuffleOrderFin);
                            if(obj.validqam)
                                obj.llrComputeVec1(1:8)=(complex(obj.InPhaseReg(4),obj.QPhaseReg(4))-obj.refConstPoint)*ones(8,1);
                                obj.llrComputeVec2(1:8)=complex(obj.InPhaseReg(obj.llrInVecOrder(1:8,:)),obj.QPhaseReg(obj.llrQVecOrder(1:8,:)))-obj.qamTableUpdate(1:8,:);
                            else
                                obj.llrComputeVec1(:)=0;
                                obj.llrComputeVec2(:)=0;
                            end
                        end
                    end

                    if((obj.validpsk||obj.validqam))
                        obj.validLLRcomp=(obj.validpsk||obj.validqam);
                        obj.inpVecCntr2(:)=obj.inpVecCntr2+1;
                    else
                        obj.validLLRcomp=(obj.validpsk||obj.validqam);
                    end

                    [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.validLLRcomp);

                    if(obj.NoiseVariance)
                        if(obj.valid2)
                            if(obj.nVariance(:)~=0)
                                if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                    obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                else
                                    obj.tempLLROut1(:)=obj.tempLLROut;
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end
                        end
                    else
                        obj.tempLLROut1(:)=obj.tempLLROut;
                    end


                    obj.buffmodSelReg1(:)=obj.delayUnit1(obj.buffmodSelReg);
                    [obj.buffpskMappedReg1(:),~]=obj.buffpskConvBlk1(obj.buffpskMappedReg,obj.validpsk);
                    [obj.buffCoeffSign(:),~]=obj.delayCoeffSign(obj.coeffSignFin,true);
                    [obj.buffSignCalc(:),~]=obj.delaySignCalc(obj.signCalc,true);

                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        if(obj.valid2)
                            obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                            obj.outValidReg1=true;
                        else
                            obj.outLLRReg1(:)=0;
                            obj.outValidReg1=false;
                        end
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==2)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==2)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==3)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==2)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==3)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==4)
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if(imag(obj.buffpskMappedReg1(3))<=obj.tanConsts(2)*real(obj.buffpskMappedReg1(3)))
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5)*(-1);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==2)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==3)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==4)
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==5)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if(imag(obj.buffpskMappedReg1(3))<=obj.tanConsts(2)*real(obj.buffpskMappedReg1(3)))
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5)*(-1);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if((obj.buffSignCalc(5)<=0&&obj.buffCoeffSign(5)>0)||(obj.buffSignCalc(5)>0&&obj.buffCoeffSign(5)<=0))
                                    obj.outLLRReg1(5,:)=-obj.tempLLROut1(5);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                if((obj.buffSignCalc(6)<=0&&obj.buffCoeffSign(6)>0)||(obj.buffSignCalc(6)>0&&obj.buffCoeffSign(6)<=0))
                                    obj.outLLRReg1(6,:)=-obj.tempLLROut1(6);
                                else
                                    obj.outLLRReg1(6,:)=obj.tempLLROut1(6);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.buffmodSelReg1==0)
                            if(obj.valid2)
                                obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==1)
                            if(obj.valid2)
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(1);
                                end
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(2);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==2)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==3)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==4)
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1==5)
                            if(obj.valid2)
                                if(imag(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(2)*(-1);
                                end
                                if(real(obj.reminpSCap3)<=0)
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(1)*(-1);
                                end
                                if(imag(obj.buffpskMappedReg1(1))<=real(obj.buffpskMappedReg1(1)))
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3)*(-1);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if(imag(obj.buffpskMappedReg1(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg1(2)))
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4)*(-1);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if(imag(obj.buffpskMappedReg1(3))<=obj.tanConsts(2)*real(obj.buffpskMappedReg1(3)))
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5)*(-1);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        elseif(obj.buffmodSelReg1(:)==6)
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if((obj.buffSignCalc(5)<=0&&obj.buffCoeffSign(5)>0)||(obj.buffSignCalc(5)>0&&obj.buffCoeffSign(5)<=0))
                                    obj.outLLRReg1(5,:)=-obj.tempLLROut1(5);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                if((obj.buffSignCalc(6)<=0&&obj.buffCoeffSign(6)>0)||(obj.buffSignCalc(6)>0&&obj.buffCoeffSign(6)<=0))
                                    obj.outLLRReg1(6,:)=-obj.tempLLROut1(6);
                                else
                                    obj.outLLRReg1(6,:)=obj.tempLLROut1(6);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        else
                            if(obj.valid2)
                                if((obj.buffSignCalc(1)<=0&&obj.buffCoeffSign(1)>0)||(obj.buffSignCalc(1)>=0&&obj.buffCoeffSign(1)<=0))
                                    obj.outLLRReg1(1,:)=-obj.tempLLROut1(1);
                                else
                                    obj.outLLRReg1(1,:)=obj.tempLLROut1(1);
                                end
                                if((obj.buffSignCalc(2)<=0&&obj.buffCoeffSign(2)>0)||(obj.buffSignCalc(2)>0&&obj.buffCoeffSign(2)<=0))
                                    obj.outLLRReg1(2,:)=-obj.tempLLROut1(2);
                                else
                                    obj.outLLRReg1(2,:)=obj.tempLLROut1(2);
                                end
                                if((obj.buffSignCalc(3)<=0&&obj.buffCoeffSign(3)>0)||(obj.buffSignCalc(3)>0&&obj.buffCoeffSign(3)<=0))
                                    obj.outLLRReg1(3,:)=-obj.tempLLROut1(3);
                                else
                                    obj.outLLRReg1(3,:)=obj.tempLLROut1(3);
                                end
                                if((obj.buffSignCalc(4)<=0&&obj.buffCoeffSign(4)>0)||(obj.buffSignCalc(4)>0&&obj.buffCoeffSign(4)<=0))
                                    obj.outLLRReg1(4,:)=-obj.tempLLROut1(4);
                                else
                                    obj.outLLRReg1(4,:)=obj.tempLLROut1(4);
                                end
                                if((obj.buffSignCalc(5)<=0&&obj.buffCoeffSign(5)>0)||(obj.buffSignCalc(5)>0&&obj.buffCoeffSign(5)<=0))
                                    obj.outLLRReg1(5,:)=-obj.tempLLROut1(5);
                                else
                                    obj.outLLRReg1(5,:)=obj.tempLLROut1(5);
                                end
                                if((obj.buffSignCalc(6)<=0&&obj.buffCoeffSign(6)>0)||(obj.buffSignCalc(6)>0&&obj.buffCoeffSign(6)<=0))
                                    obj.outLLRReg1(6,:)=-obj.tempLLROut1(6);
                                else
                                    obj.outLLRReg1(6,:)=obj.tempLLROut1(6);
                                end
                                if((obj.buffSignCalc(7)<=0&&obj.buffCoeffSign(7)>0)||(obj.buffSignCalc(7)>0&&obj.buffCoeffSign(7)<=0))
                                    obj.outLLRReg1(7,:)=-obj.tempLLROut1(7);
                                else
                                    obj.outLLRReg1(7,:)=obj.tempLLROut1(7);
                                end
                                if((obj.buffSignCalc(8)<=0&&obj.buffCoeffSign(8)>0)||(obj.buffSignCalc(8)>0&&obj.buffCoeffSign(8)<=0))
                                    obj.outLLRReg1(8,:)=-obj.tempLLROut1(8);
                                else
                                    obj.outLLRReg1(8,:)=obj.tempLLROut1(8);
                                end
                                obj.outValidReg1=true;
                            else
                                obj.outLLRReg1(:)=0;
                                obj.outValidReg1=false;
                            end
                        end
                    end


                    obj.startInDelayedSig=obj.delayStartBlk(obj.startInp);
                    obj.endInDelayedSig=obj.delayEndBlk(obj.endInp);

                    if(obj.startInDelayedSig)
                        obj.startFirstOut=true;
                        obj.buffLLROutIndex(:)=1;
                    end
                    if(obj.endInDelayedSig)
                        obj.endFirstOut=true;
                    end

                    if(obj.valid2)
                        indexFinal=obj.llrLen(:)-obj.buffLLROutIndex(:)+1;

                        if(strcmpi(obj.MaxModulation,'BPSK'))
                            obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                            obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                        elseif(strcmpi(obj.MaxModulation,'QPSK'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                            end
                        elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                if(indexFinal>=2)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=2-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:2,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                            end
                        elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                            elseif(obj.buffmodSelReg1==2)
                                if(indexFinal>=3)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=3-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:3,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                            end
                        elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                            elseif(obj.buffmodSelReg1==2)
                                if(indexFinal>=3)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=3-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:3,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==3)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                            end
                        elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                if(indexFinal>=2)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=2-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:2,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==2)
                                if(indexFinal>=3)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=3-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:3,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==3)
                                if(indexFinal>=4)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=4-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:4,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==4)
                                if(indexFinal>=4)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=4-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:4,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+4,:)=obj.outLLRReg1(1:5,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+5;
                            end
                        elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                            elseif(obj.buffmodSelReg1==2)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                            elseif(obj.buffmodSelReg1==3)
                                if(indexFinal>=4)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=4-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:4,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==4)
                                if(indexFinal>=4)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=4-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:4,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1(:)==5)
                                if(indexFinal>=5)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+4,:)=obj.outLLRReg1(1:5,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+5;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=5-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:5,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+5,:)=obj.outLLRReg1(1:6,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+6;
                            end
                        elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                            if(obj.buffmodSelReg1==0)
                                obj.inpVecLLROut(obj.buffLLROutIndex,:)=obj.outLLRReg1(1,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+1;
                            elseif(obj.buffmodSelReg1==1)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+1,:)=obj.outLLRReg1(1:2,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+2;
                            elseif(obj.buffmodSelReg1==2)
                                if(indexFinal>=3)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+2,:)=obj.outLLRReg1(1:3,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+3;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=3-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:3,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1==3)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                            elseif(obj.buffmodSelReg1==4)
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+3,:)=obj.outLLRReg1(1:4,:);
                                obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+4;
                            elseif(obj.buffmodSelReg1(:)==5)
                                if(indexFinal>=5)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+4,:)=obj.outLLRReg1(1:5,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+5;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=5-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:5,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            elseif(obj.buffmodSelReg1(:)==6)
                                if(indexFinal>=6)
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+5,:)=obj.outLLRReg1(1:6,:);
                                    obj.buffLLROutIndex(:)=obj.buffLLROutIndex(:)+6;
                                else
                                    obj.inpVecLLROut(obj.buffLLROutIndex:obj.llrLen,:)=obj.outLLRReg1(1:indexFinal,:);
                                    obj.buffLLROutIndex(:)=1;
                                    obj.gap(:)=6-indexFinal;
                                    obj.buffAppendVecLLR(obj.buffAppendIndex:obj.buffAppendIndex+obj.gap-1,:)=obj.outLLRReg1(indexFinal+1:6,:);
                                    obj.buffAppendIndex(:)=obj.buffAppendIndex(:)+obj.gap;
                                end
                            else
                                obj.inpVecLLROut(obj.buffLLROutIndex:obj.buffLLROutIndex+7,:)=obj.outLLRReg1(1:8,:);
                                obj.buffLLROutIndex(:)=1;
                            end
                        end

                        if(obj.buffLLROutIndex>obj.llrLen)
                            obj.buffLLROutIndex(:)=1;
                        end

                        if(obj.buffLLROutIndex(:)==1)
                            obj.outLLRReg1(1:obj.llrLen,:)=obj.inpVecLLROut(1:obj.llrLen,:);
                            obj.ctrlOut.valid=true;
                        else
                            obj.outLLRReg1(1:obj.llrLen,:)=0;
                            obj.ctrlOut.valid=false;
                        end

                        if(obj.buffAppendIndex(:)>1)
                            obj.inpVecLLROut(1:obj.buffAppendIndex-1,:)=obj.buffAppendVecLLR(1:obj.buffAppendIndex-1,:);
                            obj.buffLLROutIndex(:)=obj.buffAppendIndex;
                            key=true;
                        else
                            key=false;
                        end

                        if(obj.startFirstOut&&obj.ctrlOut.valid)
                            obj.ctrlOut.start=true;
                            obj.startFirstOut=false;
                            obj.buffAppendIndex(:)=1;
                        else
                            obj.ctrlOut.start=false;
                        end

                        if(obj.endFirstOut)
                            if(obj.buffAppendIndex(:)==1&&obj.ctrlOut.valid)&&~obj.ctrlOut.start
                                obj.ctrlOut.end=true;
                            else
                                obj.ctrlOut.end=false;
                            end
                            obj.endFirstOut=false;
                            obj.buffAppendIndex(:)=1;
                            obj.buffLLROutIndex(:)=1;
                        else
                            obj.ctrlOut.end=false;
                        end
                        if(key)
                            obj.buffAppendIndex(:)=1;
                        end
                    else
                        obj.outLLRReg1(1:obj.llrLen,:)=0;
                        obj.ctrlOut.valid=false;
                        obj.ctrlOut.start=false;
                        obj.ctrlOut.end=false;
                    end
                else

                    obj.buffpskMappedReg(:)=obj.buffpskMappedReg1;
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        obj.qamInpScalar1=false;
                        obj.pskInpScalar1=true;
                        obj.keyInpScalar(:)=1;
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        if(obj.modSelReg==0)
                            obj.valid1=obj.pskInpScalar&&obj.pskInpScalar1;
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        obj.qamInpScalar1=false;
                        obj.pskInpScalar1=true;
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                        else
                            obj.keyInpScalar(:)=2;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        if(obj.modSelReg<=1)
                            obj.valid1=obj.pskInpScalar&&obj.pskInpScalar1;
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        obj.qamInpScalar1=false;
                        obj.pskInpScalar1=true;
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                        else
                            obj.keyInpScalar(:)=3;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        if(obj.modSelReg<=2)
                            obj.valid1=obj.pskInpScalar&&obj.pskInpScalar1;
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        obj.qamInpScalar1=false;
                        obj.pskInpScalar1=true;
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                        elseif(obj.modSelReg==2)
                            obj.keyInpScalar(:)=3;
                        else
                            obj.keyInpScalar(:)=4;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        if(obj.modSelReg<=3)
                            obj.valid1=obj.pskInpScalar&&obj.pskInpScalar1;
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        obj.qamInpScalar1=false;
                        obj.pskInpScalar1=true;
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                        elseif(obj.modSelReg==2)
                            obj.keyInpScalar(:)=3;
                        elseif(obj.modSelReg==3)
                            obj.keyInpScalar(:)=4;
                        else
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.qamInpScalar]=obj.QAMBlockConv(obj.inpSCap,obj.keyInpScalar,obj.distbwSymbols,dataValid);
                        if(obj.modSelReg<=4)
                            obj.valid1=(obj.pskInpScalar&&obj.pskInpScalar1)||(obj.qamInpScalar&&obj.qamInpScalar1);
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                            obj.buffInPhaseReg(:)=obj.InPhaseReg;
                            obj.buffQPhaseReg(:)=obj.QPhaseReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==2)
                            obj.keyInpScalar(:)=3;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==3)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==4)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        else
                            obj.keyInpScalar(:)=5;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.qamInpScalar]=obj.QAMBlockConv(obj.inpSCap,obj.keyInpScalar,obj.distbwSymbols,dataValid);
                        if(obj.modSelReg<=5)
                            obj.valid1=(obj.pskInpScalar&&obj.pskInpScalar1)||(obj.qamInpScalar&&obj.qamInpScalar1);
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                            obj.buffInPhaseReg(:)=obj.InPhaseReg;
                            obj.buffQPhaseReg(:)=obj.QPhaseReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==2)
                            obj.keyInpScalar(:)=3;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==3)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==4)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        elseif(obj.modSelReg==5)
                            obj.keyInpScalar(:)=5;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        else
                            obj.keyInpScalar(:)=6;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.qamInpScalar]=obj.QAMBlockConv(obj.inpSCap,obj.keyInpScalar,obj.distbwSymbols,dataValid);
                        if(obj.modSelReg<=6)
                            obj.valid1=(obj.pskInpScalar&&obj.pskInpScalar1)||(obj.qamInpScalar&&obj.qamInpScalar1);
                        end
                        if(obj.valid1)
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                            obj.buffInPhaseReg(:)=obj.InPhaseReg;
                            obj.buffQPhaseReg(:)=obj.QPhaseReg;
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.modSelReg==0)
                            obj.keyInpScalar(:)=1;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==1)
                            obj.keyInpScalar(:)=2;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==2)
                            obj.keyInpScalar(:)=3;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==3)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==4)
                            obj.keyInpScalar(:)=4;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        elseif(obj.modSelReg==5)
                            obj.keyInpScalar(:)=5;
                            obj.qamInpScalar1=false;
                            obj.pskInpScalar1=true;
                        elseif(obj.modSelReg==6)
                            obj.keyInpScalar(:)=6;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        else
                            obj.keyInpScalar(:)=8;
                            obj.qamInpScalar1=true;
                            obj.pskInpScalar1=false;
                        end
                        [obj.pskMappedReg(:),obj.pskInpScalar]=obj.PSKConvBlock(obj.inpSCap,obj.keyInpScalar,dataValid);
                        [obj.InPhaseReg(:),obj.QPhaseReg(:),obj.qamInpScalar]=obj.QAMBlockConv(obj.inpSCap,obj.keyInpScalar,obj.distbwSymbols,dataValid);
                        if(obj.modSelReg<=7)
                            obj.valid1=(obj.pskInpScalar&&obj.pskInpScalar1)||(obj.qamInpScalar&&obj.qamInpScalar1);
                        end
                        if(obj.valid1)
                            obj.buffInPhaseReg(:)=obj.InPhaseReg;
                            obj.buffQPhaseReg(:)=obj.QPhaseReg;
                            obj.buffpskMappedReg1(:)=obj.pskMappedReg;
                        end
                    end

                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmpi(obj.MaxModulation,'64-QAM')||strcmpi(obj.MaxModulation,'256-QAM')||strcmpi(obj.MaxModulation,'32-PSK'))
                        if(obj.modSelReg1(:)>=6&&obj.modSelReg1(:)<=7||obj.modSelReg1(:)==4)
                            if obj.modSelReg1==4
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(10);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end
                                obj.valueLReg(:)=obj.LValues(1);
                            elseif obj.modSelReg1==6
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(42);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end
                                obj.valueLReg(:)=obj.LValues(2);
                                obj.tempLvals(1,:)=obj.LValues(1);
                            else
                                if(strcmpi(obj.NormMethod,'Unit average power'))
                                    obj.distbwSymbols(:)=1/sqrt(170);
                                    obj.LValues(:)=([2,4,8,16]*obj.distbwSymbols);
                                    obj.refConstPoint(:)=complex(obj.distbwSymbols,obj.distbwSymbols);
                                end
                                obj.valueLReg(:)=obj.LValues(3);
                                obj.tempLvals(1,:)=obj.LValues(2);
                                obj.tempLvals(2,:)=obj.LValues(1);
                            end
                            if(obj.valid1)
                                obj.qamTableUpdate(1,:)=complex(-obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(2,:)=complex(obj.distbwSymbols,-obj.distbwSymbols);
                                obj.qamTableUpdate(3,:)=complex(obj.valueLReg+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(4,:)=complex(obj.distbwSymbols,obj.valueLReg+obj.distbwSymbols);
                                obj.qamTableUpdate(5,:)=complex(obj.tempLvals(1)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(6,:)=complex(obj.distbwSymbols,obj.tempLvals(1)+obj.distbwSymbols);
                                obj.qamTableUpdate(7,:)=complex(obj.tempLvals(2)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(8,:)=complex(obj.distbwSymbols,obj.tempLvals(2)+obj.distbwSymbols);
                                obj.qamTableUpdate(9,:)=complex(obj.tempLvals(3)+obj.distbwSymbols,obj.distbwSymbols);
                                obj.qamTableUpdate(10,:)=complex(obj.distbwSymbols,obj.tempLvals(3)+obj.distbwSymbols);

                                obj.LValuesTemp(:)=[obj.valueLReg;obj.tempLvals(1);obj.tempLvals(2);obj.tempLvals(3)];
                                obj.qValuesReal(:)=obj.LValuesTemp-obj.InPhaseReg(1:4);
                                obj.qValuesImag(:)=obj.LValuesTemp-obj.QPhaseReg(1:4);
                            end
                        end
                    end
                    obj.reminpSCap3(:)=obj.buffSCapBlk2(complex(obj.inpSCap));
                    obj.buffinpSCap(:)=obj.buffinpSCap1;
                    obj.buffqValuesReal(:)=obj.buffqValuesReal1;
                    obj.buffqValuesImag(:)=obj.buffqValuesImag1;
                    if(obj.valid1)
                        obj.valid3=true;
                        obj.count1(:)=1;
                        obj.buffmodSelReg(:)=obj.modSelReg1;
                        obj.buffindex(:)=obj.indexReg;
                        obj.buffinpSCap1(:)=obj.inpSCap;
                        obj.buffqValuesReal1(:)=obj.qValuesReal;
                        obj.buffqValuesImag1(:)=obj.qValuesImag;
                    end
                    obj.buffmodSelReg1(:)=obj.delayUnit1(obj.buffmodSelReg);


                    if(strcmpi(obj.MaxModulation,'16-QAM')||strcmpi(obj.MaxModulation,'32-PSK'))
                        obj.shuffleOrderFin(1:4)=obj.shuffleOrder(1:4);
                        obj.coeffSignFin(1:4)=obj.coeffSign(1:4);
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(obj.buffmodSelReg1==4)
                            obj.shuffleOrderFin(1:4)=obj.shuffleOrder16(1:4);
                            obj.coeffSignFin(1:4)=obj.coeffSign16(1:4);
                        else
                            obj.shuffleOrderFin(1:6)=obj.shuffleOrder(1:6);
                            obj.coeffSignFin(1:6)=obj.coeffSign(1:6);
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(obj.buffmodSelReg1==4)
                            obj.shuffleOrderFin(1:4)=obj.shuffleOrder16(1:4);
                            obj.coeffSignFin(1:4)=obj.coeffSign16(1:4);
                        elseif(obj.buffmodSelReg1==6)
                            obj.shuffleOrderFin(1:6)=obj.shuffleOrder64(1:6);
                            obj.coeffSignFin(1:6)=obj.coeffSign64(1:6);
                        else
                            obj.shuffleOrderFin(:)=obj.shuffleOrder;
                            obj.coeffSignFin(:)=obj.coeffSign;
                        end
                    end

                    if(obj.valid3)
                        if(strcmpi(obj.MaxModulation,'BPSK'))
                            obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                            obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                            obj.valid1=false;
                        elseif(strcmpi(obj.MaxModulation,'QPSK'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            else
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            end
                        elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            else
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            end
                        elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            elseif(obj.buffmodSelReg==2)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            else
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable16(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable16(ind2));
                            end
                        elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            elseif(obj.buffmodSelReg==2)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            elseif(obj.buffmodSelReg==3)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable16(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable16(ind2));
                            else
                                obj.qamTableUpdate1(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                                obj.qamTableUpdateScalar(1:4,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:4),:);
                                obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(2),obj.buffQPhaseReg(2))-obj.refConstPoint);
                                [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                            end
                        elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            elseif(obj.buffmodSelReg==2)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            elseif(obj.buffmodSelReg==3)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable16(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable16(ind2));
                            elseif(obj.buffmodSelReg==4)
                                obj.qamTableUpdate1(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                                obj.qamTableUpdateScalar(1:4,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:4),:);
                                obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(2),obj.buffQPhaseReg(2))-obj.refConstPoint);
                                [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                            else
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable32(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable32(ind2));
                            end
                        elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            elseif(obj.buffmodSelReg==2)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            elseif(obj.buffmodSelReg==3)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable16(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable16(ind2));
                            elseif(obj.buffmodSelReg==4)
                                obj.qamTableUpdate1(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                                obj.llrvec1Index(:)=2;
                                obj.qamTableUpdateScalar(1:4,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:4),:);
                                obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                                [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                            else
                                if(obj.buffmodSelReg(:)==5)
                                    obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable32(1);
                                    [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                    obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable32(ind2));
                                else
                                    obj.qamTableUpdate1(1:6,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                                    obj.llrvec1Index(:)=3;
                                    obj.qamTableUpdateScalar(1:6,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:6),:);
                                    obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                                    [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                    obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                                end
                            end
                        elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                            if((obj.buffmodSelReg==0))
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(2);
                                obj.llrComputeVec2(:)=obj.buffpskMappedReg1(1)-obj.lookUpTable02(1);
                                obj.valid1=false;
                            elseif(obj.buffmodSelReg==1)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable04(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable04(ind2));
                            elseif(obj.buffmodSelReg==2)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable08(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable08(ind2));
                            elseif(obj.buffmodSelReg==3)
                                obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable16(1);
                                [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable16(ind2));
                            elseif(obj.buffmodSelReg==4)
                                obj.qamTableUpdate1(1:4,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(2),obj.qamTableUpdate(4)];
                                obj.llrvec1Index(:)=2;
                                obj.qamTableUpdateScalar(1:4,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:4),:);
                                obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                                [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                            else
                                if(obj.buffmodSelReg(:)==5)
                                    obj.llrComputeVec1(:)=obj.buffpskMappedReg1(obj.buffindex)-obj.lookUpTable32(1);
                                    [ind1,ind2]=pskIndexCalc(obj,obj.buffindex,obj.count1-1);
                                    obj.llrComputeVec2(:)=(obj.buffpskMappedReg1(ind1)-obj.lookUpTable32(ind2));
                                elseif(obj.buffmodSelReg(:)==6)
                                    obj.qamTableUpdate1(1:6,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(2),obj.qamTableUpdate(4),obj.qamTableUpdate(6)];
                                    obj.llrvec1Index(:)=3;
                                    obj.qamTableUpdateScalar(1:6,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:6),:);
                                    obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                                    [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                    obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                                else
                                    obj.qamTableUpdate1(1:8,:)=[obj.qamTableUpdate(1),obj.qamTableUpdate(3),obj.qamTableUpdate(5),obj.qamTableUpdate(7),obj.qamTableUpdate(2),...
                                    obj.qamTableUpdate(4),obj.qamTableUpdate(6),obj.qamTableUpdate(8)];
                                    obj.llrvec1Index(:)=4;
                                    obj.qamTableUpdateScalar(1:8,:)=obj.qamTableUpdate1(obj.shuffleOrderFin(1:8),:);
                                    obj.llrComputeVec1(:)=(complex(obj.buffInPhaseReg(obj.llrvec1Index),obj.buffQPhaseReg(obj.llrvec1Index))-obj.refConstPoint);
                                    [ind1,ind2,ind3]=qamIndexCalc(obj,obj.buffindex,obj.count1-1);
                                    obj.llrComputeVec2(:)=(complex(obj.buffInPhaseReg(ind1),obj.buffQPhaseReg(ind2))-obj.qamTableUpdateScalar(ind3));
                                end
                            end
                        end
                        obj.buffindexPlus2(:)=obj.buffindex+2;
                        obj.cond_val=obj.count1~=obj.buffindexPlus2;
                    else
                        obj.cond_val=false;
                    end

                    [obj.tempLLROut(:),obj.valid2]=obj.llrComputeBlk(obj.llrComputeVec1,obj.llrComputeVec2,obj.cond_val);

                    if(obj.NoiseVariance)
                        if(obj.valid2)
                            if(obj.nVariance(:)~=0)
                                if strcmpi(obj.DecisionType,'Approximate log-likelihood ratio')
                                    obj.tempLLROut1(:)=obj.tempLLROut/obj.nVariance;
                                else
                                    obj.tempLLROut1(:)=obj.tempLLROut;
                                end
                            else
                                obj.tempLLROut1(:)=obj.tempLLROut;
                            end
                        end
                    else
                        obj.tempLLROut1(:)=obj.tempLLROut;
                    end

                    if(obj.valid3)
                        obj.buffindex1(:)=obj.buffindexBlock(obj.buffindex);
                        if(obj.valid2)
                            if(obj.buffmodSelReg1(:)>=6&&obj.buffmodSelReg1(:)<=7||obj.buffmodSelReg1(:)==4)
                                coeff=qamLLRSignCalc(obj,obj.buffindex1,obj.count1-2);
                            else
                                coeff=pskLLRSignCalc(obj,obj.buffindex1,obj.count1-2);
                            end
                            if(coeff)
                                obj.outLLRReg1(:)=-(obj.tempLLROut1);
                            else
                                obj.outLLRReg1(:)=(obj.tempLLROut1);
                            end
                            obj.outValidReg1=true;
                        else
                            obj.outLLRReg1(:)=0;
                            obj.outValidReg1=false;
                        end

                        obj.count1(:)=obj.counter(false,obj.buffindexPlus2,false,obj.count1);
                    else
                        obj.outLLRReg1(:)=0;
                        obj.outValidReg1=false;
                    end

                    obj.count(:)=obj.counter(dataValid,obj.index,obj.readyReg,obj.count);
                    obj.readyReg=((obj.count==obj.index)||(obj.count==0&&~dataValid));
                    if(obj.count1(:)==0)
                        obj.valid3=false;
                    end
                end
                obj.outLLRReg(:)=obj.pipelineData(obj.outLLRReg1.').';
                obj.outValidReg(:)=obj.pipelineValid(obj.outValidReg1);
                obj.ctrlOut1.start=obj.pipelineStart(obj.ctrlOut.start);
                obj.ctrlOut1.end=obj.pipelineEnd(obj.ctrlOut.end);
                obj.ctrlOut1.valid=obj.pipelineValidVec(obj.ctrlOut.valid);
            end
        end

        function varargout=outputImpl(obj,varargin)

            if(strcmp(obj.ModulationSource,'Property'))
                if(strcmpi(obj.DecisionType,'Approximate log-likelihood ratio'))
                    varargout{1}=obj.outLLRReg;
                else
                    varargout{1}=obj.outLLRReg<0;
                end
                val=1;
                varargout{2}=obj.outValidReg;
                if(strcmpi(obj.OutputType,'Vector'))
                    if(obj.valid1)
                        if(strcmp(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                            obj.buffqValuesReal(:)=obj.qValuesReal;
                            obj.buffqValuesImag(:)=obj.qValuesImag;
                        else
                            obj.buffpskMappedReg(:)=obj.pskMappedReg;
                        end
                    end
                else

                    validIn=varargin{2};
                    rdReg=obj.readyReg;

                    dataValid=validIn&&rdReg;
                    if(obj.valid1)
                        obj.buffinpSCap(:)=obj.inpSCap;
                        if(strcmp(obj.ModulationScheme,'16-QAM')||strcmp(obj.ModulationScheme,'64-QAM')||strcmp(obj.ModulationScheme,'256-QAM'))
                            obj.buffqValuesReal(:)=obj.qValuesReal;
                            obj.buffqValuesImag(:)=obj.qValuesImag;
                        else
                            obj.buffpskMappedReg(:)=obj.pskMappedReg;
                        end
                    end

                    nextIndex=obj.indexCalc(dataValid,val);
                    nextCount=obj.counter(dataValid,nextIndex,rdReg,obj.count);
                    varargout{3}=((nextCount==nextIndex)||(nextCount==0&&~dataValid));
                end
            else

                val=varargin{3};
                if(strcmpi(obj.OutputType,'Vector'))
                    len=1;
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        len=1;
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        len=2;
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        len=3;
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        len=4;
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        len=5;
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        len=4;
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        len=6;
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        len=8;
                    end

                    if(strcmpi(obj.DecisionType,'Approximate log-likelihood ratio'))
                        varargout{1}=obj.outLLRReg(1:len,:);
                    else
                        varargout{1}=obj.outLLRReg(1:len,:)<0;
                    end
                    varargout{2}=obj.ctrlOut1;
                else
                    if(strcmpi(obj.DecisionType,'Approximate log-likelihood ratio'))
                        varargout{1}=obj.outLLRReg;
                    else
                        varargout{1}=obj.outLLRReg<0;
                    end
                    varargout{2}=obj.outValidReg;
                    validIn=varargin{2};
                    rdReg=obj.readyReg;
                    dataValid=validIn&&rdReg;


                    nextIndex=obj.indexCalc(dataValid,val);
                    nextCount=obj.counter(dataValid,nextIndex,rdReg,obj.count);
                    varargout{3}=((nextCount==nextIndex)||(nextCount==0&&~dataValid));
                end
            end
        end

        function[i1,i2]=pskIndexCalc(~,ind,cnt)
            i1=fi(1,0,8,0,hdlfimath);
            i2=fi(1,0,8,0,hdlfimath);
            if(ind==1)
                if(cnt==0)
                    i1(:)=1;
                    i2(:)=3;
                elseif(cnt==1)
                    i1(:)=1;
                    i2(:)=2;
                end
            elseif(ind==2)
                if(cnt==0)
                    i1(:)=1;
                    i2(:)=3;
                elseif(cnt==1)
                    i1(:)=1;
                    i2(:)=2;
                elseif(cnt==2)
                    i1(:)=2;
                    i2(:)=4;
                end
            elseif(ind==3)
                if(cnt==0)
                    i1(:)=1;
                    i2(:)=3;
                elseif(cnt==1)
                    i1(:)=1;
                    i2(:)=2;
                elseif(cnt==2)
                    i1(:)=2;
                    i2(:)=4;
                elseif(cnt==3)
                    i1(:)=3;
                    i2(:)=5;
                end
            elseif(ind==4)
                if(cnt==0)
                    i1(:)=1;
                    i2(:)=3;
                elseif(cnt==1)
                    i1(:)=1;
                    i2(:)=2;
                elseif(cnt==2)
                    i1(:)=2;
                    i2(:)=4;
                elseif(cnt==3)
                    i1(:)=3;
                    i2(:)=5;
                elseif(cnt==4)
                    i1(:)=4;
                    i2(:)=6;
                end
            end
        end

        function[i1,i2,i3]=qamIndexCalc(obj,ind,cnt)
            i1=fi(1,0,8,0,hdlfimath);
            i2=fi(1,0,8,0,hdlfimath);
            i3=fi(1,0,8,0,hdlfimath);
            if(ind==3)
                obj.llrInVecOrder(1:4)=[1,2,2,2];
                obj.llrQVecOrder(1:4)=[2,2,1,2];
                obj.llrInVecOrderScalar(1:4)=obj.llrInVecOrder(obj.shuffleOrderFin(1:4));
                obj.llrQVecOrderScalar(1:4)=obj.llrQVecOrder(obj.shuffleOrderFin(1:4));
                if(cnt>=0&&cnt<=3)
                    i1(:)=obj.llrInVecOrderScalar(cnt+1);
                    i2(:)=obj.llrQVecOrderScalar(cnt+1);
                    i3(:)=cnt+1;
                end
            elseif(ind==5)
                obj.llrInVecOrder(1:6)=[1,2,3,3,3,3];
                obj.llrQVecOrder(1:6)=[3,3,3,1,2,3];
                obj.llrInVecOrderScalar(1:6)=obj.llrInVecOrder(obj.shuffleOrderFin(1:6));
                obj.llrQVecOrderScalar(1:6)=obj.llrQVecOrder(obj.shuffleOrderFin(1:6));
                if(cnt>=0&&cnt<=5)
                    i1(:)=obj.llrInVecOrderScalar(cnt+1);
                    i2(:)=obj.llrQVecOrderScalar(cnt+1);
                    i3(:)=cnt+1;
                end
            elseif(ind==7)
                obj.llrInVecOrder(1:8)=[1,2,3,4,4,4,4,4];
                obj.llrQVecOrder(1:8)=[4,4,4,4,1,2,3,4];
                obj.llrInVecOrderScalar(1:8)=obj.llrInVecOrder(obj.shuffleOrderFin(1:8));
                obj.llrQVecOrderScalar(1:8)=obj.llrQVecOrder(obj.shuffleOrderFin(1:8));
                if(cnt>=0&&cnt<=7)
                    i1(:)=obj.llrInVecOrderScalar(cnt+1);
                    i2(:)=obj.llrQVecOrderScalar(cnt+1);
                    i3(:)=cnt+1;
                end
            end
        end

        function coeff=pskLLRSignCalc(obj,ind,cnt)
            coeff=false;
            if(ind==0)
                coeff=false;
            elseif(ind==1)
                if(cnt==0)
                    coeff=imag(obj.buffinpSCap)>0;
                elseif(cnt==1||cnt==127)
                    coeff=real(obj.buffinpSCap)>0;
                end
            elseif(ind==2)
                if(cnt==0)
                    coeff=imag(obj.buffinpSCap)>0;
                elseif(cnt==1)
                    coeff=real(obj.buffinpSCap)>0;
                elseif(cnt==2||cnt==127)
                    coeff=imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1));
                end
            elseif(ind==3)
                if(cnt==0)
                    coeff=imag(obj.buffinpSCap)>0;
                elseif(cnt==1)
                    coeff=real(obj.buffinpSCap)>0;
                elseif(cnt==2)
                    coeff=imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1));
                elseif(cnt==3||cnt==127)
                    coeff=imag(obj.buffpskMappedReg(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg(2));
                end
            elseif(ind==4)
                if(cnt==0)
                    coeff=imag(obj.buffinpSCap)>0;
                elseif(cnt==1)
                    coeff=real(obj.buffinpSCap)>0;
                elseif(cnt==2)
                    coeff=imag(obj.buffpskMappedReg(1))<=real(obj.buffpskMappedReg(1));
                elseif(cnt==3)
                    coeff=imag(obj.buffpskMappedReg(2))<=obj.tanConsts(1)*real(obj.buffpskMappedReg(2));
                elseif(cnt==4||cnt==127)
                    coeff=imag(obj.buffpskMappedReg(3))<=obj.tanConsts(2)*real(obj.buffpskMappedReg(3));
                end
            end
        end

        function coeff=qamLLRSignCalc(obj,ind,cnt)
            if(ind==3)
                obj.signCalc(1:4)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),imag(obj.reminpSCap3),obj.buffqValuesImag(1)];
                obj.signCalcScalar(1:4)=obj.signCalc(obj.shuffleOrderFin(1:4));
            elseif(ind==5)
                obj.signCalc(1:6)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2)];
                obj.signCalcScalar(1:6)=obj.signCalc(obj.shuffleOrderFin(1:6));
            else
                obj.signCalc(1:8)=[real(obj.reminpSCap3),obj.buffqValuesReal(1),obj.buffqValuesReal(2),obj.buffqValuesReal(3),imag(obj.reminpSCap3),obj.buffqValuesImag(1),obj.buffqValuesImag(2),obj.buffqValuesImag(3)];
                obj.signCalcScalar(1:8)=obj.signCalc(obj.shuffleOrderFin(1:8));
            end

            if(cnt>=0&&cnt<=ind)
                coeff=(obj.signCalcScalar(cnt+1)<=0&&obj.coeffSignFin(cnt+1)>0)||(obj.signCalcScalar(cnt+1)>0&&obj.coeffSignFin(cnt+1)<=0);
            else
                coeff=(obj.signCalcScalar(ind+1)<=0&&obj.coeffSignFin(ind+1)>0)||(obj.signCalcScalar(ind+1)>0&&obj.coeffSignFin(ind+1)<=0);
            end
        end

        function[val,check]=mappedValueAtPosition(~,constPoints,M)
            coder.extrinsic('tostringInternalSlName')
            m=log2(M);
            cnt=0;
            Order=zeros(1,m/2);
            if(M==16)
                binaryMapped=de2bi(constPoints,4,'left-msb');
                b1=unique(binaryMapped(:,1));
                b2=unique(binaryMapped(:,2));
                b3=unique(binaryMapped(:,3));
                b4=unique(binaryMapped(:,4));
                if(length(b1)==1)
                    cnt=cnt+1;
                    Order(cnt)=b1;
                end
                if(length(b2)==1)
                    cnt=cnt+1;
                    Order(cnt)=b2;
                end
                if(length(b3)==1)
                    cnt=cnt+1;
                    Order(cnt)=b3;
                end
                if(length(b4)==1)
                    cnt=cnt+1;
                    Order(cnt)=b4;
                end
                if(cnt==2)
                    val=bi2de(Order,'left-msb');
                    check=true;
                else
                    val=0;
                    check=false;
                end
            elseif(M==64)
                binaryMapped=de2bi(constPoints,6,'left-msb');
                b1=unique(binaryMapped(:,1));
                b2=unique(binaryMapped(:,2));
                b3=unique(binaryMapped(:,3));
                b4=unique(binaryMapped(:,4));
                b5=unique(binaryMapped(:,5));
                b6=unique(binaryMapped(:,6));
                if(length(b1)==1)
                    cnt=cnt+1;
                    Order(cnt)=b1;
                end
                if(length(b2)==1)
                    cnt=cnt+1;
                    Order(cnt)=b2;
                end
                if(length(b3)==1)
                    cnt=cnt+1;
                    Order(cnt)=b3;
                end
                if(length(b4)==1)
                    cnt=cnt+1;
                    Order(cnt)=b4;
                end
                if(length(b5)==1)
                    cnt=cnt+1;
                    Order(cnt)=b5;
                end
                if(length(b6)==1)
                    cnt=cnt+1;
                    Order(cnt)=b6;
                end
                if(cnt==3)
                    val=bi2de(Order,'left-msb');
                    check=true;
                else
                    val=0;
                    check=false;
                end
            else
                binaryMapped=de2bi(constPoints,8,'left-msb');
                b1=unique(binaryMapped(:,1));
                b2=unique(binaryMapped(:,2));
                b3=unique(binaryMapped(:,3));
                b4=unique(binaryMapped(:,4));
                b5=unique(binaryMapped(:,5));
                b6=unique(binaryMapped(:,6));
                b7=unique(binaryMapped(:,7));
                b8=unique(binaryMapped(:,8));
                if(length(b1)==1)
                    cnt=cnt+1;
                    Order(cnt)=b1;
                end
                if(length(b2)==1)
                    cnt=cnt+1;
                    Order(cnt)=b2;
                end
                if(length(b3)==1)
                    cnt=cnt+1;
                    Order(cnt)=b3;
                end
                if(length(b4)==1)
                    cnt=cnt+1;
                    Order(cnt)=b4;
                end
                if(length(b5)==1)
                    cnt=cnt+1;
                    Order(cnt)=b5;
                end
                if(length(b6)==1)
                    cnt=cnt+1;
                    Order(cnt)=b6;
                end
                if(length(b7)==1)
                    cnt=cnt+1;
                    Order(cnt)=b7;
                end
                if(length(b8)==1)
                    cnt=cnt+1;
                    Order(cnt)=b8;
                end
                if(cnt==4)
                    val=bi2de(Order,'left-msb');
                    check=true;
                else
                    val=0;
                    check=false;
                end
            end
        end

        function ind=indexCalc(obj,dataValid,val)
            ind=obj.index;
            if(strcmpi(obj.ModulationSource,'Input port'))
                if(dataValid)
                    if(strcmpi(obj.MaxModulation,'BPSK'))
                        ind(:)=0;
                    elseif(strcmpi(obj.MaxModulation,'QPSK'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'8-PSK'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-PSK'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        elseif(val==3)
                            ind(:)=3;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'16-QAM'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        elseif(val==3)
                            ind(:)=3;
                        elseif(val==4)
                            ind(:)=3;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'32-PSK'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        elseif(val==3)
                            ind(:)=3;
                        elseif(val==4)
                            ind(:)=3;
                        elseif(val==5)
                            ind(:)=4;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'64-QAM'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        elseif(val==3)
                            ind(:)=3;
                        elseif(val==4)
                            ind(:)=3;
                        elseif(val==5)
                            ind(:)=4;
                        elseif(val==6)
                            ind(:)=5;
                        else
                            ind(:)=0;
                        end
                    elseif(strcmpi(obj.MaxModulation,'256-QAM'))
                        if(val==0)
                            ind(:)=0;
                        elseif(val==1)
                            ind(:)=1;
                        elseif(val==2)
                            ind(:)=2;
                        elseif(val==3)
                            ind(:)=3;
                        elseif(val==4)
                            ind(:)=3;
                        elseif(val==5)
                            ind(:)=4;
                        elseif(val==6)
                            ind(:)=5;
                        elseif(val==7)
                            ind(:)=7;
                        else
                            ind(:)=0;
                        end
                    end
                else
                    ind(:)=obj.index;
                end
            else
                if(dataValid)
                    if(strcmpi(obj.ModulationScheme,'BPSK'))
                        ind(:)=0;
                    elseif(strcmpi(obj.ModulationScheme,'QPSK'))
                        ind(:)=1;
                    elseif(strcmpi(obj.ModulationScheme,'8-PSK'))
                        ind(:)=2;
                    elseif(strcmpi(obj.ModulationScheme,'16-PSK'))
                        ind(:)=3;
                    elseif(strcmpi(obj.ModulationScheme,'32-PSK'))
                        ind(:)=4;
                    elseif(strcmpi(obj.ModulationScheme,'16-QAM'))
                        ind(:)=3;
                    elseif(strcmpi(obj.ModulationScheme,'64-QAM'))
                        ind(:)=5;
                    else
                        ind(:)=7;
                    end
                else
                    ind(:)=obj.index;
                end
            end
        end

        function sampleBusController(obj,ctrlBus)
            startIn=ctrlBus.start;
            endIn=ctrlBus.end;
            validIn1=ctrlBus.valid;

            if startIn&&validIn1
                obj.startReg=true;
                obj.startInp=true;
            else
                obj.startInp=false;
            end

            if validIn1&&obj.startReg
                obj.validInp=true;
            else
                obj.validInp=false;
            end

            if(endIn&&validIn1)&&(obj.startReg&&~startIn)
                obj.endInp=true;
                obj.endReg=true;
                obj.startReg=false;
            else
                obj.endInp=false;
            end
        end

        function nextCount=counter(~,dataValid,ind,rdReg,cnt)
            nextCount=cnt;

            if(dataValid||rdReg)
                nextCount(:)=0;
            else
                if(nextCount>=ind)
                    nextCount(:)=0;
                else
                    nextCount(:)=nextCount+fi(1,0,1,0,hdlfimath);
                end
            end
        end

        function loadObjectImpl(obj,s,~)

            fn=fieldnames(s);
            for ii=1:numel(fn)
                obj.(fn{ii})=s.(fn{ii});
            end
        end


        function validateInputsImpl(obj,varargin)
            ctrlIn=varargin{2};
            coder.extrinsic('tostringInternalSlName');
            if isempty(coder.target)||~coder.internal.isAmbiguousTypes
                validateattributes(varargin{1},...
                {'single','double','embedded.fi','int8','int16','int32'},{'scalar'},'GeneralizedSymbolDemodulator','data');
                if isa(varargin{1},'embedded.fi')
                    [WL,~,~]=dsphdlshared.hdlgetwordsizefromdata(varargin{1});
                    if(~issigned(varargin{1}))
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidDataType',...
                        tostringInternalSlName(varargin{1}.numerictype));
                    end
                    if WL>32
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidWordLength');
                    end
                end

                if(strcmpi(obj.ModulationSource,'Input port')&&strcmpi(obj.OutputType,'Vector'))
                    if~isstruct(ctrlIn)
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidSampleCtrlBus');
                    end

                    ctrlNames=fieldnames(ctrlIn);
                    if~isequal(numel(ctrlNames),3)
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidSampleCtrlBus');
                    end

                    if isfield(ctrlIn,ctrlNames{1})&&strcmp(ctrlNames{1},'start')
                        validateattributes(ctrlIn.start,{'logical'},{'scalar'},'GeneralizedSymbolDemodulator','start');
                    else
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidSampleCtrlBus');
                    end

                    if isfield(ctrlIn,ctrlNames{2})&&strcmp(ctrlNames{2},'end')
                        validateattributes(ctrlIn.end,{'logical'},{'scalar'},'GeneralizedSymbolDemodulator','end');
                    else
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidSampleCtrlBus');
                    end

                    if isfield(ctrlIn,ctrlNames{3})&&strcmp(ctrlNames{3},'valid')
                        validateattributes(ctrlIn.valid,{'logical'},{'scalar'},'GeneralizedSymbolDemodulator','valid');
                    else
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidSampleCtrlBus');
                    end
                else
                    validateattributes(varargin{2},{'logical'},{'scalar'},...
                    'GeneralizedSymbolDemodulator','valid');
                end

                if strcmpi(obj.ModulationSource,'Input Port')
                    validateattributes(varargin{3},...
                    {'single','double','embedded.fi'},{'scalar','real'},'GeneralizedSymbolDemodulator','modSel');
                    if isa(varargin{3},'embedded.fi')
                        [WL,~,~]=dsphdlshared.hdlgetwordsizefromdata(varargin{3});
                        if(issigned(varargin{3}))
                            coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidModSelDataType',...
                            tostringInternalSlName(varargin{3}.numerictype));
                        end
                        if WL~=3
                            coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidModSelDataType',...
                            tostringInternalSlName(varargin{3}.numerictype));
                        end
                    end
                    if(obj.NoiseVariance)
                        validateattributes(varargin{4},...
                        {'single','double','embedded.fi','uint8','uint16'},{'scalar','real'},'GeneralizedSymbolDemodulator','nVar');
                        if~isfloat(varargin{1})&&isfloat(varargin{4})
                            coder.internal.error('whdl:GeneralizedSymbolDemodulator:dataNVarFloatFixMix');
                        elseif isfloat(varargin{1})&&~isfloat(varargin{4})
                            coder.internal.error('whdl:GeneralizedSymbolDemodulator:dataNVarFloatFixMix');
                        else
                            if isa(varargin{4},'embedded.fi')
                                [WL,~,~]=dsphdlshared.hdlgetwordsizefromdata(varargin{4});
                                if(issigned(varargin{4}))||WL==1||WL==64
                                    coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidDataTypeNvar',...
                                    tostringInternalSlName(varargin{4}.numerictype));
                                end
                                if WL>16
                                    coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidWordLengthNvar');
                                end
                            end
                        end
                    end
                end

                if obj.NoiseVariance&&strcmpi(obj.ModulationSource,'Property')
                    validateattributes(varargin{3},{'double','single','embedded.fi','uint8','uint16'},...
                    {'scalar','real'},'GeneralizedSymbolDemodulator','nVar');
                    if~isfloat(varargin{1})&&isfloat(varargin{3})
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:dataNVarFloatFixMix');
                    elseif isfloat(varargin{1})&&~isfloat(varargin{3})
                        coder.internal.error('whdl:GeneralizedSymbolDemodulator:dataNVarFloatFixMix');
                    else
                        if isa(varargin{3},'embedded.fi')
                            [WL,~,~]=dsphdlshared.hdlgetwordsizefromdata(varargin{3});
                            if(issigned(varargin{3}))||WL==1||WL==64
                                coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidDataTypeNvar',...
                                tostringInternalSlName(varargin{3}.numerictype));
                            end
                            if WL>16
                                coder.internal.error('whdl:GeneralizedSymbolDemodulator:InvalidWordLengthNvar');
                            end
                        end
                    end
                end
            end
        end

        function num=getNumInputsImpl(obj)

            num=2;
            if strcmpi(obj.ModulationSource,'Input port')
                num=num+1;
            end
            if(obj.NoiseVariance)
                num=num+1;
            end
        end

        function num=getNumOutputsImpl(obj)
            num=2;
            if strcmpi(obj.OutputType,'Scalar')
                num=num+1;
            end
        end

        function flag=isInactivePropertyImpl(obj,prop)
            props={};
            switch obj.ModulationSource
            case 'Input port'
                props=[props,{'ModulationScheme'}];
                switch obj.NormMethod
                case 'Unit average power'
                    props=[props,{'MinSymDistance'}];
                end
                switch obj.MaxModulation
                case 'BPSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case 'QPSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '8-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '16-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '32-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '16-QAM'
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                case '64-QAM'
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                case '256-QAM'
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                end
            case 'Property'
                props=[props,...
                {'MaxModulation'}];
                switch obj.ModulationScheme
                case 'BPSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case 'QPSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '8-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '16-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '32-PSK'
                    props=[props,{'ConstMap','ConstOrder','NormMethod','MinSymDistance'}];
                case '16-QAM'
                    props=[props,{'PhaseOffset'}];
                    switch obj.NormMethod
                    case 'Unit average power'
                        props=[props,{'MinSymDistance'}];
                    end
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                case '64-QAM'
                    props=[props,{'PhaseOffset'}];
                    switch obj.NormMethod
                    case 'Unit average power'
                        props=[props,{'MinSymDistance'}];
                    end
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                otherwise
                    props=[props,{'PhaseOffset'}];
                    switch obj.NormMethod
                    case 'Unit average power'
                        props=[props,{'MinSymDistance'}];
                    end
                    switch obj.ConstOrder
                    case 'Default'
                        props=[props,'ConstMap'];
                    end
                end
            end
            flag=ismember(prop,props);
        end
    end

    methods(Access=protected,Static)
        function header=getHeaderImpl

            text='Demodulate input complex constellation symbol into set of LLR values or data bits.';
            title_txt='Symbol Demodulator';
            header=matlab.system.display.Header(mfilename("class"),...
            'Title',title_txt,...
            'Text',text,...
            'ShowSourceLink',false);
        end

        function groups=getPropertyGroupsImpl

            struc=matlab.system.display.Section(...
            'Title','Parameters',...
            'PropertyList',{'ModulationSource','ModulationScheme','MaxModulation','ConstOrder','ConstMap','DecisionType','PhaseOffset','OutputType','NormMethod','MinSymDistance','NoiseVariance'});

            main=matlab.system.display.SectionGroup(...
            'Title','Main',...
            'Sections',struc);

            groups=main;
        end

        function flag=showSimulateUsingImpl

            flag=false;
        end
    end
end
