



function emitBlockTypeSetup(this,codeWriter)


    codeWriter.wFunctionDefStart('BlockTypeSetup','(block, system) void');


    emitLanguageChecks(this,codeWriter);

    if this.LctSpecInfo.Specs.Options.stubSimBehavior







        assertNeverCalled=true;
        this.emitReturnIfSimTarget(codeWriter,'BlockTypeSetup',assertNeverCalled);
    end




    if this.HasWrapperOrIsCxx

        this.emitTestCodeFormatBlockStart(codeWriter);



        this.emitWrapperHeaderConstruction(codeWriter);



        this.emitWrapperSourceConstruction(codeWriter);


        codeWriter.wLine(sprintf('%%<LibAddToCommonIncludes("%%<hFileName>.h")>'));



        if this.LctSpecInfo.isCPP==false

            codeWriter.wLine(sprintf('%%<LibAddToModelSources("%%<cFileName>")>'));

        else


            codeWriter.wBlockStart('%if IsModelReferenceSimTarget()');
            codeWriter.wLine(sprintf('%%<SLibAddToStaticSources("%%<cFileName>.cpp")>'));
            codeWriter.wBlockMiddle('%else');
            codeWriter.wLine(sprintf('%%<LibAddToModelSources("%%<cFileName>")>'));
            codeWriter.wBlockEnd();
        end


        codeWriter.wBlockMiddle('%else');
    end

    globalHeaderFiles=this.HeaderFileInfo.GlobalHeaderFiles;



    needsLegacyTypeDefGuards=this.LctSpecInfo.Specs.Options.stubSimBehavior&&...
    this.LctSpecInfo.Specs.Options.translateLegacyTypeDefGuards;
    if needsLegacyTypeDefGuards
        typesWithGuardsList=buildTypesWithGuardsList(this);
        if~isempty(typesWithGuardsList)





            [preGuardFileName,postGuardFileName]=emitLegacyTypeDefGuards(this,codeWriter,typesWithGuardsList);
            globalHeaderFiles=[...
            {preGuardFileName},...
            globalHeaderFiles{:}',...
            {postGuardFileName}];
        end
    end


    this.emitAddToCommonIncludes(codeWriter,globalHeaderFiles);


    this.emitAddToCommonIncludes(codeWriter,this.HeaderFileInfo.SlObjHeaderFiles);


    if this.HasWrapperOrIsCxx
        this.emitTestCodeFormatBlockEnd(codeWriter);
    end



    this.emitAddToStaticSources(codeWriter,this.LctSpecInfo.Specs.SourceFiles);


    codeWriter.wFunctionDefEnd();





    function emitLanguageChecks(this,codeWriter)

        if this.LctSpecInfo.isCPP
            lang='C++';
        else
            lang='C';
        end
        errMsg=[...
        'This S-Function generated by the Legacy Code Tool must be only ',...
        'used with the ',lang,' Target Language'...
        ];

        if this.LctSpecInfo.isCPP==false
            txt={...
            '%% The Target Language must be C',...
            '%if ::GenCPP==1 && !IsModelReferenceSimTarget()',...
            ['    %<LibReportFatalError("',errMsg,'")>'],...
'%endif'...
            };
        else
            txt={...
            '%% The Target Language must be C++',...
            '%if ::GenCPP==0 && !IsModelReferenceSimTarget()',...
            ['    %<LibReportFatalError("',errMsg,'")>'],...
'%endif'...
            };
        end
        codeWriter.wNewLine;
        cellfun(@(aLine)codeWriter.wLine(aLine),txt);
        codeWriter.wNewLine;



        function typesWithGuardsList=buildTypesWithGuardsList(this)

            typesWithGuardsList={};
            for kDataType=1:numel(this.LctSpecInfo.DataTypes.Items)






                isPotentiallyGuardedType=...
                this.LctSpecInfo.DataTypes.Items(kDataType).isEnumType||...
                this.LctSpecInfo.DataTypes.Items(kDataType).isAggregateType||...
                this.LctSpecInfo.DataTypes.Items(kDataType).isFixpointType||...
                this.LctSpecInfo.DataTypes.Items(kDataType).isAliasType;

                if isPotentiallyGuardedType&&...
                    isempty(this.LctSpecInfo.DataTypes.Items(kDataType).HeaderFile)
                    typesWithGuardsList{end+1}=this.LctSpecInfo.DataTypes.Items(kDataType).DTName;%#ok<AGROW>
                end
            end



            function[preGuardFileName,postGuardFileName]=emitLegacyTypeDefGuards(this,codeWriter,typesWithGuardsList)

                preGuardFileName=[this.LctSpecInfo.Specs.SFunctionName,'_XrelTypedefPreGuards.h'];
                postGuardFileName=[this.LctSpecInfo.Specs.SFunctionName,'_XrelTypedefGuards.h'];






                codeWriter.wLine('%%openfile hFile1="%s"',preGuardFileName);
                for kEnum=1:numel(typesWithGuardsList)
                    codeWriter.wLine('%%<XrelBackportToLegacyTypeDefGuard("%s")>',typesWithGuardsList{kEnum});
                end
                codeWriter.wLine('%closefile hFile1');

                codeWriter.wLine('%%openfile hFile2="%s"',postGuardFileName);
                for kEnum=1:numel(typesWithGuardsList)
                    codeWriter.wLine('%%<XrelAddLegacyTypeDefGuard("%s")>',typesWithGuardsList{kEnum});
                end
                codeWriter.wLine('%closefile hFile2');


