classdef UnifiedMkCfgEmitter<legacycode.lct.gen.MkCfgEmitter



    methods
        function this=UnifiedMkCfgEmitter(lctObjs)
            this@legacycode.lct.gen.MkCfgEmitter(lctObjs);
        end



        function emit(this,outWriter)


            narginchk(1,2);

            this.EmittingLctObjs=this.LctObjs;

            if isempty(this.EmittingLctObjs)
                return;
            end


            if nargin==2
                validateattributes(outWriter,{'legacycode.lct.gen.BufferedWriter'},...
                {'scalar','nonempty'},2);
            else


                this.EmittingFileName='rtwmakecfg.m';
                outWriter=legacycode.lct.gen.BufferedFileWriter(this.EmittingFileName);
            end

            emit@legacycode.lct.gen.MkCfgEmitter(this,outWriter);
        end
    end

    methods(Access=protected)



        function emitBody(this,codeWriter)

            bodyTxt={...
            '% Get all S-Function''s name in the current model',...
            'sfunNames = {};',...
            'if ~isempty(bdroot)',...
            '    sfunBlks = find_system(bdroot,...',...
            '        ''MatchFilter'', @Simulink.match.allVariants, ...',...
            '        ''LookUnderMasks'', ''all'',...',...
            '        ''FollowLinks'', ''on'',...',...
            '        ''BlockType'', ''S-Function''...',...
            '    );',...
            '    sfunNames = get_param(sfunBlks, ''FunctionName'');',...
            'end',...
            '',...
            'for ii = 1:numel(info)',...
            '    sfunInfo = info(ii);',...
            '    % If the S-Function isn''t part of the current build then skip its path info',...
            '    if ~any(strcmp(sfunInfo.SFunctionName, sfunNames))',...
            '        continue',...
            '    end',...
            '',...
            };

            codeWriter.writeCellLines(bodyTxt);

            this.emitBuildInfoCalculation(codeWriter,'sfunInfo','    ');

            bodyTxt='end';
            codeWriter.wLine(bodyTxt);
        end

        function emitBodyEnd(this,codeWriter)

            bodyTxt={...
            '',...
            '% Additional include directories',...
            'makeInfo.includePath = correct_path_name(allIncPaths);',...
            '',...
            '% Additional source directories',...
            'makeInfo.sourcePath = correct_path_name(allSrcPaths);',...
''...
            };
            codeWriter.writeCellLines(bodyTxt);

            if this.EmittingObjsIsSingleCPPMexFile
                bodyTxt={...
                '% Additional sources ',...
                'makeInfo.sources = allSrcs;',...
''...
                };
                codeWriter.writeCellLines(bodyTxt);
            end

            if this.EmittingObjsHasLibs
                bodyTxt={...
                '% Additional libraries according to the build type',...
                'makeInfo.linkLibsObjs = correct_path_name(allLibs);',...
''...
                };
                codeWriter.writeCellLines(bodyTxt);
            end
        end

        function emitHeader(this,codeWriter)

            [~,functionName]=fileparts(this.EmittingFileName);

            headerText=[...
'function makeInfo = %s()\n'...
            ,'%%%s adds include and source directories to the make files.\n'...
            ,'%%    makeInfo=%s returns a structured array containing build info.\n'...
            ,'%%    Please refer to the rtwmakecfg API section in the Simulink Coder\n'...
            ,'%%    documentation for details on the format of this structure.'...
            ];


            codeWriter.wLine(headerText,functionName,upper(functionName));


            slVer=legacycode.lct.spec.Common.SLVer;
            thisDate=datestr(now,0);

            codeWriter.wComment(sprintf('   Simulink version    : %s %s %s',slVer.Version,slVer.Release,slVer.Date));
            codeWriter.wComment(sprintf('   MATLAB file generated on : %s',thisDate));

        end

    end

end


