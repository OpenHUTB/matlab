



function emitSetOutputPortDimensionInfo(this,codeWriter)


    if~this.LctSpecInfo.DynamicSizeInfo.OutputHasDynSize&&...
        ~this.LctSpecInfo.DynamicSizeInfo.InputHasDynSize
        return
    end

    codeWriter.wNewLine;
    codeWriter.wLine('#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO');
    codeWriter.wLine('#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)');
    codeWriter.wMultiCmtStart('Function: mdlSetOutputPortDimensionInfo ================================');
    codeWriter.wMultiCmtMiddle('Abstract:');
    codeWriter.wMultiCmtMiddle('  This method is called with the candidate dimensions for an output port');
    codeWriter.wMultiCmtMiddle('  with unknown dimensions. If the proposed dimensions are acceptable, the');
    codeWriter.wMultiCmtMiddle('  method should go ahead and set the actual port dimensions.');
    codeWriter.wMultiCmtMiddle('  If they are unacceptable an error should be generated via');
    codeWriter.wMultiCmtMiddle('  ssSetErrorStatus.');
    codeWriter.wMultiCmtMiddle('  Note that any other input or output ports whose dimensions are');
    codeWriter.wMultiCmtMiddle('  implicitly defined by virtue of knowing the dimensions of the given');
    codeWriter.wMultiCmtMiddle('  port can also have their dimensions set.');
    codeWriter.wMultiCmtEnd();
    codeWriter.wLine('static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T portIndex, const DimsInfo_T *dimsInfo)');
    codeWriter.wBlockStart();

    emitBody(this,codeWriter);

    codeWriter.wBlockEnd();
    codeWriter.wLine('#endif');


    function emitBody(this,codeWriter)


        codeWriter.wCmt('Set output port dimension');
        codeWriter.wLine('if(!ssSetOutputPortDimensionInfo(S, portIndex, dimsInfo)) return;');



        for ii=1:numel(this.LctSpecInfo.DynamicSizeInfo.OutputDynSize)

            dataSpec=this.LctSpecInfo.Outputs.Items(ii);
            if dataSpec.IsDynamicArray
                continue
            end

            thisDynSize=this.LctSpecInfo.DynamicSizeInfo.OutputDynSize{ii};


            if~any(thisDynSize==true)
                continue
            end


            nbDims=numel(dataSpec.DimsInfo);
            if nbDims==1
                extraStmts={...
                sprintf('if ((dimsInfo->numDims != 1) || (dimsInfo->width != %sWidth)) {',dataSpec.Identifier),...
                sprintf('    ssSetErrorStatus(S, "Invalid output port width. The output signal %d must be a 1D signal.");',ii),...
'}'...
                };
            elseif nbDims==2
                extraStmts={...
                sprintf('if ((dimsInfo->numDims != 2) || (dimsInfo->dims[0] != %sNumRows) || (dimsInfo->dims[1] != %sNumCols)) {',dataSpec.Identifier,dataSpec.Identifier),...
                sprintf('   ssSetErrorStatus(S, "Invalid output port dimensions. The output signal %d must be a 2D (matrix) signal.");',ii),...
'}'...
                };
            else


                extraStmts={...
                '/* Compare the candidate dimensions against specification */',...
                '{',...
                '    boolean_T hasBadDim = 0;',...
                sprintf('    if (dimsInfo->numDims != %d) {',nbDims),...
                '        hasBadDim = 1;',...
                '    } else {',...
                '        int_T i;',...
                sprintf('        for (i = 0; i < %d; i++) {',nbDims),...
                sprintf('            if (%sDims[i]==DYNAMICALLY_SIZED) {',dataSpec.Identifier),...
                '                hasDynSize |= 1;',...
                '            } else {',...
                sprintf('                if (dimsInfo->dims[i] != %sDims[i]) {',dataSpec.Identifier),...
                '                    hasBadDim |= 1;',...
                '                }',...
                '            }',...
                '        }',...
                '    }',...
                '    if (hasBadDim) {',...
                sprintf('        ssSetErrorStatus(S, "Invalid output port dimensions. The output signal %d must be a %dD signal.");',ii,nbDims),...
                '    }',...
'}'...
                };
            end
            this.emitInputOutputDimsRegistration(codeWriter,dataSpec,true,'DYNAMICALLY_SIZED',extraStmts);
        end


