function sb2slDefineUpgradeChecks







    check=ModelAdvisor.Check('mathworks.simulink.SB2SL.Check');
    check.Title=DAStudio.message('sb2sl_blks:update:upgradeTitle');
    check.setCallbackFcn(@upgradeSB2SL,'None','StyleOne');
    check.CSHParameters.MapKey='ma.simulink';
    check.CSHParameters.TopicID='SB2SLPhaseOut';
    check.SupportLibrary=true;
    check.SupportExclusion=true;


    myAction=ModelAdvisor.Action;
    setCallbackFcn(myAction,@fixSB2SL);
    myAction.Name=DAStudio.message('sb2sl_blks:update:upgradeSB2SLActionName');
    myAction.Description=DAStudio.message('sb2sl_blks:update:upgradeSB2SLActionDesc');
    myAction.Enable=true;
    check.setAction(myAction);


    modelAdvisor=ModelAdvisor.Root;
    modelAdvisor.register(check);

end

function results=upgradeSB2SL(system)



    mdladvObj=Simulink.ModelAdvisor.getModelAdvisor(system);
    ResultStatus=false;
    mdladvObj.setCheckResultStatus(ResultStatus);


    ft=ModelAdvisor.FormatTemplate('ListTemplate');


    listFail=findUpgradeSB2SLBlocks(system);


    if isempty(listFail)

        ResultStatus=true;
        ft.setSubTitle(DAStudio.message('sb2sl_blks:update:upgradeSB2SLTitle'));
        ft.setSubResultStatusText(DAStudio.message('sb2sl_blks:update:upgradeNoSB2SLBlocks'));
        mdladvObj.setActionEnable(false);
    else

        ft.setSubTitle(DAStudio.message('sb2sl_blks:update:upgradeSB2SLTitle'));
        ft.setSubResultStatusText(DAStudio.message('sb2sl_blks:update:upgradeSB2SLInformation'));
        ft.setSubResultStatus('Warn');
        ft.setListObj(listFail);
        mdladvObj.setActionEnable(true);
        ft.setRecAction(DAStudio.message('sb2sl_blks:update:upgradeSB2SLRecAction'));
    end
    results=ft;
    mdladvObj.setCheckResultStatus(ResultStatus);
end


function results=fixSB2SL(taskobj)




    mdladvObj=taskobj.MAobj;
    system=bdroot(mdladvObj.System);


    listFail=findUpgradeSB2SLBlocks(system);


    ft=ModelAdvisor.FormatTemplate('TableTemplate');
    ft.setColTitles({'Block'});


    if isempty(listFail)
        ft.setInformation(DAStudio.message('sb2sl_blks:update:upgradeNoSB2SLBlocksFix'));
    else
        for k=1:length(listFail)
            oldRefBlk=get_param(listFail{k},'ReferenceBlock');
            newRefBlk=strrep(oldRefBlk,'libsb2sl','libsb2slobsolete');
            set_param(listFail{k},'ReferenceBlock',newRefBlk);
            ft.addRow({listFail(k)});
        end
        ft.setInformation(DAStudio.message('sb2sl_blks:update:upgradeSB2SLFixInformation'));
    end
    results=ft;
end

function listFail=findUpgradeSB2SLBlocks(system)





    mdladvObj=Simulink.ModelAdvisor.getModelAdvisor(system);


    blockList={

    'libsb2sl/ALG/AlgExpression/Scale';...
    'libsb2sl/ALG/AlgExpression/Product';...
    'libsb2sl/ALG/AlgExpression/Reciprocal';...
    'libsb2sl/ALG/AlgExpression/Summation';...
    'libsb2sl/ALG/AlgExpression/PowerCU';...
    'libsb2sl/ALG/AlgExpression/Constant';...
    'libsb2sl/ALG/AlgExpression/Offset';...
    'libsb2sl/ALG/CrossProd';...
    'libsb2sl/ARC/BreakPoints';...
    'libsb2sl/DYN/CBacklash';...
    'libsb2sl/DYN/CGainDampsFreqs';...
    'libsb2sl/DYN/CGainZerosPoles';...
    'libsb2sl/DYN/CIntegrator/1stOrder';...
    'libsb2sl/DYN/CIntegrator/NthOrder';...
    'libsb2sl/DYN/CIntegrator/NthOrder1';...
    'libsb2sl/DYN/CLimInt';...
    'libsb2sl/DYN/CNumDenCoeffs';...
    'libsb2sl/DYN/CPIDControlLaw';...
    'libsb2sl/DYN/CResetIntegrator/1stOrder';...
    'libsb2sl/DYN/CResetIntegrator/NthOrder';...
    'libsb2sl/DYN/CResetIntegrator/NthOrder1';...
    'libsb2sl/DYN/CSpringMassDamper';...
    'libsb2sl/DYN/CStateSpace';...
    'libsb2sl/DYN/DBacklash';...
    'libsb2sl/DYN/DGainDampsFreqs';...
    'libsb2sl/DYN/DGainZerosPoles';...
    'libsb2sl/DYN/DIntegrator/1stOrder';...
    'libsb2sl/DYN/DIntegrator/NthOrder';...
    'libsb2sl/DYN/DIntegrator/NthOrder1';...
    'libsb2sl/DYN/DLimInt';...
    'libsb2sl/DYN/DNumDenCoeffs';...
    'libsb2sl/DYN/DPIDControlLaw';...
    'libsb2sl/DYN/DResetIntegrator/1stOrder';...
    'libsb2sl/DYN/DResetIntegrator/NthOrder';...
    'libsb2sl/DYN/DResetIntegrator/NthOrder1';...
    'libsb2sl/DYN/DSpringMassDamper';...
    'libsb2sl/DYN/DStateSpace';...
    'libsb2sl/DYN/DTimeDelay';...
    'libsb2sl/LOG/EQV';...
    'libsb2sl/LOG/NEQV';...
    'libsb2sl/LOG/NOT';...
    'libsb2sl/LOG/Switch';...
    'libsb2sl/LOG/ZILogExpression';...
    'libsb2sl/MAT/Constant';...
    'libsb2sl/MAT/LeftMultiply';...
    'libsb2sl/MAT/MatLeftDivide';...
    'libsb2sl/MAT/MatRightDivide';...
    'libsb2sl/MAT/MatrixInverse';...
    'libsb2sl/MAT/MatrixMultiply';...
    'libsb2sl/MAT/MatrixTranspose';...
    'libsb2sl/MAT/RightMultiply';...
    'libsb2sl/NTP/BiCubicInterp';...
    'libsb2sl/NTP/ConstantInterp';...
    'libsb2sl/NTP/LinearInterp';...
    'libsb2sl/NTP/MultiLinearInterp';...
    'libsb2sl/PEL/Constant**u';...
    'libsb2sl/PEL/SignedSqrt';...
    'libsb2sl/PEL/u**Constant';...
    'libsb2sl/PWL/Preload';...
    'libsb2sl/PWL/Quantization';...
    'libsb2sl/SNG/CNormalRandom';...
    'libsb2sl/SNG/CUniformRandom';...
    'libsb2sl/SNG/DNormalRandom';...
    'libsb2sl/SNG/DUniformRandom';...
    'libsb2sl/SNG/GenWaveform';...
    'libsb2sl/SNG/LimRamp';...
    'libsb2sl/SNG/PulseTrain';...
    'libsb2sl/SNG/SinusoidGen';...
    'libsb2sl/SNG/SquareWave';...
    'libsb2sl/SNG/StepFcn';...
    'libsb2sl/SUP/DataStoreRW';...
    'libsb2sl/SUP/DataStoreW';...
    'libsb2sl/TRG/CosAsin';...
    'libsb2sl/TRG/CosAtan2';...
    'libsb2sl/TRG/SinAtan2';...
    'libsb2sl/NTP/CubicInterp';...
    'libsb2sl/NTP/BiLinearInterp';...
    'libsb2sl/DYN/CResetIntegrator/1stOrder1';...
    'libsb2sl/DYN/DResetIntegrator/1stOrder1';...

    'libsb2sl/ALG/1VarPoly';...
    'libsb2sl/ALG/AlgExpression/General';...
    'libsb2sl/ALG/AlgExpression/General0';...
    'libsb2sl/ARC/InterpTable';...
    'libsb2sl/LOG/Decoder';...
    'libsb2sl/LOG/Encoder';...
    'libsb2sl/LOG/GainScheduler';...
    'libsb2sl/LOG/LogExpression';...
    'libsb2sl/LOG/ShiftRegister';...
    'libsb2sl/SUP/ConditionBlock';...
    'libsb2sl/TRN/DAxisRotation';...
    'libsb2sl/TRN/IAxisRotation';...
    'libsb2sl/USR/BlockScript';...
    'libsb2sl/USR/ZIBlockScript'};
    listFail=[];
    for k=1:length(blockList)

        listFail=[listFail;find_system(system,'LookUnderMasks','all',...
        'MatchFilter',@Simulink.match.allVariants,...
        'ReferenceBlock',blockList{k})];%#ok<AGROW>
    end

    listFail=mdladvObj.filterResultWithExclusion(listFail);

end

