function defineUpgradeAdvisorTasks()




    checks={...
    'mathworks.design.CheckForProperFcnCallUsage',...
    'mathworks.design.CallslDataTypeAndScale',...
    'mathworks.design.MergeBlkUsage',...
    'mathworks.design.InitParamOutportMergeBlk',...
    'mathworks.design.DiscreteBlock',...
    'mathworks.design.ModelLevelMessages',...
    'mathworks.design.ReplaceZOHDelayByRTB',...
    'mathworks.design.CSStoVSSConvert',...
    'mathworks.design.ConvertMdlrefVarToVSS',...
    'mathworks.design.CheckAndUpdateOldMaskedBuiltinBlocks',...
    'mathworks.design.CheckMaskDisplayImageFormat',...
    'mathworks.design.CheckRapidAcceleratorSignalLogging',...
    'mathworks.design.CallsGetParamCompiledSampleTime',...
    'mathworks.design.ParameterTuning',...
    'mathworks.design.CheckVirtualBusAcrossModelReference',...
    'mathworks.design.CheckMaskRunInitFlag',...
    'com.mathworks.sorting.datastorecheck',...
    'mathworks.codegen.EfficientTunableParamExpr',...
    'mathworks.simulink.MLFBOutputDimensions'};


    if~Advisor.Utils.license('test','RTW_Embedded_Coder')
        checkIdx=strcmp(checks,'mathworks.codegen.EfficientTunableParamExpr');
        checks(checkIdx)=[];
    end



    if(slsvTestingHook('TaskBasedSorting_AdvisorCheck')==0)
        slsfIdx=strcmp(checks,'com.mathworks.sorting.datastorecheck');
        checks(slsfIdx)=[];
    end


    if~Advisor.Utils.license('test','RTW_Embedded_Coder')
        checkIdx=strcmp(checks,'mathworks.codegen.EfficientTunableParamExpr');
        checks(checkIdx)=[];
    end

    modelAdvisor=ModelAdvisor.Root;
    upgradeAdvisor=UpgradeAdvisor;

    for n=1:length(checks)
        task=ModelAdvisor.Task([checks{n},'.task']);
        task.setCheck(checks{n});

        modelAdvisor.register(task);
        upgradeAdvisor.addTask(task);
    end

end


