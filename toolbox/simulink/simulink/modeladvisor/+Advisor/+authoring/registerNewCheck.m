function registerNewCheck(checkDef)
    lb=sprintf('\n');
    tab=sprintf('\t');
    autoGenStartComment='% THE FOLLOWING CODE IS AUTO GENERATED AND MAY NOT WORK IF MODIFIED';
    autoGenEndComment='% END OF AUTO GENERATED CODE';

    isValidCustomizationFile=false;


    if exist([pwd,filesep,'sl_customization.m'],'file')~=2


        fid=fopen('sl_customization.m','w');

        if fid==-1
            DAStudio.error('Advisor:engine:CCSlCustomizationFileError');
        end

        mcode=[autoGenStartComment,lb,...
        'function sl_customization(cm)',lb,...
        '% SL_CUSTOMIZATION - register authored custom checks',lb,...
        '% created on ',datestr(clock),lb,lb,...
        '% register custom checks',lb,...
        tab,'cm.addModelAdvisorCheckFcn(@defineModelAdvisorCustomChecks);',lb,...
        tab,'cm.addModelAdvisorTaskAdvisorFcn(@defineCustomCheckTasks);',lb,...
        'end',lb,...
        autoGenEndComment,lb,lb,...
        autoGenStartComment,lb,...
        'function defineModelAdvisorCustomChecks()',lb,...
        'end',lb,...
        autoGenEndComment,lb,lb,...
        autoGenStartComment,lb,...
        'function defineCustomCheckTasks()',lb,...
        tab,'mdladvRoot = ModelAdvisor.Root;',lb,...
        getCustomCheckGroupDef(),...
        'end',lb,...
        autoGenEndComment,lb,...
        ];

        fprintf(fid,'%s',mcode);
        fclose(fid);

        isValidCustomizationFile=true;

    else

        selection=questdlg(DAStudio.message('Advisor:engine:CCAppendtoSlCustomization'),...
        DAStudio.message('Advisor:engine:CCAppendtoSlCustomizationHeading'),...
        DAStudio.message('Advisor:engine:Yes'),...
        DAStudio.message('Advisor:engine:Cancel'),...
        DAStudio.message('Advisor:engine:Yes'));
        if strcmpi(selection,DAStudio.message('Advisor:engine:Cancel'))
            DAStudio.error('Advisor:engine:CCNoAppendSlCustomizationFile');
        end


        fid=fopen('sl_customization.m','r');
        mcode=fread(fid,'*char')';
        fclose(fid);


        checkDefFctcall='cm.addModelAdvisorCheckFcn(@defineModelAdvisorCustomChecks);';

        if~isempty(strfind(mcode,checkDefFctcall))&&...
            ~isempty(regexp(mcode,'function defineModelAdvisorCustomChecks\(\).*?end','once'))
            isValidCustomizationFile=true;
        elseif isempty(strfind(mcode,checkDefFctcall))
            IndexOfCustomizationFctEnd=regexp(mcode,'function sl_customization\(cm\).*?end','end','once');

            if~isempty(IndexOfCustomizationFctEnd)

                mcode=[mcode(1:IndexOfCustomizationFctEnd-3),...
                autoGenStartComment,lb,...
                tab,checkDefFctcall,lb,...
                autoGenEndComment,lb,...
                mcode(IndexOfCustomizationFctEnd-2:end)];


                IndexOfCustomizationFctEnd=regexp(mcode,['function sl_customization\(cm\).*?end\n(',autoGenEndComment,'\n)?'],'end','once');


                mcode=[mcode(1:IndexOfCustomizationFctEnd),...
                lb,autoGenStartComment,lb,...
                'function defineModelAdvisorCustomChecks()',lb,...
                'end',lb,...
                autoGenEndComment,lb,...
                mcode(IndexOfCustomizationFctEnd+1:end)];
                isValidCustomizationFile=true;
            end
        end


        taskDefFctcall='cm.addModelAdvisorTaskAdvisorFcn(@defineCustomCheckTasks);';

        if~isempty(strfind(mcode,taskDefFctcall))&&...
            ~isempty(regexp(mcode,'function defineCustomCheckTasks\(\).*?mdladvRoot = ModelAdvisor.Root;.*?end','once'))
            isValidCustomizationFile=true;
        elseif isempty(strfind(mcode,taskDefFctcall))
            IndexOfCustomizationFctEnd=regexp(mcode,'function sl_customization\(cm\).*?end','end','once');

            if~isempty(IndexOfCustomizationFctEnd)

                mcode=[mcode(1:IndexOfCustomizationFctEnd-3),...
                autoGenStartComment,lb,...
                tab,taskDefFctcall,lb,...
                autoGenEndComment,lb,...
                mcode(IndexOfCustomizationFctEnd-2:end)];


                IndexOfCustomizationFctEnd=regexp(mcode,['function sl_customization\(cm\).*?end\n(',autoGenEndComment,'\n)?'],'end','once');


                mcode=[mcode(1:IndexOfCustomizationFctEnd),...
                lb,autoGenStartComment,lb,...
                'function defineCustomCheckTasks()',lb,...
                tab,'mdladvRoot = ModelAdvisor.Root;',lb,...
                getCustomCheckGroupDef(),...
                'end',lb,...
                autoGenEndComment,lb,...
                mcode(IndexOfCustomizationFctEnd+1:end)];
                isValidCustomizationFile=true;
            end
        end
    end

    if~isValidCustomizationFile
        DAStudio.error('Advisor:engine:CCUnableToAppendSlCustomizationFile');
    end





    IndexOfCheckDefFctEnd=regexp(mcode,'function defineModelAdvisorCustomChecks\(\).*?end','end','once');

    if~isempty(IndexOfCheckDefFctEnd)
        mcode=[mcode(1:IndexOfCheckDefFctEnd-3),lb,...
        getCheckDefintionFctCall(checkDef),...
        mcode(IndexOfCheckDefFctEnd-2:end)];
    else
        DAStudio.error('Advisor:engine:CCUnableToAppendSlCustomizationFile');
    end


    IndexOfTaskDefFctEnd=regexp(mcode,'% Add tasks to Custom Checks Group','start','once');

    if~isempty(IndexOfTaskDefFctEnd)

        mcode=[mcode(1:IndexOfTaskDefFctEnd-1),lb,lb,...
        getTaskDef(checkDef),...
        tab,mcode(IndexOfTaskDefFctEnd:end)];
    else
        DAStudio.error('Advisor:engine:CCUnableToAppendSlCustomizationFile');
    end


    mcode=[mcode,...
    getCheckDefintion(checkDef),...
    getCheckCallback(checkDef),...
    ];

    fid=fopen('sl_customization.m','w+');
    fprintf(fid,'%s',mcode);
    fclose(fid);
end



function mcode=getCustomCheckGroupDef()
    tab=sprintf('\t');
    lb=sprintf('\n');


    mcode=[tab,'MAG = ModelAdvisor.Group(''mathworks.CustomCheckGroup'');',lb,...
    tab,'MAG.DisplayName = ''',DAStudio.message('Advisor:engine:CustomChecks'),''';',lb,...
    tab,'% Add tasks to Custom Checks Group',lb,...
    tab,'mdladvRoot.publish(MAG);',lb,...
    ];
end
