function exportEditTimeXML(ConfigUICellArray,xmlFileName,etTasks,filePath)
    import matlab.io.xml.dom.*
    docNode=Document('MAConfiguration');
    docRootNode=docNode.getDocumentElement;

    docRootNode.setAttribute('Version','1.0');
    docRootNode.setAttribute('path',filePath);


    CheckCellArrayNode=docNode.createElement('CheckCellArray');
    CheckCellArrayNode.appendChild(docNode.createTextNode(''));
    docRootNode.appendChild(CheckCellArrayNode);

    for i=1:length(etTasks)
        for j=1:length(ConfigUICellArray)
            if strcmp(etTasks{i},ConfigUICellArray{j}.ID)
                thisElement=docNode.createElement('Check');
                extractConfigUIObj(docNode,thisElement,ConfigUICellArray{j},true);
                CheckCellArrayNode.appendChild(thisElement);
                break;
            end
        end
    end
    docNode.appendChild(docNode.createComment('generated by Model Advisor XML export utility. Copyright 2015 The MathWorks, Inc.'));


    xmlwrite(xmlFileName,docNode);
    modeladvisorprivate('modeladvisorutil2','refreshAdvisorConfigurationForEditTime');
end

function extractConfigUIObj(docNode,thisElement,currentCUIObj,forCheck)
    if forCheck
        IDElement=docNode.createElement('ID');
        IDElement.appendChild(docNode.createTextNode(currentCUIObj.MAC));
        if currentCUIObj.isBlockConstraintCheck
            IDElement.setAttribute('checkType','BlockConstraintCheck');
        end
        thisElement.appendChild(IDElement);
    else
        IDElement=docNode.createElement('ID');
        IDElement.appendChild(docNode.createTextNode(currentCUIObj.ID));
        thisElement.appendChild(IDElement);
        MACElement=docNode.createElement('CheckID');
        MACElement.appendChild(docNode.createTextNode(currentCUIObj.MAC));
        thisElement.appendChild(MACElement);
    end

    SelectedElement=docNode.createElement('Selected');
    if currentCUIObj.Selected
        SelectedElement.appendChild(docNode.createTextNode('true'));
    else
        SelectedElement.appendChild(docNode.createTextNode('false'));
    end
    thisElement.appendChild(SelectedElement);





    isSLCICheck=~isempty(strfind(currentCUIObj.ID,'mathworks.slci.UnsupportedBlocks'));
    if isSLCICheck
        inputParam3=ModelAdvisor.InputParameter;
        inputParam3.Visible=0;
        inputParam3.RowSpan=[1,1];
        inputParam3.ColSpan=[1,1];
        inputParam3.Name=DAStudio.message('ModelAdvisor:engine:BlkTypeList');
        inputParam3.Type='BlockType';
        inputParam3.Value=slci.edittimechk.getSLCISupportedBlockList;
        inputParam3.Visible=false;
        inputParam3.Enable=false;
        currentCUIObj.MAObj=[];
        currentCUIObj.InputParameters{1}=inputParam3;
    end

    if~isempty(currentCUIObj.InputParameters)
        inpsElement=docNode.createElement('InputParameters');
        thisElement.appendChild(inpsElement);
        for i=1:length(currentCUIObj.InputParameters)
            inpElement=docNode.createElement('InputParameter');
            inpElement.setAttribute('Name',currentCUIObj.InputParameters{i}.Name);
            inpElement.setAttribute('Type',currentCUIObj.InputParameters{i}.Type);
            switch currentCUIObj.InputParameters{i}.Type
            case 'BlockType'
                ValueElement=docNode.createElement('Value');
                ValueLength=size(currentCUIObj.InputParameters{i}.Value);
                ValueLength=ValueLength(1);
                for j=1:ValueLength
                    blktypeElement=docNode.createElement('BlockType');
                    blktypeElement.appendChild(docNode.createTextNode(currentCUIObj.InputParameters{i}.Value{j,1}));
                    if~isempty(currentCUIObj.InputParameters{i}.Value{j,2})
                        blktypeElement.setAttribute('MaskType',currentCUIObj.InputParameters{i}.Value{j,2});
                    end
                    ValueElement.appendChild(blktypeElement);
                end
                inpElement.appendChild(ValueElement);
            case 'String'
                if((currentCUIObj.isBlockConstraintCheck)&&strcmp(currentCUIObj.InputParameters{i}.Name,'Data File'))
                    inpElement.setAttribute('Type','BlockConstraint');
                    ConstraintElement=docNode.createElement('BlockConstraints');
                    dataDoc=parseFile(Parser,currentCUIObj.InputParameters{i}.Value);
                    dataDocElement=dataDoc.getDocumentElement;
                    constraintTypes={'PositiveBlockParameterConstraint','NegativeBlockParameterConstraint',...
                    'PositiveBlockTypeConstraint','NegativeBlockTypeConstraint',...
                    'PositiveModelParameterConstraint','NegativeModelParameterConstraint','CompositeConstraint'};

                    for k=1:numel(constraintTypes)
                        constraintNodes=dataDocElement.getElementsByTagName(constraintTypes{k});

                        for j=0:constraintNodes.getLength
                            try
                                importedItem=docNode.importNode(constraintNodes.item(j),true);
                                ConstraintElement.appendChild(importedItem);
                            catch
                            end
                        end
                    end
                    inpElement.appendChild(ConstraintElement);
                else
                    writeXMLField(currentCUIObj.InputParameters{i},inpElement,'Value',docNode);
                end
            otherwise
                writeXMLField(currentCUIObj.InputParameters{i},inpElement,'Value',docNode);
            end
            inpsElement.appendChild(inpElement);
        end
    end
    if isSLCICheck
        currentCUIObj.InputParameters=[];
    end
end

function writeXMLField(this,parentObj,fieldName,docNode)
    Element=docNode.createElement(fieldName);
    fieldValue=this.(fieldName);
    if isnumeric(fieldValue)
        fieldValue=num2str(fieldValue);
    end
    if islogical(fieldValue)
        if fieldValue
            fieldValue='true';
        else
            fieldValue='false';
        end
    end
    Element.appendChild(docNode.createTextNode(fieldValue));
    parentObj.appendChild(Element);
end
