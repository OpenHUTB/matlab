function exportConfigurationXML(this,xmlFileName)







    import matlab.io.xml.dom.*

    docNode=Document('MAConfiguration');
    docRootNode=docNode.getDocumentElement;

    docRootNode.setAttribute('Version','1.0');


    ConfigUIRoot=docNode.createElement('ConfigUIRoot');
    ConfigUIRoot.appendChild(docNode.createTextNode(''));
    docRootNode.appendChild(ConfigUIRoot);
    extractConfigUIObj(docNode,ConfigUIRoot,this.ConfigUIRoot,this.ConfigUICellArray);



    ConfigUICellArray=docNode.createElement('ConfigUICellArray');
    ConfigUICellArray.appendChild(docNode.createTextNode(''));
    docRootNode.appendChild(ConfigUICellArray);

    for i=1:length(this.ConfigUICellArray)
        currentCUIObj=this.ConfigUICellArray{i};
        thisElement=docNode.createElement('ConfigUIElement');
        extractConfigUIObj(docNode,thisElement,currentCUIObj,this.ConfigUICellArray);
        ConfigUICellArray.appendChild(thisElement);
    end


    thisElement=docNode.createElement('SLVersionInfo');
    thisElement.appendChild(docNode.createTextNode(this.SLVersionInfo.Version));
    docRootNode.appendChild(thisElement);

    thisElement=docNode.createElement('ReducedTree');
    if this.ReducedTree
        thisElement.appendChild(docNode.createTextNode('true'));
    else
        thisElement.appendChild(docNode.createTextNode('false'));
    end
    docRootNode.appendChild(thisElement);

    docNode.appendChild(docNode.createComment('generated by Model Advisor XML export utility. Copyright 2015 The MathWorks, Inc.'));


    xmlwrite(xmlFileName,docNode);
end

function extractConfigUIObj(docNode,thisElement,currentCUIObj,ConfigUICellArray)
    writeXMLField(currentCUIObj,thisElement,'ID',docNode);
    writeXMLField(currentCUIObj,thisElement,'MAC',docNode);

    parentElement=docNode.createElement('ParentObj');
    if~isempty(currentCUIObj.ParentObj)&&(currentCUIObj.ParentObj>0)
        parentValue=ConfigUICellArray{currentCUIObj.ParentObj}.ID;
    else
        parentValue='';
    end
    parentElement.appendChild(docNode.createTextNode(parentValue));
    thisElement.appendChild(parentElement);


    for i=1:length(currentCUIObj.ChildrenObj)
        childrenElement=docNode.createElement('ChildrenObj');
        childrenElement.appendChild(docNode.createTextNode(ConfigUICellArray{currentCUIObj.ChildrenObj{i}}.ID));
        thisElement.appendChild(childrenElement);
    end

    if~isempty(currentCUIObj.InputParameters)
        inpsElement=docNode.createElement('InputParameters');
        thisElement.appendChild(inpsElement);
        for i=1:length(currentCUIObj.InputParameters)
            inpElement=docNode.createElement('InputParameter');
            inpElement.setAttribute('Name',currentCUIObj.InputParameters{i}.Name);
            inpElement.setAttribute('Type',currentCUIObj.InputParameters{i}.Type);
            switch currentCUIObj.InputParameters{i}.Type
            case 'BlockType'
                ValueElement=docNode.createElement('Value');
                for j=1:length(currentCUIObj.InputParameters{i}.Value)
                    blktypeElement=docNode.createElement('BlockType');
                    blktypeElement.appendChild(docNode.createTextNode(currentCUIObj.InputParameters{i}.Value{j,1}));
                    if~isempty(currentCUIObj.InputParameters{i}.Value{j,2})
                        blktypeElement.setAttribute('MaskType',currentCUIObj.InputParameters{i}.Value{j,2});
                    end
                    ValueElement.appendChild(blktypeElement);
                end
                inpElement.appendChild(ValueElement);
            case 'BlockTypeWithParameter'
                ValueElement=docNode.createElement('Value');
                for j=1:length(currentCUIObj.InputParameters{i}.Value)
                    blktypeElement=docNode.createElement('BlockType');
                    blktypeElement.setAttribute('Name',currentCUIObj.InputParameters{i}.Value{j,1});
                    if~isempty(currentCUIObj.InputParameters{i}.Value{j,2})
                        blktypeElement.setAttribute('MaskType',currentCUIObj.InputParameters{i}.Value{j,2});
                    end
                    for k=1:length(currentCUIObj.InputParameters{i}.Value{j,3})
                        blktypeParamElement=docNode.createElement('BlockTypeParameters');
                        blktypeParamElement.appendChild(docNode.createTextNode(currentCUIObj.InputParameters{i}.Value{j,3}{k}));
                        blktypeElement.appendChild(blktypeParamElement);
                    end
                    ValueElement.appendChild(blktypeElement);
                end
                inpElement.appendChild(ValueElement);
            otherwise
                writeXMLField(currentCUIObj.InputParameters{i},inpElement,'Value',docNode);
            end
            inpsElement.appendChild(inpElement);
        end
    end
end

function writeXMLField(this,parentObj,fieldName,docNode)
    Element=docNode.createElement(fieldName);
    fieldValue=this.(fieldName);
    if isnumeric(fieldValue)
        fieldValue=num2str(fieldValue);
    end
    if islogical(fieldValue)
        if(fieldValue)
            fieldValue='true';
        else
            fieldValue='false';
        end
    end
    Element.appendChild(docNode.createTextNode(fieldValue));
    parentObj.appendChild(Element);
end
