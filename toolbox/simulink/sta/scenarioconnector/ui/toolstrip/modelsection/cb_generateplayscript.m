function[WAS_SUCCESSFUL,errMsg]=cb_generateplayscript(scenarioData,fullFileName,modelToSim)









    fileNameVar='cellOfFiles';
    varNameVar='cellOfVarNames';
    inputStringVar='cellOfInputStrings';
    modelName=[];


    WAS_SUCCESSFUL=true;
    errMsg=[];

    NUM_SCENARIOS_MAPPED=length(scenarioData);

    simStruct(NUM_SCENARIOS_MAPPED).scenarioFile=[];
    simStruct(NUM_SCENARIOS_MAPPED).scenarioVarName=[];
    simStruct(NUM_SCENARIOS_MAPPED).inputstring=[];
    simStruct(NUM_SCENARIOS_MAPPED).HAS_ERROR=[];


    repo=starepository.RepositoryUtility();


    for k=1:NUM_SCENARIOS_MAPPED

        lastKnownFile=getMetaDataByName(repo,scenarioData(k).scenarioid,'LastKnownFullFile');

        [lastDir,lastFile,lastExt]=fileparts(lastKnownFile);


        simStruct(k).scenarioFile=[lastFile,lastExt];
        simStruct(k).scenarioVarName=getVariableName(repo,scenarioData(k).scenarioid);


        inputSpecFromRepo=sta.InputSpecification(scenarioData(k).inputspecid);

        simStruct(k).inputstring=inputSpecFromRepo.InputString;
        simStruct(k).HAS_ERROR=~isempty(inputSpecFromRepo.DiagnosticMessage)||inputSpecFromRepo.RollUpStatus==0;

    end

    modelName=modelToSim;


    if any([simStruct(:).HAS_ERROR])

        simStruct([simStruct(:).HAS_ERROR])=[];

    end

    if isempty(simStruct)
        WAS_SUCCESSFUL=false;
        return;
    end

    [~,~,theExt]=fileparts(fullFileName);

    if isempty(theExt)
        fullFileName=[fullFileName,'.m'];
    end



    genscript_FileID=fopen(fullFileName,'w+');

    if genscript_FileID==-1
        WAS_SUCCESSFUL=false;
        errMsg=DAStudio.message('sl_sta:scenarioconnector:genplayscripterror',fullFileName);
        return;
    end




    MATLAB_VER_INFO=version();
    fprintf(genscript_FileID,'%% -------------------------------------------------------------------\n');
    fprintf(genscript_FileID,'%% Generated by MATLAB on %s\n',datestr(now));
    fprintf(genscript_FileID,'%% MATLAB version: %s\n',MATLAB_VER_INFO);
    fprintf(genscript_FileID,'%% -------------------------------------------------------------------\n');


    fprintf(genscript_FileID,['%% ',DAStudio.message('sl_sta:scenarioconnector:script_description'),'\n']);



    fprintf(genscript_FileID,'simOut = runSimulation(); \n\n');
    fprintf(genscript_FileID,'function simOut = runSimulation() \n');


    writeCreateCellToFile(genscript_FileID,...
    'Create a cell array storing the file names of the input data',...
    fileNameVar,...
    simStruct,...
    'scenarioFile',...
    false);

    fprintf(genscript_FileID,'\n');


    writeCreateCellToFile(genscript_FileID,...
    'Create a cell array storing the variables names of the scenario data',...
    varNameVar,...
    simStruct,...
    'scenarioVarName',...
    false);

    fprintf(genscript_FileID,'\n');


    writeCreateCellToFile(genscript_FileID,...
    'Create a cell array storing the input strings for each scenario',...
    inputStringVar,...
    simStruct,...
    'inputstring',...
    true);

    fprintf(genscript_FileID,'\n');


    [dataTypeInfo,castingUsed,~]=getDataTypeInfoAsString([scenarioData(:).scenarioid]);

    if castingUsed

        fprintf(genscript_FileID,'%% Create configuration structure to cast spreadsheet data. \n');
        for dtId=1:length(dataTypeInfo)
            if~isempty(dataTypeInfo{dtId})
                fprintf(genscript_FileID,[dataTypeInfo{dtId},'\n']);
            end
        end


        fprintf(genscript_FileID,'\n');
    end


    fprintf(genscript_FileID,'cellOfErrors = cell(1,length( cellOfInputStrings ));\n');

    fprintf(genscript_FileID,'simOut = Simulink.SimulationOutput.empty(0,length( cellOfInputStrings ));\n');
    fprintf(genscript_FileID,'simIn  = Simulink.SimulationInput.empty(0,length( cellOfInputStrings ));\n');


    fprintf(genscript_FileID,'\n');

    writeSimulationInputCodeToFile(genscript_FileID,fileNameVar,varNameVar,inputStringVar,modelName,castingUsed);

    fprintf(genscript_FileID,'%% Report Errors \n');
    fprintf(genscript_FileID,'idxEmpty = cellfun(@isempty, cellOfErrors); \n');
    fprintf(genscript_FileID,'cellOfErrors(idxEmpty)= []; \n');

    fprintf(genscript_FileID,'if ~isempty(cellOfErrors) \n');
    fprintf(genscript_FileID,'\n');

    msgCatString=DAStudio.message('sl_sta:scenarioconnector:msg_error_header');
    fprintf(genscript_FileID,['\tdisp(''',msgCatString,''');\n']);
    fprintf(genscript_FileID,'\t%% For each error \n');
    fprintf(genscript_FileID,'\tfor kErr = 1: length( cellOfErrors ) \n');
    fprintf(genscript_FileID,'\t\tdisp(cellOfErrors{kErr}); \n');
    fprintf(genscript_FileID,'\tend \n');
    fprintf(genscript_FileID,'\t%% End for each error \n');
    fprintf(genscript_FileID,'\n');
    fprintf(genscript_FileID,'end \n');






    fprintf(genscript_FileID,'end \n');



    status=fclose(genscript_FileID);

    if status==-1
        WAS_SUCCESSFUL=false;
        errMsg=DAStudio.message('sl_sta:scenarioconnector:genplayscripterror',fullFileName);
        return;
    end



