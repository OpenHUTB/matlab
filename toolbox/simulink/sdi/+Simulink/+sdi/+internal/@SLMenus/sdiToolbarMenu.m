function schema=sdiToolbarMenu(cbinfo)



    schema=sdiToolbarMenuV2(cbinfo);
end


function schema=sdiToolbarMenuV2(cbinfo)
    schema=DAStudio.ActionChoiceSchema;
    schema.tag='Simulink:ToolBarRecord';
    schema.refreshCategories={'interval#4','SimulinkEvent:Simulation'};


    newData=Simulink.sdi.internal.SLMenus.getSetNewDataAvailable(cbinfo.model.Name);
    if newData
        schema.label=DAStudio.message('SDI:sdi:SLMenuNewData');
    else
        schema.label=DAStudio.message('SDI:sdi:SLMenuOpenSDI');
    end


    isSFBlock=false;
    isTSBlock=false;
    block=SLStudio.Utils.getOneMenuTarget(cbinfo);
    if SLStudio.Utils.objectIsValidBlock(block)
        slobj=get_param(block.handle,'Object');
        if isa(slobj,'Simulink.SubSystem')
            if(strcmpi(get_param(slobj.Handle,'SFBlockType'),'Chart')||...
                strcmpi(get_param(slobj.Handle,'SFBlockType'),'State Transition Table'))
                isSFBlock=true;
            elseif strcmpi(get_param(slobj.Handle,'SFBlockType'),'Test Sequence')
                isTSBlock=true;
            end
        end
    end

    isSFViewer=isa(cbinfo.domain,'StateflowDI.SFDomain');


    clear block;


    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    laSchema=getLogicAnalyzerSchema();
    besSchemaFcn=getBirdsEyeScopeSchema();
    if isSFBlock
        schema.childrenFcns={...
        @(x)Simulink.sdi.internal.SLMenus.openSDI(x,true),...
        laSchema,...
        besSchemaFcn,...
        'separator',...
        im.getAction('Simulink:StreamStateflowChartActivityForBlock'),...
        im.getAction('Simulink:SimulationRecord'),...
        'separator',...
        im.getAction('Simulink:ConfigureSignalLogging'),...
        im.getAction('Simulink:AboutSignalLogging'),...
        };
    elseif isTSBlock
        schema.childrenFcns={...
        @(x)Simulink.sdi.internal.SLMenus.openSDI(x,true),...
        laSchema,...
        besSchemaFcn,...
        'separator',...
        im.getAction('Simulink:SimulationRecord'),...
        'separator',...
        im.getAction('Simulink:ConfigureSignalLogging'),...
        im.getAction('Simulink:AboutSignalLogging'),...
        };
    elseif isSFViewer
        schema.childrenFcns={...
        @(x)Simulink.sdi.internal.SLMenus.openSDI(x,true),...
        laSchema,...
        besSchemaFcn,...
        'separator',...
        im.getAction('Simulink:StreamStateflowStateActivity'),...
        im.getAction('Simulink:StreamStateflowChartActivity'),...
        im.getAction('Simulink:SimulationRecord'),...
        'separator',...
        im.getAction('Simulink:ConfigureSignalLogging'),...
        im.getAction('Simulink:AboutSignalLogging'),...
        };
    else
        schema.childrenFcns={...
        @(x)Simulink.sdi.internal.SLMenus.openSDI(x,true),...
        laSchema,...
        besSchemaFcn,...
        'separator',...
        im.getAction('Simulink:InspectSelectedSignals'),...
        @(x)Simulink.sdi.internal.SLMenus.logSelectedSignals(x),...
        im.getAction('Simulink:SimulationRecord'),...
        'separator',...
        im.getAction('Simulink:ConfigureSignalLogging'),...
        im.getAction('Simulink:AboutSignalLogging'),...
        };
    end


    lastVisualizer=get_param(0,'LastVisualizer');
    isDSPInstalled=dig.isProductInstalled('DSP System Toolbox');
    isSoCBInstalled=dig.isProductInstalled('SoC Blockset');
    isADSTInstalled=dig.isProductInstalled('Automated Driving Toolbox');
    if strcmp(lastVisualizer,'LogicAnalyzer')&&(isDSPInstalled||isSoCBInstalled)
        schema.defaultActionFcn=im.getAction('Simulink:OpenLogicAnalyzer');
    elseif strcmp(lastVisualizer,'BirdsEyeScope')&&isADSTInstalled&&slfeature('slBirdsEyeScopeApp')>0
        schema.defaultActionFcn=im.getAction('Simulink:OpenBirdsEyeScope');
    else
        schema.defaultActionFcn=im.getAction('Simulink:OpenSDI');
    end
end
