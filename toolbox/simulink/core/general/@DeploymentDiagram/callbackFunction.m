function callbackFunction(varargin)




    assert(nargin>=2);
    flag=varargin{1};

    dlg=varargin{2};
    obj=[];
    if~isa(dlg.getSource,'DeploymentDiagram.MappingViewManager')
        obj=dlg.getSource();
    else
        obj=dlg.getSource.Explorer.getRoot;

    end
    if(nargin>2)
        val=varargin{3};
    end
    me=DeploymentDiagram.getexplorer('name',...
    obj.ParentDiagram);
    if isempty(me)
        return;
    end
    switch flag
    case 'explicitTaskMapping'
        model=obj.ParentDiagram;

        if val
            set_param(model,'ExplicitPartitioning','on');
        else
            set_param(model,'ExplicitPartitioning','off');
        end
        DeploymentDiagram.fireHierarchyChange(me.getRoot());
    case 'refreshMapping'
        err=[];
        me=DeploymentDiagram.getexplorer('name',get_param(obj.ParentDiagram,'Name'));
        bdH=get_param(obj.ParentDiagram,'Handle');
        try
            [~]=Simulink.SoftwareTarget.updateDiagram(bdH,true);
        catch err
        end
        if~isempty(err)
            throw(err);
        end
        mapping=me.findNodes('Mapping');
        DeploymentDiagram.fireHierarchyChange(mapping);
        dlg.restoreFromSchema;
    case 'generateProfile'

        imd=DAStudio.imDialog.getIMWidgets(dlg);
        refreshButton=imd.find('tag','button_generateProfile');
        numStepsEdit=imd.find('tag','edit_numStepsProfile');
        dlg.disableWidgets({refreshButton.WidgetId});
        dlg.disableWidgets({numStepsEdit.WidgetId});

        bdH=get_param(obj.ParentDiagram,'Handle');
        mgr=get_param(bdH,'MappingManager');
        mapping=mgr.getActiveMappingFor('DistributedTarget');
        origProfStatus=mapping.ProfileReport.ProfileGenCode;
        try
            mapping.ProfileReport.ProfileGenCode=true;
            Simulink.SoftwareTarget.buildDiagramAndRunExecutable(bdH);
            mapping.ProfileReport.ProfileGenCode=origProfStatus;

            dlg.restoreFromSchema;
        catch err
            mapping.ProfileReport.ProfileGenCode=origProfStatus;
            dlg.refresh;
            throw(err);
        end
    case 'convertSynth2Graphical'
        mgr=obj;
        ctd=get_param(obj.ParentDiagram,'CompiledTaskDiagram');
        while(~isempty(ctd.AutogeneratedTasks))
            ctd.AutogeneratedTasks(1).convertToGraphical();
        end
        me=DeploymentDiagram.getexplorer('name',mgr.ParentDiagram);
        mapping=me.findNodes('Mapping');
        DeploymentDiagram.fireHierarchyChange(mapping);
    end

