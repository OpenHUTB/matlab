function[tStatus,tReason,tMainObjFolder,tSLXCData,tHErr,tErr,tSubDir,tMdlRefName,tBuildTime,buildSummary]...
    =buildModelRef(...
    iTmpUpdateCtrl,...
    iMdlRefName,...
    rootMdlRefDir,...
    rootMdlRefSimDir,...
    parMdlRefCopyDir,...
    simTargetSharedObjs,...
    sharedDir,...
    sharedSimDir,...
    workerShared,...
    iPathToMdls,...
    lCurrentSystemTargetFile,...
    targetType,...
    iRebuiltChildren,...
    iBArgs,...
    iLinkChecksums,...
    iTopTflChecksum,...
    runningForExternalMode,...
    clientFileGenCfg,...
    verbose,...
    iMdlRefSimModes,...
    iThisMdlRefSimMode,...
    iChildren,...
    iChildSimMode,...
    skipRebuild,...
    orderedMdlRefs)




    tStatus=Simulink.ModelReference.internal.ModelRefStatusHelper.getDefaultStatus();
    tReason='';
    tMainObjFolder='';
    tHErr=0;
    tErr='';
    tSubDir='';
    tBuildTime=0;
    tSLXCData={};
    coder.internal.buildstatus.BuildStatusReceiver.getInstance.receive({'updateBuildStatusTable',...
    {{iMdlRefName},'status',DAStudio.message('RTW:buildStatus:Building')}});
    coder.internal.buildstatus.BuildStatusReceiver.getInstance.receive({'updateWkInUse',{'addOne'}});

    iBArgs.initializeBuildSummary;


    if verbose
        startMsg=sl('construct_modelref_message',...
        'Simulink:slbuild:parBuildStartCoder',...
        'Simulink:slbuild:parBuildStartSIM',...
        targetType,iMdlRefName);
        slprivate('sl_disp_info',startMsg,verbose);
    end

    if~strcmp(iTmpUpdateCtrl,'DO_NOT_BUILD')





        if strcmp(targetType,'SIM')
            masterAnchorFolder=clientFileGenCfg.CacheFolder;
        else
            assert(strcmp(targetType,'RTW'),'targetType must be one of allowed values');
            masterAnchorFolder=clientFileGenCfg.CodeGenFolder;
        end
        if~strcmp(pwd,masterAnchorFolder)
            cd(masterAnchorFolder);
        end


        mdlRefs=locFindDescendantMdlRefNames(orderedMdlRefs,iMdlRefName);


        parBDir=coder.parallel.worker.setupBuildDir(iMdlRefName,...
        rootMdlRefDir,...
        rootMdlRefSimDir,...
        parMdlRefCopyDir,...
        simTargetSharedObjs,...
        sharedDir,...
        sharedSimDir,...
        workerShared,...
        clientFileGenCfg,...
        targetType);


        [tStatus,tReason,tMainObjFolder,tSLXCData,tHErr,tErr,tBuildTime]=...
        locParUpdateMdlRefTarget(iMdlRefName,...
        iPathToMdls,...
        lCurrentSystemTargetFile,...
        targetType,...
        iTmpUpdateCtrl,...
        iRebuiltChildren,...
        iBArgs,...
        iLinkChecksums,...
        iTopTflChecksum,...
        runningForExternalMode,...
        clientFileGenCfg,...
        verbose,...
        parBDir,...
        mdlRefs,...
        masterAnchorFolder,...
        iMdlRefSimModes,...
        iThisMdlRefSimMode,...
        iChildren,...
        iChildSimMode,...
        skipRebuild);


        tSubDir=coder.parallel.worker.pushBuildArtifacts(parBDir,masterAnchorFolder,tStatus.pushParBuildArtifacts,tHErr,mdlRefs);
    end

    tMdlRefName=iMdlRefName;
    buildSummary=iBArgs.BuildSummary;

    coder.internal.buildstatus.BuildStatusReceiver.getInstance.receive({'updateWkInUse',{'minusOne'}});
end

function[oStatus,oReason,mainObjFolder,slxcData,oHErr,oErr,tBuildTime]=locParUpdateMdlRefTarget(iMdlRef,...
    iPathToMdl,...
    lCurrentSystemTargetFile,...
    iTargetType,...
    iUpdateCtrl,...
    iRebuiltChild,...
    iBArgs,...
    iLinkChecksums,...
    iTopTflChecksum,...
    iRunningForExtMode,...
    clientFileGenCfg,...
    iVerbose,...
    parBDir,...
    mdlRefs,...
    masterAnchorFolder,...
    mdlRefSimModes,...
    iThisMdlRefSimMode,...
    children,...
    childSimMode,...
    skipRebuild)

    oHErr=0;
    oErr=[];
    tBuildTime=0;



    [~,lGenSettings]=coder.internal.getSTFInfo...
    (iMdlRef,...
    'noTLCSettings',true,...
    'SystemTargetFile',lCurrentSystemTargetFile,...
    'modelreferencetargettype',iTargetType);
    cleanupGenSettingsCache=coder.internal.infoMATFileMgr...
    ([],[],[],[],...
    'InitializeGenSettings',lGenSettings);%#ok<NASGU>




    csCacheCleanup=coder.make.internal.LinkObjChecksumCache.instance...
    ('initializeCsData',iLinkChecksums);


    coder.internal.infoMATFileMgr('ClearRtwMatInfoFileStructs');


    coder.internal.ParallelAnchorDirManager('set',clientFileGenCfg.CacheFolder,clientFileGenCfg.CodeGenFolder);








    mdlsToClose={};
    isNormalMode=strcmpi(iThisMdlRefSimMode,'normal');
    if isNormalMode
        mdlsToLoad=[iMdlRef,children(strcmpi(childSimMode,'normal'))];
        for i=1:length(mdlsToLoad)
            mdlsToClose=[mdlsToClose,slprivate('load_model',mdlsToLoad{i})'];%#ok
        end
    end





    if~locIsSIMTarget(iTargetType)&&locHasPIL(mdlRefSimModes)||locHasSIL(mdlRefSimModes)
        mdlsToClose=[mdlsToClose,slprivate('load_model',iBArgs.TopOfBuildModel)];
    end

    [oStatus,oReason,mainObjFolder,slxcData,exc]=locTryUpdateMdlRefTarget(iMdlRef,...
    iPathToMdl,...
    iTargetType,...
    iUpdateCtrl,...
    iRebuiltChild,...
    iBArgs,...
    mdlRefSimModes,...
    iTopTflChecksum,...
    iRunningForExtMode,...
    iVerbose,...
    parBDir,...
    mdlRefs,...
    clientFileGenCfg,...
    masterAnchorFolder,...
    skipRebuild);




    delete(csCacheCleanup)


    if isempty(exc)&&~isequal(iUpdateCtrl,'AssumeUpToDate')&&...
        oStatus.targetStatus==Simulink.ModelReference.internal.ModelRefTargetStatus.TARGET_UPDATED
        infoStruct=coder.internal.infoMATPostBuild('load','binfo',...
        iMdlRef,iTargetType,lCurrentSystemTargetFile);

        if isfield(infoStruct.buildStats,'buildTime')
            tBuildTime=infoStruct.buildStats.buildTime;
        end
    end

    if~isempty(exc)
        oHErr=1;
        oErr=exc;
    end

    if iVerbose
        if oHErr==0
            msg=sl('construct_modelref_message',...
            'Simulink:slbuild:parBuildFinishCoder',...
            'Simulink:slbuild:parBuildFinishSIM',...
            iTargetType,iMdlRef);
        else
            msg=sl('construct_modelref_message',...
            'Simulink:slbuild:parBuildErrorCoder',...
            'Simulink:slbuild:parBuildErrorSIM',...
            iTargetType,iMdlRef,getReport(oErr));
        end
        slprivate('sl_disp_info',msg,iVerbose);
    end

    if isNormalMode
        slprivate('close_models',mdlsToClose);
    end

end

function[oStatus,oReason,mainObjFolder,slxcData,exc]=locTryUpdateMdlRefTarget(varargin)

    exc=[];
    oStatus=Simulink.ModelReference.internal.ModelRefStatusHelper.getDefaultStatus();
    oReason='';
    mainObjFolder='';
    slxcData={};
    try
        [oStatus,oReason,mainObjFolder,slxcData]=slprivate('updateMdlRefTarget',varargin{:});
    catch exc
    end

end

function isSIMTarget=locIsSIMTarget(targetType)
    isSIMTarget=strcmp(targetType,'SIM');
end

function hasPIL=locHasPIL(iMdlRefSimMode)
    hasPIL=any(strcmp(iMdlRefSimMode,...
    Simulink.ModelReference.internal.SimulationMode.SimulationModePIL));
end

function hasSIL=locHasSIL(iMdlRefSimMode)
    hasSIL=any(strcmp(iMdlRefSimMode,...
    Simulink.ModelReference.internal.SimulationMode.SimulationModeSIL));
end

function allChildMdls=locFindDescendantMdlRefNames(allMdlRefs,mdlName)






    allModelNames={allMdlRefs.modelName};
    topMdlIdx=strcmp(allModelNames,mdlName);
    topMdlChildren=allMdlRefs(topMdlIdx).children;
    allChildMdls=findAllDescMdlNames(topMdlChildren);


    function childMdls=findAllDescMdlNames(mdls)
        idx=ismember(allModelNames,mdls);
        children=[allMdlRefs(idx).children];
        newList=union(mdls,children);

        if length(newList)==length(mdls)



            childMdls=newList;
        else


            childMdls=findAllDescMdlNames(newList);
        end
    end
end



