function fileContent = genSFcnMakeCfg( fcnName, srcFiles, incPaths, libAndObjFiles, scenario )



if isempty( fcnName )
return 
end 

linkLibExtList = { '' };
if isunix
sharedLibExtList = { '.so' };
otherLibObjExtList = { '.a', '.o' };
elseif ismac
sharedLibExtList = { '.dylib' };
otherLibObjExtList = { '.a', '.o' };
elseif ispc
sharedLibExtList = { '.dll' };
linkLibExtList = { '.lib' };
otherLibObjExtList = { '.obj', '.lib' };
end 

sfunDirRelativePathCreatorVarName = 'sfunDirRelativePathCreator';
commonDirRelativePathCreatorVarName = 'commonDirRelativePathCreator';
switch scenario
case 'BSDAuthor'
scenarioString = sprintf( [ '\t%s = fullfile(''..'',''..'');\n' ...
, '\t%s = fullfile(''..'',''..'');\n' ...
 ], sfunDirRelativePathCreatorVarName, commonDirRelativePathCreatorVarName );
case 'BSDPublishedProject'





case 'StandAlone'
scenarioString = sprintf( [ '\t%s = fullfile(''..'',''..'');\n' ...
, '\t%s = fullfile(''..'',''..'');\n' ...
 ], sfunDirRelativePathCreatorVarName, commonDirRelativePathCreatorVarName );
end 
srcFileList = {  };
commonSrcFileList = {  };
srcFileNameList = {  };
srcFiles = srcFiles( cellfun( @isempty, srcFiles ) == 0 );
for i = 1:numel( srcFiles )
[ path, name, ext ] = fileparts( srcFiles{ i } );
if ~strcmp( fcnName, name )
srcFileNameList = [ srcFileNameList( : )', { [ name, ext ] } ];
end 
if ~isempty( ext )


srcFiles{ i } = path;
end 
if isCommonPath( srcFiles{ i } ) && ~strcmp( fcnName, 'common' )
commonSrcFileList = [ commonSrcFileList( : )', { genFullFileCmd( srcFiles{ i } ) } ];
else 
srcFileList = [ srcFileList( : )', { genFullFileCmd( srcFiles{ i } ) } ];
end 
end 

srcFileListVarName = 'srcFileList';
srcFileComments = sprintf( '\n%% The following defines source file paths (C,C++)\n' );
if ~isempty( srcFileList )
srcFileListStrVal = sprintf( [ '%s,...\n\t' ], srcFileList{ : } );
srcFileListStr = sprintf( [ '%s = {%s};' ], srcFileListVarName, srcFileListStrVal( 1:end  - 6 ) );
else 
srcFileListStr = sprintf( [ '%s = {};' ], srcFileListVarName );
end 
srcFileListStr = sprintf( '%s%s', srcFileComments, srcFileListStr );
srcFileListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);\n',  ...
srcFileListVarName, sfunDirRelativePathCreatorVarName, srcFileListVarName );

srcFileNameListVarName = 'srcFileNames';
srcFileNameComments = sprintf( '\n%% The following defines source file names (C,C++)\n' );
if ~isempty( srcFileNameList )
srcFileNameListStrVal = sprintf( [ '''%s'',...\n\t' ], srcFileNameList{ : } );
srcFileNameListStr = sprintf( [ '%s = {%s};' ], srcFileNameListVarName, srcFileNameListStrVal( 1:end  - 6 ) );
else 
srcFileNameListStr = sprintf( [ '%s = {};' ], srcFileNameListVarName );
end 
srcFileNameListStr = sprintf( '%s%s', srcFileNameComments, srcFileNameListStr );

commonSrcFileComments = sprintf( [  ...
'\n%% The following defines source file paths (C,C++) common to\n' ...
, '%% multiple S-Functions when in scope of Blockset Designer Project\n' ...
 ] );
commonSrcFileListVarName = 'commonSrcFileList';
if ~isempty( commonSrcFileList )
commonSrcFileListStrVal = sprintf( [ '%s,...\n\t' ], commonSrcFileList{ : } );
commonSrcFileListStr = sprintf( [ '%s = {%s};' ], commonSrcFileListVarName, commonSrcFileListStrVal( 1:end  - 6 ) );
else 
commonSrcFileListStr = sprintf( [ '%s = {};' ], commonSrcFileListVarName );
end 
commonSrcFileListStr = sprintf( '%s%s', commonSrcFileComments, commonSrcFileListStr );
commonSrcFileListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);\n',  ...
commonSrcFileListVarName, commonDirRelativePathCreatorVarName, commonSrcFileListVarName );

incPathList = {  };
commonIncPathList = {  };
incPaths = incPaths( cellfun( @isempty, incPaths ) == 0 );
for i = 1:numel( incPaths )
if isCommonPath( incPaths{ i } ) && ~strcmp( fcnName, 'common' )
commonIncPathList = [ commonIncPathList( : )', { genFullFileCmd( incPaths{ i } ) } ];
else 
incPathList = [ incPathList( : )', { genFullFileCmd( incPaths{ i } ) } ];
end 
end 

incPathListStrVarName = 'incPathList';
incPathComments = sprintf( '\n%% The following defines header file paths (h,hpp)\n' );
if ~isempty( incPathList )
incPathListStrVal = sprintf( [ '%s,...\n\t' ], incPathList{ : } );
incPathListStr = sprintf( [ '%s = {%s};' ], incPathListStrVarName, incPathListStrVal( 1:end  - 6 ) );
else 
incPathListStr = sprintf( [ '%s = {};' ], incPathListStrVarName );
end 
incPathListStr = sprintf( '%s%s', incPathComments, incPathListStr );
incPathListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);\n',  ...
incPathListStrVarName, sfunDirRelativePathCreatorVarName, incPathListStrVarName );

commonIncPathListStrVarName = 'commonIncPathList';
commonIncPathComments = sprintf( [  ...
'\n%% The following defines header file paths (h,hpp) common to\n' ...
, '%% multiple S-Functions when in scope of Blockset Designer Project\n' ...
 ] );
if ~isempty( commonIncPathList )
commonIncPathListStrVal = sprintf( [ '%s,...\n\t' ], commonIncPathList{ : } );
commonIncPathListStr = sprintf( [ '%s = {%s};' ], commonIncPathListStrVarName, commonIncPathListStrVal( 1:end  - 6 ) );
else 
commonIncPathListStr = sprintf( [ '%s = {};' ], commonIncPathListStrVarName );
end 
commonIncPathListStr = sprintf( '%s%s', commonIncPathComments, commonIncPathListStr );
commonIncPathListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);',  ...
commonIncPathListStrVarName, commonDirRelativePathCreatorVarName, commonIncPathListStrVarName );

defaultBinCommentStr = sprintf( [  ...
'\n' ...
, '%% The following variables should be used to provide paths to\n' ...
, '%% binary files/folders being used with this S-Function. Please add values\n' ...
, '%% to these cells for each platform you intend to use this S-Function on\n' ...
, '%% in placeholders for each platform defined in this file.\n' ...
, '%% Please see the description in the comments to find out the\n' ...
, '%% usage of the variables defined.\n' ...
 ] );

libNames = {  };
commonLibNames = {  };
for i = 1:numel( libAndObjFiles )
[ ~, ~, ext ] = fileparts( libAndObjFiles{ i } );
if ~isempty( ext ) && any( contains( sharedLibExtList, ext ) ) || any( contains( otherLibObjExtList, ext ) ) || any( contains( linkLibExtList, ext ) )
if isCommonPath( libAndObjFiles{ i } ) && ~strcmp( fcnName, 'common' )
commonLibNames = [ commonLibNames( : )', { genFullFileCmd( libAndObjFiles{ i } ) } ];
else 
libNames = [ libNames( : )', { genFullFileCmd( libAndObjFiles{ i } ) } ];
end 
end 
end 

libStrCellVar = 'libList';
libListComments = sprintf( [  ...
'\n%% The following will contain binaries (a, o, lib, so, dylib, etc)\n' ...
, '%% These will be located in <modelWorkingDir>/slprj/sfunName/libs/\n' ...
 ] );
libListDefaultDecl = sprintf( [ '%s%s = {};\n' ], libListComments, libStrCellVar );
libListDefaultDeclNoComments = sprintf( [ '%s = {};' ], libStrCellVar );
if ~isempty( libNames )
libStrVal = sprintf( [ '%s,...\n\t' ], libNames{ : } );
libStr = sprintf( [ '%s = {%s};' ], libStrCellVar, libStrVal( 1:end  - 6 ) );
else 
libStr = libListDefaultDeclNoComments;
end 
libListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);\n',  ...
libStrCellVar, sfunDirRelativePathCreatorVarName, libStrCellVar );

commonLibStrCellVar = 'commonLibList';
commonLibComments = sprintf( [  ...
'\n%% The following will contain binaries (a, o, lib, so, dylib, etc) common to\n' ...
, '%% multiple S-Functions when in scope of Blockset Designer Project\n' ...
, '%% These will be located in <toolboxInstallDir>/common/\n' ...
 ] );
commonLibDefaultDecl = sprintf( [ '%s%s = {};\n' ], commonLibComments, commonLibStrCellVar );
commonLibDefaultDeclNoComments = sprintf( [ '%s = {};' ], commonLibStrCellVar );
if ~isempty( commonLibNames )
commonLibStrVal = sprintf( [ '%s,...\n\t' ], commonLibNames{ : } );
commonLibStr = sprintf( [ '%s = {%s};' ], commonLibStrCellVar, commonLibStrVal( 1:end  - 6 ) );
else 
commonLibStr = commonLibDefaultDeclNoComments;
end 
commonLibListCellFun = sprintf( '%s = cellfun(@(x) makeAbsolute(fullfile(%s, x)), %s, ''UniformOutput'',false);\n',  ...
commonLibStrCellVar, commonDirRelativePathCreatorVarName, commonLibStrCellVar );

defaultBinPathsDecl = [  ...
defaultBinCommentStr ...
, libListDefaultDecl ...
, commonLibDefaultDecl ];

relativePathMakerComments = sprintf( [  ...
'%% Please do not modify the below segment. The following commands\n' ...
, '%% convert the paths so that they are relative to this buildscript.\n' ] );
relativePathMaker = sprintf( [  ...
'\n%s%s%s%s%s%s%s' ...
 ],  ...
relativePathMakerComments,  ...
libListCellFun, commonLibListCellFun,  ...
srcFileListCellFun, commonSrcFileListCellFun,  ...
incPathListCellFun, commonIncPathListCellFun );

fileListDecl = sprintf( [ '%s\n\n%s\n\n%s\n\n%s\n\n%s\n\n\n' ], srcFileListStr, commonSrcFileListStr, srcFileNameListStr,  ...
incPathListStr, commonIncPathListStr );

archStrDefault = sprintf( [ '\t%% Placeholder for custom build commands.\n' ...
, '\t%% Add build commands for platform specific build for the S-Function ''%s''\n\n' ], fcnName );

binFileListDecl = sprintf( '\t%s\n\t%s\n',  ...
libStr, commonLibStr );
if ismac
ifStr = sprintf( [ '\nif ismac\n', '%s', '%s\n', 'elseif isunix\n', '%s', 'elseif ispc\n', '%s', 'end\n' ],  ...
archStrDefault, binFileListDecl, archStrDefault, archStrDefault );
elseif isunix
ifStr = sprintf( [ '\nif ismac\n', '%s', 'elseif isunix\n', '%s', '%s\n', 'elseif ispc\n', '%s', 'end\n' ],  ...
archStrDefault, archStrDefault, binFileListDecl, archStrDefault );
elseif ispc
ifStr = sprintf( [ '\nif ismac\n', '%s', 'elseif isunix\n', '%s', 'elseif ispc\n', '%s', '%s\n', 'end\n' ],  ...
archStrDefault, archStrDefault, archStrDefault, binFileListDecl );
end 

initBody = sprintf( [ '%s%s%s%s%s' ], scenarioString,  ...
fileListDecl, defaultBinPathsDecl, ifStr, relativePathMaker );

pathsString = sprintf( [  ...
'%s\n\n' ...
, 'SFcnInfoStruct = struct;\n' ...
, 'SFcnInfoStruct.sourcePath = [%s %s];\n' ...
, 'SFcnInfoStruct.sources = [%s];\n' ...
, 'SFcnInfoStruct.includePath = [%s %s];\n' ...
, 'SFcnInfoStruct.linkLibsObjs = [%s %s];\n\n'
 ], initBody,  ...
srcFileListVarName, commonSrcFileListVarName,  ...
srcFileNameListVarName,  ...
incPathListStrVarName, commonIncPathListStrVarName,  ...
libStrCellVar, commonLibStrCellVar );

fileContent = sprintf( [  ...
'function makeInfo=rtwmakecfg()\n' ...
, '%% RTWMAKECFG.m adds include and source directories to rtw make files.\n' ...
, '%%  makeInfo=RTWMAKECFG returns a structured array containing\n' ...
, '%%  following field:\n' ...
, '%%     makeInfo.includePath - cell array containing additional include\n' ...
, '%%                            directories. Those directories will be\n' ...
, '%%                            expanded into include instructions of Simulink\n' ...
, '%%                            Coder generated make files.\n' ...
, '%%\n' ...
, '%%     makeInfo.sourcePath  - cell array containing additional source\n' ...
, '%%                            directories. Those directories will be\n' ...
, '%%                            expanded into rules of Simulink Coder generated\n' ...
, '%%                            make files.\n' ...
, 'makeInfo.includePath = {};\n' ...
, 'makeInfo.sourcePath  = {};\n' ...
, 'makeInfo.sources = {};' ...
, 'makeInfo.linkLibsObjs = {};\n\n' ...
, '%%<Generated for package for S-Function ''%s''. DO NOT REMOVE>\n\n' ...
, '%s\n' ...
, 'makeInfo = UpdateMakeInfo(makeInfo, SFcnInfoStruct);\n' ...
, 'end\n\n' ...
, 'function updatedMakeInfo = UpdateMakeInfo(makeInfo,SFcnInfoStruct)\n' ...
, 'updatedMakeInfo = {};\n' ...
, 'if isfield(makeInfo,''includePath'')\n' ...
, '   if isfield(SFcnInfoStruct,''includePath'')\n' ...
, '      updatedMakeInfo.includePath = [makeInfo.includePath(:)'' SFcnInfoStruct.includePath{:}];\n' ...
, '   else\n' ...
, '      updatedMakeInfo.includePath = [makeInfo.includePath(:)''];\n' ...
, '   end\n' ...
, 'end\n' ...
, 'if isfield(makeInfo,''sourcePath'')\n' ...
, '   if isfield(SFcnInfoStruct,''sourcePath'')\n' ...
, '      updatedMakeInfo.sourcePath = [makeInfo.sourcePath(:)'' SFcnInfoStruct.sourcePath{:}];\n' ...
, '   else\n' ...
, '      updatedMakeInfo.sourcePath = [makeInfo.sourcePath(:)''];\n' ...
, '   end\n' ...
, 'end\n' ...
, 'if isfield(makeInfo,''sources'')\n' ...
, '   if isfield(SFcnInfoStruct,''sources'')\n' ...
, '      updatedMakeInfo.sources = [makeInfo.sources(:)'' SFcnInfoStruct.sources{:}];\n' ...
, '   else\n' ...
, '      updatedMakeInfo.sources = [makeInfo.sources(:)''];\n' ...
, '   end\n' ...
, 'end\n' ...
, 'if isfield(makeInfo,''linkLibsObjs'')\n' ...
, '   if isfield(SFcnInfoStruct,''linkLibsObjs'')\n' ...
, '      updatedMakeInfo.linkLibsObjs = [makeInfo.linkLibsObjs(:)'' SFcnInfoStruct.linkLibsObjs{:}];\n' ...
, '   else\n' ...
, '      updatedMakeInfo.linkLibsObjs = [makeInfo.linkLibsObjs(:)''];\n' ...
, '   end\n' ...
, 'end\n' ...
, 'end\n' ...
, 'function abspath = makeAbsolute(inpath)\n' ...
, '    if (~isempty(regexp(inpath, "^\\.|^\\w[^:]", "once")))\n' ...
, '        abspath = fullfile(pwd, inpath);\n' ...
, '    else\n' ...
, '        abspath = inpath;\n' ...
, '    end\n' ...
, 'end' ...
 ], fcnName, pathsString );

end 




function fcmd = genFullFileCmd( path )

if isempty( path )
fcmd = '';
return 
end 

fcmd = sprintf( [ 'fullfile(' ] );
idx = regexp( path, filesep );

for i = 1:numel( idx ) - 1
if isequal( i, 1 )
if isequal( idx( 1 ), 1 )
fcmd = sprintf( [ '%sfilesep,''%s''' ], fcmd, path( idx( i ) + 1:idx( i + 1 ) - 1 ) );

else 
startStr = sprintf( [ '%s' ], path( 1:idx( i ) - 1 ) );
startStr = sprintf( [ '''%s'',''%s''' ], startStr, path( idx( i ) + 1:idx( i + 1 ) - 1 ) );
fcmd = sprintf( [ '%s%s' ], fcmd, startStr );
end 

else 
fcmd = sprintf( [ '%s,''%s''' ], fcmd, path( idx( i ) + 1:idx( i + 1 ) - 1 ) );
end 
end 
if strcmp( fcmd( end  ), ',' ) && numel( idx ) > 1
fcmd = fcmd( 1:end  - 1 );
end 

if numel( idx ) > 1
fcmd = sprintf( [ '%s,''%s'')' ], fcmd, path( idx( end  ) + 1:end  ) );
elseif isequal( numel( idx ), 1 )
if isequal( idx( 1 ), 1 )
fcmd = sprintf( [ '%s''filesep'',''%s'') ' ], fcmd, path( idx( 1 ) + 1:end  ) );

else 
fcmd = sprintf( [ '%s''%s'',''%s'')' ], fcmd, path( 1:idx( 1 ) - 1 ), path( idx( 1 ) + 1:end  ) );
end 
end 

startingIdx = length( '''fullfile(' );

idx = strfind( fcmd, '''slprj''' );


if ( ~isempty( idx ) ) || ( numel( idx ) >= 2 && isequal( startingIdx, idx( 1 ) ) && isequal( idx( 1 ) + length( '''slprj''' ) + 1, idx( 2 ) ) ) ...
 && ( isequal( startingIdx, idx( 1 ) ) )
if numel( fcmd ) <= idx( 1 ) + length( '''slprj''' )
fcmd = [ fcmd( 1:idx( 1 ) - 1 ), fcmd( idx( 1 ) + length( '''slprj''' ):end  ) ];
else 
fcmd = [ fcmd( 1:idx( 1 ) - 1 ), fcmd( idx( 1 ) + length( '''slprj''' ) + 1:end  ) ];
end 
end 
end 

function res = isCommonPath( path )



res = false;
startingIdx = length( '''fullfile(' );


if startsWith( path, 'fullfile(' )
idx = strfind( path, '''common''' );
else 
idx = strfind( genFullFileCmd( path ), '''common''' );
end 
if ~isempty( idx ) && isequal( idx( 1 ), startingIdx )
res = true;
end 
end 
% Decoded using De-pcode utility v1.2 from file /tmp/tmp5J7F4h.p.
% Please follow local copyright laws when handling this file.

