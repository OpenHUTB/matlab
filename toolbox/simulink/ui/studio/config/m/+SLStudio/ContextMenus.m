function schemas=ContextMenus(varargin)

    if dig.isInUxTesting()
        schemas={};
        return;
    end


    if nargin==2

        selector=varargin{1};
        cbinfo=varargin{2};
        if isa(selector,'char')&&isa(cbinfo,'SLM3I.CallbackInfo')
            schemas=getContextMenu(selector,cbinfo);
        else
            throw(getBadParamException);
        end
    else
        throw(getBadParamException);
    end

end

function ex=getBadParamException
    ex=MException('Simulink:ContextMenus:BadParam',...
    'The parameter must be either the string ''initialize'' or ( char, cbinfo ).');
end

function schemas=getContextMenu(selector,cbinfo)
    pre_context_menu_tag='';
    post_context_menu_tag='';
    switch selector
    case 'EditorContextMenu'
        schemas=EditorContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'TreeContextMenu'
        schemas=TreeContextMenu(cbinfo);
    case 'BlockContextMenu'
        schemas=BlockContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'BlockDiagramContextMenu'
        schemas=BlockDiagramContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'AnnotationContextMenu'
        schemas=AnnotationContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'LineContextMenu'
        schemas=LineContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'MixedContextMenu'
        schemas=MixedContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'SigGenConnectedPortContextMenu'
        schemas=SigGenConnectedPortContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'UnconnectedInputPortContextMenu'
        schemas=UnconnectedInputPortContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'UnconnectedOutputPortContextMenu'
        schemas=UnconnectedOutputPortContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'SegmentLabelContextMenu'
        schemas=SegmentLabelContextMenu(cbinfo);
        pre_context_menu_tag='Simulink:PreContextMenu';
        post_context_menu_tag='Simulink:ContextMenu';
    case 'SampleTimeContextMenu'
        schemas=SampleTimeContextMenu(cbinfo);
    case 'SLDropMenu'
        schemas=DropMenu(cbinfo);
    case 'LinkBadgeContextMenu'
        schemas=LinkBadgeContextMenu(cbinfo);
    case 'ViewerBadgeContextMenu'
        schemas=ViewerBadgeContextMenu(cbinfo);
    case 'InspectSignalBadgeContextMenu'
        schemas=InspectSignalBadgeContextMenu(cbinfo);
    case 'HiddenRateTransBlkBadgeContextMenu'
        schemas=HiddenRateTransBlkBadgeContextMenu(cbinfo);
    case 'UnitConversionBlockBadgeContextMenu'
        schemas=UnitConversionBlockBadgeContextMenu(cbinfo);
    case 'ProtectedModelBadgeContextMenu'
        schemas=ProtectedModelBadgeContextMenu(cbinfo);
    case 'LookInsideMaskBadgeContextMenu'
        schemas=LookInsideMaskBadgeContextMenu(cbinfo);
    case 'VariantBlockBadgeContextMenu'
        schemas=VariantBlockBadgeContextMenu(cbinfo);
    case 'TestHarnessPerspectivesContextMenu'
        schemas=TestHarnessPerspectivesContextMenu(cbinfo);
    case 'FaultPerspectivesContextMenu'
        schemas=FaultPerspectivesContextMenu(cbinfo);
    case 'SignalPortNeedsCouplingElementContextMenu'
        schemas=SignalPortNeedsCouplingElementContextMenu(cbinfo);
    case 'CodeContextContextMenu'
        schemas=CodeContextContextMenu(cbinfo);
    case 'SRBadgeContextMenu'
        schemas=SRBadgeContextMenu(cbinfo);
    case 'FMUBlockSimulateUsingBadgeContextMenu'
        schemas=FMUBlockSimulateUsingBadgeContextMenu(cbinfo);
    otherwise
        schemas={};
    end

    pre_schemas=SLStudio.getCustomSchemas(pre_context_menu_tag);
    post_schemas=SLStudio.getCustomSchemas(post_context_menu_tag);
    schemas=[pre_schemas,{'separator'},schemas,{'separator'},post_schemas];
end




function schemas=EditorContextMenu(cbinfo)
    schemas={};
    target=SLStudio.Utils.getOneMenuTarget(cbinfo);
    if SLStudio.Utils.objectIsValidSegmentLabel(target)
        schemas=SegmentLabelContextMenu(cbinfo);
    elseif SLStudio.Utils.objectIsValidPort(target)



        if SLStudio.Utils.objectIsValidSigGenPort(target)
            schemas=SigGenConnectedPortContextMenu(cbinfo);
        elseif strcmpi(target.type,'In Port')
            schemas=UnconnectedInputPortContextMenu(cbinfo);
        elseif strcmpi(target.type,'Out Port')
            schemas=UnconnectedOutputPortContextMenu(cbinfo);
        elseif strcmpi(target.type,'Connection Port')
            schemas=UnconnectedConnectionPortContextMenu(cbinfo);
        end
    else
        parts=SLStudio.Utils.partitionSelection(cbinfo);

        bSelectedBlocks=~isempty(parts.blocks);
        bSelectedNotes=~isempty(parts.notes);
        bSelectedSegments=~isempty(parts.segments);
        bSelectedConnectors=~isempty(parts.connectors);
        bSelectedMarkupItems=~isempty(parts.markupItems);
        bSelectedMarkupConnectors=~isempty(parts.markupConnectors);

        bSingleBlockSelected=(length(parts.blocks)==1);
        bSingleNoteSelected=(length(parts.notes)==1);
        bHomogenousMarkupItemsSelected=bSelectedMarkupItems&&SLStudio.Utils.internal.homogenousMarkups(parts.markupItems);
        bHomogenousMarkupConnectorsSelected=bSelectedMarkupConnectors&&SLStudio.Utils.internal.homogenousMarkups(parts.markupConnectors);






        if SLStudio.Utils.objectIsValidSegment(target)
            bSelectedSegments=true;
        end

        if bSelectedBlocks&&bSingleBlockSelected&&...
            ~bSelectedNotes&&~bSelectedSegments&&~bSelectedConnectors&&...
            ~bSelectedMarkupItems&&~bSelectedMarkupConnectors
            schemas=BlockContextMenu(cbinfo);
        elseif bSelectedNotes&&bSingleNoteSelected&&...
            ~bSelectedBlocks&&~bSelectedSegments&&~bSelectedConnectors
            switch(parts.notes.Type)
            case SLM3I.AnnotationType.NOTE_ANNOTATION
                schemas=AnnotationContextMenu(cbinfo);
            case SLM3I.AnnotationType.IMAGE_ANNOTATION
                schemas=ImageContextMenu(cbinfo);
            case SLM3I.AnnotationType.AREA_ANNOTATION
                schemas=AreaContextMenu(cbinfo);
            otherwise
                throw(MException('Simulink:ContextMenus:BadParam',...
                'Annotation type not in [NOTE_ANNOTATION, IMAGE_ANNOTATION, AREA_ANNOTATION]'));
            end
        elseif bSelectedSegments&&...
            ~bSelectedBlocks&&~bSelectedNotes&&~bSelectedConnectors&&...
            ~bSelectedMarkupItems&&~bSelectedMarkupConnectors






            schemas=LineContextMenu(cbinfo);
        elseif~bSelectedBlocks&&~bSelectedNotes&&~bSelectedSegments&&...
            ~bSelectedConnectors&&~bSelectedMarkupItems&&~bSelectedMarkupConnectors
            schemas=BlockDiagramContextMenu(cbinfo);
        elseif~bSelectedBlocks&&~bSelectedNotes&&~bSelectedSegments&&...
            ~bSelectedConnectors&&bSelectedMarkupItems&&~bSelectedMarkupConnectors&&...
bHomogenousMarkupItemsSelected
            schemas=MarkupItemContextMenu(cbinfo,parts.markupItems);
        elseif~bSelectedBlocks&&~bSelectedNotes&&~bSelectedSegments&&...
            ~bSelectedConnectors&&~bSelectedMarkupItems&&bSelectedMarkupConnectors&&...
bHomogenousMarkupConnectorsSelected
            schemas=MarkupConnectorContextMenu(cbinfo,parts.markupConnectors);
        else
            schemas=MixedContextMenu(cbinfo);
        end
    end
end

function schemas=TreeContextMenu(cbinfo)



    if GLUE2.HierarchyService.isValid(cbinfo.targetHID)
        schemas={{'SLStudio.ContextMenuItems','ModelBrowserBlockOpen'},...
        {'SLStudio.ContextMenuItems','ModelBrowserBlockOpenInNewTab'},...
        {'SLStudio.ContextMenuItems','ModelBrowserBlockOpenInNewWindow'},...
        {'SLStudio.ContextMenuItems','ModelBrowserBlockOpenModelReference'}
        };
        schemas=[schemas,...
        {
        {'SLStudio.ContextMenuItems','ModelBrowserBlockOpenModelReferenceInNewTab'},...
        {'SLStudio.ContextMenuItems','ModelBrowserBlockOpenModelReferenceInNewWindow'},...
        {'SLStudio.ContextMenuItems','BlockOpenModelReferenceAsRoot'}
        }];
    else
        schemas={};
    end
end



function schemas=BlockContextMenuModelSlicer(im)
    schemas={im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
    'separator',...
    im.getAction('Simulink:BlockExplore'),...
    im.getAction('Simulink:ModelBlockOpenModelReference'),...
    'separator',...
    im.getAction('Simulink:BlockParameters'),...
    im.getAction('Simulink:ObjectProperties'),...
    im.getAction('Simulink:BlocksHelp')
    };
end


function schemas=BlockContextMenuSystemComposer(im,cbinfo)
    block=SLStudio.Utils.getOneMenuTarget(cbinfo);

    isBusElement=Simulink.BlockDiagram.Internal.isCompositePortBlock(block.handle);
    isPhysicalPort=strcmp(get_param(block.handle,'BlockType'),'PMIOPort');
    isDataPort=~isBusElement&&(strcmp(get_param(block.handle,'BlockType'),'Inport')||strcmp(get_param(block.handle,'BlockType'),'Outport'));
    isMdlRef=strcmp(get_param(block.handle,'BlockType'),'ModelReference');
    allowInlining=systemcomposer.internal.validator.ConversionUIValidator.canInline(block.handle);
    isProtectedComp=isMdlRef&&strcmpi(get_param(block.handle,'ProtectedModel'),'on');
    isSubSystem=strcmp(get_param(block.handle,'BlockType'),'SubSystem');
    isSimulinkSubsystem=isSubSystem&&strcmp(get_param(block.handle,'SimulinkSubDomain'),'Simulink');
    isSubsystemReference=systemcomposer.internal.isSubsystemReferenceComponent(block.handle);
    isAdapter=isSubSystem&&(strcmp(get_param(block.handle,'SimulinkSubDomain'),'ArchitectureAdapter'));
    showingAllocationBadges=(slfeature('AllocationBadge')>0);

    if isBusElement
        if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')
            schemas=GetArchitecturePortSchema(cbinfo,im);
            return;
        end



        schemas={im.getAction('Simulink:BlockExplore'),...
        'separator',...
        im.getAction('Simulink:Cut'),...
        im.getAction('Simulink:Copy'),...
        im.getAction('Simulink:Paste'),...
'separator'...
        ,im.getSubmenu('Simulink:ArrangeMenu'),...
        'separator',...
        im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
        im.getSubmenu('Simulink:BlockRequirementsMenu'),...
        im.getSubmenu('Simulink:BlockLinearAnalysisMenu'),...
        im.getSubmenu('Simulink:DesignVerifierContextMenu'),...
        'separator',...
        @ModelAdvisorContextMenu,...
        'separator',...
        im.getAction('Simulink:ObjectProperties'),...
        im.getAction('Simulink:RenameAll'),...
        im.getAction('Simulink:BlocksHelp')
        };
        return;
    end


    if((isPhysicalPort||isDataPort)&&(Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')))
        schemas=GetArchitecturePortSchema(cbinfo,im);
        return;
    end

    if~isAdapter


        schemas={im.getAction('Simulink:BlockExplore'),...
        im.getAction('Simulink:BlockOpenInNewTab'),...
        im.getAction('Simulink:BlockOpenInNewWindow'),...
        'separator',...
        im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
        im.getAction('Simulink:ModelBlockOpenModelReference'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceInNewTab'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceInNewWindow'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceAsRoot'),...
        im.getAction('Simulink:SROpenChildModel'),...
        'separator'};
    else
        schemas={};
    end

    schemas=[schemas,...
    {im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    im.getAction('Simulink:Paste'),...
    'separator'}];

    if~isSimulinkSubsystem
        schemas=[schemas,...
        {im.getAction('SystemComposer:SaveAsArchitectureModelMenuItem'),...
        im.getAction('SystemComposer:CreateSoftwareArchitectureModelMenuItem'),...
        im.getAction('SystemComposer:CreateSimulinkBehaviorMenuItem'),...
        im.getAction('SystemComposer:CreateStateflowChartBehaviorMenuItem'),...
        im.getAction('SystemComposer:LinkToModelMenuItem')}];
    end

    if(allowInlining)
        schemas=[schemas,...
        {im.getAction('SystemComposer:InlineModelMenuItem')}];
    end

    schemas=[schemas,...
    {'separator'...
    ,im.getAction('SystemComposer:ArchAddVariantMenuItem'),...
    im.getSubmenu('Simulink:Variant'),...
    'separator'}];




    if(~isAdapter&&~isProtectedComp&&...
        ~(isSubsystemReference&&slInternal('isSRGraphLockedForEditing',block.handle)))
        schemas=[schemas,...
        {@ZCStudio.AttachPrototypeMenu,...
        'separator'}];
    end

    schemas=[schemas,...
    {im.getAction('SystemComposer:OpenSpotlightMenuItem'),...
    'separator'}];

    if showingAllocationBadges
        schemas=[schemas,{@ZCStudio.AllocationMenu,'separator'}];
    end

    if isMdlRef||(isSubSystem&&~isAdapter)

        schemas=[schemas,{im.getSubmenu('Simulink:FormatMenu')}];
    else

        schemas=[schemas,{im.getSubmenu('Simulink:ArrangeMenu')}];
    end

    schemas=[schemas,...
    {'separator',...
    im.getSubmenu('Simulink:BlockRequirementsMenu'),...
    'separator'}];


    if isMdlRef||isSimulinkSubsystem||isSubsystemReference
        schemas=[schemas,...
        {im.getAction('Simulink:BlockParameters'),...
        'separator'}];
    end

    if~isAdapter&&~isBusElement
        schemas=[schemas,...
        {im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        'separator'}];
    end
    schemas=[schemas,...
    {
    im.getAction('Simulink:ObjectProperties'),...
    im.getAction('Simulink:BlocksHelp')
    }];
end


function schemas=BlockContextMenuCompositePortBlocks(im)
    schemas={im.getAction('Simulink:BlockExplore'),...
    'separator',...
    im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    im.getAction('Simulink:Paste'),...
    'separator',...
    im.getSubmenu('Simulink:FormatMenu'),...
    'separator',...
    im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
    im.getSubmenu('Simulink:BlockRequirementsMenu'),...
    im.getSubmenu('Simulink:BlockLinearAnalysisMenu'),...
    im.getSubmenu('Simulink:DesignVerifierContextMenu'),...
    'separator',...
    @ModelAdvisorContextMenu,...
    'separator',...
    im.getAction('Simulink:BlockParameters'),...
    im.getAction('Simulink:ObjectProperties'),...
    im.getAction('Simulink:RenameAll'),...
    im.getAction('Simulink:BlocksHelp')
    };
end

function schemas=BlockContextMenuAutosarArchitecture(im,block)
    isSubsys=SLStudio.Utils.objectIsValidSubsystemBlock(block);
    isMdlRef=SLStudio.Utils.objectIsValidModelReferenceBlock(block);
    isNonLinkedComponentBlock=isSubsys&&...
    autosar.composition.Utils.isComponentBlock(block.handle);
    isCompositionBlock=isSubsys&&...
    autosar.composition.Utils.isCompositionBlock(block.handle);
    isBusElement=Simulink.BlockDiagram.Internal.isCompositePortBlock(block.handle);
    showingAllocationBadges=(slfeature('AllocationBadge')>0);

    if isBusElement

        schemas={im.getAction('Simulink:BlockExplore'),...
        'separator',...
        im.getAction('Simulink:Cut'),...
        im.getAction('Simulink:Copy'),...
        im.getAction('Simulink:Paste'),...
'separator'...
        ,im.getSubmenu('Simulink:ArrangeMenu'),...
        'separator',...
        im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
        im.getSubmenu('Simulink:BlockRequirementsMenu'),...
        im.getSubmenu('Simulink:BlockLinearAnalysisMenu'),...
        im.getSubmenu('Simulink:DesignVerifierContextMenu'),...
        'separator',...
        @ModelAdvisorContextMenu,...
        'separator',...
        im.getAction('Simulink:ObjectProperties'),...
        im.getAction('Simulink:RenameAll'),...
        im.getAction('Simulink:BlocksHelp')
        };
        return;
    end

    schemas={};



    if~isNonLinkedComponentBlock
        schemas={im.getAction('Simulink:BlockExplore'),...
        im.getAction('Simulink:BlockOpenInNewTab'),...
        im.getAction('Simulink:BlockOpenInNewWindow'),...
        im.getAction('Simulink:ModelBlockOpenModelReference'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceInNewTab'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceInNewWindow'),...
        im.getAction('Simulink:ModelBlockOpenModelReferenceAsRoot'),...
'separator'
        };
    end

    if isCompositionBlock
        schemas=[schemas,...
        {im.getAction('Composition:ExportCompositionBlock'),...
'separator'
        }];
    end

    schemas=[schemas,...
    {im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    im.getAction('Simulink:Paste'),...
'separator'...
    ,im.getAction('Composition:CreateModel'),...
    im.getAction('Composition:LinkToModel'),...
    im.getAction('Composition:ImportModel'),...
    im.getAction('Composition:ExportComponent'),...
'separator'...
    ,im.getAction('SystemComposer:OpenSpotlightMenuItem'),...
'separator'
    }];

    if isMdlRef
        allowInlining=systemcomposer.internal.validator.ConversionUIValidator.canInline(block.handle);
        if(allowInlining)
            schemas=[schemas,...
            {im.getAction('SystemComposer:InlineModelMenuItem'),...
            'separator'}];
        end
    end

    if slfeature('ZCProfilesForAUTOSAR')>0
        schemas=[schemas,...
        {@ZCStudio.AttachPrototypeMenu,...
        'separator'}];
    end

    if showingAllocationBadges
        schemas=[schemas,{@ZCStudio.AllocationMenu,'separator'}];
    end

    if isMdlRef||isCompositionBlock

        schemas=[schemas,{im.getSubmenu('Simulink:FormatMenu')}];
    else

        schemas=[schemas,{im.getSubmenu('Simulink:ArrangeMenu')}];
    end

    schemas=[schemas,...
    {'separator',...
    im.getSubmenu('Simulink:BlockRequirementsMenu'),...
    'separator'}];



    if isMdlRef
        schemas=[schemas,...
        {
        im.getAction('Simulink:BlockParameters'),...
        im.getAction('Simulink:ObjectProperties'),...
        'separator'}];
    end

    if isMdlRef||isCompositionBlock
        schemas=[schemas,...
        {im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        'separator'}];
    end

    schemas=[schemas,...
    {
    im.getAction('Simulink:BlocksHelp')
    }];
end


function schemas=BlockContextMenuDefault(im,block)
    schemas={im.getAction('Simulink:BlockExplore'),...
    im.getAction('Simulink:BlockOpenInNewTab'),...
    im.getAction('Simulink:BlockOpenInNewWindow'),...
    im.getAction('Simulink:SROpenChildModel'),...
    im.getAction('Simulink:ModelBlockOpenModelReference'),...
    im.getAction('Simulink:ModelBlockOpenModelReferenceInNewTab'),...
    im.getAction('Simulink:ModelBlockOpenModelReferenceInNewWindow'),...
    im.getAction('Simulink:ModelBlockOpenModelReferenceAsRoot'),...
    'separator',...
    im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    im.getAction('Simulink:Paste'),...
    im.getAction('Simulink:CommentThru'),...
    im.getAction('Simulink:Comment'),...
    im.getAction('Simulink:Uncomment'),...
'separator'...
    ,im.getAction('Simulink:HMI:Scope:Pan'),...
    im.getAction('Simulink:HMI:Scope:Zoom'),...
    im.getAction('Simulink:HMI:Scope:ZoomT'),...
    im.getAction('Simulink:HMI:Scope:ZoomY'),...
    'separator',...
    im.getAction('Simulink:HMI:Scope:ZoomOut'),...
    im.getAction('Simulink:HMI:Scope:FitToView'),...
    im.getAction('Simulink:HMI:Scope:FitToViewInTime'),...
    im.getAction('Simulink:HMI:Scope:FitToViewInY'),...
    'separator',...
    im.getSubmenu('Simulink:HMI:Scope:DataCursors'),...
    'separator',...
    'separator',...
    im.getAction('Simulink:VariablesUsed'),...
    im.getAction('Simulink:VariablesUsedInRefMdl'),...
    'separator',...
    @GetCreateSubsystemContextMenuItem,...
    @GetConvertToContextMenuItem,...
    im.getSubmenu('Simulink:SubsystemAndModelRefMenu'),...
    im.getSubmenu('SystemComposer:ComponentMenu'),...
    'separator',...
    im.getAction('Simulink:NavigateToStateOwnerBlock'),...
    im.getSubmenu('Simulink:NavigateToStateReaderBlocks'),...
    im.getSubmenu('Simulink:NavigateToStateWriterBlocks'),...
    'separator',...
    im.getSubmenu('Simulink:SimulationHarnessMenu'),...
    im.getSubmenu('Simulink:ObserverMenu'),...
    'separator',...
    im.getSubmenu('Simulink:Variant'),...
    im.getSubmenu('Simulink:ConfigurableSubSystem'),...
    'separator',...
    im.getSubmenu('Simulink:FormatMenu'),...
    im.getSubmenu('Simulink:MaskMenu'),...
    im.getSubmenu('Simulink:LibraryLinkMenu'),...
    'separator',...
    im.getAction('Simulink:BlockHMIParamsMenu'),...
    im.getAction('Simulink:BlockHMISignalsMenu'),...
    'separator',...
    im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
    im.getSubmenu('Simulink:BlockRequirementsMenu'),...
    im.getSubmenu('Simulink:BlockLinearAnalysisMenu'),...
    im.getSubmenu('Simulink:DesignVerifierContextMenu'),...
    @CoverageContextMenus,...
    'separator',...
    @ModelAdvisorContextMenu
    };

    if(strcmp(get_param(block.handle,'Type'),'block')&&...
        strcmp(get_param(block.handle,'BlockType'),'SubSystem'))
        schemas=[schemas,...
        {im.getAction('Simulink:MetricsDashboard')
        }];
    end

    if(strcmp(get_param(block.handle,'Type'),'block')&&...
        Simulink.cosimservice.internal.IsCoSimComponent(block.handle))
        schemas=[schemas,...
        {'separator',...
        im.getAction('Simulink:SignalPortCouplingElementParameterDialogMenu')
        }];
    end

    schemas=[schemas,...
    {'separator',...
    im.getAction('Simulink:FixedPointInterfaceBlockContextMenu'),...
    im.getAction('SimulinkFixedPoint:fpca:ReplaceBlk'),...
    im.getAction('SimulinkFixedPoint:fpca:DecoupleWithDTC'),...
    'separator',...
    }];

    if(strcmp(get_param(block.handle,'Type'),'block')&&...
        (strcmp(get_param(block.handle,'BlockType'),'ModelReference')||...
        strcmp(get_param(block.handle,'BlockType'),'SubSystem')))
        schemas=[schemas,...
        {'separator',...
        @CloneDetectionExclusion,...
        'separator',...
        }];
    end

    schemas=[schemas,...
    {im.getSubmenu('Simulink:M2MXformMenu'),...
    'separator',...
    im.getSubmenu('Simulink:SimulinkCoderMenu'),...
    im.getSubmenu('Simulink:CodeContextMenu'),...
    im.getSubmenu('Simulink:HDLContextMenu'),...
    im.getSubmenu('Simulink:PLCMenu'),...
    'separator',...
    im.getSubmenu('Simulink:PolyspaceContextMenu'),...
    'separator',...
    im.getAction('Simulink:BlockParameters'),...
    im.getAction('Simulink:ObjectProperties'),...
    im.getAction('Simulink:RenameAll'),...
    im.getAction('Simulink:BlocksHelp')
    }];
end


function schemas=BlockContextMenu(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    block=SLStudio.Utils.getOneMenuTarget(cbinfo);
    if~SLStudio.Utils.objectIsValidBlock(block)
        schemas={im.getAction('Simulink:HiddenSchema')};
    else
        if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
            Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')

            schemas=BlockContextMenuSystemComposer(im,cbinfo);
        elseif Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')

            schemas=BlockContextMenuAutosarArchitecture(im,block);
        elseif InActiveModelSlicerMode(cbinfo)

            schemas=BlockContextMenuModelSlicer(im);
        elseif Simulink.BlockDiagram.Internal.isCompositePortBlock(block.handle)

            schemas=BlockContextMenuCompositePortBlocks(im);
        else
            schemas=BlockContextMenuDefault(im,block);
        end
    end




end


function schemas=BlockDiagramContextMenu(cbinfo)

    showingAllocationBadges=slfeature('AllocationBadge');
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if InActiveModelSlicerMode(cbinfo)

        schemas={im.getSubmenu('Simulink:ModelSlicerDiagramContextMenu'),...
        'separator',...
        im.getAction('Simulink:BlockExplore'),...
        'separator',...
        im.getAction('Simulink:ModelProperties'),...
        im.getAction('Simulink:BlocksHelp')
        };
    elseif Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')

        schemas={im.getAction('Simulink:BlockExplore'),...
        'separator',...
        @ZCStudio.AttachPrototypeMenu,...
        };
        if showingAllocationBadges
            schemas=[schemas,{'separator',@ZCStudio.AllocationMenu}];
        end
        schemas=[schemas,{...
        'separator',...
        im.getAction('Simulink:Undo'),...
        im.getAction('Simulink:Redo'),...
        'separator',...
        im.getAction('Simulink:Paste'),...
        'separator',...
        im.getAction('Simulink:SelectAll'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        'separator',...
        im.getAction('Simulink:RemoveHighlighting'),...
        im.getAction('Simulink:ZoomFitToWindow'),...
        im.getSubmenu('Simulink:HiliteOptionsMenu'),...
        im.getAction('Simulink:RefreshModelRefBlocks'),...
        im.getAction('Simulink:UpdateDiagram'),...
        'separator',...
        im.getSubmenu('Simulink:SysRequirementsMenu'),...
        'separator',...
        im.getAction('Simulink:ConfigurationParameters'),...
        im.getAction('Simulink:ModelProperties'),...
        im.getAction('Simulink:BlocksHelp')
        }];
    elseif Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')

        schemas={im.getAction('Simulink:BlockExplore'),...
'separator'
        };

        if slfeature('ZCProfilesForAUTOSAR')>0
            schemas=[schemas,...
            {@ZCStudio.AttachPrototypeMenu,...
            'separator'}];
        end
        if showingAllocationBadges
            schemas=[schemas,{@ZCStudio.AllocationMenu,'separator'}];
        end

        schemas=[schemas,...
        {im.getAction('Simulink:Undo'),...
        im.getAction('Simulink:Redo'),...
        'separator',...
        im.getAction('Simulink:Paste'),...
        'separator',...
        im.getAction('Simulink:SelectAll'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        'separator',...
        im.getAction('Simulink:RemoveHighlighting'),...
        im.getAction('Simulink:ZoomFitToWindow'),...
        im.getSubmenu('Simulink:HiliteOptionsMenu'),...
        im.getAction('Simulink:RefreshModelRefBlocks'),...
        im.getAction('Simulink:UpdateDiagram'),...
        'separator',...
        im.getSubmenu('Simulink:SysRequirementsMenu'),...
        'separator',...
        im.getAction('Simulink:ConfigurationParameters'),...
        im.getAction('Simulink:ModelProperties'),...
        im.getAction('Simulink:BlocksHelp')
        }];
    elseif Simulink.internal.isParentActivityDomain(cbinfo)
        schemas={im.getAction('Simulink:Undo'),...
        im.getAction('Simulink:Redo')};
    else

        schemas={im.getAction('Simulink:BlockExplore'),...
        im.getAction('Simulink:CanvasOpenModelReferenceAsRoot'),...
        'separator',...
        im.getAction('Simulink:Undo'),...
        im.getAction('Simulink:Redo'),...
        'separator',...
        im.getAction('Simulink:Paste'),...
        im.getAction('Simulink:PasteDuplicate'),...
        'separator',...
        im.getAction('Simulink:SelectAll'),...
        'separator',...
        im.getAction('Simulink:VariablesUsed'),...
        'separator',...
        im.getSubmenu('Simulink:Variant'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        im.getSubmenu('Simulink:ObserverMenu'),...
        'separator',...
        im.getAction('Simulink:RemoveHighlighting'),...
        im.getSubmenu('Simulink:HiliteOptionsMenu'),...
        im.getAction('Simulink:RefreshModelRefBlocks'),...
        im.getAction('Simulink:UpdateDiagram'),...
        im.getSubmenu('Simulink:MaskMenu'),...
        im.getSubmenu('Simulink:LibraryLinkMenu'),...
        'separator',...
        im.getSubmenu('Simulink:CanvasColorMenu'),...
        'separator',...
        im.getSubmenu('Simulink:MessageAnimationDisplayMenu'),...
        'separator',...
        im.getSubmenu('Simulink:LibraryLinkDisplayMenu'),...
        im.getSubmenu('Simulink:SampleTimeMenu'),...
        @BlockDiagramDisplayMenu,...
        'separator',...
        im.getSubmenu('Simulink:SysRequirementsMenu'),...
        @CoverageContextMenus,...
        'separator',...
        @ModelAdvisorContextMenu,...
        im.getAction('Simulink:MetricsDashboard'),...
        'separator',...
        im.getAction('Simulink:FixedPointInterface'),...
        'separator',...
        im.getAction('Simulink:ConfigurationParameters'),...
        im.getAction('Simulink:ModelProperties'),...
        im.getAction('Simulink:BlocksHelp')
        };
    end
end


function schemas=AnnotationContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    'separator',...
    im.getAction('Simulink:EditText'),...
    'separator',...
    @AnnotationFormatMenu,...
    im.getSubmenu('Simulink:TextAlignmentMenu'),...
    im.getAction('Simulink:LatexMode'),...
    im.getAction('Simulink:MathMLMode'),...
    'separator',...
    im.getSubmenu('Simulink:AnnotationRequirementsMenu'),...
    'separator',...
    im.getAction('Simulink:ObjectProperties'),...
    'separator',...
    im.getAction('Simulink:AnnotationChangeCategory')...
    ,im.getAction('Simulink:AnnotationToRequirement')...
    ,im.getAction('Simulink:ShowInLibBrowser')...
    };
end

function schema=ImageFormatMenu(cbinfo)
    schema=sl_container_schema;
    schema.tag='Simulink:ImageFormatMenu';
    schema.label=DAStudio.message('Simulink:studio:FormatMenu');

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schema.childrenFcns={
    im.getAction('Simulink:AutoLayoutDiagram'),...
    'separator',...
    im.getAction('Simulink:RestoreImageSize'),...
    'separator',...
    im.getAction('Simulink:RotateImageRight90'),...
    im.getAction('Simulink:RotateImageLeft90'),...
    im.getAction('Simulink:RotateImage180'),...
    im.getAction('Simulink:FlipImageVertical'),...
    im.getAction('Simulink:FlipImageHorizontal'),...
    'separator',...
    im.getAction('Simulink:BlockFitToContent'),...
    'separator',...
    im.getAction('Simulink:BringToFront'),...
    im.getAction('Simulink:SendToBack')
    };
end

function schemas=ImageContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    'separator',...
    im.getAction('Simulink:InsertImage'),...
    im.getAction('Simulink:CopyImage'),...
    im.getAction('Simulink:PasteImage'),...
    'separator',...
    @ImageFormatMenu,...
    'separator',...
    im.getSubmenu('Simulink:AnnotationRequirementsMenu'),...
    'separator',...
    im.getAction('Simulink:ObjectProperties')...
    ,'separator',...
    im.getAction('Simulink:AnnotationChangeCategory')...
    ,im.getAction('Simulink:ShowInLibBrowser')...
    };
end


function schemas=AreaContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    'separator',...
    im.getSubmenu('Simulink:GradientColorMenu'),...
    im.getAction('Simulink:BorderMenuAction'),...
    'separator',...
    im.getAction('Simulink:CreateSubsystemFromSelection'),...
    'separator',...
    im.getSubmenu('Simulink:AnnotationRequirementsMenu'),...
    'separator',...
    im.getAction('Simulink:ObjectProperties')...
    };
end


function schemas=LineContextMenu(cbinfo)
    showingAllocationBadges=slfeature('AllocationBadge');
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if SLStudio.Utils.isConnectionLineSelected(cbinfo)
        schemas={im.getAction('Simulink:Cut'),...
        im.getAction('Simulink:Copy'),...
        'separator',...
        im.getAction('Simulink:HighlightConnections'),...
        im.getAction('Simulink:RemoveHighlighting'),...
        'separator',...
        im.getAction('Simulink:AutoLayoutDiagram')
        };
        if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
            Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')
            schemas=[schemas,...
            {'separator',...
            @ZCStudio.AttachPrototypeMenu,...
            'separator'}];
            if showingAllocationBadges
                schemas=[schemas,{'separator',@ZCStudio.AllocationMenu}];
            end
        end
    else
        if get_param(cbinfo.model.Handle,'ModelSlicerActive')



            if slslicer.internal.MenuSlicerUtils().checkUIOpenModel(cbinfo.model.Handle)
                schemas={im.getSubmenu('Simulink:ModelSlicerSignalContextMenu')...
                ,'separator',...
                im.getAction('Simulink:AddConditionalPause'),...
                im.getAction('Simulink:DisplayShowValueLabelForSelectedPort'),...
                'separator',...
                im.getAction('Simulink:SignalProperties')};
            else


                schemas={...
                im.getAction('Simulink:AddConditionalPause'),...
                im.getAction('Simulink:DisplayShowValueLabelForSelectedPort'),...
                {im.getAction('Simulink:SignalHierarchy'),'ContextMenu'},...
                im.getAction('Simulink:SignalProperties'),...
                };
            end

        else

            schemas={im.getAction('Simulink:Cut'),...
            im.getAction('Simulink:Copy'),...
            im.getAction('Simulink:Paste'),...
            'separator',...
            im.getSubmenu('Simulink:ObserverMenu'),...
            'separator',...
            im.getAction('Simulink:HighlightSignalToSource'),...
            im.getAction('Simulink:HighlightSignalToDestination'),...
            im.getAction('Simulink:RemoveHighlighting'),...
            'separator',...
            im.getSubmenu('Simulink:ModelSlicerSignalContextMenu'),...
            'separator',...
            im.getAction('Simulink:AutoLayoutDiagram'),...
            'separator',...
            im.getAction('Simulink:LineHMIMenu'),...
            'separator'};

            if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
                Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')||...
                Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')
                schemas=[schemas,...
                {'separator',...
                @ZCStudio.AttachPrototypeMenu,...
                'separator'}];
                if showingAllocationBadges
                    schemas=[schemas,{@ZCStudio.AllocationMenu,'separator'}];
                end
            end

            if(slfeature('ConditionalPause')>0)
                schemas=...
                [schemas,...
                {im.getAction('Simulink:AddConditionalPause')}];
            end
            if slfeature('slLogicAnalyzerApp')>0
                schemas=...
                [schemas,...
                {im.getAction('Simulink:DisplayShowValueLabelForSelectedPort'),...
                'separator',...
                im.getAction('Simulink:InspectSignal'),...
                'separator',...
                im.getAction('Simulink:SignalAndScopeManager')}];
            else
                schemas=...
                [schemas,...
                {im.getAction('Simulink:DisplayShowValueLabelForSelectedPort'),...
                'separator',...
                im.getAction('Simulink:InspectSignal'),...
                im.getAction('Simulink:SignalAndScopeManager')}];
            end
            if slfeature('SLCoSimService')>1
                schemas=...
                [schemas,...
                {'separator',...
                im.getAction('Simulink:InsertSignalExtrapolation'),...
                'separator',...
                }];
            end

            sig_gen={};




            segment=SLStudio.Utils.getOneMenuTarget(cbinfo);
            if SLStudio.Utils.objectIsValidSegment(segment)
                l=SLStudio.Utils.getSingleSelectedLine(cbinfo);
                if~isempty(l)
                    srcPort=SLStudio.Utils.getLineSourcePort(l);
                    destPorts=SLStudio.Utils.getLineDestPorts(l);
                    if isempty(srcPort)&&~isempty(destPorts)
                        sig_gen={im.getSubmenu('Simulink:CreateAndConnectGeneratorMenu'),...
                        im.getSubmenu('Simulink:ConnectToExistingGeneratorMenu')
                        };
                    elseif~isempty(srcPort)
                        sig_gen={im.getSubmenu('Simulink:OpenViewerMenu'),...
                        im.getSubmenu('Simulink:CreateAndConnectViewerMenu'),...
                        im.getSubmenu('Simulink:ConnectToExistingViewerMenu'),...
                        'separator',...
                        im.getSubmenu('Simulink:DisconnectViewerMenu'),...
                        im.getSubmenu('Simulink:DeleteViewerMenu'),...
                        'separator',};

                        if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
                            Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')


                            sig_gen=[sig_gen,...
                            {{im.getAction('Simulink:SignalHierarchy'),'ContextMenu'}},...
                            {im.getAction('Simulink:SignalProperties')}];
                        else
                            linearize={im.getSubmenu('Simulink:LinearizeSignalMenu'),'separator'};
                            sig_gen=[sig_gen,linearize,...
                            {{im.getAction('Simulink:SignalHierarchy'),'ContextMenu'}},...
                            {im.getAction('Simulink:SignalProperties')}];
                        end
                    end
                end
            end


            schemas=[schemas,sig_gen];

        end
    end
end


function schemas=MixedContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if InActiveModelSlicerMode(cbinfo)
        schemas={im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
        'separator',...
        im.getSubmenu('Simulink:VectorRequirementsMenu')
        };

    else
        if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
            Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')

            schemas={im.getAction('Simulink:Cut'),...
            im.getAction('Simulink:Copy'),...
            im.getAction('Simulink:Paste'),...
            'separator',...
            im.getAction('SystemComposer:LinkToModelMenuItem')};

            blocks=SLStudio.Utils.getSelectedBlocks(cbinfo);

            allowInlining=true;
            for i=1:numel(blocks)
                block=blocks(i);
                allowInlining=systemcomposer.internal.validator.ConversionUIValidator.canInline(block.handle);
                if~allowInlining
                    break;
                end
            end

            if allowInlining
                schemas=[schemas,...
                {im.getAction('SystemComposer:InlineModelMenuItem')}];
            end

            schemas=[schemas,...
            {'separator',...
            @ZCStudio.AttachPrototypeMenu,...
            'separator',...
            im.getAction('Simulink:CreateSubsystemFromSelection'),...
            'separator',...
            im.getAction('SystemComposer:ConvertToSharedInterfaceMenuItem')}];


            for i=1:numel(blocks)
                block=blocks(i);
                isMdlRef=strcmp(get_param(block.handle,'BlockType'),'ModelReference');
                isSubSystem=strcmp(get_param(block.handle,'BlockType'),'SubSystem');
                isAdapter=isSubSystem&&...
                strcmp(get_param(block.handle,'SimulinkSubDomain'),'ArchitectureAdapter');

                if isMdlRef||(isSubSystem&&~isAdapter)
                    schemas=[schemas,...
                    {im.getSubmenu('Simulink:FormatMenu'),...
'separator'
                    }];
                    break;
                end
            end

            schemas=[schemas,...
            {im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
            im.getSubmenu('Simulink:VectorRequirementsMenu'),...
            'separator',...
            im.getAction('Simulink:AnnotationToRequirement')...
            }];

        elseif Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')

            schemas={im.getAction('Simulink:Cut'),...
            im.getAction('Simulink:Copy'),...
            im.getAction('Simulink:Paste'),...
            'separator'};

            blocks=SLStudio.Utils.getSelectedBlocks(cbinfo);
            for i=1:numel(blocks)
                block=blocks(i);
                isMdlRef=strcmp(get_param(block.handle,'BlockType'),'ModelReference');
                isSubSystem=strcmp(get_param(block.handle,'BlockType'),'SubSystem');

                if isMdlRef||isSubSystem
                    schemas=[schemas,...
                    {im.getSubmenu('Simulink:FormatMenu'),...
'separator'
                    }];
                    break;
                end
            end

            schemas=[schemas,...
            {im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
            im.getSubmenu('Simulink:VectorRequirementsMenu'),...
            'separator',...
            im.getAction('Simulink:AnnotationToRequirement')...
            }];

        elseif slfeature('slLogicAnalyzerApp')>0
            schemas={im.getAction('Simulink:Cut'),...
            im.getAction('Simulink:Copy'),...
            im.getAction('Simulink:Paste'),...
            im.getAction('Simulink:CommentThru'),...
            im.getAction('Simulink:Comment'),...
            im.getAction('Simulink:Uncomment'),...
            'separator',...
            im.getAction('Simulink:ConnectBlocks'),...
            im.getAction('Simulink:CreateSubsystemFromSelection'),...
            'separator',...
            im.getAction('Simulink:InspectSignal'),...
            'separator',...
            im.getSubmenu('Simulink:FormatMenu'),...
            'separator',...
            im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
            im.getSubmenu('Simulink:VectorRequirementsMenu'),...
            'separator',...
            im.getSubmenu('Simulink:SimulinkCoderMenu')...
            ,'separator',...
            im.getAction('Simulink:AnnotationToRequirement')...
            };
        else
            schemas={im.getAction('Simulink:Cut'),...
            im.getAction('Simulink:Copy'),...
            im.getAction('Simulink:Paste'),...
            im.getAction('Simulink:CommentThru'),...
            im.getAction('Simulink:Comment'),...
            im.getAction('Simulink:Uncomment'),...
            'separator',...
            im.getAction('Simulink:ConnectBlocks'),...
            im.getAction('Simulink:CreateSubsystemFromSelection'),...
            'separator',...
            im.getSubmenu('Simulink:FormatMenu'),...
            'separator',...
            im.getSubmenu('Simulink:ModelSlicerContextMenu'),...
            im.getSubmenu('Simulink:VectorRequirementsMenu'),...
            'separator',...
            im.getAction('Simulink:ShowInLibBrowser')...
            ,'separator',...
            im.getAction('Simulink:AnnotationToRequirement')...
            };
        end
    end

end



function schemas=UnconnectedInputPortContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')
        schemas=GetArchitecturePortSchema(cbinfo,im);
    else





        if(loc_IsVSSChoiceBlock(cbinfo))
            schemas={};
            return;
        end

        schemas={im.getAction('Simulink:SignalAndScopeManager'),...
        'separator',...
        im.getSubmenu('Simulink:CreateAndConnectGeneratorMenu'),...
        im.getSubmenu('Simulink:ConnectToExistingGeneratorMenu')...
        };
    end
end


function schemas=UnconnectedOutputPortContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');







    if Simulink.internal.isParentArchitectureDomain(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')
        schemas=GetArchitecturePortSchema(cbinfo,im);
    else
        schemas={};





        if(loc_IsVSSChoiceBlock(cbinfo))
            return;
        end

        if(slfeature('ConditionalPause')>0)
            schemas=...
            [schemas,...
            {im.getAction('Simulink:AddConditionalPause'),'separator'}];
        end

        schemas=[schemas,ViewerBadgeContextMenu(cbinfo)];
    end
end


function schemas=UnconnectedConnectionPortContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={};
    if Simulink.internal.isArchitectureModel(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'AUTOSARArchitecture')
        schemas=GetArchitecturePortSchema(cbinfo,im);
    else





        if(loc_IsVSSChoiceBlock(cbinfo))
            schemas={};
            return;
        end

        target=SLStudio.Utils.getOneMenuTarget(cbinfo);
        if SLM3I.Util.isPortDeleteable(target)
            schemas={
            im.getAction('Simulink:Delete'),...
            'separator',...
            };
        end
    end
end


function schemas=GetArchitecturePortSchema(cbinfo,im)
    target=SLStudio.Utils.getOneMenuTarget(cbinfo);
    portHandle=target.handle;
    parentHandle=get_param(get_param(portHandle,'Parent'),'Handle');

    isRootPort=get_param(parentHandle,'Type')=="block_diagram";
    isSubsysPort=get_param(parentHandle,'Type')~="block_diagram"&&...
    strcmp(get_param(parentHandle,'BlockType'),'SubSystem');
    isMdlRefPort=get_param(parentHandle,'Type')~="block_diagram"&&...
    strcmp(get_param(parentHandle,'BlockType'),'ModelReference');
    isAdapterPort=isSubsysPort&&strcmp(get_param(parentHandle,'SimulinkSubDomain'),'ArchitectureAdapter');
    isSubrefPort=systemcomposer.internal.isSubsystemReferenceComponent(parentHandle);
    showingAllocationBadges=slfeature('AllocationBadge');




    schemas={};
    if isSubsysPort||isRootPort
        if InActiveModelSlicerMode(cbinfo)
            schemas=[schemas,{'separator',...
            im.getSubmenu('Simulink:ModelSlicerContextMenu')}];
            return;
        end
        schemas={im.getAction('SystemComposer:Delete'),...
        'separator',...
        im.getAction('SystemComposer:ApplySelectedInterface'),...
        im.getAction('SystemComposer:ApplyOwnedInterface'),...
        im.getAction('SystemComposer:ClearInterface'),...
        im.getAction('SystemComposer:ConvertToSharedInterfaceMenuItem'),...
        'separator',...
        im.getAction('SystemComposer:ConjugatePort'),...
        'separator'};
        if(~isAdapterPort&&~isSubrefPort)
            schemas=[schemas,...
            {'separator',...
            @ZCStudio.AttachPrototypeMenu}];
        end
        if showingAllocationBadges
            schemas=[schemas,{'separator',@ZCStudio.AllocationMenu}];
        end
    elseif isMdlRefPort
        if showingAllocationBadges
            schemas={@ZCStudio.AllocationMenu};
        end
    end
end

function schemas=ViewerBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:SignalAndScopeManager'),...
    'separator',...
    im.getSubmenu('Simulink:OpenViewerMenu'),...
    im.getSubmenu('Simulink:CreateAndConnectViewerMenu'),...
    im.getSubmenu('Simulink:ConnectToExistingViewerMenu'),...
    im.getSubmenu('Simulink:DisconnectViewerMenu'),...
    im.getSubmenu('Simulink:DeleteViewerMenu'),...
    'separator',...
    im.getAction('Simulink:InspectSignal'),...
    'separator',...
    im.getAction('Simulink:SignalProperties')
    };
end

function schemas=InspectSignalBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:HighlightInSDI'),...
    im.getAction('Simulink:SDISignalSettings')
    };
end

function schemas=HiddenRateTransBlkBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:RTBadgeInsertMenu'),...
    im.getAction('Simulink:RTBadgeHelpMenu')
    };
end

function schemas=UnitConversionBlockBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:UnitConversionInsertBlockMenu')...
    };
end


function schemas=SigGenConnectedPortContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:GeneratorParameters'),...
    'separator',...
    im.getAction('Simulink:SignalAndScopeManager'),...
    'separator',...
    im.getAction('Simulink:EditGeneratorName'),...
    'separator',...
    im.getSubmenu('Simulink:CreateAndConnectGeneratorMenu'),...
    im.getSubmenu('Simulink:SwitchGeneratorConnectionMenu'),...
    im.getAction('Simulink:DisconnectGenerator'),...
    im.getAction('Simulink:DisconnectAndDeleteGenerator'),...
    'separator',...
    im.getAction('Simulink:DisplayGenerator')
    };
end


function schemas=SegmentLabelContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    schemas={im.getAction('Simulink:CopySegmentLabel'),...
    im.getAction('Simulink:DeleteSegmentLabel')
    };
end



function schemas=SampleTimeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:SampleTimeDisplayAll'),...
    im.getAction('Simulink:SampleTimeDisplayAnnotations'),...
    im.getAction('Simulink:SampleTimeDisplayColor'),...
    im.getAction('Simulink:SampleTimeDisplayNone'),...
    'separator',...
    im.getAction('Simulink:SampleTimeLegend')
    };
end


function schemas=DropMenu(cbinfo)
    editor=cbinfo.studio.App.getActiveEditor;
    menuInfo=GLUE2.Domain.getEditorPopupMenuInfo(editor);
    if slfeature('ParameterWriteToGeneralBlocks')==3
        schemas={{@DropMenuCopy,menuInfo},...
        {@DropMenuDuplicateInport,menuInfo},...
        {@DropMenuCreateNewPort,menuInfo},...
        {@DropMenuUseSamePort,menuInfo},...
        {@DropMenuCopyAndBreakLinks,menuInfo},...
        {@DropMenuCreateViewrsAndGenerators,menuInfo},...
        {@DropMenuCreateStateReaderBlock,menuInfo},...
        {@DropMenuCreateStateWriterBlock,menuInfo},...
        'separator',...
        @DropMenuCancel
        };
    else
        schemas={{@DropMenuCopy,menuInfo},...
        {@DropMenuDuplicateInport,menuInfo},...
        {@DropMenuCreateNewPort,menuInfo},...
        {@DropMenuUseSamePort,menuInfo},...
        {@DropMenuCopyAndBreakLinks,menuInfo},...
        {@DropMenuCreateViewrsAndGenerators,menuInfo},...
        'separator',...
        @DropMenuCancel
        };
    end






end

function schemas=LinkBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:GoToLibraryBlock'),...
    im.getAction('Simulink:PushLibraryLink'),...
    im.getAction('Simulink:RestoreLibraryLink'),...
    im.getAction('Simulink:DisableLibraryLink')
    };
end

function schemas=LookInsideMaskBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:AddEditMask'),...
    im.getAction('Simulink:CreateMaskOnLink'),...
    im.getAction('Simulink:AddEditIconImage'),...
    im.getAction('Simulink:MaskParameters'),...
    im.getAction('Simulink:LookUnderMask'),...
    im.getAction('Simulink:AddEditRefSubsystemMask')
    };
end

function schemas=CodeContextContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={...
    im.getAction('Simulink:ManageCodeContexts')...
    ,im.getSubmenu('Simulink:ViewCodeContext')...
    ,im.getAction('Simulink:CreateCodeContext')...
    };
end

function schemas=ProtectedModelBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={};

    schemas=...
    [schemas,...
    {im.getAction('Simulink:UnlockProtectedModel')}];


    schemas=...
    [schemas,...
    {im.getAction('Simulink:DisplayProtectedModelWebview')}];

    schemas=...
    [schemas,...
    {im.getAction('Simulink:DisplayProtectedModelReport')}];

    schemas=...
    [schemas,...
    {im.getAction('Simulink:CreateHarnessForProtectedModel')}];

end

function schemas=FMUBlockSimulateUsingBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={};
    block=SLStudio.Utils.getOneMenuTarget(cbinfo);
    CurrentFMUMode=get_param(block.getFullPathName,'SimulateUsing');
    switch(CurrentFMUMode)
    case 'FMU'
        schemas=...
        [schemas,...
        {im.getAction('Simulink:FMUBlockSimulateUsingNativeSimulinkBehavior')}];
    case 'Native Simulink Behavior'
        schemas=...
        [schemas,...
        {im.getAction('Simulink:FMUBlockSimulateUsingFMU')}];
    otherwise
        throw(MException('Simulink:ContextMenus:BadParam',...
        'Invalid context menu option for badge on FMU Import Block'));
    end
end

function schemas=VariantBlockBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    target=SLStudio.Utils.getOneMenuTarget(cbinfo);
    handle=target.handle;

    isVSS=false;
    variantControlModeIsLabel=false;
    if~isempty(handle)
        blockType=get_param(handle,'BlockType');
        isVSS=strcmp(blockType,'SubSystem')...
        &&strcmp(get_param(handle,'Variant'),'on');
        isIVBlk=any(strcmp(blockType,{'VariantSource','VariantSink'}));
        variantControlModeIsLabel=(isVSS||isIVBlk)...
        &&strcmp(get_param(handle,'VariantControlMode'),'label');
    end




    if variantControlModeIsLabel
        schemas={
        im.getAction('Simulink:VariantBlockParameters'),...
        im.getSubmenu('Simulink:VariantOpen'),...
        im.getSubmenu('Simulink:VariantChoice'),...
        im.getAction('Simulink:OpenVariantInVariantManager')
        };
    else


        schemas={
        im.getAction('Simulink:VariantBlockParameters'),...
        im.getSubmenu('Simulink:VariantOpen'),...
        im.getAction('Simulink:OpenVariantInVariantManager')
        };
    end






    if isVSS


        schemas=[schemas,{'separator',...
        im.getAction('Simulink:RefreshBlocks')}];
    end
end

function schemas=TestHarnessPerspectivesContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:SimulationHarnessDuplicate'),...
    im.getAction('Simulink:SimulationHarnessMerge'),...
    im.getAction('Simulink:SimulationHarnessMove'),...
    im.getAction('Simulink:SimulationHarnessDelete'),...
    im.getAction('Simulink:SimulationHarnessProperties')};

end

function schemas=FaultPerspectivesContextMenu(cbinfo)
    schemas=safety.internal.menus.generateFaultPerspectivesContextMenu(cbinfo);
end

function schemas=SignalPortNeedsCouplingElementContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getAction('Simulink:SignalPortCouplingElementParameterDialogMenu')};
end


function schemas=SRBadgeContextMenu(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    target=SLStudio.Utils.getOneMenuTarget(cbinfo);
    blockHandle=target.handle;
    lockInfo=slInternal('getSRGraphLockInfo',blockHandle);

    schemas={};
    if lockInfo.Locked
        schemas={im.getAction('Simulink:OpenMasterGraph'),...
        im.getAction('Simulink:SaveMasterGraphAndUnlock')};
    else
        if slInternal('isSRGraphBeingEdited',blockHandle)
            schemas={im.getAction('Simulink:SaveMasterGraph')};
        end
        schemas{end+1}=im.getSubmenu('Simulink:ShowActiveInstances');
    end
end





function result=loc_IsSubsystemOrModelReferenceBlock(block)
    result=SLStudio.Utils.objectIsValidSubsystemBlock(block)||...
    SLStudio.Utils.objectIsValidModelReferenceBlock(block);
end

function result=loc_IsVSSChoiceBlock(cbinfo)
    result=false;
    target=SLStudio.Utils.getOneMenuTarget(cbinfo);
    block=get_param(target.handle,'Parent');
    isSubsysOrMdlRef=any(strcmp(get_param(block,'BlockType'),{'SubSystem','ModelReference'}));
    if(isSubsysOrMdlRef)


        parentBlk=get_param(block,'Parent');
        if(isfield(get_param(parentBlk,'ObjectParameters'),'BlockType')&&...
            strcmp(get_param(parentBlk,'BlockType'),'SubSystem')&&...
            strcmp(get_param(parentBlk,'Variant'),'on'))
            result=true;
        end

    end
end

function schema=GetCreateSubsystemContextMenuItem(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    block=SLStudio.Utils.getOneMenuTarget(cbinfo);
    if(loc_IsSubsystemOrModelReferenceBlock(block))
        schema=im.getAction('Simulink:HiddenSchema');
    else
        schema=im.getAction('Simulink:CreateSubsystemFromSelection');
    end

    schema=dasprivate('dig_get_schema',schema,cbinfo);
end



function schema=GetConvertToContextMenuItem(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    block=SLStudio.Utils.getOneMenuTarget(cbinfo);
    if(loc_IsSubsystemOrModelReferenceBlock(block))
        schema=im.getAction('Simulink:HiddenSchema');
    else
        schema=im.getSubmenu('Simulink:ConvertTo');
    end

    schema=dasprivate('dig_get_schema',schema,cbinfo);
end


function schema=BlockDiagramDisplayMenu(cbinfo)
    schema=sl_container_schema;
    schema.tag='Simulink:BlockDiagramDisplayMenu';
    schema.label=DAStudio.message('Simulink:studio:BlockDiagramDisplayMenu');

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schema.childrenFcns={im.getSubmenu('Simulink:BlocksDisplayMenu'),...
    im.getSubmenu('Simulink:PortsDisplayMenu'),...
    im.getSubmenu('Simulink:PortSignalDisplayMenu')
    };
    schema.autoDisableWhen='Never';
end

function schema=AnnotationFormatMenu(cbinfo)
    schema=sl_container_schema;
    schema.tag='Simulink:AnnotationFormatMenu';
    schema.label=DAStudio.message('Simulink:studio:FormatMenu');

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schema.childrenFcns={im.getAction('Simulink:AutoLayoutDiagram'),...
    'separator',...
    im.getSubmenu('Simulink:ForegroundColorMenu'),...
    im.getSubmenu('Simulink:BackgroundColorMenu'),...
    'separator',...
    im.getAction('Simulink:BlockFitToContent'),...
    'separator',...
    im.getAction('Simulink:BringToFront'),...
    im.getAction('Simulink:SendToBack')
    };
end

function schema=CoverageContextMenus(cbinfo)
    schema=SlCov.CovMenus.contextMenu(cbinfo);
end

function schema=ModelAdvisorContextMenu(callbackInfo)
    schema=ModelAdvisor.MdlAdvMenus.contextMenu(callbackInfo);

    if Simulink.harness.isHarnessBD(bdroot)
        schema.state='Disabled';
    end
end

function schema=CloneDetectionExclusion(callbackInfo)
    schema=sl_container_schema;
    if Advisor.Utils.license('test','SL_Verification_Validation')
        schema=contextMenuCloneDetection(callbackInfo);
        if Simulink.harness.isHarnessBD(bdroot)
            schema.state='Disabled';
        end
    else
        schema.state='Hidden';
    end
end

function schema=MarkupItemContextMenu(cbinfo,markupItems)
    if strcmp(markupItems(1).clientName,slreq.app.MarkupManager.clientDefName)
        schema=slreq.app.MarkupManager.RequirementsMarkupMenu(cbinfo);
    elseif strcmp(markupItems(1).clientName,'myClient')
        schema=TestMarkupItemContextMenu(cbinfo,markupItems);
    else
        schema=MixedContextMenu(cbinfo);
    end
end

function schema=TestMarkupItemContextMenu(cbinfo,~)
    schema=MixedContextMenu(cbinfo);
end

function schema=MarkupConnectorContextMenu(cbinfo,markupConnectors)
    if strcmp(markupConnectors(1).clientName,slreq.app.MarkupManager.clientDefName)
        schema=slreq.app.MarkupManager.RequirementsConnectorMenu(cbinfo);
    elseif strcmp(markupConnectors(1).clientName,'myClient')
        schema=TestMarkupConnectorContextMenu(cbinfo,markupConnectors);
    else
        schema=MixedContextMenu(cbinfo);
    end
end

function schema=TestMarkupConnectorContextMenu(cbinfo,~)
    schema=MixedContextMenu(cbinfo);
end

function schema=DropMenuCopy(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:studio:DropMenuCopy');
    schema.tag='Simulink:DropMenuCopy';

    dropMenuInfo=cbinfo.userdata;
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Disabled';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function schema=DropMenuDuplicateInport(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:studio:DropMenuDuplicateInport');
    schema.tag='Simulink:DropMenuDuplicateInport';

    dropMenuInfo=cbinfo.userdata;
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Disabled';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function schema=DropMenuCopyAndBreakLinks(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:studio:DropMenuCopyAndBreakLinks');
    schema.tag='Simulink:DropMenuCopyAndBreakLinks';

    dropMenuInfo=cbinfo.userdata;
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Disabled';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function schema=DropMenuCreateViewrsAndGenerators(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:studio:DropMenuCreateViewersAndGenerators');
    schema.tag='Simulink:DropMenuCreateViewersAndGenerators';


    dropMenuInfo=cbinfo.userdata;





    schema.state='Hidden';
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function schema=DropMenuCreateStateReaderBlock(cbinfo)

    isOwnerBlockHasSingleState=true;
    block=SLStudio.Utils.getSelectedBlocks(cbinfo);
    if~isempty(block)
        stateNames=get_param(block.getFullPathName,'StateNameList');
        if length(stateNames)>1
            isOwnerBlockHasSingleState=false;
        end
    end
    if slfeature('AccessingMultipleStatesBlocks')==0||isOwnerBlockHasSingleState
        schema=sl_action_schema;
        schema.label=DAStudio.message('Simulink:studio:DropMenuCreateStateReaderBlock');
        schema.tag='Simulink:DropMenuCreateStateReaderBlock';

        dropMenuInfo=cbinfo.userdata;
        if~isempty(dropMenuInfo)
            schema.state=dropMenuInfo.getMenuItemState(schema.tag);
        else
            schema.state='Hidden';
        end
        schema.userdata=struct;
        schema.userdata.dropMenuInfo=dropMenuInfo;
        schema.userdata.tag=schema.tag;
        schema.callback=@DropMenuCB;
    else

        dropMenuInfo=cbinfo.userdata;
        tag='Simulink:DropMenuCreateStateReaderBlock';
        childrenFcns=cell(1,length(stateNames));
        isStateNameEmpty=false;
        for i=1:length(stateNames)
            if isempty(stateNames{i})
                isStateNameEmpty=true;
                break;
            else
                stateName=stateNames{i};
                idxState=i-1;
            end
            childrenFcns{i}={@DropMenuCreateStateAccessorBlockMultiStates,{dropMenuInfo,tag,stateName,idxState}};
        end
        if isStateNameEmpty==true
            schema=sl_action_schema;
            schema.callback=@DropMenuCB2;
        else
            schema=sl_container_schema;
            schema.childrenFcns=childrenFcns;
        end
        schema.label=DAStudio.message('Simulink:studio:DropMenuCreateStateReaderBlock');
        schema.tag=tag;

        if~isempty(dropMenuInfo)
            schema.state=dropMenuInfo.getMenuItemState(schema.tag);
        else
            schema.state='Hidden';
        end
        schema.userdata=struct;
        schema.userdata.dropMenuInfo=dropMenuInfo;
        schema.userdata.tag=schema.tag;
        if isStateNameEmpty==true
            schema.userdata.resourceindex=-1;
        end
    end
end

function schema=DropMenuCreateStateWriterBlock(cbinfo)

    isOwnerBlockHasSingleState=true;
    block=SLStudio.Utils.getSelectedBlocks(cbinfo);
    if~isempty(block)
        stateNames=get_param(block.getFullPathName,'StateNameList');
        if length(stateNames)>1
            isOwnerBlockHasSingleState=false;
        end
    end
    if slfeature('AccessingMultipleStatesBlocks')==0||isOwnerBlockHasSingleState
        schema=sl_action_schema;
        schema.label=DAStudio.message('Simulink:studio:DropMenuCreateStateWriterBlock');
        schema.tag='Simulink:DropMenuCreateStateWriterBlock';

        dropMenuInfo=cbinfo.userdata;
        if~isempty(dropMenuInfo)
            schema.state=dropMenuInfo.getMenuItemState(schema.tag);
        else
            schema.state='Hidden';
        end
        schema.userdata=struct;
        schema.userdata.dropMenuInfo=dropMenuInfo;
        schema.userdata.tag=schema.tag;
        schema.callback=@DropMenuCB;

    else

        dropMenuInfo=cbinfo.userdata;
        tag='Simulink:DropMenuCreateStateWriterBlock';
        childrenFcns=cell(1,length(stateNames));
        isStateNameEmpty=false;
        for i=1:length(stateNames)
            if isempty(stateNames{i})
                isStateNameEmpty=true;
                break;
            else
                stateName=stateNames{i};
                idxState=i-1;
            end
            childrenFcns{i}={@DropMenuCreateStateAccessorBlockMultiStates,{dropMenuInfo,tag,stateName,idxState}};
        end
        if isStateNameEmpty==true
            schema=sl_action_schema;
            schema.callback=@DropMenuCB2;
        else
            schema=sl_container_schema;
            schema.childrenFcns=childrenFcns;
        end
        schema.label=DAStudio.message('Simulink:studio:DropMenuCreateStateWriterBlock');
        schema.tag=tag;

        if~isempty(dropMenuInfo)
            schema.state=dropMenuInfo.getMenuItemState(schema.tag);
        else
            schema.state='Hidden';
        end
        schema.userdata=struct;
        schema.userdata.dropMenuInfo=dropMenuInfo;
        schema.userdata.tag=schema.tag;
        if isStateNameEmpty==true
            schema.userdata.resourceindex=-1;
        end
    end
end

function schema=DropMenuCreateStateAccessorBlockMultiStates(cbinfo)
    schema=sl_action_schema;

    schema.label=cbinfo.userdata{3};
    schema.tag=cbinfo.userdata{2};

    dropMenuInfo=cbinfo.userdata{1};
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Hidden';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.userdata.resourceindex=cbinfo.userdata{4};
    schema.callback=@DropMenuCB2;
end

function schema=DropMenuCreateNewPort(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:BusElPorts:DropMenuCreateNewPort');
    schema.tag='Simulink:DropMenuCreateNewPort';

    dropMenuInfo=cbinfo.userdata;
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Disabled';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function schema=DropMenuUseSamePort(cbinfo)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:BusElPorts:DropMenuUseSamePort');
    schema.tag='Simulink:DropMenuUseSamePort';

    dropMenuInfo=cbinfo.userdata;
    if~isempty(dropMenuInfo)
        schema.state=dropMenuInfo.getMenuItemState(schema.tag);
    else
        schema.state='Disabled';
    end
    schema.userdata=struct;
    schema.userdata.dropMenuInfo=dropMenuInfo;
    schema.userdata.tag=schema.tag;
    schema.callback=@DropMenuCB;
end

function DropMenuCB(cbinfo)
    if~isempty(cbinfo.userdata.dropMenuInfo)
        cbinfo.userdata.dropMenuInfo.executeMenuItem(cbinfo.userdata.tag);
    end
end

function DropMenuCB2(cbinfo)
    if~isempty(cbinfo.userdata.dropMenuInfo)
        if cbinfo.userdata.resourceindex==-1
            block=SLStudio.Utils.getSelectedBlocks(cbinfo);
            DAStudio.error('Simulink:blocks:StateUnnamedForMulStatesBlksDropMenu',block.getFullPathName);
        else
            cbinfo.userdata.dropMenuInfo.executeMenuItem2(cbinfo.userdata.tag,cbinfo.userdata.resourceindex);
        end
    end
end

function schema=DropMenuCancel(~)
    schema=sl_action_schema;
    schema.label=DAStudio.message('Simulink:studio:DropMenuCancel');
    schema.tag='Simulink:DropMenuCancel';
    schema.userdata=schema.tag;
    schema.callback=@DropMenuCancelCB;
    schema.autoDisableWhen='Never';
end

function DropMenuCancelCB(~)

end


function out=InActiveModelSlicerMode(cbinfo)
    out=false;
    try
        if SliceUtils.isSlicerAvailable()
            out=slslicer.internal.MenuSlicerUtils.checkUIOpen(cbinfo);
        end
    catch Mex %#ok<NASGU>
    end
end



