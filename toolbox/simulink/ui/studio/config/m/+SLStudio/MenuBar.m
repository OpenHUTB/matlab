function schema=MenuBar(fncname,cbinfo)



    fcn=str2func(fncname);
    schema=fcn(cbinfo);
end

function schemas=MenuBarImpl(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    schemas={im.getSubmenu('Simulink:FileMenu'),...
    im.getSubmenu('Simulink:EditMenu'),...
    im.getSubmenu('Simulink:ViewMenu'),...
    im.getSubmenu('Simulink:DisplayMenu'),...
    im.getSubmenu('Simulink:ContextualMenuBarItem'),...
    im.getSubmenu('Simulink:SimulationMenu'),...
    im.getSubmenu('Simulink:AnalysisMenu'),...
    im.getSubmenu('Simulink:CodeMenu'),...
    im.getSubmenu('Simulink:ToolsMenu')
    };







    custom_schemas=loc_getCustomSchemas('Simulink:MenuBar','SLM3I.SLDomain');
    schemas=[schemas,custom_schemas];


    custom_schemas=loc_getCustomSchemas('Stateflow:MenuBar','StateflowDI.SFDomain');
    schemas=[schemas,custom_schemas];

    schemas=[schemas,{im.getSubmenu('Simulink:HelpMenu')}];
end

function schemas=loc_getCustomSchemas(customPoint,customDomain)
    schemas=SLStudio.getCustomSchemas(customPoint);
    for index=1:length(schemas)
        if~ischar(schemas{index})
            schemas{index}=DAStudio.makeCallback(schemas{index},customDomain,@CustomSchema);
        end
    end
end

function schema=CustomSchema(customGenerator,customDomain,cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if isa(cbinfo.domain,customDomain)

        schema=dasprivate('dig_get_schema',customGenerator,cbinfo);
    else
        schema=dasprivate('dig_get_schema',im.getSubmenu('Simulink:HiddenSchema'),cbinfo);
    end
end



function schema=FileMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:FileMenu';
    schema.label=DAStudio.message('Simulink:studio:FileMenu');
    schema.generateFcn=@generateFileMenuChildren;
    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateFileMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={im.getSubmenu('Simulink:FileMenuNewSubMenu'),...
    im.getAction('Simulink:Open'),...
    im.getSubmenu('Simulink:OpenRecentMenu'),...
    im.getSubmenu('Simulink:CloseMenu'),...
    'separator',...
    im.getAction('Simulink:Save'),...
...
    im.getAction('Simulink:SaveAs'),...
...
    'separator',...
    im.getSubmenu('Simulink:ProjectFileMenu'),...
    'separator',...
    im.getSubmenu('Simulink:ExportMenu'),...
    im.getSubmenu('Simulink:ReportsMenu'),...
    im.getSubmenu('Simulink:ModelPropertiesMenu'),...
    'separator',...
    im.getSubmenu('Simulink:PrintMenu'),...
    'separator',...
    im.getAction('Simulink:SimulinkPreferences'),...
    im.getSubmenu('Stateflow:StateflowPreferencesMenu')
    };

    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:FileMenu');
        children=[children,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:FileMenu');
        children=[children,{'separator'},sl_custom_schemas];
    end

    children=[children...
    ,{'separator'}...
    ,{im.getAction('Simulink:ExitMatlab')}];
end



function schema=EditMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:EditMenu';
    schema.label=DAStudio.message('Simulink:studio:EditMenu');
    schema.generateFcn=@generateEditMenuChildren;

    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function menuItems=generateEditMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children1={im.getAction('Simulink:Undo'),...
    im.getAction('Simulink:Redo'),...
    'separator',...
    im.getAction('Simulink:Cut'),...
    im.getAction('Simulink:Copy'),...
    };
    if ispc
        children2={im.getSubmenu('Simulink:CopyToClipboardMenu')};
    else
        children2={im.getAction('Simulink:CopyToClipboard')};
    end

    if Simulink.internal.isArchitectureModel(cbinfo)
        children3={im.getAction('Simulink:Paste'),...
        im.getAction('Simulink:PasteDuplicate'),...
        'separator',...
        im.getAction('Simulink:SelectAll'),...
        'separator',...
        im.getAction('Simulink:Find'),...
        im.getAction('Simulink:VariablesUsed'),...
        im.getAction('Simulink:VariablesUsedInRefMdl'),...
        im.getAction('Stateflow:SearchAndReplaceMenuItem'),...
        'separator',...
        im.getAction('Simulink:BusEditor'),...
        im.getAction('Simulink:LUTEditor')
        };
    else
        children3={im.getAction('Simulink:Paste'),...
        im.getAction('Simulink:PasteDuplicate'),...
        'separator',...
        im.getAction('Simulink:SelectAll'),...
        im.getAction('Simulink:CommentThru'),...
        im.getAction('Simulink:Comment'),...
        im.getAction('Simulink:Uncomment'),...
        im.getAction('Stateflow:CommentMenuItem'),...
        'separator',...
        im.getAction('Simulink:Find'),...
        im.getAction('Simulink:VariablesUsed'),...
        im.getAction('Simulink:VariablesUsedInRefMdl'),...
        im.getAction('Stateflow:SearchAndReplaceMenuItem'),...
        'separator',...
        im.getAction('Simulink:BusEditor'),...
        im.getAction('Simulink:LUTEditor')
        };
    end

    menuItems=[children1,children2,children3];

    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:EditMenu');
        menuItems=[menuItems,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:EditMenu');
        menuItems=[menuItems,{'separator'},sl_custom_schemas];
    end
end



function schema=ViewMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:ViewMenu';
    schema.label=DAStudio.message('Simulink:studio:ViewMenu');
    schema.generateFcn=@generateViewMenuChildren;

    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateViewMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={im.getAction('Simulink:ShowLibraryBrowser'),...
    im.getSubmenu('Simulink:ModelExplorerMenu'),...
    im.getAction('Simulink:OpenVariantManager'),...
    im.getAction('Simulink:SimulinkProject'),...
    im.getSubmenu('Simulink:View_DependencyViewerMenu'),...
    im.getAction('Simulink:OpenMessageViewer'),...
    im.getAction('Simulink:ShowSchedulingEditor'),...
    im.getSubmenu('Simulink:CustomCodeLibraryConfig'),...
    'separator',...
    im.getSubmenu('Simulink:SysRequirementsMenu'),...
    im.getAction('Simulink:SlReqSpreadsheetToggle'),...
    im.getSubmenu('Simulink:ModelBrowserMenu'),...
    im.getAction('Simulink:ShowPropertyInspector'),...
    im.getAction('Simulink:SystemDocumentation'),...
    im.getAction('Stateflow:ToggleSymbolManagerMenuItem'),...
    im.getAction('Simulink:Signals'),...
    im.getAction('Simulink:Functions'),...
    im.getAction('Simulink:DataViewMenu'),...
    im.getAction('Simulink:CodeViewPanel'),...
    im.getAction('Simulink:CodeMappingsComponent'),...
    im.getAction('Simulink:CodePerspectiveHelpComponent'),...
    'separator',...
    im.getSubmenu('Simulink:ViewMarksMenu'),...
    'separator',...
    im.getAction('Simulink:ConfigureToolbars'),...
    im.getAction('Simulink:Toolbars'),...
    im.getAction('Simulink:StatusBar'),...
    im.getAction('Simulink:ExplorerBar'),...
    'separator',...
    im.getSubmenu('Simulink:NavigateMenu'),...
    im.getSubmenu('Simulink:ZoomMenu'),...
    'separator',...
    im.getAction('Simulink:ShowHideSmartGuides'),...
    'separator',...
    im.getAction('Simulink:Desktop')
    };
    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:ViewMenu');
        children=[children,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:ViewMenu');
        children=[children,{'separator'},sl_custom_schemas];
    end
end



function schema=DisplayMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:DisplayMenu';
    schema.label=DAStudio.message('Simulink:studio:DisplayMenu');
    schema.generateFcn=@generateDisplayMenuChildren;

    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateDisplayMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    isArchitectureModel=Simulink.internal.isArchitectureModel(cbinfo);
    if isArchitectureModel
        children={
        im.getSubmenu('Simulink:SampleTimeMenu'),...
        im.getAction('Simulink:DisplaySimulinkFunctionConnectors'),...
        'separator',...
        im.getAction('Simulink:GeneralConnectors'),...
        im.getSubmenu('Simulink:BlocksDisplayMenu'),...
        };
    else
        children={im.getAction('Simulink:DisplayModelInterfaceMenu'),...
        'separator',...
        im.getSubmenu('Simulink:LibraryLinkDisplayMenu'),...
        im.getSubmenu('Simulink:SampleTimeMenu'),...
        im.getAction('Simulink:DisplaySimulinkFunctionConnectors'),...
        'separator',...
        im.getAction('Simulink:GeneralConnectors'),...
        im.getSubmenu('Simulink:BlocksDisplayMenu'),...
        };
    end
    if slfeature('EditTimeChecking')
        children{end+1}=im.getSubmenu('Simulink:EditTimeNotificationsDisplayMenu');
    end

    if isArchitectureModel
        children=[children,...
        {im.getSubmenu('Simulink:PortSignalDisplayMenu'),...
        im.getSubmenu('Simulink:DisplaySimulationDataDisplayMenu'),...
        }];
    else
        children=[children,...
        {im.getSubmenu('Simulink:PortSignalDisplayMenu'),...
        im.getSubmenu('Stateflow:ChartsDisplayMenu'),...
        im.getAction('Simulink:SimscapeDisplayMenu'),...
        im.getSubmenu('Simulink:DisplaySimulationDataDisplayMenu'),...
        im.getSubmenu('Stateflow:DisplayChartAnimationMenu'),...
        }];
    end
    if private_sl_isDesModel(cbinfo.model.Name)
        children{end+1}=im.getSubmenu('Simulink:MessageAnimationDisplayMenu');
    end
    children=[children,...
    {'separator',...
    im.getAction('Simulink:HighlightSignalToSource'),...
    im.getAction('Simulink:HighlightSignalToDestination'),...
    im.getAction('Simulink:HighlightConnections'),...
    im.getAction('Simulink:RemoveHighlighting'),...
    im.getSubmenu('Simulink:HiliteOptionsMenu'),...
'separator'...
    }];
    children=[children,...
    {im.getAction('Simulink:HideAutomaticNames')}];
    children=[children,...
    {im.getAction('Simulink:HideShowMarkup')}];

    sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:DisplayMenu');
    children=[children,{'separator'},sl_custom_schemas];
end



function schema=DiagramMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:DiagramMenu';
    schema.label=DAStudio.message('Simulink:studio:DiagramMenu');
    schema.generateFcn=@generateDiagramMenuChildren;

    schema.autoDisableWhen='Never';
end

function children=generateDiagramMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={im.getAction('Simulink:RefreshBlocks'),...
    im.getSubmenu('Simulink:SubsystemAndModelRefMenu'),...
    im.getAction('Simulink:PackageModelArtifacts'),...
    'separator',...
    im.getSubmenu('Simulink:Variant'),...
    im.getSubmenu('Simulink:ConfigurableSubSystem'),...
    'separator',...
    im.getSubmenu('Simulink:FormatMenu'),...
    im.getSubmenu('Simulink:MaskMenu'),...
    im.getSubmenu('Simulink:LibraryLinkMenu'),...
    im.getAction('Simulink:UnlockLibrary'),...
    im.getAction('Simulink:LockLinksToLibrary'),...
    im.getAction('Simulink:ShowInLibBrowser'),...
    'separator',...
    im.getSubmenu('Simulink:SignalsMenu'),...
    'separator',...
    im.getAction('Simulink:BlockParameters'),...
    im.getAction('Simulink:ObjectProperties'),...
    im.getAction('Simulink:RenameAll')
    };

    sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:DiagramMenu');
    children=[children,{'separator'},sl_custom_schemas];
    sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:FormatMenu');
    children=[children,{'separator'},sl_custom_schemas];
end

function schema=ContextualMenuBarItem(cbinfo)
    schema=[];
    if SLM3I.SLCommonDomain.isStateflowLoaded()
        schema=SFStudio.ChartMenu('ChartMenuImpl',cbinfo);
    end

    if Simulink.internal.isArchitectureModel(cbinfo,'Architecture')||...
        Simulink.internal.isArchitectureModel(cbinfo,'SoftwareArchitecture')
        schema=ZCStudio.ArchitectureMenu('ArchitectureMenuImpl',cbinfo);
    end

    if isempty(schema)
        schema=DiagramMenuImpl(cbinfo);
    end
end



function schema=SimulationMenuImpl(cbinfo)
    schema=sl_container_schema;
    schema.tag='Simulink:SimulationMenu';
    schema.label=DAStudio.message('Simulink:studio:SimulationMenu');
    if~bdIsLibrary(cbinfo.model.Name)
        schema.generateFcn=@generateSimulationMenuChildren;
    elseif isa(cbinfo.domain,'StateflowDI.SFDomain')
        schema.generateFcn=@generateSimulationMenuSFLibChildren;
    else
        schema.childrenFcns={DAStudio.Actions('HiddenSchema')};
        schema.state='Hidden';
    end
    schema.autoDisableWhen='Never';
end

function children=generateSimulationMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if Simulink.internal.isArchitectureModel(cbinfo)
        children={im.getAction('Simulink:UpdateDiagram'),...
...
        im.getAction('Simulink:ConfigurationParameters'),...
        im.getAction('Simulink:ModelReferenceConfigurationParameters'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationModeMenu'),...
        im.getSubmenu('Simulink:SimulationSimulationDataDisplayMenu'),...
        im.getSubmenu('Stateflow:SimulationChartAnimationMenu'),...
        'separator',...
        im.getAction('Simulink:SimulationInput'),...
        'separator',...
        im.getAction('Simulink:ConnectToTarget'),...
        im.getAction('Simulink:SimulationInteractiveMultiRunMenuBar'),...
        im.getAction('Simulink:SimulationRollBackOnly'),...
        im.getAction('Simulink:StartPauseContinue'),...
        im.getAction('Simulink:SimulationPacingMenuBar'),...
        im.getAction('Simulink:SimulationForwardMenuBar'),...
        im.getAction('Simulink:SimulationRollBackToStart'),...
        im.getAction('Simulink:DebuggerStepOver'),...
        im.getAction('Simulink:DebuggerStepIn'),...
        im.getAction('Simulink:DebuggerStepOut'),...
        im.getAction('Simulink:Stop'),...
        'separator',...
        im.getAction('Simulink:SimulationStepperConfigurationMenuBar')
        };
    else
        children={im.getAction('Simulink:UpdateDiagram'),...
...
        im.getAction('Simulink:ConfigurationParameters'),...
        im.getAction('Simulink:ModelReferenceConfigurationParameters'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationModeMenu'),...
        im.getSubmenu('Simulink:SimulationSimulationDataDisplayMenu'),...
        im.getSubmenu('Stateflow:SimulationChartAnimationMenu'),...
        'separator',...
        im.getAction('Simulink:SimulationInput'),...
        'separator',...
        im.getAction('Simulink:ConnectToTarget'),...
        im.getAction('Simulink:SimulationInteractiveMultiRunMenuBar'),...
        im.getAction('Simulink:SimulationRollBackOnly'),...
        im.getAction('Simulink:StartPauseContinue'),...
        im.getAction('Simulink:SimulationPacingMenuBar'),...
        im.getAction('Simulink:SimulationForwardMenuBar'),...
        im.getAction('Simulink:SimulationRollBackToStart'),...
        im.getAction('Simulink:DebuggerStepOver'),...
        im.getAction('Simulink:DebuggerStepIn'),...
        im.getAction('Simulink:DebuggerStepOut'),...
        im.getAction('Simulink:Stop'),...
        'separator',...
        @Simulink.sdi.internal.SLMenus.simOutputMenu,...
        'separator',...
        im.getAction('Simulink:SimulationStepperConfigurationMenuBar'),...
        im.getSubmenu('Simulink:DebugMenu')
        };
    end






    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:SimulationMenu');
        children=[children,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:SimulationMenu');
        children=[children,{'separator'},sl_custom_schemas];
    end
end

function children=generateSimulationMenuSFLibChildren(cbinfo)
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={@Simulink.sdi.internal.SLMenus.simOutputMenu,...
    im.getSubmenu('Simulink:DebugMenu')
    };
end



function schema=AnalysisMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:AnalysisMenu';
    schema.label=DAStudio.message('Simulink:studio:AnalysisMenu');
    schema.generateFcn=@generateAnalysisMenuChildren;


    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateAnalysisMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    isArchitectureModel=Simulink.internal.isArchitectureModel(cbinfo);
    if isArchitectureModel
        children={im.getAction('Simulink:ModelAdvisorMenu'),...
        im.getAction('Simulink:MetricsDashboard'),...
        'separator',...
        im.getAction('Simulink:RefactorModelMenu'),...
        'separator',...
        im.getSubmenu('Simulink:ModelDependenciesMenu'),...
        im.getAction('Simulink:ReportGenerator:XMLComparison'),...
        'separator'};
    else
        children={im.getAction('Simulink:ModelAdvisorMenu'),...
        im.getAction('Simulink:MetricsDashboard'),...
        'separator',...
        im.getAction('Simulink:RefactorModelMenu'),...
        im.getAction('Simulink:ModelSlicerMenu'),...
        'separator',...
        im.getSubmenu('Simulink:ModelDependenciesMenu'),...
        im.getAction('Simulink:ReportGenerator:XMLComparison'),...
        im.getSubmenu('Simulink:SimscapeMenu'),...
        'separator'};
    end

    children=[children,...
    {im.getSubmenu('Simulink:PerformanceToolsMenu'),...
    'separator'}];

    if isArchitectureModel
        children=[children,...
        {
        im.getSubmenu('Simulink:AnalysisRequirementsMenu'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        im.getSubmenu('Simulink:ObserverMenu'),...
        im.getAction('Simulink:SimulationAndTestManagerMenu'),...
        im.getSubmenu('Simulink:DesignVerifierMenu'),...
        im.getSubmenu('Simulink:CoverageMenu'),...
        'separator',...
        im.getSubmenu('Simulink:SystemTestMenu')}];
    else
        children=[children,...
        {im.getSubmenu('Simulink:AnalysisRequirementsMenu'),...
        im.getSubmenu('Simulink:SimulinkControlDesignerMenu'),...
        im.getAction('Simulink:SimulinkParameterEstimator'),...
        im.getAction('Simulink:SimulinkResponseOptimization'),...
        im.getAction('Simulink:SimulinkSensitivityAnalysis'),...
        'separator',...
        im.getSubmenu('Simulink:SimulationHarnessMenu'),...
        im.getSubmenu('Simulink:ObserverMenu'),...
        im.getAction('Simulink:SimulationAndTestManagerMenu'),...
        im.getSubmenu('Simulink:DesignVerifierMenu'),...
        im.getSubmenu('Simulink:CoverageMenu'),...
        'separator',...
        im.getSubmenu('Simulink:SystemTestMenu')}];
    end

    if~isArchitectureModel
        if IsSLAVTFeatureOn('DataflowAnalysis')==1
            children{end+1}=im.getSubmenu('Simulink:DataDependencyToolsMenu');
        end
        children=[children,...
        {'separator',...
        im.getAction('Simulink:DataTypeDesignMenu')
        }];
    end

    sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:AnalysisMenu');
    children=[children,{'separator'},sl_custom_schemas];
end

function[feat,ex]=IsSLAVTFeatureOn(feature)
    try
        feat=slavteng('feature',feature);
        ex=[];
    catch ex
        feat=0;
    end
end













function result=loc_isAnyCodeMenuInstalled(cbinfo)%#ok<*DEFNU>
    result=false;
    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    simulink_coder=im.isSubmenuInstalled('Simulink:SimulinkCoderMenu');
    hdl_coder=im.isSubmenuInstalled('Simulink:HDLMenu');
    plc_coder=im.isSubmenuInstalled('Simulink:PLCMenu');

    xpc_target=im.isActionInstalled('Simulink:xPCTargetExplorer');
    ext_mode=im.isActionInstalled('Simulink:ExtModeCtrlPanel');

    slci_tool=im.isSubmenuInstalled('Simulink:SLCIToolMenu');
    eda_symlink=im.isSubmenuInstalled('Simulink:EDASimLink');
    polyspace=im.isSubmenuInstalled('Simulink:PolyspaceMenu');

    qual_kit=im.isSubmenuInstalled('Simulink:QualkitMenu');
    cert_kit=im.isSubmenuInstalled('Simulink:CertkitMenu');

    if simulink_coder||...
        hdl_coder||...
        plc_coder||...
        xpc_target||...
        ext_mode||...
        slci_tool||...
        eda_symlink||...
        polyspace||...
        qual_kit||...
cert_kit
        result=true;
    end
end

function schema=CodeMenuImpl(cbinfo)
    schema=sl_container_schema;
    schema.tag='Simulink:CodeMenu';
    schema.label=DAStudio.message('Simulink:studio:CodeMenu');
    schema.generateFcn=@generateCodeMenuChildren;

    if~bdIsLibrary(cbinfo.model.Name)||isa(cbinfo.domain,'StateflowDI.SFDomain')
        schema.generateFcn=@generateCodeMenuChildren;
    else
        schema.childrenFcns={DAStudio.Actions('HiddenSchema')};
        schema.state='Hidden';
    end


    schema.autoDisableWhen='Never';
end

function children=generateCodeMenuChildren(cbinfo)















    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={im.getSubmenu('Simulink:SimulinkCoderMenu'),...
    im.getSubmenu('Simulink:CodeContextMenu'),...
    im.getSubmenu('Simulink:HDLMenu'),...
    im.getSubmenu('Simulink:PLCMenu'),...
    'separator',...
    im.getSubmenu('Simulink:DataObjectsMenu'),...
    'separator',...
    im.getAction('Simulink:ExtModeCtrlPanel'),...
    'separator',...
    im.getSubmenu('Simulink:SLCIToolMenu'),...
    im.getSubmenu('Simulink:EDASimLink'),...
    im.getSubmenu('Simulink:PolyspaceMenu'),...
    'separator',...
    im.getSubmenu('Simulink:QualkitMenu'),...
    im.getSubmenu('Simulink:CertkitMenu')
    };

    sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:CodeMenu');
    children=[children,{'separator'},sl_custom_schemas];
end



function schema=ToolsMenuImpl(cbinfo)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:ToolsMenu';
    schema.label=DAStudio.message('Simulink:studio:ToolsMenu');
    schema.generateFcn=@generateToolsMenuChildren;

    if~isa(cbinfo.domain,'SLM3I.SLDomain')
        schema.obsoleteTags={'Stateflow:ToolsMenu'};
    end


    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateToolsMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');

    if Simulink.internal.isArchitectureModel(cbinfo)
        children={im.getAction('Simulink:ToolsShowLibraryBrowser'),...
        im.getAction('Simulink:ToolsModelExplorer'),...
        'separator',...
        im.getAction('Simulink:ReportGenerator'),...
        im.getAction('Simulink:SlReqEditor'),...
        'separator',...
        im.getAction('Simulink:MPlayVideoViewer'),...
        'separator',...
        im.getAction('Simulink:ModelHMIMenu'),...
        'separator',...
        im.getAction('Simulink:SLRTRXPLRSystemMenu')
        };
    else
        children={im.getAction('Simulink:ToolsShowLibraryBrowser'),...
        im.getAction('Simulink:ToolsModelExplorer'),...
        'separator',...
        im.getAction('Simulink:ReportGenerator'),...
        im.getAction('Simulink:SlReqEditor'),...
        'separator',...
        im.getAction('Simulink:MPlayVideoViewer'),...
        'separator',...
        im.getAction('Simulink:ModelHMIMenu'),...
        'separator',...
        im.getSubmenu('Simulink:RobotOperatingSystemMenu'),...
        'separator',...
        im.getAction('Simulink:SLRTRXPLRSystemMenu')
        };
    end

    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:ToolsMenu');
        children=[children,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:ToolsMenu');
        children=[children,{'separator'},sl_custom_schemas];
    end
end



function schema=HelpMenuImpl(~)%#ok<*DEFNU> % ( cbinfo )
    schema=sl_container_schema;
    schema.tag='Simulink:HelpMenu';
    schema.label=DAStudio.message('Simulink:studio:HelpMenu');
    schema.generateFcn=@generateHelpMenuChildren;

    schema.autoDisableWhen='Never';
    schema.refreshCategories={'GenericEvent:Never'};
end

function children=generateHelpMenuChildren(cbinfo)

    im=DAStudio.InterfaceManagerHelper(cbinfo.studio,'Simulink');
    children={im.getSubmenu('Simulink:HelpSimulinkMenu'),...
    im.getSubmenu('Stateflow:HelpMenu'),...
    im.getAction('Simulink:SimulinkKeyboardShortcuts'),...
    'separator',...
    im.getSubmenu('Simulink:HelpWebResourcesMenu'),...
    'separator',...
    im.getAction('Simulink:HelpTermsOfUse'),...
    im.getAction('Simulink:HelpPatents'),...
    'separator',...
    im.getAction('Simulink:About'),...
    im.getAction('Stateflow:AboutMenuItem')
    };

    if isa(cbinfo.domain,'SLM3I.SLDomain')
        sl_custom_schemas=SLStudio.getCustomSchemas('Simulink:HelpMenu');
        children=[children,{'separator'},sl_custom_schemas];
    else
        sl_custom_schemas=SLStudio.getCustomSchemas('Stateflow:HelpMenu');
        children=[children,{'separator'},sl_custom_schemas];
    end
end






