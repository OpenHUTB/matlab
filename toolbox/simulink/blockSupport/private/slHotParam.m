function[name,prompt]=slHotParam(block)






    if excludedBlock(block,'')||excludedLibrary(block)
        name='';
        prompt='';
        return;
    end

    [name,prompt]=customHotParam(block);
    if~isempty(name)&&~isempty(prompt)
        return;
    end

    try
        blockObj=get_param(block,'Object');
        if strcmp(get_param(block,'Mask'),'on')&&~isMaskWithNoDialog(block)
            dialogSource=blockObj.getDialogSource('mask');
        else
            dialogSource=blockObj.getDialogSource('intrinsic');
        end
        dialogSchema=dialogSource.getDialogSchema('');

        [name,prompt]=findHotParam(dialogSource,dialogSchema.Items,name);


        dialogSource.UserData=[];
    catch e %#ok<NASGU>
    end
end


function[name,prompt]=findHotParam(dialogSource,items,nameOverride)
    name='';
    prompt='';

    for i=1:numel(items)
        item=items{i};

        if strcmp(item.Type,'group')||strcmp(item.Type,'panel')
            if~isfield(item,'Items')
                continue;
            end
            [name,prompt]=findHotParam(dialogSource,item.Items,nameOverride);
            if~strcmp(name,'')
                return;
            end
            continue;
        end


        if strcmp(item.Type,'tab')
            if~isfield(item,'Tabs')||isempty(item.Tabs)||~isfield(item.Tabs{1},'Items')
                continue;
            end
            [name,prompt]=findHotParam(dialogSource,item.Tabs{1}.Items,nameOverride);
            if~strcmp(name,'')
                return;
            end
            continue;
        end

        if(strcmp(item.Type,'edit'))||...
            (strcmp(item.Type,'combobox')&&isfield(item,'Editable')&&item.Editable)

            if isfield(item,'Visible')&&~item.Visible
                continue;
            end

            block=dialogSource.getBlock.Handle;

            if isfield(item,'ObjectProperty')
                if any(strcmp(item.ObjectProperty,dialogSource.getDialogParams))

                    fname=item.ObjectProperty;
                else

                    actualPrompt=promptInDialog(dialogSource,item);
                    if~strcmp(actualPrompt,'')
                        fname=findParamWithPrompt(block,item.Name);
                    else
                        fname='';
                    end
                end
            elseif isfield(item,'MethodArgs')&&isfield(item,'ArgDataTypes')

                if numel(item.MethodArgs)<2||numel(item.ArgDataTypes)<2
                    continue;
                end
                if strcmp(item.ArgDataTypes{2},'int32')
                    paramIdx=item.MethodArgs{2}+1;
                    paramNames=dialogSource.getDialogParams;
                    fname=paramNames{paramIdx};

                elseif strcmp(item.ArgDataTypes{2},'string')&&strcmp(item.MethodArgs{2},'%tag')&&isfield(item,'Tag')&&~isempty(nameOverride)
                    fname=item.Tag;
                else
                    continue;
                end
            else

                continue;
            end

            if isempty(fname)||excludedBlock(block,fname)
                continue;
            end


            if~isempty(nameOverride)&&~strcmp(nameOverride,fname)
                continue;
            end

            prompt=promptInDialog(dialogSource,item);


            prompt=strtrim(prompt);
            if isempty(prompt)||strcmp(prompt,':')
                continue;
            end
            prompt=makePrompt(prompt);

            name=fname;
            break;
        end
    end
end



function prompt=promptInDialog(dialogSource,item)
    prompt='';

    if isfield(item,'Name')&&~isempty(item.Name)
        prompt=item.Name;
    else

        if~isfield(item,'Tag')

            return;
        end

        dialogSchema=dialogSource.getDialogSchema('');
        buddyRef=findBuddyRef(dialogSource,dialogSchema.Items,item.Tag);
        if~isstruct(buddyRef)

            return;
        end

        if~isfield(buddyRef,'Name')||isempty(buddyRef.Name)

            return;
        end
        prompt=buddyRef.Name;
    end
end




function name=findParamWithPrompt(block,prompt)
    name='';
    prompt=strtrim(prompt);
    if isempty(prompt)||strcmp(prompt,':')
        return;
    end


    if~isempty(regexp(prompt,'.+:$','match'))
        [promptTokens,~]=regexp(prompt,'(.+):$','tokens','match');
        prompt=cell2mat(promptTokens{1});
        prompt=strtrim(prompt);
    end

    params=get_param(block,'DialogParameters');
    if isempty(params)
        return;
    end

    fnames=fieldnames(params);
    for i=1:numel(fnames)
        fname=fnames{i};
        param=getfield(params,fname);%#ok<GFLD>

        if~strcmp(param.Prompt,prompt)
            continue;
        end




        if~strcmp(param.Type,'string')
            return;
        end

        writable=false;
        attrs=param.Attributes;
        for j=1:numel(attrs)
            attr=attrs{j};
            if strcmp(attr,'read-write')
                writable=true;
                break;
            end
        end
        if~writable
            return;
        end

        name=fname;
        return;
    end
end


function buddyRef=findBuddyRef(dialogSource,items,forTag)
    buddyRef=[];

    for i=1:numel(items)
        item=items{i};

        if strcmp(item.Type,'group')
            buddyRef=findBuddyRef(dialogSource,item.Items,forTag);
            if isstruct(buddyRef)
                return;
            end
            continue;
        end


        if strcmp(item.Type,'tab')
            if isempty(item.Tabs)||~isfield(item.Tabs{1},'Items')
                continue;
            end
            buddyRef=findBuddyRef(dialogSource,item.Tabs{1}.Items,forTag);
            if isstruct(buddyRef)
                return;
            end
            continue;
        end

        if strcmp(item.Type,'text')&&...
            isfield(item,'Buddy')&&...
            strcmp(item.Buddy,forTag)

            buddyRef=item;
            return;
        end
    end
end



function noDialog=isMaskWithNoDialog(block)
    noDialog=isempty(get_param(block,'MaskNames'))&&...
    isempty(get_param(block,'MaskDescription'))&&...
    isempty(get_param(block,'MaskHelp'))&&...
    isempty(get_param(block,'MaskStyles'));
end



function prompt=makePrompt(prompt)
    if isempty(regexp(prompt,'.+:$','once'))
        prompt=strcat(prompt,':');
    end
end


function[name,prompt]=customHotParam(block)


    persistent overrides;
    if isempty(overrides)
        overrides=table(...
        'Size',[5,3],...
        'VariableTypes',{'string','string','string'},...
        'VariableNames',{'BlockType','Param','Prompt'});

        overrides(1,:)={'Scope','NumInputPorts','Spcuilib:scopeblock:NumInputPorts'};
        overrides(2,:)={'TimeScope','NumInputPorts','Spcuilib:scopeblock:NumInputPorts'};
        overrides(3,:)={'Lookup_n-D','NumberOfTableDimensions','Simulink:blkprm_prompts:InterpndNumDims'};
        overrides(4,:)={'DataTypeConversion','OutDataTypeStr','Simulink:blkprm_prompts:OutputDataType'};
        overrides(5,:)={'Record','NumPorts','record_playback:dialogs:NumInputPorts'};
    end


    persistent overridesMasked;
    if isempty(overridesMasked)
        overridesMasked=table(...
        'Size',[35,4],...
        'VariableTypes',{'string','string','string','string'},...
        'VariableNames',{'BlockType','MaskType','Param','Prompt'});

        overridesMasked(1,:)={'Derivative','','CoefficientInTFapproximation','Simulink:blocks:HPODerivativeCoefficientInTFapproximation'};
        overridesMasked(2,:)={'MATLABSystem','phased.ADPCACanceller','Direction',''};
        overridesMasked(3,:)={'MATLABSystem','phased.AngleDopplerResponse','ElevationAngle',''};
        overridesMasked(4,:)={'MATLABSystem','phased.BeamscanEstimator','ScanAngles',''};
        overridesMasked(5,:)={'MATLABSystem','phased.BeamscanEstimator2D','AzimuthScanAngles',''};
        overridesMasked(6,:)={'MATLABSystem','phased.BeamspaceESPRITEstimator','NumSignals',''};
        overridesMasked(7,:)={'MATLABSystem','phased.LCMVBeamformer','Constraint',''};
        overridesMasked(8,:)={'MATLABSystem','phased.CFARDetector','ProbabilityFalseAlarm',''};
        overridesMasked(9,:)={'MATLABSystem','phased.Collector','OperatingFrequency',''};
        overridesMasked(10,:)={'MATLABSystem','phased.DPCACanceller','Direction',''};
        overridesMasked(11,:)={'MATLABSystem','phased.ESPRITEstimator','NumSignals',''};
        overridesMasked(12,:)={'MATLABSystem','phased.FMCWWaveform','SweepTime',''};
        overridesMasked(13,:)={'MATLABSystem','phased.FreeSpace','MaximumDistance',''};
        overridesMasked(14,:)={'MATLABSystem','phased.FrostBeamformer','Direction',''};
        overridesMasked(15,:)={'MATLABSystem','phased.LinearFMWaveform','PulseWidth',''};
        overridesMasked(16,:)={'MATLABSystem','phased.MVDRBeamformer','Direction',''};
        overridesMasked(17,:)={'MATLABSystem','phased.MVDREstimator','ScanAngles',''};
        overridesMasked(18,:)={'MATLABSystem','phased.MVDREstimator2D','AzimuthScanAngles',''};
        overridesMasked(19,:)={'MATLABSystem','phased.PhaseCodedWaveform','ChipWidth',''};
        overridesMasked(20,:)={'MATLABSystem','phased.PhaseShiftBeamformer','Direction',''};
        overridesMasked(21,:)={'MATLABSystem','phased.RadarTarget','MeanRCS',''};
        overridesMasked(22,:)={'MATLABSystem','phased.Radiator','OperatingFrequency',''};
        overridesMasked(23,:)={'MATLABSystem','phased.RectangularWaveform','PulseWidth',''};
        overridesMasked(24,:)={'MATLABSystem','phased.RootMUSICEstimator','NumSignals',''};
        overridesMasked(25,:)={'MATLABSystem','phased.RootWSFEstimator','NumSignals',''};
        overridesMasked(26,:)={'MATLABSystem','phased.STAPSMIBeamformer','Direction',''};
        overridesMasked(27,:)={'MATLABSystem','phased.SteppedFMWaveform','PulseWidth',''};
        overridesMasked(28,:)={'MATLABSystem','phased.SubbandPhaseShiftBeamformer','Direction',''};
        overridesMasked(29,:)={'MATLABSystem','phased.SumDifferenceMonopulseTracker','OperatingFrequency',''};
        overridesMasked(30,:)={'MATLABSystem','phased.SumDifferenceMonopulseTracker2D','OperatingFrequency',''};
        overridesMasked(31,:)={'MATLABSystem','phased.TimeDelayBeamformer','Direction',''};
        overridesMasked(32,:)={'MATLABSystem','phased.TimeDelayLCMVBeamformer','Direction',''};
        overridesMasked(33,:)={'MATLABSystem','phased.WidebandCollector','CarrierFrequency',''};
        overridesMasked(34,:)={'MATLABSystem','phased.internal.RangeAngle','ReferencePosition',''};
        overridesMasked(35,:)={'S-Function','UDP Send','remoteURL','Simulink:blocks:HPOUDPSendRemoteURL'};


        for i=1:height(overridesMasked)
            overridesMasked.MaskType{i}=sprintf(overridesMasked.MaskType{i});
        end
    end

    blockType=get_param(block,'BlockType');


    if strcmp(blockType,'SubSystem')
        if strcmpi(get_param(block,'IsSimulinkFunction'),'on')
            name='FunctionPrototype';
            prompt=DAStudio.message('Simulink:blkprm_prompts:FcnCallerFunctionPrototype');
            return;
        end

        if strcmpi(get_param(block,'ReferencedSubsystem'),'<file name>')
            name='ReferencedSubsystem';
            prompt=DAStudio.message('Simulink:SubsystemReference:SRParameterPrompt');
            return;
        end
    end

    mask=get_param(block,'Mask');
    if strcmpi(mask,'on')
        maskType=get_param(block,'MaskType');
        blockOverrides=overridesMasked(...
        strcmp(overridesMasked.BlockType,blockType)&...
        (strcmp(overridesMasked.MaskType,maskType)|strcmp(overridesMasked.MaskType,'')),...
        :);


        if height(blockOverrides)>1
            blockOverrides=blockOverrides(~strcmp(blockOverrides.MaskType,''),:);
        end
    else
        blockOverrides=overrides(strcmp(overrides.BlockType,blockType),:);
    end

    name='';
    prompt='';
    if~isempty(blockOverrides)
        name=blockOverrides.Param{1};
        prompt=blockOverrides.Prompt{1};
        if~isempty(prompt)
            prompt=DAStudio.message(blockOverrides.Prompt{1});
            prompt=makePrompt(prompt);
        end
        assert(height(blockOverrides)==1);
    end
end



function excluded=excludedBlock(block,param)


    persistent specificExclusions;
    persistent commonParamExclusions;
    if isempty(specificExclusions)&&isempty(commonParamExclusions)
        exclusions=table(...
        'Size',[5,3],...
        'VariableTypes',{'string','string','string'},...
        'VariableNames',{'BlockType','MaskType','Param'});

        exclusions(1,:)={'','','ErrorFcn'};
        exclusions(2,:)={'','','MemberBlocks'};
        exclusions(3,:)={'','','OverrideUsingVariant'};
        exclusions(4,:)={'','','RTWFcnName'};
        exclusions(5,:)={'','','RTWFileName'};
        exclusions(6,:)={'','','SampleTime'};
        exclusions(7,:)={'','','SystemSampleTime'};
        exclusions(8,:)={'','','TemplateBlock'};
        exclusions(9,:)={'','','VariantControl'};
        exclusions(10,:)={'','','sampleTime'};
        exclusions(11,:)={'','','DummyParam'};
        exclusions(12,:)={'BusAssignment','',''};
        exclusions(13,:)={'BusCreator','',''};
        exclusions(14,:)={'BusSelector','',''};
        exclusions(15,:)={'BusToVector','',''};
        exclusions(16,:)={'DCM2Rod','','tolerance'};
        exclusions(17,:)={'Checkbox','',''};
        exclusions(18,:)={'CircularGaugeBlock','',''};
        exclusions(19,:)={'ComboBox','',''};
        exclusions(20,:)={'DashboardScope','',''};
        exclusions(21,:)={'DeltaUT1','','FileName'};
        exclusions(22,:)={'DisplayBlock','',''};
        exclusions(23,:)={'DiscreteStateSpace','',''};
        exclusions(24,:)={'EditField','',''};
        exclusions(25,:)={'EOParameters','','FileName'};
        exclusions(26,:)={'KnobBlock','',''};
        exclusions(27,:)={'LampBlock','',''};
        exclusions(28,:)={'LinearGaugeBlock','',''};
        exclusions(29,:)={'M-S-Function','VR Text Output',''};
        exclusions(30,:)={'M-S-Function','VR Tracer',''};
        exclusions(31,:)={'MATLABSystem','comm.HDLRSDecoder',''};
        exclusions(32,:)={'MATLABSystem','comm.HDLRSEncoder',''};
        exclusions(33,:)={'MATLABSystem','dsp.HDLComplexToMagnitudeAngle',''};
        exclusions(34,:)={'MATLABSystem','dsp.HDLNCO',''};
        exclusions(35,:)={'MATLABSystem','phased.RangeDopplerResponse',''};
        exclusions(36,:)={'MATLABSystem','video.HDLChromaResampler',''};
        exclusions(37,:)={'MATLABSystem','video.HDLHistogram',''};
        exclusions(38,:)={'MATLABSystem','video.HDLMedianFilter',''};
        exclusions(39,:)={'MATLABSystem','visionhdl.MedianFilter',''};
        exclusions(40,:)={'MATLABSystem','visionhdl.ChromaResampler',''};
        exclusions(41,:)={'MATLABSystem','visionhdl.ColorSpaceConverter',''};
        exclusions(42,:)={'MATLABSystem','visionhdl.Histogram',''};
        exclusions(43,:)={'MessageViewer','',''};
        exclusions(44,:)={'MultiStateImageBlock','',''};
        exclusions(45,:)={'PMIOPort','',''};
        exclusions(46,:)={'PushButtonBlock','',''};
        exclusions(47,:)={'QuarterGaugeBlock','',''};
        exclusions(48,:)={'RadioButtonGroup','',''};
        exclusions(49,:)={'RelationalOperator','',''};
        exclusions(50,:)={'Reshape','',''};
        exclusions(51,:)={'RockerSwitchBlock','',''};
        exclusions(52,:)={'RotarySwitchBlock','',''};
        exclusions(53,:)={'S-Function','2-D Histogram','umax'};
        exclusions(54,:)={'S-Function','2-D Histogram','umin'};
        exclusions(55,:)={'S-Function','Data Type Propagation',''};
        exclusions(56,:)={'S-Function','Memory Allocate',''};
        exclusions(57,:)={'S-Function','Memory Copy',''};
        exclusions(58,:)={'S-Function','Idle Task',''};
        exclusions(59,:)={'S-Function','C28x Hardware Interrupt',''};
        exclusions(60,:)={'S-Function','C6000 Interrupt Block',''};
        exclusions(61,:)={'S-Function','c6000 EDMA',''};
        exclusions(62,:)={'S-Function','CPU Timer',''};
        exclusions(63,:)={'S-Function','Space Mouse Input',''};
        exclusions(64,:)={'S-Function','Virtual Reality Sink',''};
        exclusions(65,:)={'S-Function','Virtual Reality Source',''};
        exclusions(66,:)={'S-Function','Bitwise Operator',''};
        exclusions(67,:)={'Selector','Data Cube Slicer',''};
        exclusions(68,:)={'SemiCircularGaugeBlock','',''};
        exclusions(69,:)={'SimMechanicsBlock','','ClassName'};
        exclusions(70,:)={'SimscapeBlock','','ClassName'};
        exclusions(71,:)={'SimscapeBlock','','ComponentPath'};
        exclusions(72,:)={'SimscapeBlock','','ComponentVariantNames'};
        exclusions(73,:)={'SimscapeBlock','','ComponentVariants'};
        exclusions(74,:)={'SimscapeBlock','','SchemaVersion'};
        exclusions(75,:)={'SimscapeBlock','Three-Winding\nTransformer',''};
        exclusions(76,:)={'SliderBlock','',''};
        exclusions(77,:)={'SliderSwitchBlock','',''};
        exclusions(78,:)={'StateSpace','',''};
        exclusions(79,:)={'SubSystem','Azimuth/broadside converter',''};
        exclusions(80,:)={'SubSystem','Bit Slice','CountInit'};
        exclusions(81,:)={'SubSystem','Bit Slice','CountStep'};
        exclusions(82,:)={'SubSystem','C6000 Block Processing',''};
        exclusions(83,:)={'SubSystem','ClosedLoopOnlinePIDTuner',''};
        exclusions(84,:)={'SubSystem','CMBlock',''};
        exclusions(85,:)={'SubSystem','Dechirp',''};
        exclusions(86,:)={'SubSystem','DocBlock',''};
        exclusions(87,:)={'SubSystem','FIL Gateway In HDL Video',''};
        exclusions(88,:)={'SubSystem','FIL Gateway Out HDL Video',''};
        exclusions(89,:)={'SubSystem','Fixed-Point State-Space',''};
        exclusions(90,:)={'SubSystem','IFrame Block ',''};
        exclusions(91,:)={'SubSystem','Image Block ',''};
        exclusions(92,:)={'SubSystem','Induction Motor',''};
        exclusions(93,:)={'SubSystem','Interior PMSM',''};
        exclusions(94,:)={'SubSystem','Gateway In HDL Video',''};
        exclusions(95,:)={'SubSystem','Gateway Out HDL Video',''};
        exclusions(96,:)={'SubSystem','HDL Counter','CountInit'};
        exclusions(97,:)={'SubSystem','HDL Counter','CountStep'};
        exclusions(98,:)={'SubSystem','MultimeterPSB',''};
        exclusions(99,:)={'SubSystem','MathWorks Logo Block',''};
        exclusions(100,:)={'SubSystem','Normalize Vector',''};
        exclusions(101,:)={'SubSystem','OnlinePIDTuner',''};
        exclusions(102,:)={'SubSystem','PID 1dof',''};
        exclusions(103,:)={'SubSystem','PID 2dof',''};
        exclusions(104,:)={'SubSystem','Rotation Matrix to VRML Rotation',''};
        exclusions(105,:)={'SubSystem','Surface Mount PMSM',''};
        exclusions(106,:)={'SubSystem','Transparency Block',''};
        exclusions(107,:)={'SubSystem','State-Space with Initial Outputs',''};
        exclusions(108,:)={'SubSystem','VR Signal Expander',''};
        exclusions(109,:)={'SubSystem','XY scope.',''};
        exclusions(110,:)={'SubSystem','MWDashboardBlock',''};
        exclusions(111,:)={'TransferFcn','',''};
        exclusions(112,:)={'ToggleSwitchBlock','',''};
        exclusions(113,:)={'UniformRandomNumber','',''};
        exclusions(114,:)={'ZeroPole','',''};


        for i=1:height(exclusions)
            exclusions.MaskType{i}=sprintf(exclusions.MaskType{i});
        end

        commonParamExclusions=exclusions(strcmp(exclusions.BlockType,'')&...
        strcmp(exclusions.MaskType,''),:);
        specificExclusions=setdiff(exclusions,commonParamExclusions);
    end


    blockType=get_param(block,'BlockType');


    if(strcmp(blockType,'Inport')||strcmp(blockType,'Outport'))&&...
        strcmpi(get_param(block,'IsComposite'),'on')
        excluded=true;
        return;
    end


    if strcmp(blockType,'Scope')&&strcmpi(get_param(block,'Floating'),'on')
        excluded=true;
        return;
    end


    if strcmp(blockType,'S-Function')&&~strcmpi(get_param(block,'Mask'),'on')
        excluded=true;
        return;
    end

    mask=get_param(block,'Mask');
    if strcmpi(mask,'on')
        maskType=get_param(block,'MaskType');
        blockExclusions=specificExclusions(strcmp(specificExclusions.BlockType,blockType)&...
        (strcmp(specificExclusions.MaskType,maskType)|strcmp(specificExclusions.MaskType,''))&...
        strcmp(specificExclusions.Param,param),:);
    else
        blockExclusions=specificExclusions(strcmp(specificExclusions.BlockType,blockType)&...
        strcmp(specificExclusions.MaskType,'')&...
        strcmp(specificExclusions.Param,param),:);
    end
    excluded=~isempty(blockExclusions);


    if~excluded&&~strcmp(param,'')
        paramExclusions=commonParamExclusions(strcmp(commonParamExclusions.Param,param),:);
        excluded=~isempty(paramExclusions);
    end
end



function excluded=excludedLibrary(block)


    persistent libraryExclusions;
    if isempty(libraryExclusions)
        Library=[...
        "ad936xlib";...
        "adivdsplib";...
        "aerolib3dof";...
        "aerolib3dof2";...
        "aerolib3dofsys";...
        "aerolib6dof";...
        "aerolib6dof2";...
        "aerolib6dofsys";...
        "aerolibactuator";...
        "aerolibadyn";...
        "aerolibadynsys";...
        "aerolibanim";...
        "aerolibanimutils";...
        "aerolibasang";...
        "aerolibatmos";...
        "aerolibatmos2";...
        "aerolibatmossys";...
        "aerolibbdyn";...
        "aerolibcelestial";...
        "aerolibconvert";...
        "aerolibconvert2";...
        "aerolibephsys";...
        "aerolibfltsims";...
        "aerolibgravity";...
        "aerolibgravity2";...
        "aerolibgravitysys";...
        "aerolibguid";...
        "aerolibhmi";...
        "aerolibnav";...
        "aerolibnavsys";...
        "aerolibobsolete";...
        "aerolibpilot";...
        "aerolibpilotsys";...
        "aerolibprivate1p5";...
        "aerolibpropulsion";...
        "aerolibpropulsion2";...
        "aerolibptmass";...
        "aerolibschedule";...
        "aerolibtransform";...
        "aerolibtransform2";...
        "aerolibutil";...
        "aerolibv1";...
        "aerolibwind";...
        "aerolibwind2";...
        "aerolibwindfilters";...
        "alterasoclib";...
        "arduinoethernetlib";...
        "arduinolib";...
        "arduinorootlib";...
        "arduinowifilib";...
        "arm_cortex_a_lib";...
        "arm_cortex_m_lib";...
        "avnet_s3adsp_dm6437";...
        "axiinterfacelib";...
        "beagleboardlib";...
        "beaglebonelib";...
        "c2000lib";...
        "c2802xlib";...
        "c2803xlib";...
        "c2805xlib";...
        "c2806xlib";...
        "c280xlib";...
        "c281xlib";...
        "c2833xlib";...
        "c2834xlib";...
        "c28xdmclib";...
        "c6000lib";...
        "c6416dsklib";...
        "c6455evmlib";...
        "c6713dsklib";...
        "c6747evmlib";...
        "commanapbnd3";...
        "commblkcod2";...
        "commblkintrlv2";...
        "commchan3";...
        "commcnvcod2";...
        "commcnvintrlv2";...
        "commcrc2";...
        "commdigbbndam3";...
        "commdigbbndcpm2";...
        "commdigbbndfm2";...
        "commdigbbndpm3";...
        "commdigbbndtcm2";...
        "commeq2";...
        "commfilt2";...
        "commmimo";...
        "commnoisgen2";...
        "commofdm";...
        "commrandsrc2";...
        "commrfcorlib";...
        "commrflib2";...
        "commsdrhw_v2";...
        "commseqgen2";...
        "commsequence2";...
        "commsink2";...
        "commsrccod2";...
        "commsynccomp2";...
        "commtimrec2";...
        "commutil2";...
        "concertolib";...
        "dm642evmlib";...
        "dm6437evmlib";...
        "dm648evmlib";...
        "dspadpt3";...
        "dsparch4";...
        "dspbioslib";...
        "dspbuff3";...
        "dspfactors";...
        "dspfdesign";...
        "dspindex";...
        "dspinverses";...
        "dsplp";...
        "dspmathops";...
        "dspmlti4";...
        "dspmtrx3";...
        "dspparest3";...
        "dsppolyfun";...
        "dspquant2";...
        "dspsigattribs";...
        "dspsigops";...
        "dspsnks4";...
        "dspsolvers";...
        "dspspect3";...
        "dspsrcs4";...
        "dspstat3";...
        "dspswit3";...
        "dspxfrm3";...
        "e3xxlib";...
        "embeddedtargetslib";...
        "f28M35x_C28x_lib";...
        "f28M35x_M3_lib";...
        "f28M36x_C28x_lib";...
        "f28M36x_M3_lib";...
        "fmcomms5_lib";...
        "frdmkl25zlib";...
        "frdmtfcshieldlib";...
        "freedomboardrootlib";...
        "legoev3lib";...
        "legonxtlib";...
        "mblibv1";...
        "mpclib";...
        "overolib";...
        "pandaboardlib";...
        "ptpdebuglib";...
        "ptplib";...
        "ptplib_feature_off";...
        "ptplib_internal";...
        "raspberrypilib";...
        "rfamplifiers1";...
        "rfblackbox1";...
        "rfladderfilters1";...
        "rfmathmodels1";...
        "rfmixers1";...
        "rfports1";...
        "rfseriesshuntrlcs1";...
        "rftxlines1";...
        "rtdxBlocks";...
        "rtvideolib";...
        "samsunggalaxylib";...
        "sdrrlib";...
        "shared3dof";...
        "shared3dofsys";...
        "shared6dof";...
        "shared6dofsys";...
        "shareddyn";...
        "sharedschedule";...
        "sharedtransform";...
        "sharedutil";...
        "simrfV2_lib";...
        "simrfV2elements";...
        "simrfV2junction1";...
        "simrfV2sources1";...
        "simrfV2util1";...
        "sldrtlib";...
        "slrtj1939lib";...
        "slrtj1939tllib";...
        "slrtlib";...
        "slrtnowinlib";...
        "slrtsoftinglib";...
        "slrttcplib";...
        "slrttestmdl";...
        "sm_lib";...
        "stm32f4lib";...
        "targetcommlib";...
        "tic62dsplib";...
        "tic64dsplib";...
        "tiiqmathlib";...
        "visionanalysis";...
        "visionconversions";...
        "visionfilter";...
        "visiongeotforms";...
        "visionmorphops";...
        "visionsinks";...
        "visionsources";...
        "visionstatistics";...
        "visiontextngfix";...
        "visiontransforms";...
        "visionutilities";...
        "vxworkslib";...
        "xcpmasterlib";...
        "xcprtlib";...
        "xpcJ1939lib";...
        "xpcadlinklib";...
        "xpcbitflowlib";...
        "xpcbvmlib";...
        "xpccommtechlib";...
        "xpccondorlib";...
        "xpcconteclib";...
        "xpcdebuglib";...
        "xpcethercatlib";...
        "xpcethernetlib";...
        "xpcfpgalib";...
        "xpcgefanuclib";...
        "xpcgeneralstandardslib";...
        "xpchumusoftlib";...
        "xpciplib";...
        "xpclib";...
        "xpcmeasurementcomputinglib";...
        "xpcmpllib";...
        "xpcnaiilib";...
        "xpcnetworkbufferlib";...
        "xpcnilib";...
        "xpcobsoletelib";...
        "xpcparallelportlib";...
        "xpcquanserlib";...
        "xpcrealtimedeviceslib";...
        "xpcrtudplib";...
        "xpcsensoraylib";...
        "xpcseriallib";...
        "xpcsystranlib";...
        "xpcueilib";...
        "xpcutilitieslib";...
        "xpcvideousblib";...
        "xpcvideoutillib";...
        "zynqlib"];

        libraryExclusions=table(Library);
        clear Library;
    end


    refBlock=get_param(block,'ReferenceBlock');
    library=get_head_from_block_path(refBlock);
    blockExclusions=libraryExclusions(strcmp(libraryExclusions.Library,library),:);
    excluded=~isempty(blockExclusions);
end


function head=get_head_from_block_path(blkpath)
    ind=find(blkpath=='/',1);
    if isempty(ind)
        head=blkpath;
    else
        head=blkpath(1:(ind(1)-1));
    end
end

function f=get_hot_param_file(stem)
    d=slfileparts(slfileparts(mfilename('fullpath')));
    f=slfullfile(d,'resources',[stem,'.csv']);
end

