



classdef CosimWizardData<handle
    properties(Constant)
        WaveformFile='hdlverifier_rstclk_waveform.jpg';
        precExpToStr=containers.Map(arrayfun(@(x)({x}),(-15:2)),{'1fs','10fs','100fs','1ps','10ps','100ps','1ns','10ns','100ns','1us','10us','100us','1ms','10ms','100ms','1s','10s','100s'});
        precStrToExp=containers.Map({'1fs','10fs','100fs','1ps','10ps','100ps','1ns','10ns','100ns','1us','10us','100us','1ms','10ms','100ms','1s','10s','100s'},arrayfun(@(x)({x}),(-15:2)));
    end
    properties(Abstract,Constant)
        WorkflowOptions;
        DefaultLoadOptions;
        DefaultElabOptions;
        Simulator;
        FileTypes;
        delimiter;
    end
    properties(Dependent=true)
        UseSysPath;
    end

    properties

        CurrentStep=1;


        Workflow;
        PathOpt=0;
        HdlPath='';
        Connection='Socket';

        HdlFiles=cell(0,2);


        CompileCmd='';
        GeneratedCompileCmd;
        ModulesFound={};


        TopLevelName='';
        ModuleName='';
        LoadOptions='';
        ElabOptions='';
        SocketPort=0;


        InPortList={};
        OutPortList={};
        ParameterList={};
        ClkList={};
        RstList={};
        UsedInPortList=[];
        UsedOutPortList=[];

OutputPortDefaults
ClkPortDefaults
        ClkPortRegEx='clk$|clock$';
RstPortDefaults
        RstPortRegEx='rst$|reset$|rst_n$|reset_n$|reset_x$';
        UnusedPortRegEx='';




        TopRegionKind=1;

        HdlTimeUnit='ns';
        HdlResolution=-9;
        HdlTimeUnitNames={'fs','ps','ns','us','ms','s'};
        ResetRunTimeStr='0';


        TimeScaleOpt=true;
        TimingScaleFactor='1';
        TimingMode='s';


        SampleTimeOpt='1';
        HdlHierarchy={};
        MatlabCb=cell(0,1);

        parameterConfigFile='parameters.cfg';
        defaultParameterConfigCommand=['# Uncomment lines below for any '...
        ,'parameter whose default value you want to change.'...
        ,char(10),'# For parameters marked "N/A" (not available) the default value '...
        ,'could not be determined, but you can override in the same way.'...
        ,char(10),char(10)];
    end


    methods(Abstract)
        genCompileCommand(obj);
        launchHdl(obj,logFile);
        genPreSimTclCmd(obj);
        genPostSimTclCmd(obj);
        runCompilation(obj);
        scriptName=genSlLaunchScript(obj);
        scriptName=genMlLaunchScript(obj,LaunchHdl);
        getMlCompileCommand(obj);
    end

    methods
        function this=CosimWizardData
            this.Workflow=this.WorkflowOptions{1};
            this.LoadOptions=this.DefaultLoadOptions;
            this.ElabOptions=this.DefaultElabOptions;

            inp=CosimWizardPkg.CosimWizardInport;
            this.ClkPortDefaults=struct('Edge',inp.Edge,'Period',inp.Period);
            this.RstPortDefaults=struct('Initial',inp.Initial,'Duration',inp.Duration);
            outp=CosimWizardPkg.CosimWizardOutport;
            this.OutputPortDefaults=struct('SampleTime',outp.SampleTime,'DataType',outp.DataType,'Sign',outp.Sign,'FractionLength',outp.FractionLength);
        end

        function r=get.UseSysPath(obj)
            r=(obj.PathOpt==0);
        end




        function scriptName=genCompileScript(obj)
            scriptName=['compile_hdl_design_',obj.ModuleName];

            scriptName=regexprep(scriptName,'[^\w]','');

            headerCmds={...
            ['function ',scriptName];...
            ['% ',scriptName,' compiles HDL design'];...
            '% Generated by Cosimulation Wizard'};

            if(~obj.UseSysPath)
                addPathCmd={
                'savedPath = getenv(''PATH'');';...
                '% Restore the PATH after compilation';...
                'restorePathObj = onCleanup(@()setenv(''PATH'', savedPath));';...
                '% Add HDL path';...
                ['setenv(''PATH'', [''',obj.HdlPath,pathsep,''' getenv(''PATH'')])']};
                headerCmds=[headerCmds;addPathCmd];
            end
            compileCmds=getMlCompileCommand(obj);

            allCmds=[headerCmds;compileCmds];

            obj.l_WriteStrCellArrayToFile(allCmds,[scriptName,'.m'],false);
        end

        function params=getAutopopulateParam(obj,cmd)
            if obj.useSocket
                params={cmd,...
                1,...
                0,...
                '',...
                num2str(obj.SocketPort)};
            else
                params={cmd,...
                1,...
                1,...
                '',...
                ''};
            end


        end

        function getHdlTimeResolution(obj)
            params=getAutopopulateParam(obj,'%^getPrecision^%');
            obj.HdlResolution=autopopulate(params{:});

            possibleNames={'fs','ps','ns','us','ms','s'};
            lowestIndx=floor((obj.HdlResolution+15)/3)+1;
            if(lowestIndx>6)
                lowestIndx=6;
            elseif(lowestIndx<1)
                lowestIndx=1;
            end
            obj.HdlTimeUnitNames=possibleNames(lowestIndx:end);
            obj.HdlTimeUnit=obj.HdlTimeUnitNames{1};
        end

        function populateHdlHierarchy(obj)
            params=getAutopopulateParam(obj,'%^hierarchy^%');
            obj.HdlHierarchy=autopopulate(params{:});


            getHdlTimeResolution(obj);
        end

        function fiilParametersbyModule(obj,ModuleName)
            params=getAutopopulateParam(obj,'%^queryPara^%');
            params(6)={ModuleName};
            paraNameandValue=autopopulate(params{:});


            assert(length(paraNameandValue)>=1,message('HDLLink:CosimWizard:InvalidAutofillData'));
            assert(paraNameandValue{1}~=0,message('HDLLink:CosimWizard:InstanceNotFound',ModuleName));
            assert(paraNameandValue{1}==1||paraNameandValue{1}==2,message('HDLLink:CosimWizard:UnsupportedRegion',ModuleName));

            paraNames=paraNameandValue(3:3:end);
            paraTypes=paraNameandValue(4:3:end);
            paraValues=paraNameandValue(5:3:end);

            for m=1:length(paraNames)

                fullName=strcat(ModuleName,obj.delimiter,paraNames{m});
                para=CosimWizardPkg.CosimWizardPara(paraNames{m},...
                fullName,paraTypes{m},paraValues{m});
                obj.ParameterList{end+1}=para;
            end
        end

        function autoFillTopModuleParameters(obj)
            obj.ParameterList={};
            fiilParametersbyModule(obj,obj.ModuleName);
        end

        function autoFillAllModulesParameters(obj)
            obj.ParameterList={};
            obj.populateHdlHierarchy;
            nodePaths=obj.traverseHierarchy(obj.HdlHierarchy,1);
            nodePaths=cellstr(nodePaths);
            for m=1:length(nodePaths)
                fiilParametersbyModule(obj,nodePaths{m});
            end
        end


        function nodePaths=traverseHierarchy(obj,TreeNode,depth)
            assert(depth<=10000,...
            sprintf('TraverseHierarchy: Internal error: Depth > 10000'));
            nodePaths=[];
            index=0;
            while(index<length(TreeNode))
                if(index==0)
                    index=index+1;
                    continue;
                end
                assert(ischar(TreeNode{index}),...
                sprintf('Internal Error: This should be string'));
                nodeName=string(TreeNode{index});
                nodePaths=[nodePaths;nodeName];
                if(iscell(TreeNode{index+1}))

                    childNode=TreeNode{index+1};
                    childPaths=obj.traverseHierarchy(childNode,depth+1);
                    nodePaths=[nodePaths;obj.concatPath(nodeName,childPaths)];
                    index=index+2;
                else
                    index=index+1;
                end
            end
            if(index==(length(TreeNode)))
                nodePaths=[nodePaths;string(TreeNode{index})];
            end
        end


        function fullpaths=concatPath(obj,nodeName,childPaths)

            nodePrefix=repmat(strcat(nodeName,obj.delimiter),length(childPaths),1);
            fullpaths=strcat(nodePrefix,childPaths);
        end

        function autoFill(obj)
            params=getAutopopulateParam(obj,obj.ModuleName);
            portsPathandMode=autopopulate(params{:});


            assert(length(portsPathandMode)>=1,message('HDLLink:CosimWizard:InvalidAutofillData'));
            assert(portsPathandMode{1}~=0,message('HDLLink:CosimWizard:InstanceNotFound',obj.ModuleName));
            assert(portsPathandMode{1}==1||portsPathandMode{1}==2,message('HDLLink:CosimWizard:UnsupportedRegion',obj.ModuleName));
            assert(portsPathandMode{2}~=0,message('HDLLink:CosimWizard:ModuleHasNoPort',obj.ModuleName));

            obj.TopRegionKind=portsPathandMode{1};
            portNames=portsPathandMode(3:2:end);
            portModes=portsPathandMode(4:2:end);


            obj.InPortList={};
            obj.OutPortList={};
            for m=1:length(portNames)
                if(strcmp(portModes{m},'INOUT'))
                    obj.addPort(portNames{m},1);
                    obj.addPort(portNames{m},2);
                elseif(strcmp(portModes{m},'OUT'))
                    obj.addPort(portNames{m},2);
                else
                    obj.addPort(portNames{m},1);
                end
            end


            getHdlTimeResolution(obj);
        end




        function addPort(obj,portname,iomode)
            switch(iomode)
            case 1
                port=CosimWizardPkg.CosimWizardInport;
                if(regexpi(portname,obj.ClkPortRegEx))
                    port.Type=1;
                elseif(regexpi(portname,obj.RstPortRegEx))
                    port.Type=2;
                elseif(regexpi(portname,obj.UnusedPortRegEx))
                    port.Type=3;
                else
                    port.Type=0;
                end
                obj.InPortList{end+1}=port;
            case 2
                port=CosimWizardPkg.CosimWizardOutport;
                if(regexpi(portname,obj.UnusedPortRegEx))
                    port.Type=1;
                else
                    port.Type=0;
                end
                obj.OutPortList{end+1}=port;
            end
            port.Name=portname;
        end
        function n=GetNumPorts(obj,mode)
            switch mode
            case 1
                n=numel(obj.InPortList);
            case 2
                n=numel(obj.OutPortList);
            otherwise
                error(message('HDLLink:CosimWizard:InvalidPortMode'));
            end
        end
        function port=getPort(obj,indx,mode)
            switch mode
            case 1
                port=obj.InPortList{indx};
            case 2
                port=obj.OutPortList{indx};
            otherwise
                error(message('HDLLink:CosimWizard:InvalidPortMode'));
            end
        end

        function name=getHdlTimeUnitName(obj)
            name=obj.HdlTimeUnit;
        end

        function PeriodStr=getHdlBaseRatePeriod(obj)
            numClk=numel(obj.ClkList);
            PeriodStr='1';
            if(numClk)
                PeriodStr=obj.ClkList{1}.Period;
                if(numClk>1)
                    for m=1:numClk
                        PeriodVec(m)=str2double(obj.ClkList{m}.Period);
                    end
                    Period=computeBaseRate(PeriodVec);
                    PeriodStr=num2str(Period);
                end
            end
        end

        function genWaveform(obj,RecalRestValue)

            numClk=numel(obj.ClkList);
            numRst=numel(obj.RstList);


            if(numClk)
                clkPeriods=zeros(1,numClk);
                for m=1:numClk
                    clkPeriods(m)=str2double(obj.ClkList{m}.Period);
                end
            end

            if(numRst)
                rstDurations=zeros(1,numRst);
                for m=1:numRst
                    rstDurations(m)=str2double(obj.RstList{m}.Duration);
                end
            end

            if(RecalRestValue)
                if(numClk&&numRst)
                    maxClkPeriod=max(clkPeriods);
                    resetRunTime=ceil(max(rstDurations)/maxClkPeriod)*maxClkPeriod;
                elseif(numRst)
                    resetRunTime=max(rstDurations);
                else
                    resetRunTime=0;
                end
                obj.ResetRunTimeStr=num2str(resetRunTime);
            end

            if(numClk&&numRst)
                tMax=max(rstDurations)+2*max(clkPeriods);
            elseif(numClk)
                tMax=2*max(clkPeriods);
            elseif(numRst)
                tMax=2*max(rstDurations);
            else
                tMax=0;
            end

            resetRunTime=str2num(obj.ResetRunTimeStr);%#ok<ST2NM>
            tMax=max(tMax,resetRunTime*1.05);

            if(resetRunTime>0)
                tMin=0;
            else
                tMin=-tMax/20;
            end

            if(numClk+numRst==1)
                paperHeight=200;
            else
                paperHeight=100*(numClk+numRst);
            end
            figHandle=figure(...
            'position',[1,1,320,paperHeight],...
            'PaperPositionMode','auto',...
            'Units','pixels',...
            'visible','off');



            for m=1:numClk
                subplot(numClk+numRst,1,m);
                numCycles=ceil(tMax/clkPeriods(m));
                t=reshape([1:numCycles*2;1:numCycles*2],1,4*numCycles);
                t=[0,t(1:end-1)]*clkPeriods(m)/2;
                switch(obj.ClkList{m}.Edge)
                case 'Rising'
                    oneCycle=[0,0,1,1];
                otherwise
                    oneCycle=[1,1,0,0];
                end
                v=repmat(oneCycle,1,numCycles);
                plot(t,v,'b',resetRunTime*ones(1,2),[-1,2],'r');
                axis([tMin,tMax,-0.5,1.5]);
                set(gca,'YTick',[0,1]);

                ylabel(obj.ClkList{m}.Name,'Interpreter','none');

            end


            for m=1:numRst
                subplot(numClk+numRst,1,m+numClk);
                t=[0,rstDurations(m),rstDurations(m),tMax];
                if(obj.RstList{m}.Initial=='1')
                    v=[1,1,0,0];
                else
                    v=[0,0,1,1];
                end
                plot(t,v,'b',resetRunTime*ones(1,2),[-1,2],'r');

                ylabel(obj.RstList{m}.Name,'Interpreter','none');

                axis([tMin,tMax,-0.5,1.5]);
                set(gca,'YTick',[0,1]);
            end

            saveas(figHandle,obj.WaveformFile);
            close(figHandle);

        end

        function r=useSocket(obj)
            r=strcmpi(obj.Connection,'Socket');
        end

        function HdlPathPrefix=getHdlPathPrefix(obj)
            if(obj.UseSysPath)
                HdlPathPrefix='';
            else
                HdlPathPrefix=[obj.HdlPath,filesep];
            end
        end
        function scriptName=writeLaunchScript(obj,Script,LaunchHdl)
            scriptName=['launch_hdl_simulator_',obj.ModuleName];

            scriptName=regexprep(scriptName,'[^\w]','');
            CosimWizardPkg.CosimWizardData.l_WriteStrCellArrayToFile(Script,[scriptName,'.m'],LaunchHdl);
        end
        function set.ResetRunTimeStr(obj,resetRunTimeStr)
            obj.ResetRunTimeStr=resetRunTimeStr;
            validateHdlTime(obj,resetRunTimeStr);
        end

        function setClkInfo(obj,index,Period,Edge)
            obj.ClkList{index}.Period=Period;
            obj.ClkList{index}.Edge=Edge;
            validateHdlTime(obj,Period);
        end
        function setRstInfo(obj,index,Initial,Duration)
            obj.RstList{index}.Initial=Initial;
            obj.RstList{index}.Duration=Duration;
            validateHdlTime(obj,Duration);
        end

        function validateHdlTime(obj,timeStr)
            hdlTime=str2double(timeStr);
            assert(~isnan(hdlTime),message('HDLLink:CosimWizard:InvalidHdlTime',timeStr));
            assert(hdlTime>=0,message('HDLLink:CosimWizard:NegativeHdlTime',timeStr));

            unitname=getHdlTimeUnitName(obj);
            switch unitname
            case 'fs'
                timeExp=-15;
            case 'ps'
                timeExp=-12;
            case 'ns'
                timeExp=-9;
            case 'us'
                timeExp=-6;
            case 'ms'
                timeExp=-3;
            case 's'
                timeExp=0;
            end
            diffExp=obj.HdlResolution-timeExp;
            tScaleFactor=10^diffExp;
            r=(mod(hdlTime,tScaleFactor)==0);

            assert(r~=0,...
            message('HDLLink:CosimWizard:HdlTimeTruncation',...
            timeStr,unitname,num2str(10^obj.HdlResolution)));
        end
    end

    methods(Hidden=true)
        function dataType=getPropDataType(~,propName)
            switch(propName)
            case{'HdlPath','Connection','Workflow','Simulator'}
                dataType='string';
            case 'PathOpt'
                dataType='int';
            otherwise
                assert(false);
            end
        end
    end

    methods(Static=true)
        function l_WriteStrCellArrayToFile(msg,filename,EvalCmd)
            newmsg=cell(1,numel(msg));
            for m=1:numel(msg)
                newmsg{m}=[msg{m},char(10)];
            end
            newmsg=[newmsg{:}];

            [fid,msg]=fopen(filename,'w');
            assert(fid~=-1,message('HDLLink:CosimWizard:OpenFileFailed',msg));
            onCleanupObj=onCleanup(@()fclose(fid));

            fprintf(fid,'%s',newmsg);
            delete(onCleanupObj);

            if(EvalCmd)
                eval(newmsg);
            end
        end
    end
end



