function[lBuildVariantFromHook,lBuildActionsFromHook,lBuildHookEnvVars,...
    lBuildHookPathPrepends]=...
    buildHooksAfterCodeGen(lBuildInfo,lToolchainInfo,...
    lMakeOptions,hookBuildOpts,lModelReferenceTargetType,...
    lModelName,lTemplateMakefile,lMakeRTWHookFile,...
    lVerbose,lDispHook,slbuildProfileIsOn,...
    lBuildHookHandles,lAnchorFolder,mainCompileFolder,...
    lCodeGenerationId)




    lBuildInfo.BuildTools=...
    coder.internal.LegacyBuildToolsCompatibility(lToolchainInfo,hookBuildOpts.buildName);


    hasSlCustomizationHook=...
    ~isempty(sldowprivate('cusattic','AtticData','RTWBuildCustomizations'));


    if~isempty(lMakeRTWHookFile)||hasSlCustomizationHook



        hookUnderMlRoot=contains(which(lMakeRTWHookFile),matlabroot);
        if~hookUnderMlRoot||any(strcmp(lMakeRTWHookFile,...
            {'autosar_make_rtw_hook','autosar_adaptive_make_rtw_hook'}))
            coder.internal.interimSaveLibraryBuildInfos(lBuildInfo);
        end

        lRTWBuildArgs_before=get_param(lModelName,'RTWBuildArgs');

        coder.internal.callMakeHook...
        ('before_make',lMakeOptions,hookBuildOpts,...
        'FolderToRunFrom',mainCompileFolder,...
        'ModelReferenceTargetType',lModelReferenceTargetType,...
        'ModelName',lModelName,...
        'BuildInfo',lBuildInfo,...
        'LocalAnchorFolder',lAnchorFolder,...
        'TemplateMakefile',lTemplateMakefile,...
        'MakeRTWHookFile',lMakeRTWHookFile,...
        'Verbose',lVerbose,...
        'DispHook',lDispHook,...
        'SlBuildProfileIsOn',slbuildProfileIsOn);

        lRTWBuildArgs_after=get_param(lModelName,'RTWBuildArgs');



        if~strcmp(lRTWBuildArgs_after,lRTWBuildArgs_before)
            coder.internal.addNewBuildArgs(lBuildInfo,lRTWBuildArgs_before,lRTWBuildArgs_after)
        end

        if~hookUnderMlRoot



            coder.internal.updateSharedFromModelBuildInfo(lBuildInfo)
        end

    end


    lInstrumentedObjectCodeFolder='';
    lBuildInfoInstr=[];
    [lBuildHookEnvVars,lBuildHookPathPrepends]=i_buildHooksAfterCodeGen...
    (lBuildHookHandles,...
    lAnchorFolder,...
    mainCompileFolder,...
    lBuildInfo,...
    lBuildInfoInstr,...
    lTemplateMakefile,...
    lInstrumentedObjectCodeFolder,...
    lCodeGenerationId,lToolchainInfo);


    lBuildVariantFromHook=lBuildInfo.BuildTools.BuildVariant;


    lBuildActionsFromHook=lBuildInfo.BuildTools.BuildActions;
    if isempty(lBuildActionsFromHook)
        lBuildActionsFromHook=coder.make.enum.BuildAction.NONE;
    end


    lBuildInfo.BuildTools=[];



    function[buildHookEnvVars,buildHookPathPrepends]=i_buildHooksAfterCodeGen...
        (handles,lAnchorDir,lBuildFolder,...
        buildInfo,lBuildInfoInstr,lTemplateMakefile,...
        lInstrumentedObjectCodeFolder,...
        lCodeGenerationId,lToolchainInfo)

        if~isempty(handles)

            lBuildFolderInstr=fullfile(lBuildFolder,lInstrumentedObjectCodeFolder);


            lExecuteFromFolder=lBuildFolder;

            coder.coverage.BuildHook.initializeHookData...
            (handles,lAnchorDir,...
            lBuildFolderInstr,...
            lInstrumentedObjectCodeFolder,...
            buildInfo,lBuildInfoInstr,...
            lBuildFolder);

            [buildHookEnvVars,buildHookPathPrepends]=...
            coder.coverage.BuildHook.dispatch_after_code_generation...
            (handles,lExecuteFromFolder,lTemplateMakefile,lCodeGenerationId,...
            lToolchainInfo);
        else
            buildHookEnvVars={};
            buildHookPathPrepends={};
        end
