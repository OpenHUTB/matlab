


classdef Helper
    methods(Static)




        function obscure_NnAaMmEe=which(name)
            obscure_NnAaMmEe=which(name);
        end


        function[inCount,outCount]=getInOutParamCounts(filePath)
            mt=mtree(fileread(filePath));
            [inArgs,outArgs]=coder.internal.MTREEUtils.getFcnInputOutputParamNames(filePath,mt.root);
            inCount=length(inArgs);
            outCount=length(outArgs);
        end


        function fid=fileOpen(filePath,attr)
            fid=coder.internal.safefopen(filePath,attr);
            if fid==-1
                error(message('Coder:FXPCONV:FailedToOpenFile',filePath));
            end
        end


        function changeIdInFile(fullFilePath,origId,newId)
            x=mtree(fileread(fullFilePath),'-comments');
            code=coder.internal.MTREEUtils.changeIdInFile(x,origId,newId);
            fid=coder.internal.Helper.fileOpen(fullFilePath,'w');
            fprintf(fid,'%s',code);
            fclose(fid);
        end


        function finalSig=getFcnInterfaceSignature(fcnName,inputArgNames,outputArgNames)
            outSig=strjoin(outputArgNames,', ');
            inSig=strjoin(inputArgNames,', ');
            if isempty(outSig)
                finalSig=sprintf('%s(%s)',fcnName,inSig);
            else
                finalSig=sprintf('[%s] = %s(%s)',outSig,fcnName,inSig);
            end
        end


        function argList=getArgList(argNames)

            numIn=length(argNames);

            outSig='';
            if numIn>0
                for ii=1:numIn
                    outSig=[outSig,argNames{ii}];%#ok<AGROW>
                    if ii~=numIn
                        outSig=[outSig,', '];%#ok<AGROW>
                    end
                end
            end

            argList=outSig;
        end


        function header=getHeader(proposeTypesMode)
            assert(any(strcmp({'HDL','C','FIXPT'},proposeTypesMode)),message('Coder:FxpConvDisp:FXPCONVDISP:ValueMustBeOneOf'...
            ,['''',coder.FixPtConfig.MODE_C,''', ''',coder.FixPtConfig.MODE_HDL,''' or ''',coder.FixPtConfig.MODE_FIXPT,'''']));

            mver=ver('matlab');
            cver=ver('matlabcoder');
            fixptDVer=ver('fixedpoint');
            tfc=sprintf('Generated by %s %s and %s %s',mver.Name,mver.Version,fixptDVer.Name,fixptDVer.Version);










            maxLength=76;
            if length(tfc)<maxLength-2
                totalPad=(maxLength-2)-length(tfc);
                leftPad=floor(totalPad/2);
                rightPad=ceil(totalPad/2);
                tfc=[repmat(' ',1,leftPad),tfc,repmat(' ',1,rightPad)];
            end
            header=[...
            repmat('%',1,maxLength),'\n'...
            ,'%',repmat(' ',1,maxLength-2),'%\n'...
            ,'%',tfc,'%\n'...
            ,'%',repmat(' ',1,maxLength-2),'%\n'...
            ,repmat('%',1,maxLength),'\n'...
            ];
        end



        function foundFile=findFile(designName)
            foundFile=~isempty(coder.internal.Helper.which(designName));
            if~foundFile
                pause(1);
                foundFile=~isempty(coder.internal.Helper.which(designName));
            end
        end


        function fl=getFileLink(fileName,filePath)
            fn=fileName;

            [~,fn,fe]=fileparts(fn);
            if nargin<3;
                [fp,fn,fe]=fileparts(coder.internal.Helper.which(fileName));
            else
                fp=filePath;
            end
            nameWithPath=fullfile(fp,[fn,fe]);

            fl=['<a href="matlab:edit(''',nameWithPath,''')">',fn,'</a>'];

        end


        function fileCopy(srcFilePath,dstFilePath)
            assert(exist(srcFilePath,'file')~=0,'Source File does not exist.');

            if(exist(dstFilePath,'file')==2)
                if ispc()
                    delete(dstFilePath);
                else
                    fileattrib(dstFilePath,'+w');
                end
            end
            copyfile(srcFilePath,dstFilePath);
            fileattrib(dstFilePath,'+w');

            assert(exist(dstFilePath,'file')~=0,'fileCopy failed');
        end


        function fileCopyIfDifferent(srcFilePath,dstFilePath)
            assert(exist(srcFilePath,'file')~=0,'Source File does not exist.');

            if(exist(dstFilePath,'file')==2)
                try
                    if strcmp(fileread(srcFilePath),fileread(dstFilePath))


                        return;
                    end
                catch ex
                end
            end
            coder.internal.Helper.fileCopy(srcFilePath,dstFilePath);
        end


        function deleteFile(file,type)
            if nargin<3
                type='file';
            end

            if strcmpi(type,'file')&&exist(file,type)
                delete(file);
            end

            if strcmpi(type,'dir')&&exist(file,type)
                rmdir(file,'s');
            end
        end

        function[ret]=isToolboxPath(givenPath)
            ret=false;
            tbxPath=fullfile(matlabroot,'toolbox');
            if strcmp(filesep,'\')
                tbxPath=strrep(tbxPath,'\','\\');
            end
            if(~isempty(regexp(givenPath,tbxPath,'once')))
                ret=true;
            end
        end


        function checkPathForToolboxPath(givenPath)
            if(coder.internal.Helper.isToolboxPath(givenPath))
                error(message('Coder:FXPCONV:invalidDirLoc',givenPath));
            end
        end


        function checkFileExists(fileName)
            fileWithPath=coder.internal.Helper.which(fileName);
            if isempty(fileWithPath)
                error(message('Coder:FXPCONV:BADFILENAME',fileName));
            end
        end


        function removeClearAll(fileName)
            x=mtree(fileread(coder.internal.Helper.which(fileName)),'-comments');





            if isempty(x)||(count(x)==1&&iskind(x,'ERR'))
                return
            end

            code=coder.internal.MTREEUtils.removeClearAll(x);
            fid=coder.internal.Helper.fileOpen(coder.internal.Helper.which(fileName),'w');
            fprintf(fid,'%s',code);
            fclose(fid);
            clear(fileName);
        end


        function commentAllAsserts(fileName)
            x=mtree(fileread(coder.internal.Helper.which(fileName)),'-comments');
            code=coder.internal.MTREEUtils.commentAllAsserts(x);
            fid=coder.internal.Helper.fileOpen(coder.internal.Helper.which(fileName),'w');
            fprintf(fid,'%s',code);
            fclose(fid);
            clear(fileName);
        end


        function deleteDir(d)
            [status,attributes]=fileattrib(d);
            if status~=0
                if attributes.directory~=0
                    rmdir(d,'s');
                else
                    delete(d);
                end
            end
        end


        function[hasInput,hasOutput]=checkForInputAndOutputParams(fcnName)
            coder.internal.Helper.checkFileExists(fcnName);
            fcnPath=coder.internal.Helper.which(fcnName);
            fcnMtree=mtree(fileread(fcnPath));
            [hasInput,hasOutput]=coder.internal.MTREEUtils.InputAndOutputParams(fcnMtree);
        end



        function[coderConstIndices,coderConstVals]=getCoderConstIndices(inputProps)
            coderConstVals={};
            coderConstIndices=[];
            for ii=1:length(inputProps)
                prop=inputProps{ii};
                if isa(prop,'coder.Constant')
                    coderConstIndices=[coderConstIndices,ii];%#okgrow
                    coderConstVals{end+1}=prop;%#okgrow
                end
            end
        end


        function prop=extractPropertyName(fullQualifiedStructVarName)
            [~,prop]=strtok(fullQualifiedStructVarName,'.');
            if~isempty(prop)
                prop(1)='';
            end
        end


        function codegenFolder=getCodegenFolderForCLI(workDir,bldDir)

            bldDir=char(bldDir);
            singDotPos=strfind(bldDir,'.');
            doubleDotPos=strfind(bldDir,'..');
            isRelativePath=isempty(strfind(bldDir,filesep))||(~isempty(doubleDotPos)&&doubleDotPos(1)==1)||(~isempty(singDotPos)&&singDotPos(1)==1);
            if(isRelativePath)
                bldDir=fullfile(workDir,bldDir);
            end
            [status,mess]=fileattrib(bldDir);
            if(~status)
                [s,mess,messid]=mkdir(bldDir);
                if(s==0)
                    error(messid,mess);
                end
                [~,mess]=fileattrib(bldDir);
            end

            bldDir=mess.Name;
            codegenFolder=fullfile(bldDir);







        end


        function writeFile(fullPath,text,permission)
            if nargin<=2
                permission='w';
            end
            fid=coder.internal.Helper.fileOpen(fullPath,permission);
            fprintf(fid,'%s',text);
            fclose(fid);
        end



        function fullFileName=createMATLABFile(dir,name,code)
            fullFileName=fullfile(dir,[name,'.m']);
            coder.internal.Helper.writeFile(fullFileName,...
            code);
            clear(name);
        end




        function arr=cell2arr(cellArr)
            arr=[];
            if~isempty(cellArr)
                for ii=1:length(cellArr)
                    arr=[arr,cellArr{ii}];
                end
            end
        end

        function btWarningStruct=changeBacktraceWarning(operation,btWarningStruct)
            switch(operation)
            case 'off'
                btWarningStruct=warning('query','backtrace');%#ok<Hard_Coded>
                if(strcmp(btWarningStruct.state,'on'))
                    warning('off','backtrace')%#ok<Hard_Coded>
                end
            case 'reset'
                if(isempty(btWarningStruct))
                    btWarningStruct=warning('query','backtrace');%#ok<Hard_Coded>
                end
                warning(btWarningStruct.state,'backtrace');%#ok<Hard_Coded>
            otherwise
                error(message('Coder:FXPCONV:badState'));
            end
        end

        function links=getLinkFcn(scriptPath,nodes)
            nodeIndices=indices(nodes);
            links=cell(length(nodeIndices),1);
            count=1;
            for i=nodeIndices
                node=nodes.select(i);
                links{count}=@(name)sprintf('<a href="matlab:matlab.desktop.editor.openAndGoToLine(''%s'',%s);"> %s</a>',...
                scriptPath,num2str(node.lineno),name);
                count=count+1;
            end
        end

        function printlinkstr=getPrintLinkStrFor(scriptPath,lineno,charno)
            link=@(name)sprintf('<a href="matlab:matlab.desktop.editor.openAndGoToLine(''%s'',%s);"> %s</a>',...
            scriptPath,num2str(lineno),name);

            [~,fileName,fileext]=fileparts(scriptPath);
            scriptName=[fileName,fileext];

            printlinkstr=link(sprintf('File: %s Line: %d Column: %d',scriptName,lineno,charno));%#ok<AGROW>
        end

        function printlinkstr=getPrintLinkStr(scriptPath,nodes)
            links=coder.internal.Helper.getLinkFcn(scriptPath,nodes);
            [~,fileName,fileext]=fileparts(scriptPath);
            scriptName=[fileName,fileext];













            printlinkstr='';
            paddingNum=0;


            count=1;
            for i=indices(nodes)
                link=links{count};
                node=nodes.select(i);
                if count==1
                    padding='';
                else
                    padding=repmat(' ',1,paddingNum);
                end

                printlinkstr=[printlinkstr,padding,link(sprintf('File: %s Line: %d Column: %d\n',scriptName,node.lineno,node.charno))];%#ok<AGROW>

                count=count+1;
            end
        end



        function result=fevalInPath(fcnName,pathName)
            pathBackup=path;
            c=onCleanup(@()path(pathBackup));
            addpath(pathName);
            result=feval(fcnName);
        end


        function value=getGlobalValueHelper(name)
            eval(['global ',name]);
            value=eval(name);
        end





        function list=getGlobalCodegenArgs(coderTypes)
            list={};
            for ii=1:length(coderTypes)
                type=coderTypes{ii};
                if~isempty(type.InitialValue)
                    val=type.InitialValue;
                else
                    val=type;
                end
                list{end+1}=type.Name;
                list{end+1}=val;
            end
        end

        function fcnName=newFunctionName(oldName,suffix)
            fcnName=sprintf('%s_%s',oldName,suffix);
        end











        function diffPropsStr=diffFimathString(fimath,baseFimath)
            diffPropList={};
            props={'RoundingMethod','OverflowAction','ProductMode'...
            ,'ProductWordLength'...
            ,'ProductFractionLength'...
            ,'SumMode'...
            ,'SumWordLength'...
            ,'SumFractionLength'...
            ,'CastBeforeSum'};
            for ii=1:length(props)
                pr=props{ii};
                if~isequal(fimath.(pr),baseFimath.(pr))
                    diffPropList{end+1}=['''',pr,''''];%#ok<AGROW>
                    val=fimath.(pr);
                    if ischar(val)
                        val=['''',val,''''];%#ok<AGROW>
                    else
                        val=num2str(val);
                    end
                    diffPropList{end+1}=val;%#ok<AGROW>
                end
            end
            diffPropsStr=strjoin(diffPropList,', ');
        end


        function T=getTargetType(isSigned,wordLen,fractionLen,propseTargetContainerTypes)
            if propseTargetContainerTypes
                if wordLen<=8
                    wordLen=8;
                elseif wordLen<=16
                    wordLen=16;
                elseif wordLen<=32
                    wordLen=32;
                elseif wordLen<=64
                    wordLen=64;
                elseif wordLen<=128
                    wordLen=128;
                end
            end

            T=numerictype(isSigned,wordLen,fractionLen);
        end
    end
end
