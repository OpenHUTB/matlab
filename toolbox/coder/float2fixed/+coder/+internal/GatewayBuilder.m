


classdef GatewayBuilder
    properties(Constant)
        GLOBALPARAMNAME='fxpGlobalParams';
    end

    methods(Access=private)
        function gateway=getGatewayCode(~,gatewayName,outputArgs,functionName,inputArgNames,inArgsStr)
            outputs=strjoin(outputArgs,', ');
            inputs=strjoin(inputArgNames,', ');



            gateway=[...
'function [@outputs] = @gatewayName(@inputs) \n'...
            ,'    global fxpGlobalParams; \n'...
            ,'    if fxpGlobalParams.createInputMATFile \n'...
            ,'        fxpGlobalParams.createInputMATFile = 0; \n'...
            ,'        exInput = {@inputArgStr}; \n'...
            ,'        save @functionName_exInput exInput; \n'...
            ,'        fxpGlobalParams.inputMatFileName = ''@functionName_exInput.mat''; \n'...
            ,'    end \n'...
            ,'    if ~fxpGlobalParams.designMexed \n'...
            ,'        fxpGlobalParams.designMexed = true; \n'...
            ,'        if fxpGlobalParams.showMexMessages \n'...
            ,'          disp(''### Generating Mex file for ''''@functionName''''''); \n'...
            ,'        end \n'...
            ,'        exInput = {@inputArgStr}; \n'...
            ,'        coderConstIndices = []; \n'...
            ,'        for ii = 1:length(exInput) \n'...
            ,'          if(strcmp(class(exInput{ii}),  ''coder.Constant'')) \n'...
            ,'             coderConstIndices = [coderConstIndices ii]; \n'...
            ,'          end \n'...
            ,'        end \n'...
            ,'        if(~isempty(coderConstIndices)) \n'...
            ,'           fxpGlobalParams.hasCoderConstInputs = true; \n'...
            ,'        end \n'...
            ,'        screenedIndices = setdiff(1:length(exInput), coderConstIndices); \n'...
            ,'        fxpGlobalParams.screnedInps = exInput(screenedIndices); \n'...
            ,'        fxpGlobalParams.coderConstIndicies = coderConstIndices; \n'...
            ,'        logText = []; \n'...
            ,'        try \n'...
            ,'            if ~isempty(fxpGlobalParams.runWithInstrumentationFlag) && fxpGlobalParams.runWithInstrumentationFlag \n'...
            ,'                if(fxpGlobalParams.isVerboseMexOp)\n'...
            ,'                  eval(''buildInstrumentedMex(''''@functionName'''', ''''-args'''', exInput, ''''-o'''', ''''@functionName'''');''); \n'...
            ,'                else\n'...
            ,'                  evalc(''buildInstrumentedMex(''''@functionName'''', ''''-args'''', exInput, ''''-o'''', ''''@functionName'''');''); \n'...
            ,'                end\n'...
            ,'            else \n'...
            ,'                cfg = coder.config(''mex'');\n'...
            ,'                cfg.ConstantInputs=''Remove'';\n'...
            ,'                cfg.GenerateReport=true;\n'...
            ,'                if(fxpGlobalParams.isVerboseMexOp)\n'...
            ,'                 eval(''codegen -config cfg -args exInput -o @functionName @functionName;''); \n'...
            ,'                else\n'...
            ,'                 evalc(''codegen -config cfg -args exInput -o @functionName @functionName;''); \n'...
            ,'                end\n'...
            ,'            end \n'...
            ,'        catch me \n'...
            ,'            disp(logText); \n'...
            ,'            disp([''### '' message(''Coder:FxpConvDisp:FXPCONVDISP:examineErrorReport'').getString]);\n'...
            ,'            rethrow(me); \n'...
            ,'        end \n'...
            ,'        if fxpGlobalParams.showMexMessages \n'...
            ,'            disp([''### '' message(''Coder:FxpConvDisp:FXPCONVDISP:runningMexSim'').getString]); \n'...
            ,'        end \n'...
            ,'   end \n'...
            ,'   t_simulationTime = tic; \n'...
            ,'   if(fxpGlobalParams.hasCoderConstInputs) \n'...
            ,'     [@outputs] = @functionName(fxpGlobalParams.screnedInps{:}); \n'...
            ,'   else \n'...
            ,'     [@outputs] = @functionName(@inputs); \n'...
            ,'   end \n'...
            ,'    if fxpGlobalParams.createOutputMATFile \n'...
            ,'        fxpGlobalParams.createOutputMATFile = 0; \n'...
            ,'        exOutput = {@outputs}; \n'...
            ,'        save @functionName_exOutput exOutput; \n'...
            ,'        fxpGlobalParams.outputMatFileName = ''@functionName_exOutput.mat''; \n'...
            ,'    end \n'...
            ,'   fxpGlobalParams.simulationTime = fxpGlobalParams.simulationTime + toc(t_simulationTime); \n'...
            ,'end \n'];

            gateway=strrep(gateway,'@gatewayName',gatewayName);
            gateway=strrep(gateway,'@outputs',outputs);
            gateway=strrep(gateway,'@functionName',functionName);
            gateway=strrep(gateway,'@inputs',inputs);
            gateway=strrep(gateway,'@inputArgStr',inArgsStr);
            gateway=strrep(gateway,'[] = ','');
            gateway=strrep(gateway,'\n',char(10));
        end
    end

    methods

        function[gatewayFcnName,inputArgNames,outputArgNames]=createGateWay(this,caller,callee,inplaceGateway,projectDir,coderConstIndices,coderConstVals)
            [inputArgNames,outputArgNames]=coder.internal.Float2FixedConverter.getFcnInterface(callee);

            inArgsStr=buildArgsStr(coderConstIndices,coderConstVals,inputArgNames);

            if~inplaceGateway

                gatewayFcnName=[callee,'_gateway'];
                gatewayCode=this.getGatewayCode(gatewayFcnName,outputArgNames,callee,inputArgNames,inArgsStr);

                fP=coder.internal.Helper.which(callee);
                [a,~,~]=fileparts(fP);


                coder.internal.Helper.changeIdInFile(coder.internal.Helper.which(caller),callee,gatewayFcnName);
                clear(caller);
            else

                fP=coder.internal.Helper.which(callee);
                [a,~,~]=fileparts(fP);
                assert(strcmp(a,projectDir),'Expecting to be project directory');

                newFcnName=[callee,'_orig'];
                coder.internal.Helper.fileCopy(fullfile(a,[callee,'.m']),fullfile(a,[newFcnName,'.m']));
                coder.internal.Helper.changeIdInFile(coder.internal.Helper.which(newFcnName),callee,newFcnName);

                gatewayFcnName=callee;

                gatewayCode=this.getGatewayCode(gatewayFcnName,outputArgNames,newFcnName,inputArgNames,inArgsStr);
            end

            coder.internal.Helper.createMATLABFile(a,gatewayFcnName,gatewayCode);



            function inArgsStr=buildArgsStr(coderConstIndices,coderConstVals,inputArgNames)
                inArgsStr='';
                for ii=1:length(inputArgNames)
                    indices=find(coderConstIndices==ii);
                    if isempty(indices)
                        strVal=inputArgNames{ii};
                    else
                        strVal=['coder.Constant(',num2str(coderConstVals{indices(1)}.Value),')'];
                    end
                    inArgsStr=[inArgsStr,strVal];
                    if ii~=length(inputArgNames)
                        inArgsStr=[inArgsStr,', '];
                    end
                end
            end
        end
    end
end
