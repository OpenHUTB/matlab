


function out=pvt_getDeclarationAndDefinitionPreview(obj,type)








    entryStruct=obj.pvt_getEntryStruct();
    cscDefn=entryStruct.StorageClass;
    msDefn=entryStruct.MemorySection;

    dCore='';
    dName='';
    ftDeclComment='<span class="comment">';feDeclComment='</span>';
    ftDefnComment='<span class="comment">';feDefnComment='</span>';
    if(isempty(cscDefn)||...
        ~(strcmp(cscDefn.DataInit,'Macro')||cscDefn.isAccessMethod))

        if isempty(cscDefn)||strcmp(cscDefn.CSCType,'Unstructured')||...
            (strcmp(cscDefn.CSCType,'Mixed')&&strcmp(cscDefn.SingleInstanceCSCType,'Unstructured'))
            dType=obj.getTK(obj.DataType);
            dName=obj.getTK(obj.DataName);
        else
            scName=cscDefn.Name;
            if strcmp(cscDefn.CSCType,'Other')
                dType=obj.getTK('OTHER_DATATYPE');
                dName=obj.getTK('OTHER_DATANAME');
            elseif strcmp(cscDefn.CSCType,'FlatStructure')||...
                (strcmp(cscDefn.CSCType,'Mixed')&&strcmp(cscDefn.SingleInstanceCSCType,'FlatStructure'))
                structDefn=cscDefn.CSCTypeAttributes;
                if structDefn.IsTypeDef
                    if structDefn.IsStructNameInstanceSpecific
                        actStructType=obj.getTK('INSTANCE_SPECIFIC_STRUCTNAME_type');
                    elseif isempty(structDefn.TypeName)
                        actStructType=obj.getTK('MISSING_TYPE');
                    else
                        actStructType=obj.resolveStructTypeToken(structDefn.TypeName,scName,obj.ModelName,'',true);
                    end
                    dType=actStructType;
                else
                    dType=[obj.getKW('struct'),' ',actStructTag];
                end

                if structDefn.IsStructNameInstanceSpecific
                    actStructName=obj.getTK('INSTANCE_SPECIFIC_STRUCTNAME');
                elseif isempty(structDefn.StructName)
                    actStructName=obj.getTK('MISSING_NAME');
                else
                    actStructName=obj.resolveStructInstanceToken(structDefn.StructName,scName,obj.ModelName,'',true);
                end

                dName=actStructName;
            else
                assert(false,'Unexpected CSCType');
            end
        end

        dAccess='';
        dDimension='';
        if~isempty(cscDefn)
            if strcmp(cscDefn.DataAccess,'Pointer')
                dAccess='*';
            end
            if~cscDefn.IsGrouped
                dDimension=obj.getTK('[DIMENSION]');
            end
        end

        dCore=[dType,' ',dAccess,dName,dDimension];

        if~isempty(msDefn)





            if msDefn.IsVolatile
                tooltipStr=message('SimulinkCoderApp:ui:PropertyVolatileIsTrue').getString;
                dCore=[obj.getPropertyPreview(tooltipStr,'kw','isVolatile','volatile'),' ',dCore];
            end

            if msDefn.IsConst
                tooltipStr=message('SimulinkCoderApp:ui:PropertyConstIsTrue').getString;
                dCore=[obj.getPropertyPreview(tooltipStr,'kw','isConst','const'),' ',dCore];
            end

            if msDefn.Qualifier
                tooltipStr=[message('SimulinkCoderApp:core:QualifierPrompt').getString,': ',msDefn.Qualifier];
                dCore=[obj.getPropertyPreview(tooltipStr,'kw','Qualifier',obj.highlightSyntax(obj.escapeHTML(msDefn.Qualifier))),...
                ' ',dCore];
            end
        end
    end







    if isempty(cscDefn)
        declTxt=[obj.getKW('extern'),' ',dCore,';'];
    elseif cscDefn.isAccessMethod
        declTxt='';
    else
        if strcmp(cscDefn.DataInit,'Macro')||strcmp(cscDefn.DataScope,'File')
            declTxt='';
        else
            declTxt=[obj.getKW('extern'),' ',dCore,';'];
            cscDeclCmt='';

            switch cscDefn.CommentSource
            case 'Default'
                cscDeclCmt='<span class="comment">/* CSC declaration comment generated by default */</span>';

            case 'Specify'
                cscDeclCmt=obj.escapeHTML(cscDefn.DeclareComment);
            end

            if~isempty(cscDeclCmt)
                declTxt=...
                [ftDeclComment,cscDeclCmt,feDeclComment,newline,declTxt];
            end
        end
    end

    if~isempty(declTxt)
        declTxt=obj.addPragmaAroundDeclOrDefn(declTxt,msDefn,dName);
    end







    if isempty(cscDefn)
        defnTxt=[dCore,';'];
    elseif cscDefn.isAccessMethod
        defnTxt='';
    elseif strcmp(cscDefn.DataScope,'Imported')

        defnTxt='';
    elseif strcmp(cscDefn.DataInit,'Macro')

        defnTxt=[obj.getPP('#define'),' ',obj.getTK('DATANAME NUMERIC_VALUE')];
    else
        addSemicolon=true;
        if strcmp(cscDefn.DataScope,'File')
            defnTxt=[obj.getKW('static'),' ',dCore];
        else
            defnTxt=dCore;
        end
        if strcmp(cscDefn.DataInit,'Static')
            tooltipStr=[message('SimulinkCoderApp:core:CoderGroupDataInitColumn').getString,': Static'];
            defnTxt=[defnTxt,' ',obj.getPropertyPreview(tooltipStr,'','DataInit','= {...}')];
        elseif strcmp(cscDefn.DataInit,'Auto')
            addSemicolon=false;
            isParameter=cscDefn.DataUsage.isParameter;
            isSignal=cscDefn.DataUsage.isSignal;
            tooltipStr=[message('SimulinkCoderApp:core:CoderGroupDataInitColumn').getString,': Auto'];
            prevTxt=defnTxt;
            defnTxt='';
            if isParameter||isSignal
                if isParameter
                    defnTxt=[defnTxt,'<span>',message('SimulinkCoderApp:core:CoderGroupDataInitForParameters').getString,':</span>','<br />','&nbsp &nbsp &nbsp',prevTxt];
                    defnTxt=[defnTxt,' ',obj.getPropertyPreview(tooltipStr,'','DataInit','= {...}'),';','<br />'];
                end
                if isSignal
                    defnTxt=[defnTxt,'<span>',message('SimulinkCoderApp:core:CoderGroupDataInitForSignals').getString,':</span>','<br />','&nbsp &nbsp &nbsp',prevTxt];
                    defnTxt=[defnTxt,'',obj.getPropertyPreview(tooltipStr,'','DataInit',''),';','<br />'];
                end
            else
                defnTxt=[prevTxt,'',obj.getPropertyPreview(tooltipStr,'','DataInit',''),';'];
            end
        end
        if addSemicolon
            defnTxt=[defnTxt,';'];
        end
    end

    if~isempty(cscDefn)&&~isempty(defnTxt)
        cscDefnCmt='';

        switch cscDefn.CommentSource
        case 'Default'
            cscDefnCmt='<span class="comment">/* CSC definition comment generated by default */</span>';

        case 'Specify'
            cscDefnCmt=obj.escapeHTML(cscDefn.DefineComment);
        end

        if~isempty(cscDefnCmt)
            defnTxt=...
            [ftDefnComment,cscDefnCmt,feDefnComment,newline,defnTxt];
        end
    end

    defnTxt=obj.addPragmaAroundDeclOrDefn(defnTxt,msDefn,dName);
    if strcmp(type,'Declaration')
        out=declTxt;
    elseif strcmp(type,'Definition')
        out=defnTxt;
    else
        out='';
    end
end



