










classdef XmlOptionsAdapter<handle

    properties(Constant,Access=private)







        PropsMap=containers.Map(...
        {...
        'XmlOptionsSource',...
        'ComponentPackage',...
        'InternalBehaviorQualifiedName',...
        'ImplementationQualifiedName',...
        'ImplementationTypeReference',...
        'SwCalibrationAccessDefault',...
        'CompuMethodDirection',...
        'ApplicationDataTypePackage',...
        'PlatformDataTypePackage',...
        'UsePlatformTypeReferences',...
        'NativeDeclaration',...
        'DataTypeMappingPackage',...
        'ConstantSpecificationPackage',...
        'SwBaseTypePackage',...
        'DataConstraintPackage',...
        'InternalDataConstraintPackage',...
        'InternalDataConstraintExport',...
        'SystemConstantPackage',...
        'PostBuildCriterionPackage',...
        'SwAddressMethodPackage',...
        'ModeDeclarationGroupPackage',...
        'CompuMethodPackage',...
        'UnitPackage',...
        'SwRecordLayoutPackage',...
        'MoveElements',...
        'CanBeInvokedConcurrentlyDiagnostic',...
        'ExportPropagatedVariantConditions',...
        'IdentifyServiceInstance',...
        'TimingPackage',...
        'SystemPackage',...
        'ExportSwRecordLayoutAnnotationsOnAdminData',...
        'ExportLookupTableApplicationValueSpecification',...
'SchemaVersion'...
        },...
        {...
        autosar.mm.util.XmlOption('XmlOptionsSource',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {char(autosar.mm.util.XmlOptionsSourceEnum.Inlined),...
        char(autosar.mm.util.XmlOptionsSourceEnum.Inherit)},...
        char(autosar.mm.util.XmlOptionsSourceEnum.Inlined),...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('ComponentPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},...
        autosar.mm.util.XmlOptionsDefaultPackages.ComponentsPackage,...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('InternalBehaviorQualifiedName',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsQualifiedName},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('ImplementationQualifiedName',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsQualifiedName},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('ImplementationTypeReference',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'Allowed','NotAllowed'},...
        'Allowed',...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('SwCalibrationAccessDefault',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'ReadWrite','ReadOnly','NotAccessible'},...
        'ReadWrite',...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('CompuMethodDirection',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'InternalToPhys','PhysToInternal','Bidirectional'},...
        'InternalToPhys',...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false),...
        autosar.mm.util.XmlOption('ApplicationDataTypePackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('PlatformDataTypePackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XMLOptionsPlatformTypesUtils.verifyXmlOptionsPackage,@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},'',...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('UsePlatformTypeReferences',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'PlatformTypeReference','BaseTypeReference'},...
        'BaseTypeReference',...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false),...
        autosar.mm.util.XmlOption('NativeDeclaration',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'PlatformTypeName','CIntegralTypeName'},...
        'PlatformTypeName',...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false),...
        autosar.mm.util.XmlOption('DataTypeMappingPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('ConstantSpecificationPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('SwBaseTypePackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('DataConstraintPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('InternalDataConstraintPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('InternalDataConstraintExport',...
        autosar.mm.util.XmlOption.Logical,...
        {},...
        {true,false},...
        false,...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('SystemConstantPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('PostBuildCriterionPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('SwAddressMethodPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('ModeDeclarationGroupPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('CompuMethodPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('UnitPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('SwRecordLayoutPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        true),...
        autosar.mm.util.XmlOption('MoveElements',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'All','None','Alert'},...
        'All',...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('CanBeInvokedConcurrentlyDiagnostic',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'Error','Warning'},...
        'Error',...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('ExportPropagatedVariantConditions',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'None','All'},...
        'All',...
        autosar.mm.util.XmlOptionVisibilityEnum.All,...
        false),...
        autosar.mm.util.XmlOption('IdentifyServiceInstance',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        {'InstanceIdentifier','InstanceSpecifier'},...
        'InstanceIdentifier',...
        autosar.mm.util.XmlOptionVisibilityEnum.Adaptive,...
        false),...
        autosar.mm.util.XmlOption('TimingPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},{},...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        true),...
        autosar.mm.util.XmlOption('SystemPackage',...
        autosar.mm.util.XmlOption.String,...
        {@autosar.mm.util.XmlOption.verifyXmlOptionsPackage},...
        {},...
        autosar.mm.util.XmlOptionsDefaultPackages.SystemPackage,...
        autosar.mm.util.XmlOptionVisibilityEnum.Composition,...
        true),...
        autosar.mm.util.XmlOption('ExportSwRecordLayoutAnnotationsOnAdminData',...
        autosar.mm.util.XmlOption.Logical,...
        {},...
        {true,false},...
        false,...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false),...
        autosar.mm.util.XmlOption('ExportLookupTableApplicationValueSpecification',...
        autosar.mm.util.XmlOption.Logical,...
        {},...
        {true,false},...
        true,...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false),...
        autosar.mm.util.XmlOption('SchemaVersion',...
        autosar.mm.util.XmlOption.Enumeration,...
        {},...
        arxml.getSupportedSchemaVersions(),...
        arxml.getDefaultSchemaVersion(),...
        autosar.mm.util.XmlOptionVisibilityEnum.Classic,...
        false)...
        });
    end

    properties(Hidden,Constant)

        ComponentSpecificXmlOptions={'ImplementationQualifiedName','InternalBehaviorQualifiedName'};
    end

    methods(Static)




        function propValue=get(m3iObj,propName,lookInRefModels)
            import autosar.mm.util.XmlOptionsAdapter;
            import autosar.mm.util.XmlOption;

            assert(XmlOptionsAdapter.PropsMap.isKey(propName),...
            'Unexpected property name for XmlOptionsAdapter.');

            if nargin<3

                lookInRefModels=true;
            end

            if~slfeature('AUTOSARPlatformTypesRefAndNativeDecl')
                switch(propName)
                case 'PlatformDataTypePackage'
                    propValue='';
                    return;
                case 'UsePlatformTypeReferences'
                    propValue='BaseTypeReference';
                    return;
                case 'NativeDeclaration'
                    propValue='PlatformTypeName';
                    return;
                end
            end

            if any(strcmp(propName,XmlOptionsAdapter.ComponentSpecificXmlOptions))
                assert(isa(m3iObj,'Simulink.metamodel.arplatform.component.Component'));
            else
                assert(isa(m3iObj,'Simulink.metamodel.arplatform.common.AUTOSAR'));
            end

            option=XmlOptionsAdapter.PropsMap(propName);
            if strcmp(option.getType(),XmlOption.Double)
                extraInfo=XmlOptionsAdapter.getExtraExternalToolInfo(...
                m3iObj,propName,lookInRefModels);
            elseif strcmp(option.getType(),XmlOption.Logical)
                extraInfo=XmlOptionsAdapter.getExtraExternalToolInfo(...
                m3iObj,propName,lookInRefModels);
                if~isempty(extraInfo.Value)
                    if strcmp(extraInfo.Value,'true')
                        extraInfo.Value=true;
                    elseif strcmp(extraInfo.Value,'false')
                        extraInfo.Value=false;
                    else
                        assert(false,'Unexpected value.');
                    end
                end
            else
                extraInfo=XmlOptionsAdapter.getExtraExternalToolInfo(...
                m3iObj,propName,lookInRefModels);
            end
            propValue=extraInfo.Value;
            propType=extraInfo.Type;

            if isempty(propValue)&&isempty(propType)
                defValue=option.getDefaultValue();
                if~isempty(defValue)
                    propValue=defValue;
                end
            end
        end




        function set(m3iObj,propName,propValue,moveElementsMode)
            import autosar.mm.util.XmlOptionsAdapter;
            import autosar.mm.util.XmlOption;
            import autosar.mm.Model;
            import autosar.api.Utils;
            if nargin==3
                moveElementsMode='All';
            end
            toolId=['ARXML_',propName];
            assert(XmlOptionsAdapter.PropsMap.isKey(propName));

            if any(strcmp(propName,XmlOptionsAdapter.ComponentSpecificXmlOptions))
                assert(isa(m3iObj,'Simulink.metamodel.arplatform.component.Component'));
            else
                assert(isa(m3iObj,'Simulink.metamodel.arplatform.common.AUTOSAR'));
            end

            option=XmlOptionsAdapter.PropsMap(propName);


            common='Simulink.metamodel.arplatform.common';
            tp='Simulink.metamodel.types';
            variant='Simulink.metamodel.arplatform.variant';

            srcPkg=XmlOptionsAdapter.get(m3iObj,propName);
            if~isempty(srcPkg)&&~strcmp(moveElementsMode,'None')
                if strcmp(propName,'DataTypeMappingPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[common,'.DataTypeMappingSet'],moveElementsMode);
                elseif strcmp(propName,'DataConstraintPackage')
                    Utils.moveDataConstrs(m3iObj,srcPkg,propValue,true,moveElementsMode);
                elseif strcmp(propName,'InternalDataConstraintPackage')
                    Utils.moveDataConstrs(m3iObj,srcPkg,propValue,false,moveElementsMode);
                elseif strcmp(propName,'SwAddressMethodPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[common,'.SwAddrMethod'],moveElementsMode);
                elseif strcmp(propName,'ModeDeclarationGroupPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[common,'.ModeDeclarationGroup'],moveElementsMode);
                elseif strcmp(propName,'CompuMethodPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[tp,'.CompuMethod'],moveElementsMode);
                elseif strcmp(propName,'UnitPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[tp,'.Unit'],moveElementsMode);
                elseif strcmp(propName,'ConstantSpecificationPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[tp,'.ConstantSpecification'],moveElementsMode);
                elseif strcmp(propName,'SystemConstantPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[variant,'.SystemConst'],moveElementsMode);
                elseif strcmp(propName,'PostBuildCriterionPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[variant,'.PostBuildVariantCriterion'],moveElementsMode);
                elseif strcmp(propName,'ApplicationDataTypePackage')
                    Utils.moveAppDataTypes(m3iObj,srcPkg,propValue,moveElementsMode);
                elseif strcmp(propName,'SwBaseTypePackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[tp,'.SwBaseType'],moveElementsMode);
                elseif strcmp(propName,'SwRecordLayoutPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,[tp,'.SwRecordLayout'],moveElementsMode);
                elseif strcmp(propName,'TimingPackage')
                    Utils.moveElementsByClassName(m3iObj,...
                    srcPkg,propValue,...
                    'Simulink.metamodel.arplatform.timingExtension.TimingExtension',moveElementsMode);
                end
            end

            if slfeature('AUTOSARPlatformTypesRefAndNativeDecl')&&strcmp(propName,'PlatformDataTypePackage')&&...
                ~strcmp(moveElementsMode,'None')
                autosar.mm.util.XMLOptionsPlatformTypesUtils.movePlatformDataTypes(m3iObj,propValue);
            end

            if strcmp(option.getType(),XmlOption.Double)
                Model.setExtraExternalToolInfo(m3iObj,...
                toolId,...
                {'%f','%s'},...
                {propValue,option.getType()});
            elseif strcmp(option.getType(),XmlOption.Logical)
                if propValue==true
                    val='true';
                else
                    val='false';
                end
                Model.setExtraExternalToolInfo(m3iObj,...
                toolId,...
                {'%s','%s'},...
                {val,option.getType()});

            elseif~strcmp(propName,'MoveElements')
                Model.setExtraExternalToolInfo(m3iObj,...
                toolId,...
                {'%s','%s'},...
                {propValue,option.getType()});
            end
        end

        function verify(m3iObj,propName,propValue)



            import autosar.mm.util.XmlOptionsAdapter;
            option=XmlOptionsAdapter.PropsMap(propName);
            curValue=XmlOptionsAdapter.get(m3iObj,propName);
            option.verify(propValue,curValue,m3iObj.modelM3I);
        end




        function etiOptions=getValidProperties(m3iModelContext)
            narginchk(0,1);

            etiOptions=autosar.mm.util.XmlOptionsAdapter.PropsMap.keys();

            if nargin==1



                validIdx=cellfun(@(x)autosar.mm.util.XmlOptionsAdapter.isVisibleProperty(x,m3iModelContext),etiOptions);
                etiOptions=etiOptions(validIdx);
            end
        end



        function pkgPropNames=getXmlOptionNamesForPackages(m3iModelContext)

            if m3iModelContext.isContextMappedToAdaptiveApplication()
                filterVisibility=[autosar.mm.util.XmlOptionVisibilityEnum.Composition,...
                autosar.mm.util.XmlOptionVisibilityEnum.Classic];
            elseif m3iModelContext.isContextMappedToComposition()
                filterVisibility=autosar.mm.util.XmlOptionVisibilityEnum.Adaptive;
            else
                filterVisibility=[autosar.mm.util.XmlOptionVisibilityEnum.Composition,...
                autosar.mm.util.XmlOptionVisibilityEnum.Adaptive];
            end
            allXmlOptions=autosar.mm.util.XmlOptionsAdapter.PropsMap.values();
            allPropNames=autosar.mm.util.XmlOptionsAdapter.PropsMap.keys();
            pkgPropNames=allPropNames(cellfun(@(x)isRelevantXmlPkgOption(x,filterVisibility),allXmlOptions));

            function isRelevant=isRelevantXmlPkgOption(option,filterVisibility)
                isRelevant=option.isPackage&&all(arrayfun(@(x)option.visibility~=x,filterVisibility));
            end

        end




        function result=isProperty(propName)
            import autosar.mm.util.XmlOptionsAdapter;
            result=XmlOptionsAdapter.PropsMap.isKey(propName);
        end





        function result=isVisibleProperty(propName,m3iModelContext)
            import autosar.mm.util.XmlOptionsAdapter;
            result=XmlOptionsAdapter.isProperty(propName);
            if result

                if strcmp(propName,'PostBuildCriterionPackage')&&...
                    ~slfeature('AUTOSARPostBuildVariant')

                    result=false;
                    return;
                end

                if strcmp(propName,'ExportLookupTableApplicationValueSpecification')&&...
                    ~slfeature('AUTOSARLUTRecordValueSpec')
                    result=false;
                    return;
                end

                if(strcmp(propName,'PlatformDataTypePackage')||...
                    strcmp(propName,'UsePlatformTypeReferences')||...
                    strcmp(propName,'NativeDeclaration'))&&...
                    ~slfeature('AUTOSARPlatformTypesRefAndNativeDecl')
                    result=false;
                    return;
                end

                if strcmp(propName,'SchemaVersion')&&...
                    ~isa(m3iModelContext,'autosar.api.internal.M3IModelDictionaryContext')

                    result=false;
                    return;
                end

                if m3iModelContext.isContextMappedToAdaptiveApplication()
                    relevantVisibility=[autosar.mm.util.XmlOptionVisibilityEnum.All,...
                    autosar.mm.util.XmlOptionVisibilityEnum.Adaptive];
                elseif m3iModelContext.isContextMappedToComposition()
                    relevantVisibility=[autosar.mm.util.XmlOptionVisibilityEnum.All,...
                    autosar.mm.util.XmlOptionVisibilityEnum.Composition,...
                    autosar.mm.util.XmlOptionVisibilityEnum.Classic];
                else
                    relevantVisibility=[autosar.mm.util.XmlOptionVisibilityEnum.All,...
                    autosar.mm.util.XmlOptionVisibilityEnum.Classic];
                end
                option=XmlOptionsAdapter.PropsMap(propName);
                result=result&&...
                any(option.getVisibility()==relevantVisibility);
            end
        end

        function result=getEnumPropertyValues(propName)
            import autosar.mm.util.XmlOptionsAdapter;
            import autosar.mm.util.XmlOption;
            result=[];
            prop=XmlOptionsAdapter.PropsMap(propName);
            if strcmp(prop.getType(),XmlOption.Enumeration)
                result=prop.getAllowedValues();
            end
        end
    end

    methods(Static,Access=private)


        function extraInfo=getExtraExternalToolInfo(m3iObj,propName,lookInRefModels)
            import autosar.mm.util.XmlOptionsAdapter;

            m3iObjForExtToolInfo=XmlOptionsAdapter.getM3IObjectForExtToolInfo(...
            m3iObj,propName,lookInRefModels);

            toolId=['ARXML_',propName];
            extraInfo=autosar.mm.Model.getExtraExternalToolInfo(...
            m3iObjForExtToolInfo,toolId,{'Value','Type'},{'%s','%s'});
        end

        function m3iActObj=getM3IObjectForExtToolInfo(m3iObj,propName,lookInRefModels)

            import autosar.mm.util.XmlOptionsAdapter;

            m3iActObj=m3iObj;










            isAUTOSARArchModel=autosar.composition.Utils.isAUTOSARArchModel(m3iObj.rootModel);
            if lookInRefModels&&~isAUTOSARArchModel
                isRefSharedDict=autosar.dictionary.Utils.hasReferencedModels(m3iObj.rootModel);
                if isRefSharedDict&&...
                    ~any(strcmp(propName,XmlOptionsAdapter.ComponentSpecificXmlOptions))&&...
                    ~strcmp(propName,'TimingPackage')
                    sharedM3IModel=autosar.dictionary.Utils.getUniqueReferencedModel(m3iObj.rootModel);
                    m3iActObj=Simulink.metamodel.arplatform.ModelFinder.findPeerObjectInOtherModel(...
                    m3iObj,sharedM3IModel);
                end
            end
        end
    end
end




