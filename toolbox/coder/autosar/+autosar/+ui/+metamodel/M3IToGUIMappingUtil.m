classdef M3IToGUIMappingUtil







    properties(Constant,Access=private)

        MetaClassToRootLevelTreeNodeMap=containers.Map({...
        autosar.ui.metamodel.PackageString.ComponentsCell{1},...
        autosar.ui.metamodel.PackageString.ComponentsCell{2},...
        autosar.ui.metamodel.PackageString.ComponentsCell{3},...
        autosar.ui.metamodel.PackageString.ComponentsCell{4},...
        autosar.ui.metamodel.PackageString.InterfacesCell{1},...
        autosar.ui.metamodel.PackageString.InterfacesCell{2},...
        autosar.ui.metamodel.PackageString.InterfacesCell{3},...
        autosar.ui.metamodel.PackageString.InterfacesCell{4},...
        autosar.ui.metamodel.PackageString.InterfacesCell{5},...
        autosar.ui.metamodel.PackageString.InterfacesCell{6},...
        autosar.ui.metamodel.PackageString.InterfacesCell{7},...
        autosar.ui.metamodel.PackageString.InterfacesCell{8},...
        autosar.ui.metamodel.PackageString.CompuMethodClass,...
        autosar.ui.metamodel.PackageString.SwAddrMethodClass},...
        {autosar.ui.metamodel.PackageString.AtomicComponentsNodeName,...
        autosar.ui.metamodel.PackageString.ParameterComponentsNodeName,...
        autosar.ui.metamodel.PackageString.CompositionComponentsNodeName,...
        autosar.ui.metamodel.PackageString.AdaptiveApplicationsNodeName,...
        autosar.ui.metamodel.PackageString.InterfacesNodeName,...
        autosar.ui.metamodel.PackageString.ClientServerInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.ModeSwitchInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.TriggerInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.ParameterInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.NvDataInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.ServiceInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.PersistencyKeyValueInterfacesNodeName,...
        autosar.ui.metamodel.PackageString.CompuMethods,...
        autosar.ui.metamodel.PackageString.SwAddrMethods});

        MetaClassToComponentLevelTreeNodeMap=containers.Map({...
        autosar.ui.configuration.PackageString.Ports{1},...
        autosar.ui.configuration.PackageString.Ports{2},...
        autosar.ui.configuration.PackageString.Ports{3},...
        autosar.ui.configuration.PackageString.Ports{4},...
        autosar.ui.configuration.PackageString.Ports{5},...
        autosar.ui.configuration.PackageString.Ports{6},...
        autosar.ui.configuration.PackageString.Ports{7},...
        autosar.ui.configuration.PackageString.Ports{8},...
        autosar.ui.configuration.PackageString.Ports{9},...
        autosar.ui.configuration.PackageString.Ports{10},...
        autosar.ui.configuration.PackageString.Ports{11},...
        autosar.ui.configuration.PackageString.Ports{12},...
        autosar.ui.configuration.PackageString.Ports{13},...
        autosar.ui.configuration.PackageString.Ports{14},...
        autosar.ui.configuration.PackageString.Ports{15},...
        autosar.ui.configuration.PackageString.Ports{16},...
        autosar.ui.configuration.PackageString.Ports{17},...
        autosar.ui.configuration.PackageString.Runnables,...
        autosar.ui.configuration.PackageString.IRV,...
        autosar.ui.configuration.PackageString.ParameterData},...
        {autosar.ui.metamodel.PackageString.receiverPortsNode,...
        autosar.ui.metamodel.PackageString.senderPortsNode,...
        autosar.ui.metamodel.PackageString.clientPortsNode,...
        autosar.ui.metamodel.PackageString.ModeReceiverPortNodeName,...
        autosar.ui.metamodel.PackageString.serverPortsNode,...
        autosar.ui.metamodel.PackageString.senderReceiverPortsNode,...
        autosar.ui.metamodel.PackageString.nvReceiverPortsNode,...
        autosar.ui.metamodel.PackageString.nvSenderPortsNode,...
        autosar.ui.metamodel.PackageString.nvSenderReceiverPortsNode,...
        autosar.ui.metamodel.PackageString.ParameterReceiverPortNodeName,...
        autosar.ui.metamodel.PackageString.ModeSenderPortNodeName,...
        autosar.ui.metamodel.PackageString.TriggerReceiverPortNodeName,...
        autosar.ui.metamodel.PackageString.requiredPortsNode,...
        autosar.ui.metamodel.PackageString.providedPortsNode,...
        autosar.ui.metamodel.PackageString.persistencyProvidedPortsNode,...
        autosar.ui.metamodel.PackageString.persistencyRequiredPortsNode,...
        autosar.ui.metamodel.PackageString.persistencyProvidedRequiredPortsNode,...
        autosar.ui.metamodel.PackageString.runnableNode,...
        autosar.ui.metamodel.PackageString.irvNode,...
        autosar.ui.metamodel.PackageString.parameterNode});

        MetaClassToClassicInterfaceLevelTreeNodeMap=containers.Map({...
        autosar.ui.configuration.PackageString.Operation,...
        autosar.ui.configuration.PackageString.ParameterData,...
        autosar.ui.configuration.PackageString.DataElement,...
        autosar.ui.configuration.PackageString.Triggers},...
        {autosar.ui.metamodel.PackageString.operationsNode,...
        autosar.ui.metamodel.PackageString.dataElementsNode,...
        autosar.ui.metamodel.PackageString.dataElementsNode,...
        autosar.ui.metamodel.PackageString.triggerNode});

        MetaClassToAdaptiveInterfaceLevelTreeNodeMap=containers.Map({...
        autosar.ui.configuration.PackageString.Operation,...
        autosar.ui.configuration.PackageString.DataElement,...
        autosar.ui.configuration.PackageString.SymbolProps,...
        'Simulink.metamodel.arplatform.interface.FieldData',...
        'Simulink.metamodel.arplatform.interface.PersistencyData'},...
        {autosar.ui.metamodel.PackageString.methodsNodeName,...
        autosar.ui.metamodel.PackageString.eventsNodeName,...
        autosar.ui.metamodel.PackageString.namespacesNodeName,...
        autosar.ui.metamodel.PackageString.fieldsNodeName,...
        autosar.ui.metamodel.PackageString.dataElementsNode});
    end

    methods(Static,Access=public)
        function parentMCOS=findParentMCOSObjInTree(mcosRoot,m3iObj)


            parentMCOS=[];


            isInRootLevel=autosar.ui.metamodel.M3IToGUIMappingUtil.isInRootLevel(m3iObj);

            isInComponent=autosar.ui.metamodel.M3IToGUIMappingUtil.isInComponent(m3iObj);

            isInInterface=autosar.ui.metamodel.M3IToGUIMappingUtil.isInInterface(m3iObj);

            isArgumentData=isa(m3iObj,autosar.ui.configuration.PackageString.ArgumentData);

            isNonUIElement=autosar.ui.metamodel.M3IToGUIMappingUtil.isNonUIElement(m3iObj);


            assert(isInRootLevel+isInComponent+isInInterface+isArgumentData+isNonUIElement==1,...
            'Unexpected object categorization');


            if isInRootLevel

                isAUTOSARArchModel=strcmp(mcosRoot.HierarchicalChildren(1).Name,...
                autosar.ui.metamodel.PackageString.Preferences);


                if~isAUTOSARArchModel&&Simulink.AutosarDictionary.ModelRegistry.hasReferencedModels(mcosRoot.M3iObject)
                    rootNode=autosar.ui.metamodel.M3IToGUIMappingUtil.findDictionaryNodeFromRoot(mcosRoot);
                else
                    rootNode=mcosRoot;
                end
                hChildren=rootNode.getHierarchicalChildren;
                parentMCOS=hChildren(strcmp({hChildren.Name},...
                autosar.ui.metamodel.M3IToGUIMappingUtil.MetaClassToRootLevelTreeNodeMap(m3iObj.MetaClass.qualifiedName)));
            elseif isInComponent
                isCompositionSubDomain=strcmp(mcosRoot.HierarchicalChildren(1).Name,...
                autosar.ui.metamodel.PackageString.InterfacesNodeName);
                if isCompositionSubDomain


                    parentMCOS=[];
                else
                    hChildren=mcosRoot.HierarchicalChildren(1).HierarchicalChildren(1).HierarchicalChildren;
                    parentMCOS=hChildren(strcmp({hChildren.Name},...
                    autosar.ui.metamodel.M3IToGUIMappingUtil.MetaClassToComponentLevelTreeNodeMap(m3iObj.MetaClass.qualifiedName)));
                end
            elseif isInInterface


                m3iInterface=m3iObj.containerM3I.asMutable;

                if autosar.dictionary.Utils.isSharedM3IModel(m3iInterface.rootModel)&&...
                    (isa(m3iInterface,'Simulink.metamodel.arplatform.interface.SenderReceiverInterface')||...
                    isa(m3iInterface,'Simulink.metamodel.arplatform.interface.ModeSwitchInterface')||...
                    isa(m3iInterface,'Simulink.metamodel.arplatform.interface.NvDataInterface'))

                    return
                end

                interfacesMCOS=autosar.ui.metamodel.M3IToGUIMappingUtil.findParentMCOSObjInTree(mcosRoot,m3iInterface);


                hChildren=interfacesMCOS.HierarchicalChildren;




                hChildren=hChildren(hChildren.isvalid);
                matchingChildIndex=...
                arrayfun(@(x)eq(x,m3iInterface),[hChildren.M3iObject]);
                parentInterfaceMCOS=hChildren(matchingChildIndex);
                if isempty(parentInterfaceMCOS)

                    return;
                end





                if isa(m3iInterface,'Simulink.metamodel.arplatform.interface.ServiceInterface')||...
                    isa(m3iInterface,'Simulink.metamodel.arplatform.interface.PersistencyKeyValueInterface')
                    interfaceElementMap=autosar.ui.metamodel.M3IToGUIMappingUtil.MetaClassToAdaptiveInterfaceLevelTreeNodeMap;
                else
                    interfaceElementMap=autosar.ui.metamodel.M3IToGUIMappingUtil.MetaClassToClassicInterfaceLevelTreeNodeMap;
                end
                hChildren=parentInterfaceMCOS.HierarchicalChildren;
                parentMCOS=hChildren(strcmp({hChildren.Name},...
                interfaceElementMap(m3iObj.MetaClass.qualifiedName)));
            elseif isArgumentData




                m3iContainer=m3iObj.containerM3I.asMutable;
                containersMCOS=autosar.ui.metamodel.M3IToGUIMappingUtil.findParentMCOSObjInTree(mcosRoot,m3iContainer);
                if isempty(containersMCOS)

                    return;
                end

                hChildren=containersMCOS.HierarchicalChildren;


                hChildren=hChildren(hChildren.isvalid);
                parentContainerMCOS=hChildren(strcmp({hChildren.Name},...
                m3iContainer.Name));
                if isempty(parentContainerMCOS)

                    return;
                end
                hChildren=parentContainerMCOS.HierarchicalChildren;
                parentMCOS=hChildren(strcmp({hChildren.Name},...
                'Arguments'));
            elseif isNonUIElement



            end
        end

        function objectMCOS=findMCOSObjInTree(mcosRoot,m3iObj,newQName)



            objectMCOS=[];

            parentMCOS=autosar.ui.metamodel.M3IToGUIMappingUtil.findParentMCOSObjInTree(mcosRoot,m3iObj);
            if isempty(parentMCOS)

                return;
            end

            hChildren=[parentMCOS.HierarchicalChildren,parentMCOS.Children];
            hChildren=hChildren(hChildren.isvalid);
            objectMCOS=hChildren(strcmp({hChildren.Name},m3iObj.Name));
            if isa(m3iObj,'Simulink.metamodel.arplatform.interface.PortInterface')









                nodesQNames=cellfun(@(x)autosar.api.Utils.getQualifiedName(x),...
                {objectMCOS.M3iObject},'UniformOutput',false);
                objectMCOS=objectMCOS(...
                cellfun(@(x)isequal(x,newQName),nodesQNames));
            end
        end

        function dictNode=findDictionaryNodeFromRoot(mcosRoot)
            topNodes=mcosRoot.HierarchicalChildren;
            isSharedDictNode=arrayfun(@(x)isDictionaryNode(x),topNodes);
            assert(sum(isSharedDictNode)==1,'Expected to find exactly 1 dict node');
            dictNode=topNodes(isSharedDictNode);
        end
    end

    methods(Static,Access=private)
        function isInRootLevelElement=isInRootLevel(m3iObj)





            isInterface=isa(m3iObj,'Simulink.metamodel.arplatform.interface.PortInterface');

            isComponent=isa(m3iObj,'Simulink.metamodel.arplatform.component.Component');

            isInRootLevelElement=isInterface||isComponent||...
            isa(m3iObj,...
            autosar.ui.metamodel.PackageString.SwAddrMethodClass)||...
            isa(m3iObj,...
            autosar.ui.metamodel.PackageString.CompuMethodClass);
        end

        function isInComponent=isInComponent(m3iObj)






            isPort=isa(m3iObj,'Simulink.metamodel.arplatform.port.Port');

            isInComponent=(isPort&&...
            ~isa(m3iObj,'Simulink.metamodel.arplatform.port.ParameterSenderPort'))||...
            isa(m3iObj,autosar.ui.configuration.PackageString.Runnables)||...
            isa(m3iObj,autosar.ui.configuration.PackageString.IRV)||...
            (isa(m3iObj,autosar.ui.configuration.PackageString.ParameterData)...
            &&~isa(m3iObj.containerM3I,'Simulink.metamodel.arplatform.interface.ParameterInterface'));
        end

        function isInInterface=isInInterface(m3iObj)




            isInInterface=isa(m3iObj,...
            autosar.ui.configuration.PackageString.Operation)||...
            (isa(m3iObj,autosar.ui.configuration.PackageString.ParameterData)&&...
            isa(m3iObj.containerM3I,'Simulink.metamodel.arplatform.interface.ParameterInterface'))||...
            (isa(m3iObj,autosar.ui.configuration.PackageString.PersistencyData)&&...
            isa(m3iObj.containerM3I,'Simulink.metamodel.arplatform.interface.PersistencyKeyValueInterface'))||...
            (isa(m3iObj,autosar.ui.configuration.PackageString.DataElement)&&...
            ~isa(m3iObj.containerM3I,'Simulink.metamodel.arplatform.behavior.ApplicationComponentBehavior'))||...
            isa(m3iObj,autosar.ui.configuration.PackageString.Triggers)||...
            isa(m3iObj,autosar.ui.configuration.PackageString.SymbolProps)||...
            isa(m3iObj,'Simulink.metamodel.arplatform.interface.FieldData');
        end

        function isNonUIElement=isNonUIElement(m3iObj)


            isNonUIElement=...
            isa(m3iObj,'Simulink.metamodel.arplatform.interface.ModeDeclarationGroupElement')||...
            isa(m3iObj,'Simulink.metamodel.arplatform.behavior.Event')||...
            isa(m3iObj,'Simulink.metamodel.arplatform.behavior.ApplicationComponentBehavior')||...
            isa(m3iObj,'Simulink.metamodel.arplatform.composition.ComponentPrototype')||...
            isa(m3iObj,'Simulink.metamodel.arplatform.port.ParameterSenderPort');
        end
    end
end


