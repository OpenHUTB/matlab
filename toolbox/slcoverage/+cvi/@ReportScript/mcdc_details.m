function mcdc_details(this,blkEntry,cvstruct,options,mcdcIdx)







    if options.elimFullCovDetails&&...
        ~isempty(blkEntry.mcdc)&&all(blkEntry.mcdc.flags.fullCoverage)
        return;
    end


    if(~isempty(blkEntry.mcdc)&&isfield(blkEntry.mcdc,'mcdcIndex')&&...
        ~isempty(blkEntry.mcdc.mcdcIndex))
        mcdcData=cvstruct.mcdcentries(blkEntry.mcdc.mcdcIndex);
        if nargin<5
            mcdcIdx=1:numel(blkEntry.mcdc.mcdcIndex);
        end
    else
        return;
    end

    if isfield(blkEntry.mcdc,'decisionIdx')
        numDecisions=length(blkEntry.mcdc.mcdcIndex);
    else
        numDecisions=0;
    end

    mcdcData=collapse_mcdcs(mcdcData);

    testCnt=length(cvstruct.tests);
    if testCnt==1
        coumnCnt=1;
    else
        coumnCnt=testCnt+1;
    end


    if options.cumulativeReport
        coumnCnt=testCnt;
    end





    tableInfo.table='border="1" cellpadding="5"';
    tableInfo.cols=struct('align','"left"','width',250);
    tableInfo.cols(2)=struct('align','"center"','width',70);
    tableInfo.imageDir=options.imageSubDirectory;

    if testCnt>1
        execData={{'ForN',coumnCnt,...
        {'#trueCombo','@1'},...
        {'If',{'RpnExpr','#isPositiveOnly','!'},...
        {'#falseCombo','@1'}...
        }...
        }...
        };
    else
        execData={{'Cat',{'#trueCombo',1},'#linkStrTrue'},...
        {'If',{'RpnExpr','#isPositiveOnly','!'},...
        {'Cat',{'#falseCombo',1},'#linkStrFalse'}...
        }...
        };
    end

    [notUsedMark{1:coumnCnt}]=deal({'Cat','$-'});

    spanFloatLeft='$<span style="float:left">';
    spanFloatRight='$<span style="float:right">';
    spanCloseTag='$</span>';

    condEntry={'ForEach','#predicate',...
    {'If',{'RpnExpr','#isActive','!'},...
    {'&in_startcolor',options.varSizeColor},...
    {'Cat',spanFloatLeft,'$&#160; &#160; &#160; ','#text',spanCloseTag},...
    notUsedMark{:},...
    {'If',{'RpnExpr','#isPositiveOnly','!'},...
    notUsedMark{:}...
    },...
    {'&in_endcolor'},...
    'Else',...
    {'If',{'RpnExpr',{'#achieved',coumnCnt},'!'},...
    {'If',{'RpnExpr','#isJustified'},...
    {'&in_startcolor',options.ltBlueColor},...
    'Else',...
    {'&in_startcolor',options.redColor},...
    }...
    },...
    {'Cat',spanFloatLeft,'$&#160; &#160; &#160; ','#text',spanCloseTag,...
    spanFloatRight,'#justifyLink',spanCloseTag},...
    {'If',{'RpnExpr','#isJustifiedNotHit'},...
    {'CellFormat','#justifyRationale',2*testCnt+(testCnt~=coumnCnt),'$"center"'},...
    'Else',...
    execData{:},...
    },...
    {'If',{'RpnExpr',{'#achieved',coumnCnt},'!'},'&in_endcolor'},...
    },...
'\n'...
    };%#ok<CCAT>

    mcdcEntry={'ForEach','#.',...
    {'If',{'RpnExpr','#isActive','!'},...
    {'&in_startcolor',options.varSizeColor},...
    '#text',...
    notUsedMark{:},...
    {'If',{'RpnExpr','#isPositiveOnly','!'},...
    notUsedMark{:}...
    },...
    '\n',...
    {'&in_endcolor'},...
    'Else',...
    '#text',...
    {'If',{'RpnExpr','#isPositiveOnly'},...
    {'CellFormat','$ ',(testCnt+(testCnt~=coumnCnt))},...
    'Else',...
    {'CellFormat','$ ',2*(testCnt+(testCnt~=coumnCnt))}...
    },...
    '\n',...
    condEntry,...
    {'If',{'RpnExpr','@1',numDecisions,'<'},'&in_newrowgroup'}...
    }
    };%#ok<CCAT>
    txtFalseOut=getString(message('Slvnv:simcoverage:cvhtml:FalseOut'));
    txtTrueOut=getString(message('Slvnv:simcoverage:cvhtml:TrueOut'));

    colHead={['$<b>',getString(message('Slvnv:simcoverage:cvhtml:DecisionCondition')),'</b>'],...
    {'ForN',coumnCnt-1,...
    {'Cat','$<b>#','@1',['$ ',txtTrueOut,'</b>']},...
    {'If',{'RpnExpr','#isPositiveOnly','!'},...
    {'Cat','$<b>#','@1',['$ ',txtFalseOut,'</b>']}...
    }...
    }};
    if testCnt>1
        colHead=[colHead,{['$<b>',getString(message('Slvnv:simcoverage:cvhtml:TotalOutT')),'</b>'],...
        {'If',{'RpnExpr','#isPositiveOnly','!'},...
        ['$<b>',getString(message('Slvnv:simcoverage:cvhtml:TotalOutF')),'</b>']...
        },...
        '\n'}];
    else
        colHead=[colHead,{['$<b>',txtTrueOut,'</b>'],...
        {'If',{'RpnExpr','#isPositiveOnly','!'},...
        ['$<b>',txtFalseOut,'</b>']...
        }...
        ,'&in_newrowgroup'}];
    end

    mcdcTableTemplate=[colHead,{mcdcEntry}];


    printIt(this,'\n<br/> &#160; <b> %s </b> <br/>\n',getString(message('Slvnv:simcoverage:cvhtml:MCDCAnalysis')));

    if(length(mcdcData)==1)&&(mcdcData.cascMCDC.isCascMCDC)
        cascBlocks=mcdcData.cascMCDC.memberBlocks;

        ssidText='';
        for cascIdx=1:length(cascBlocks)
            ssid=cvi.TopModelCov.getSID(cascBlocks(cascIdx));
            ssidText=[ssidText,' ''',ssid,''''];%#ok<AGROW>
        end
        cascMcdcMemberText=getString(message('Slvnv:simcoverage:cvhtml:CascMCDCIncludedBlocks',numel(cascBlocks)));
        cascHiliteCmd=sprintf('<a href="matlab: cvi.CascMCDC.highlightCascade({%s});">%s</a>',ssidText,cascMcdcMemberText);
        printIt(this,'\n&#160; %s<br/>\n',cascHiliteCmd);
    end

    mcdcData=traceLink(this,mcdcData,options);
    mcdcData=addJustifyLink(this,mcdcData,mcdcIdx,options);

    tableStr=cvprivate('html_table',mcdcData,mcdcTableTemplate,tableInfo);
    printIt(this,'%s',tableStr);
    printIt(this,'<br/>\n\n');


    function mcdcData=traceLink(this,mcdcData,options)
        for mIdx=1:numel(mcdcData)
            predData=mcdcData(mIdx).predicate;
            for pIdx=1:numel(predData)
                isTrueIncidental=false;
                linkStrTrue=this.getTraceLink(predData(pIdx).trueExecutedIn,isTrueIncidental,options);
                mcdcData(mIdx).predicate(pIdx).linkStrTrue=linkStrTrue;

                isFalseIncidental=false;
                linkStrFalse=this.getTraceLink(predData(pIdx).falseExecutedIn,isFalseIncidental,options);
                mcdcData(mIdx).predicate(pIdx).linkStrFalse=linkStrFalse;
            end
        end

        function mcdcData=addJustifyLink(this,mcdcData,mcdcIdx,options)
            for mIdx=1:numel(mcdcData)
                cvId=mcdcData(mIdx).cvId;
                ssid=getSSID(cvId);
                predData=mcdcData(mIdx).predicate;
                for pIdx=1:numel(predData)
                    p=predData(pIdx);
                    link='';
                    rationale='-';
                    if~(mcdcData(mIdx).isJustifiedByParent)
                        if p.isJustified

                            rationale=getJustifyRationaleLink(this,cvId,pIdx);
                        elseif~p.achieved

                            mcdcInBlockIdx=mcdcIdx(mIdx);
                            descr=SlCov.FilterEditor.getMetricFilterValueDescr('mcdc',cvId,pIdx);
                            link=this.getFilterLinkForAdd(ssid,mcdcInBlockIdx,pIdx,'mcdc',descr,'',options);
                        end
                    end

                    mcdcData(mIdx).predicate(pIdx).justifyLink=link;
                    mcdcData(mIdx).predicate(pIdx).justifyRationale=rationale;
                    mcdcData(mIdx).predicate(pIdx).isJustifiedNotHit=p.isJustified&&~p.achieved(end);
                end
            end

            function mcdcData=collapse_mcdcs(mcdcData)
                [tmp{1:numel(mcdcData)}]=deal(mcdcData(:).isVariable);
                if~any(cell2mat(tmp))
                    return;
                end

                mcdcData=cvi.ReportScript.collapse_text(mcdcData);
                for i=1:numel(mcdcData)
                    mcdcData(i).predicate=cvi.ReportScript.collapse_text(mcdcData(i).predicate);
                end

                function ssid=getSSID(cvId)
                    slsfCvId=cv('get',cvId,'.slsfobj');
                    ssid='';
                    try
                        ssid=cvi.TopModelCov.getSID(slsfCvId);
                    catch MEx %#ok<NASGU>
                    end

                    function linkStr=getJustifyRationaleLink(this,cvId,predIdx)
                        slsfCvId=cv('get',cvId,'.slsfobj');
                        refIdStr=sprintf('%d_%d_%d',slsfCvId,cvId,predIdx);
                        idxStr='*';
                        if this.rationaleMap.isKey(refIdStr)
                            idxStr=this.rationaleMap(refIdStr);
                        end
                        linkStr=sprintf('<a name="ref_rationale_source_%s"></a><a href="#ref_rationale_%s"><div title="%s"/>%s</a>',...
                        refIdStr,...
                        refIdStr,...
                        getString(message('Slvnv:simcoverage:cvhtml:NavigateToJustification')),...
                        idxStr);