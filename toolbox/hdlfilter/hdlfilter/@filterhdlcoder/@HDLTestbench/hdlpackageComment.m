function hdlcode=hdlpackageComment(this,node,nname)%#ok<INUSL>





    package_suffix=hdlgetparameter('package_suffix');
    commentchars=hdlgetparameter('comment_char');
    revisiontag=hdlgetparameter('rcs_cvs_tag');
    if isempty(revisiontag)
        rcs_cvs_tag='';
    else
        rcs_cvs_tag=[revisiontag,commentchars,'\n'];
    end


    fheader=sptfileheader('','hdlfilter',commentchars,31);


    infostr=this.CommentInfo;




    if any(any(infostr>127))

        infoComment='';
    else
        info=hdlcommentfixupcbsinfo(cellstr([repmat([commentchars,' '],...
        size(infostr,1),1),infostr]),...
        commentchars);
        infoComment=[commentchars,' Filter Settings:\n',...
        commentchars,'\n',...
        sprintf('%s\n',info{:})];
    end

    optionscell=hdlfilterparameters();
    codeoptions=hdlcommentcodeoptions(optionscell,commentchars);

    separatorline=[commentchars,' ','-'*ones(1,63-length(commentchars)),'\n'];
    if isempty(node)
        hdlcode=[separatorline,commentchars,'\n'];
        if hdlgetparameter('isvhdl')
            hdlcode=[hdlcode,commentchars,' Module: ',nname,package_suffix,'\n'];
        else
            hdlcode=[hdlcode,commentchars,' Module: ',nname,'\n'];
        end
        hdlcode=[hdlcode,...
        fheader,...
        '\n',...
        rcs_cvs_tag,...
        separatorline,...
        '\n',...
        separatorline,...
        commentchars,' HDL Code Generation Options:\n',commentchars,'\n',...
        codeoptions,...
        commentchars,'\n',...
        infoComment,...
        separatorline];
    else
        hdlcode=[...
        separatorline,...
        commentchars,'\n',...
        commentchars,' Module: ',nname,this.TestBenchDataPostfix,'\n',...
        fheader,...
        '\n',...
        rcs_cvs_tag,...
        separatorline,...
        '\n'];
    end
end


