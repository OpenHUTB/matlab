classdef CompositePlot<handle









    properties
View
Budget
Parent
Layout
RectPlotPanel
RectPlotAxes
RectPlotSParamPanel
RectPlotSParamLayout
RectS11Checkbox
RectS12Checkbox
RectS21Checkbox
RectS22Checkbox
RectS11ColorCheckbox
RectS12ColorCheckbox
RectS21ColorCheckbox
RectS22ColorCheckbox
YOptionsPopup
SmithPlotPanel
SmithPlotAxes
SmithPlotSParamPanel
SmithPlotSParamLayout
SmithS11Checkbox
SmithS22Checkbox
SmithS11ColorCheckbox
SmithS22ColorCheckbox
ZYChartPopup
PolarPlotPanel
PolarPlotAxes
PolarPlotSParamPanel
PolarPlotSParamLayout
PolarS11Checkbox
PolarS12Checkbox
PolarS21Checkbox
PolarS22Checkbox
PolarS11ColorCheckbox
PolarS12ColorCheckbox
PolarS21ColorCheckbox
PolarS22ColorCheckbox
        StageVal=1;
StageSelectEdit
StageSelectLabel
StageSelectPanel
        LineStyle={'-','-','-','-'};
        TickLabels={'S11','S12','S21','S22'};
        Color=[...
        [0,0.4470,0.7410];...
        [0.8500,0.3250,0.0980];...
        [0.9290,0.6940,0.1250];...
        [0.4940,0.1840,0.5560]]
        MarkerSize=10;
        Marker='.';
S11Data
S12Data
S21Data
S22Data
Frequencies
Listeners
        S11Line=imread(...
        [fullfile('+rf','+internal','+apps','+budget'),filesep,...
        'S11img.png']);
        S12Line=imread(...
        [fullfile('+rf','+internal','+apps','+budget'),filesep,...
        'S12img.png']);
        S21Line=imread(...
        [fullfile('+rf','+internal','+apps','+budget'),filesep,...
        'S21img.png']);
        S22Line=imread(...
        [fullfile('+rf','+internal','+apps','+budget'),filesep,...
        'S22img.png']);
    end

    methods

        function self=CompositePlot(View,parent,budget)







            if isempty(budget)
                budget=rfbudget(...
                'Elements',[amplifier,nport('default.s2p')],...
                'AvailableInputPower',10,...
                'SignalBandwidth',100e6);
                budget.InputFrequency=2.1e9;
            end
            clo(parent);
            self.View=View;
            self.Parent=parent;
            self.Parent.Visible='off';
            warning('off','rf:shared:InputPower')
            self.Budget=clone(budget);
            warning('on','rf:shared:InputPower')
            self.Budget.Solver='Friis';
            createUIControl(self);
            layoutUIControl(self);
            generatePlot(self);
            addlisteners(self);
            enableListeners(self,1);
            drawnow;
            self.Parent.Visible='on';
        end


        function updatePlots(self)


            try

                validateattributes(str2num(self.StageSelectEdit.String),...
                {'numeric'},...
                {'scalar','nonnan','finite','integer',...
                'nonnegative','<=',...
                numel(self.Budget.Elements),'>',0});%#ok<ST2NM>
                self.StageVal=eval(self.StageSelectEdit.String);

                updateRectPlot(self);

                updateSmithPlot(self);

                updatePolarPlot(self);
            catch me
                self.StageSelectEdit.String=num2str(self.StageVal);
                h=errordlg(me.message,'Error','modal');
                uiwait(h);
            end
        end

        function setAxesToolbar(self)

            axtoolbar(self.RectPlotAxes,{'export',...
            'datacursor','zoomin','zoomout','restoreview'});
            ax=findall(self.SmithPlotPanel,'Type','axes');
            enableDefaultInteractivity(self.RectPlotAxes);
            axtoolbar(ax,{'export',...
            'datacursor','zoomin','zoomout','restoreview'});
            ax=findall(self.PolarPlotPanel,'Type','axes');
            axtoolbar(ax,{'export',...
            'datacursor','zoomin','zoomout','restoreview'});
        end

        function updateSmithPlot(self)


            index=[self.SmithS11Checkbox.Value,0,...
            0,self.SmithS22Checkbox.Value];
            if~any(index)
                index(1)=1;
                self.SmithS11Checkbox.Value=1;
            end
            plotData={};
            if index(1)
                plotData=[plotData,...
                {self.Frequencies,self.S11Data(:,self.StageVal)}];
            end
            if index(4)
                plotData=[plotData,...
                {self.Frequencies,self.S22Data(:,self.StageVal)}];
            end
            self.SmithPlotAxes.replace(plotData{:});
            self.SmithPlotAxes.Marker=self.Marker;
            self.SmithPlotAxes.MarkerSize=self.MarkerSize;
            self.SmithPlotAxes.ColorOrder=self.Color(logical(index),:);
            self.SmithPlotAxes.LineStyle=self.LineStyle(logical(index));
            self.SmithPlotAxes.LineWidth=2;
            self.SmithPlotAxes.LegendLabels=self.TickLabels(logical(index));
            self.SmithPlotAxes.LegendVisible=0;
            self.setSmithGrid(-1);
        end

        function updateRectPlot(self)



            index=[...
            self.RectS11Checkbox.Value,...
            self.RectS12Checkbox.Value,...
            self.RectS21Checkbox.Value,...
            self.RectS22Checkbox.Value];
            switch self.YOptionsPopup.String{self.YOptionsPopup.Value}
            case 'Magnitude (dB)'
                func=@(x)20*log10(abs(x));
                LabelName='Magnitude(dB)';
            case 'Magnitude (Linear)'
                func=@(x)abs(x);
                LabelName='Magnitude';
            case 'Phase (deg)'
                func=@(x)(180/pi)*unwrap(angle(x));
                LabelName='Phase (deg)';
            case 'Phase (rad)'
                func=@(x)unwrap(angle(x));
                LabelName='Phase (rad)';
            case 'Real'
                func=@(x)real(x);
                LabelName='Real';
            case 'Imaginary'
                func=@(x)imag(x);
                LabelName='Imaginary';
            end
            if~any(index)
                index(3)=1;
                self.RectS21Checkbox.Value=1;
            end
            plotData={};
            if index(1)
                plotData=[plotData,...
                {self.Frequencies,func(self.S11Data(:,self.StageVal))}];
            else
                plotData=[plotData,{'',''}];
            end
            if index(2)
                plotData=[plotData,...
                {self.Frequencies,func(self.S12Data(:,self.StageVal))}];
            else
                plotData=[plotData,{'',''}];
            end
            if index(3)
                plotData=[plotData,...
                {self.Frequencies,func(self.S21Data(:,self.StageVal))}];
            else
                plotData=[plotData,{'',''}];
            end
            if index(4)
                plotData=[plotData,...
                {self.Frequencies,func(self.S22Data(:,self.StageVal))}];
            else
                plotData=[plotData,{'',''}];
            end
            cla(self.RectPlotAxes)
            hold(self.RectPlotAxes,'on');
            [a,~,c]=engunits(self.Frequencies);
            freqVal=a;
            self.RectPlotAxes.XLabel.String=['Frequency (',c,'Hz)'];
            self.RectPlotAxes.YLabel.String=LabelName;
            self.RectPlotAxes.XTickLabel={...
            num2str(min(freqVal)),...
            num2str(mean([min(freqVal),mean(freqVal)])),...
            num2str(mean(freqVal)),...
            num2str(mean([max(freqVal),mean(freqVal)])),...
            num2str(max(freqVal))};
            for i=1:4
                if index(i)
                    plot(self.RectPlotAxes,...
                    freqVal',plotData{2*i},...
                    'LineStyle',self.LineStyle{i},...
                    'Color',self.Color(i,:),...
                    'Marker',self.Marker,...
                    'MarkerSize',self.MarkerSize,...
                    'LineWidth',2)
                end
            end
            l=legend(self.RectPlotAxes,self.TickLabels{logical(index)});
            l.Visible='off';
            axis(self.RectPlotAxes,'equal');
            axis(self.RectPlotAxes,'square');
            self.RectPlotAxes.XTickLabelMode='auto';
            view(self.RectPlotAxes,0,90);
            grid(self.RectPlotAxes,'on');
            hold(self.RectPlotAxes,'off');
            box(self.RectPlotAxes,'on');
            self.RectPlotAxes.Position=[0.13,0.13,0.87,0.7];
        end

        function updatePolarPlot(self)


            index=[self.PolarS11Checkbox.Value,self.PolarS12Checkbox.Value,...
            self.PolarS21Checkbox.Value,self.PolarS22Checkbox.Value];
            if~any(index)
                index(1)=1;
                self.PolarS11Checkbox.Value=1;
            end
            plotData={};
            if index(1)
                dataValue=self.S11Data(:,self.StageVal);
                mag=abs(dataValue);ang=angle(dataValue).*180/pi;
                plotData=[plotData,{ang,mag}];
            end
            if index(2)
                dataValue=self.S12Data(:,self.StageVal);
                mag=abs(dataValue);ang=angle(dataValue).*180/pi;
                plotData=[plotData,{ang,mag}];
            end
            if index(3)
                dataValue=self.S21Data(:,self.StageVal);
                mag=abs(dataValue);ang=angle(dataValue).*180/pi;
                plotData=[plotData,{ang,mag}];
            end
            if index(4)
                dataValue=self.S22Data(:,self.StageVal);
                mag=abs(dataValue);ang=angle(dataValue).*180/pi;
                plotData=[plotData,{ang,mag}];
            end
            self.PolarPlotAxes.replace(plotData{:});
            self.PolarPlotAxes.Marker=self.Marker;
            self.PolarPlotAxes.MarkerSize=self.MarkerSize;
            self.PolarPlotAxes.Interactive='off';
            self.PolarPlotAxes.ColorOrder=self.Color(logical(index),:);
            self.PolarPlotAxes.LineStyle=self.LineStyle(logical(index));
            self.PolarPlotAxes.LegendLabels=self.TickLabels(logical(index));
            self.PolarPlotAxes.LineWidth=2;
            self.PolarPlotAxes.MagnitudeLimMode='manual';
            self.PolarPlotAxes.MagnitudeLimMode='auto';
            self.PolarPlotAxes.LegendVisible=0;
        end


        function generatePlot(self)



            if numel(self.Budget.Elements)<self.StageVal
                self.StageVal=1;
                self.StageSelectEdit.String='1';
            end
            if isscalar(self.Budget.InputFrequency)
                nfreq=51;
                RF=self.Budget.InputFrequency;
                BW=self.Budget.SignalBandwidth;
                self.Frequencies=linspace(RF-BW/2,RF+BW/2,51);
                self.Budget.InputFrequency=self.Frequencies;
                computeBudget(self.Budget);
            else
                nfreq=numel(self.Budget.InputFrequency);
                self.Frequencies=self.Budget.InputFrequency;
                computeBudget(self.Budget);
            end
            nelem=numel(self.Budget.Elements);
            self.S11Data=arrayfun(@rfparam,...
            self.Budget.CascadeS,1*ones(nfreq,nelem),...
            1*ones(nfreq,nelem));
            self.S12Data=arrayfun(@rfparam,...
            self.Budget.CascadeS,1*ones(nfreq,nelem),...
            2*ones(nfreq,nelem));
            self.S21Data=arrayfun(@rfparam,...
            self.Budget.CascadeS,2*ones(nfreq,nelem),...
            1*ones(nfreq,nelem));
            self.S22Data=arrayfun(@rfparam,...
            self.Budget.CascadeS,2*ones(nfreq,nelem),...
            2*ones(nfreq,nelem));
            self.updatePlots();
        end
    end

    methods(Access=private)

        function createUIControl(self)


            self.StageSelectPanel=uipanel(...
            'Tag','StageSelectPanel',...
            'Parent',self.Parent,...
            'BorderType','none');
            if self.View.UseAppContainer
                self.StageSelectPanel=uipanel(...
                'Tag','StageSelectPanel',...
                'Parent',self.Parent);
                self.StageSelectPanel.AutoResizeChildren='off';
            else
                self.StageSelectPanel=uipanel(...
                'Tag','StageSelectPanel',...
                'Parent',self.Parent,...
                'BorderType','none');
            end
            self.StageSelectEdit=uicontrol(...
            self.StageSelectPanel,...
            'Style','edit',...
            'Tag','StageEdit',...
            'String','1',...
            'Units','normalized',...
            'Position',[0.7,0,0.3,1],...
            'Tooltip',...
            'Specify stage, up to which S-parameter composite plots are shown/calculated(Enter)');
            self.StageSelectLabel=uicontrol(...
            self.StageSelectPanel,...
            'Style','text',...
            'Tag','StageSelectLabel',...
            'String','Select cascade up to stage:',...
            'Units','normalized',...
            'Position',[0,0,0.7,1],...
            'Tooltip',...
            'Specify stage, up to which S-parameter composite plots are shown/calculated(Enter)');
            createRectUIControl(self)
            createSmithUIControl(self)
            createPolarUIControl(self)
        end

        function createSmithUIControl(self)

            if self.View.UseAppContainer
                self.SmithPlotPanel=uipanel(...
                'Tag','SmithPlotPanel',...
                'Parent',self.Parent,...
                'Title','Smith Chart');
                self.SmithPlotPanel.AutoResizeChildren='off';
            else
                self.SmithPlotPanel=uipanel(...
                'Tag','SmithPlotPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0],...
                'Title','Smith Chart');
            end
            self.SmithPlotAxes=rf.internal.smithplot(self.SmithPlotPanel);
            if self.View.UseAppContainer
                self.SmithPlotSParamPanel=uipanel(...
                'Tag','SmithPlotSParamPanel',...
                'Parent',self.Parent,...
                'tag','SmithSParametersPanel');
                self.SmithPlotSParamPanel.AutoResizeChildren='off';
            else
                self.SmithPlotSParamPanel=uipanel(...
                'Tag','SmithPlotSParamPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0],...
                'tag','SmithSParametersPanel');
            end
            self.SmithS11Checkbox=uicontrol(...
            self.SmithPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','SmithPlotS11Checkbox',...
            'String','S11',...
            'Value',1,...
            'ForegroundColor',self.Color(1,:),...
            'tag','SmithS11CheckBox');
            self.SmithS22Checkbox=uicontrol(...
            self.SmithPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','SmithPlotS22Checkbox',...
            'String','S22',...
            'ForegroundColor',self.Color(4,:),...
            'tag','SmithS22CheckBox');
            self.SmithS11ColorCheckbox=uicontrol(...
            self.SmithPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','SmithPlotS11Checkbox',...
            'CData',self.S11Line);
            self.SmithS22ColorCheckbox=uicontrol(...
            self.SmithPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','SmithPlotS22Checkbox',...
            'CData',self.S22Line);
            self.ZYChartPopup=uicontrol(...
            self.SmithPlotPanel,...
            'Style','popupmenu',...
            'String',{'Z Chart','Y Chart',...
            'YZ Chart','ZY Chart'},...
            'Units','normalized',...
            'Position',[0.05,0.85,0.3,0.1],...
            'Tag','SmithChartDropdown');
            self.SmithPlotAxes.LegendVisible=0;
        end

        function createRectUIControl(self)


            if self.View.UseAppContainer
                self.RectPlotPanel=uipanel(...
                'Tag','RectPlotPanel',...
                'Parent',self.Parent,...
                'Title','XY Plot');
                self.RectPlotPanel.AutoResizeChildren='off';
            else
                self.RectPlotPanel=uipanel(...
                'Tag','RectPlotPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0],...
                'Title','XY Plot');
            end
            self.RectPlotAxes=axes(...
            'Parent',self.RectPlotPanel,...
            'Units','normalized',...
            'Position',[0.13,0.13,0.87,0.7],...
            'Tag','RectPlotAxes');
            l=legend(self.RectPlotAxes);l.Visible='off';
            grid(self.RectPlotAxes,'on');
            if self.View.UseAppContainer
                self.RectPlotSParamPanel=uipanel(...
                'Tag','RectPlotSParamPanel',...
                'Parent',self.Parent,...
                'tag','RectSParametersPanel');
                self.RectPlotSParamPanel.AutoResizeChildren='off';
            else
                self.RectPlotSParamPanel=uipanel(...
                'Tag','RectPlotSParamPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0],...
                'tag','RectSParametersPanel');
            end
            self.RectS11Checkbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS11Checkbox',...
            'String','S11',...
            'ForegroundColor',self.Color(1,:),...
            'tag','RectS11CheckBox');
            self.RectS12Checkbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS12Checkbox',...
            'String','S12',...
            'ForegroundColor',self.Color(2,:),...
            'tag','RectS12CheckBox');
            self.RectS21Checkbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS21Checkbox',...
            'String','S21',...
            'Value',1,...
            'ForegroundColor',self.Color(3,:),...
            'tag','RectS21CheckBox');
            self.RectS22Checkbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS22Checkbox',...
            'String','S22',...
            'ForegroundColor',self.Color(4,:),...
            'tag','RectS22CheckBox');
            self.RectS11ColorCheckbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS11ColorCheckbox',...
            'CData',self.S11Line);
            self.RectS12ColorCheckbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS12ColorCheckbox',...
            'CData',self.S12Line);
            self.RectS21ColorCheckbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS21ColorCheckbox',...
            'CData',self.S21Line);
            self.RectS22ColorCheckbox=uicontrol(...
            self.RectPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','RectS22ColorCheckbox',...
            'CData',self.S22Line);
            self.YOptionsPopup=uicontrol(...
            self.RectPlotPanel,...
            'Style','popupmenu',...
            'Tag','YOptions',...
            'String',{'Magnitude (dB)',...
            'Magnitude (Linear)',...
            'Phase (deg)',...
            'Phase (rad)',...
            'Real',...
            'Imaginary'},...
            'Units','normalized',...
            'Position',[0.05,0.85,0.3,0.1]);
        end

        function createPolarUIControl(self)

            if self.View.UseAppContainer
                self.PolarPlotPanel=uipanel(...
                'Tag','PolarPlotPanel',...
                'Parent',self.Parent,...
                'Title','Polar Plot');
                self.PolarPlotPanel.AutoResizeChildren='off';
            else
                self.PolarPlotPanel=uipanel(...
                'Tag','PolarPlotPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0],...
                'Title','Polar Plot');
            end
            self.PolarPlotAxes=internal.polari(self.PolarPlotPanel);
            if self.View.UseAppContainer
                self.PolarPlotSParamPanel=uipanel(...
                'Tag','PolarSParametersPanel',...
                'Parent',self.Parent);
                self.PolarPlotSParamPanel.AutoResizeChildren='off';
            else
                self.PolarPlotSParamPanel=uipanel(...
                'Tag','PolarSParametersPanel',...
                'Parent',self.Parent,...
                'BorderType','line',...
                'BorderWidth',1,...
                'HighlightColor',[0,0,0]);
            end
            self.PolarS11Checkbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS11Checkbox',...
            'String','S11',...
            'Value',1,...
            'ForegroundColor',self.Color(1,:),...
            'tag','PolarS11CheckBox');
            self.PolarS12Checkbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS12Checkbox',...
            'String','S12',...
            'ForegroundColor',self.Color(2,:),...
            'tag','PolarS12CheckBox');
            self.PolarS21Checkbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS21Checkbox',...
            'String','S21',...
            'ForegroundColor',self.Color(3,:),...
            'tag','PolarS21CheckBox');
            self.PolarS22Checkbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS22Checkbox',...
            'String','S22',...
            'ForegroundColor',self.Color(4,:),...
            'tag','PolarS22CheckBox');
            self.PolarS11ColorCheckbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS11ColorCheckbox',...
            'CData',self.S11Line);
            self.PolarS12ColorCheckbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS12ColorCheckbox',...
            'CData',self.S12Line);
            self.PolarS21ColorCheckbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS21ColorCheckbox',...
            'CData',self.S21Line);
            self.PolarS22ColorCheckbox=uicontrol(...
            self.PolarPlotSParamPanel,...
            'Style','checkbox',...
            'Tag','PolarS22ColorCheckbox',...
            'CData',self.S22Line);
            self.PolarPlotAxes.LegendVisible=0;
        end


        function layoutUIControl(self)



            layoutRectUIControl(self)
            layoutSmithUIControl(self)
            layoutPolarUIControl(self)
            hspacing=3;
            vspacing=4;
            self.Layout=...
            matlabshared.application.layout.GridBagLayout(...
            self.Parent,...
            'VerticalGap',vspacing,...
            'HorizontalGap',hspacing,...
            'VerticalWeights',[0,1,0],...
            'HorizontalWeights',0);
            row=1;
            add(...
            self.Layout,self.StageSelectPanel,1,2,...
            'MinimumWidth',200,...
            'MinimumHeight',24,...
            'TopInset',20);
            row=row+1;
            add(...
            self.Layout,self.SmithPlotPanel,row,1,...
            'MinimumWidth',200,...
            'MinimumHeight',200,...
            'Fill','both');
            add(...
            self.Layout,self.RectPlotPanel,row,2,...
            'MinimumWidth',200,...
            'MinimumHeight',200,...
            'Fill','both');
            add(...
            self.Layout,self.PolarPlotPanel,row,3,...
            'MinimumWidth',200,...
            'MinimumHeight',200,...
            'Fill','both');
            row=row+1;
            add(...
            self.Layout,self.SmithPlotSParamPanel,row,1,...
            'MinimumWidth',200,...
            'MinimumHeight',50,...
            'Fill','both');
            add(...
            self.Layout,self.RectPlotSParamPanel,row,2,...
            'MinimumWidth',200,...
            'MinimumHeight',50,...
            'Fill','both');
            add(...
            self.Layout,self.PolarPlotSParamPanel,row,3,...
            'MinimumWidth',200,...
            'MinimumHeight',50,...
            'Fill','both');
        end

        function layoutSmithUIControl(self)

            hspacing=3;
            vspacing=4;
            self.SmithPlotSParamLayout=...
            matlabshared.application.layout.GridBagLayout(...
            self.SmithPlotSParamPanel,...
            'VerticalGap',vspacing,...
            'HorizontalGap',hspacing,...
            'VerticalWeights',0,...
            'HorizontalWeights',0);
            w2=rf.internal.apps.budget.SystemParametersSection.Width2-5;
            h=24;
            layout=self.SmithPlotSParamLayout;
            layout.add(...
            self.SmithS11Checkbox,1,1,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.SmithS22Checkbox,1,2,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.SmithS11ColorCheckbox,2,1,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.SmithS22ColorCheckbox,2,2,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
        end

        function layoutRectUIControl(self)

            hspacing=3;
            vspacing=4;
            self.RectPlotSParamLayout=...
            matlabshared.application.layout.GridBagLayout(...
            self.RectPlotSParamPanel,...
            'VerticalGap',vspacing,...
            'HorizontalGap',hspacing,...
            'VerticalWeights',0,...
            'HorizontalWeights',0);
            w2=rf.internal.apps.budget.SystemParametersSection.Width2-5;
            h=24;
            layout=self.RectPlotSParamLayout;
            layout.add(...
            self.RectS11Checkbox,1,1,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS12Checkbox,1,2,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS21Checkbox,1,3,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS22Checkbox,1,4,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS11ColorCheckbox,2,1,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS12ColorCheckbox,2,2,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS21ColorCheckbox,2,3,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.RectS22ColorCheckbox,2,4,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
        end

        function layoutPolarUIControl(self)

            hspacing=3;
            vspacing=4;
            self.PolarPlotSParamLayout=...
            matlabshared.application.layout.GridBagLayout(...
            self.PolarPlotSParamPanel,...
            'VerticalGap',vspacing,...
            'HorizontalGap',hspacing,...
            'VerticalWeights',0,...
            'HorizontalWeights',0);
            w2=rf.internal.apps.budget.SystemParametersSection.Width2-5;
            h=24;
            layout=self.PolarPlotSParamLayout;
            layout.add(...
            self.PolarS11Checkbox,1,1,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS12Checkbox,1,2,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS21Checkbox,1,3,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS22Checkbox,1,4,...
            'MinimumWidth',w2,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS11ColorCheckbox,2,1,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS12ColorCheckbox,2,2,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS21ColorCheckbox,2,3,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
            layout.add(...
            self.PolarS22ColorCheckbox,2,4,...
            'MinimumWidth',60,...
            'MinimumHeight',h);
        end


        function addlisteners(self)

            self.RectS11Checkbox.Callback=...
            @(src,evt)self.updateRectPlot();
            self.RectS12Checkbox.Callback=...
            @(src,evt)self.updateRectPlot();
            self.RectS21Checkbox.Callback=...
            @(src,evt)self.updateRectPlot();
            self.RectS22Checkbox.Callback=...
            @(src,evt)self.updateRectPlot();
            self.PolarS11Checkbox.Callback=...
            @(src,evt)self.updatePolarPlot();
            self.PolarS12Checkbox.Callback=...
            @(src,evt)self.updatePolarPlot();
            self.PolarS21Checkbox.Callback=...
            @(src,evt)self.updatePolarPlot();
            self.PolarS22Checkbox.Callback=...
            @(src,evt)self.updatePolarPlot();
            self.SmithS11Checkbox.Callback=...
            @(src,evt)self.updateSmithPlot();
            self.SmithS22Checkbox.Callback=...
            @(src,evt)self.updateSmithPlot();
            self.Listeners.StageText=addlistener(self.StageSelectEdit,...
            'String','PostSet',@(src,evt)self.updatePlots());
            dcm=datacursormode(self.Parent);
            set(dcm,'UpdateFcn',@(h,e)self.plotUpdateFcn(e))
            self.ZYChartPopup.Callback=@(h,e)self.setSmithGrid(e);
            self.YOptionsPopup.Callback=...
            @(src,evt)self.updateRectPlot();
            addlistener(self.SmithPlotAxes,'GridType','PostSet',@(h,e)self.setZYChartPopup());
        end

        function setSmithGrid(self,~)

            val=self.ZYChartPopup.String{self.ZYChartPopup.Value};
            val=strsplit(val);
            self.SmithPlotAxes.GridType=val{1};
        end

        function setZYChartPopup(self)

            self.ZYChartPopup.Value=...
            find(strcmp(strrep(self.ZYChartPopup.String,' Chart',''),...
            self.SmithPlotAxes.GridType));
        end

        function txt=plotUpdateFcn(self,e)


            AxesType=e.Target.Parent.Tag;
            p=e.Target.Parent;
            switch(AxesType)
            case 'smithplot'

                pos=get(e,...
                'Position');
                ind=get(e,'DataIndex');

                pos=pos(1)+1i*pos(2);
                [fIn,~,fInUnit]=engunits(self.Budget.InputFrequency(ind));
                [fOut,~,fOutUnit]=engunits(self.Budget.OutputFrequency(ind,self.StageVal));

                txt={...
                sprintf('Fin: %.4g %sHz',fIn,fInUnit),...
                sprintf(['Cascade: 1..',self.StageSelectEdit.String]),...
                sprintf('Fout: %.4g %sHz',fOut,fOutUnit),...
                self.getComplexStringMASmith(pos,e.Target.DisplayName)};
                switch lower(self.SmithPlotAxes.GridType)
                case{'z','y'}
                    txt{end+1}=self.getComplexStringRI(pos,self.SmithPlotAxes.GridType);
                otherwise
                    txt_temp=self.getComplexStringRI(pos,self.SmithPlotAxes.GridType);
                    txt{end+1}=txt_temp{1};
                    txt{end+1}=txt_temp{2};
                end
            case 'polari'

                pos=get(e,...
                'Position');
                ind=get(e,'DataIndex');

                fOutInd=strrep(e.Target.DisplayName,...
                internal.polariCommon.getUTFCircleChar('A'),'');
                [fIn,~,fInUnit]=engunits(self.Budget.InputFrequency(ind));
                [fOut,~,fOutUnit]=engunits(self.Budget.OutputFrequency(ind,self.StageVal));

                txt={...
                sprintf('Fin: %.4g %sHz',fIn,fInUnit),...
                sprintf(['Cascade: 1..',self.StageSelectEdit.String]),...
                sprintf('Fout: %.4g %sHz',fOut,fOutUnit),...
                self.getComplexStringMA(pos,fOutInd)};
            otherwise

                selectedyaxis=self.YOptionsPopup.String{self.YOptionsPopup.Value};
                selectedyaxis=strsplit(selectedyaxis);
                if numel(selectedyaxis)==1
                    units='';
                else
                    if strcmpi(selectedyaxis{2},'(Linear)')
                        units='';
                    else
                        units=selectedyaxis{2};
                    end
                end
                pos=get(e,...
                'Position');
                ind=get(e,'DataIndex');
                finVal=self.Frequencies(ind);
                [fIn,~,fInUnit]=engunits(finVal);
                [fOut,~,fOutUnit]=engunits(self.Budget.OutputFrequency(ind,self.StageVal));
                txt={...
                sprintf('Fin: %.4g %sHz',fIn,fInUnit),...
                sprintf(['Cascade: 1..',self.StageSelectEdit.String]),...
                sprintf('Fout: %.4g %sHz',fOut,fOutUnit),...
                sprintf('%s: %.4g %s',e.Target.DisplayName,pos(2),units)};
            end
        end

        function y=g2y(~,g)

            y=(1-g)./(1+g);
        end

        function outstr=getComplexStringMASmith(~,input,name)


            mag=abs(input);ang=angle(input)*180/pi;
            outstr=sprintf('%s = |%6.4f|, %4.1f [deg]',name,mag,ang);
        end

        function outstr=getComplexStringMA(self,pos,name)


            normMag=norm(pos(1:2));
            userMag=transformNormMagToUserMag(self.PolarPlotAxes,normMag);
            normRad=atan2(pos(2),pos(1));
            userDeg=transformNormRadToUserDeg(self.PolarPlotAxes,normRad);
            s_ang=internal.polariCommon.sprintfMaxNumFracDigits(userDeg,1);
            s_mag=internal.polariCommon.sprintfMaxNumTotalDigits(userMag,4);
            outstr=name+" = |"+s_mag+"|, "+s_ang+"[deg]";
        end

        function str=getComplexStringRI(self,pos,charttype)


            z=gamma2z(pos,1);
            y=self.g2y(pos);
            switch lower(charttype)
            case 'z'
                str=getComplexStringRI2(self,z,'Z');
            case 'y'
                str=getComplexStringRI2(self,y,'Y');
            otherwise
                str={...
                getComplexStringRI2(self,z,'Z'),...
                getComplexStringRI2(self,y,'Y')};
            end
        end

        function outstr=getComplexStringRI2(~,input,name)


            r=real(input);x=imag(input);
            if x>0
                outstr=sprintf('%s = %5.3f + j%5.3f',name,r,x);
            elseif x<...
0
                outstr=sprintf('%s = %5.3f - j%5.3f',name,r,-x);
            else
                outstr=sprintf('%s = %5.3f',name,r);
            end
        end

        function enableListeners(~,~)
        end
    end
end









