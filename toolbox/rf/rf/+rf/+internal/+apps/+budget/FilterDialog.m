classdef FilterDialog<handle






    properties
Parent
Panel
Layout
        Width=0
        Height=0
Listeners

FpUnits
FsUnits
    end

    properties(Dependent)
Name
FilterType
ResponseType
Implementation
UseFilterOrder
FilterOrder
PassbandFrequency
PassbandAttenuation
StopbandFrequency
StopbandAttenuation
Zin
Zout
ApplyEnableTag
    end

    properties(Dependent,SetObservable=true)
ApplyValue
    end

    properties(Access=private)
Title
NameLabel
NameEdit
FilterOrderLabel
FilterOrderEdit
UseFilterOrderLabel
UseFilterOrderCheckBox
FilterTypeLabel
FilterTypePopup
ResponseTypeLabel
ResponseTypePopup
ImplementationLabel
ImplementationPopup
FpLabel
FpEdit
FsLabel
FsEdit
RpLabel
RpEdit
RpUnits
RsLabel
RsEdit
RsUnits
ZinLabel
ZinEdit
ZinUnits
ZoutLabel
ZoutEdit
ZoutUnits
ApplyLabel
        IsReturnKey=0
        NameChanged=0
        OtherPropertiesChanged=0
    end

    properties(Access=private)
        DefaultPassFreq_lp=1e9
        DefaultPassFreq_hp=2e9
        DefaultPassFreq_bp=[2e9,3e9]
        DefaultPassFreq_bs=[1e9,4e9]
        DefaultStopFreq_lp=2e9
        DefaultStopFreq_hp=1e9
        DefaultStopFreq_bs=[2.1,2.9]*1e9
        DefaultStopFreq_bp=[1.5,3.5]*1e9
    end

    methods

        function self=FilterDialog(parent)




            if nargin==0
                parent=figure;
            end
            self.Parent=parent;
            createUIControls(self)
            layoutUIControls(self)
            addListeners(self)
        end
    end

    methods


        function str=get.Name(self)
            if self.Parent.View.UseAppContainer
                str=self.NameEdit.Value;
            else
                str=self.NameEdit.String;
            end
        end

        function set.Name(self,str)
            if self.Parent.View.UseAppContainer
                self.NameEdit.Value=str;
            else
                self.NameEdit.String=str;
            end
        end

        function str=get.FilterType(self)
            if self.Parent.View.UseAppContainer
                str=self.FilterTypePopup.Value;
            else
                str=self.FilterTypePopup.String{self.FilterTypePopup.Value};
            end
        end

        function set.FilterType(self,str)
            if self.Parent.View.UseAppContainer
                self.FilterTypePopup.Value=str;
            else
                switch str
                case 'Butterworth'
                    self.FilterTypePopup.Value=1;
                case 'Chebyshev'
                    self.FilterTypePopup.Value=2;
                case 'InverseChebyshev'
                    self.FilterTypePopup.Value=3;
                end
            end
        end

        function str=get.ResponseType(self)
            if self.Parent.View.UseAppContainer
                str=self.ResponseTypePopup.Value;
            else
                str=self.ResponseTypePopup.String{self.ResponseTypePopup.Value};
            end
        end

        function set.ResponseType(self,str)
            if self.Parent.View.UseAppContainer
                self.ResponseTypePopup.Value=str;
            else
                if strcmp(str,'Lowpass')
                    self.ResponseTypePopup.Value=1;
                elseif strcmp(str,'Highpass')
                    self.ResponseTypePopup.Value=2;
                elseif strcmp(str,'Bandpass')
                    self.ResponseTypePopup.Value=3;
                elseif strcmp(str,'Bandstop')
                    self.ResponseTypePopup.Value=4;
                end
            end
        end

        function str=get.Implementation(self)
            if self.Parent.View.UseAppContainer
                str=self.ImplementationPopup.Value;
            else
                str=self.ImplementationPopup.String{self.ImplementationPopup.Value};
            end
        end

        function set.Implementation(self,str)
            if self.Parent.View.UseAppContainer
                self.ImplementationPopup.Value=str;
            else
                if strcmp(str,'LC Tee')
                    self.ImplementationPopup.Value=1;
                elseif strcmp(str,'LC Pi')
                    self.ImplementationPopup.Value=2;
                elseif strcmp(str,'Transfer function')
                    self.ImplementationPopup.Value=3;
                end
            end
        end

        function val=get.UseFilterOrder(self)
            val=self.UseFilterOrderCheckBox.Value;
        end

        function set.UseFilterOrder(self,val)
            self.UseFilterOrderCheckBox.Value=val;
            parameterPaneChange(self);
        end

        function val=get.FilterOrder(self)
            if self.Parent.View.UseAppContainer
                val=self.FilterOrderEdit.Value;
            else
                val=str2double(self.FilterOrderEdit.String);
            end
        end

        function set.FilterOrder(self,val)
            if self.Parent.View.UseAppContainer
                self.FilterOrderEdit.Value=val;
            else
                self.FilterOrderEdit.String=num2str(val);
            end
        end

        function freq=get.PassbandFrequency(self)
            if self.Parent.View.UseAppContainer
                valueString='Value';
                fac=1e3^(find(strcmpi(self.FpUnits.Items,self.FpUnits.Value))-1);
                Str=regexprep(self.FpEdit.(valueString),'([[|]])','');
                Str=regexprep(Str,'([, ])',' ');
                splitStr=regexp(Str,' ','split');
                num=str2double(splitStr);
                layer=~isnan(num);
                freq=fac*num(layer);
            else
                fac=1e3^(self.FpUnits.Value-1);
                valueString='String';
                Str=regexprep(self.FpEdit.(valueString),'([[|]])','');
                Str=regexprep(Str,'([, ])',' ');
                splitStr=regexp(Str,' ','split');
                num=str2double(splitStr);
                layer=~isnan(num);
                freq=fac*num(layer);
            end
        end

        function set.PassbandFrequency(self,freq)
            [y,e,u]=engunits(freq);
            i=strcmp(u,{'','k','M','G','T'});
            if self.Parent.View.UseAppContainer
                valueString='Value';
                switch u
                case ''
                    freqUnit='Hz';
                case 'k'
                    freqUnit='kHz';
                case 'M'
                    freqUnit='MHz';
                case{'GEditField','G'}
                    freqUnit='GHz';
                case 'T'
                    freqUnit='THz';
                end
            else
                valueString='String';
                freqUnit=find(i);
            end
            if any(i)
                self.FpUnits.Value=freqUnit;
                if strcmpi(self.ResponseType(1),'b')
                    self.FpEdit.(valueString)=['[',num2str(y(1)),' ',num2str(y(2)),']'];
                else
                    self.FpEdit.(valueString)=num2str(y);
                end
            elseif e<...
1e-12
                if self.Parent.View.UseAppContainer
                    self.FpUnits.Value=self.FpUnits.Items{5};
                else
                    self.FpUnits.Value=5;
                end
                if strcmpi(self.ResponseType(1),'b')
                    self.FpEdit.(valueString)=['[',num2str(freq*1e-12),']'];
                else
                    self.FpEdit.(valueString)=num2str(freq*1e-12);
                end
            else
                if self.Parent.View.UseAppContainer
                    self.FpUnits.Value=self.FpUnits.Items{1};
                else
                    self.FpUnits.Value=1;
                end
                if strcmpi(self.ResponseType(1),'b')
                    self.FpEdit.(valueString)=['[',num2str(freq),']'];
                else
                    self.FpEdit.(valueString)=num2str(freq);
                end
            end
        end

        function freq=get.StopbandFrequency(self)
            if self.Parent.View.UseAppContainer
                valueString='Value';
                fac=1e3^(find(strcmpi(self.FsUnits.Items,self.FsUnits.Value))-1);
                Str=regexprep(self.FsEdit.(valueString),'([[|]])','');
                Str=regexprep(Str,'([, ])',' ');
                splitStr=regexp(Str,' ','split');
                num=str2double(splitStr);
                layer=~isnan(num);
                freq=fac*num(layer);
            else
                valueString='String';
                fac=1e3^(self.FsUnits.Value-1);
                Str=regexprep(self.FsEdit.(valueString),'([[|]])','');
                Str=regexprep(Str,'([, ])',' ');
                splitStr=regexp(Str,' ','split');
                num=str2double(splitStr);
                layer=~isnan(num);
                freq=fac*num(layer);
            end
        end

        function set.StopbandFrequency(self,freq)
            if self.Parent.View.UseAppContainer
                valueString='Value';
            else
                valueString='String';
            end
            [y,e,u]=engunits(freq);
            i=strcmp(u,{'','k','M','G','T'});
            if any(i)
                if self.Parent.View.UseAppContainer
                    self.FsUnits.Value=self.FsUnits.Items{i};
                else
                    self.FsUnits.Value=find(i);
                end
                if strcmpi(self.ResponseType(1),'b')
                    self.FsEdit.(valueString)=['[',num2str(y(1)),' ',num2str(y(2)),']'];
                else
                    self.FsEdit.(valueString)=num2str(y);
                end
            elseif e<...
1e-12
                if self.Parent.View.UseAppContainer
                    self.FsUnits.Value=self.FsUnits.Items{5};
                else
                    self.FsUnits.Value=5;
                end
                if strcmpi(self.ResponseType(1),'b')
                    self.FsEdit.(valueString)=['[',num2str(freq*1e-12),']'];
                else
                    self.FsEdit.(valueString)=num2str(freq*1e-12);
                end
            else
                if self.Parent.View.UseAppContainer
                    self.FsUnits.Value=self.FsUnits.Items{1};
                else
                    self.FsUnits.Value=1;
                end
                if strcmpi(self.ResponseType(1),'b')
                    self.FsEdit.(valueString)=['[',num2str(freq),']'];
                else
                    self.FsEdit.(valueString)=num2str(freq);
                end
            end
        end

        function val=get.PassbandAttenuation(self)
            if self.Parent.View.UseAppContainer
                val=self.RpEdit.Value;
            else
                val=str2double(self.RpEdit.String);
            end
        end

        function set.PassbandAttenuation(self,val)
            if self.Parent.View.UseAppContainer
                self.RpEdit.Value=val;
            else
                self.RpEdit.String=num2str(val);
            end
        end

        function val=get.StopbandAttenuation(self)
            if self.Parent.View.UseAppContainer
                val=self.RsEdit.Value;
            else
                val=str2double(self.RsEdit.String);
            end
        end

        function set.StopbandAttenuation(self,val)
            if self.Parent.View.UseAppContainer
                self.RsEdit.Value=val;
            else
                self.RsEdit.String=num2str(val);
            end
        end

        function val=get.Zin(self)
            if self.Parent.View.UseAppContainer
                val=self.ZinEdit.Value;
            else
                val=str2double(self.ZinEdit.String);
            end
        end

        function set.Zin(self,val)
            if self.Parent.View.UseAppContainer
                self.ZinEdit.Value=val;
            else
                self.ZinEdit.String=num2str(val);
            end
        end

        function val=get.Zout(self)
            if self.Parent.View.UseAppContainer
                val=self.ZoutEdit.Value;
            else
                val=str2double(self.ZoutEdit.String);
            end
        end

        function set.Zout(self,val)
            if self.Parent.View.UseAppContainer
                self.ZoutEdit.Value=val;
            else
                self.ZoutEdit.String=num2str(val);
            end
        end

        function set.ApplyValue(self,val)
            if self.Parent.View.UseAppContainer
            else
                self.ApplyLabel.Value=val;
            end
        end

        function val=get.ApplyValue(self)
            if self.Parent.View.UseAppContainer
                val=-1;
            else
                val=self.ApplyLabel.Value;
            end
        end

        function val=get.ApplyEnableTag(self)
            val=self.ApplyLabel.Enable;
        end

        function setListenersEnable(self,val)
            self.Listeners.Name.Enabled=val;
            self.Listeners.FilterType.Enabled=val;
            self.Listeners.ResponseType.Enabled=val;
            self.Listeners.Implementation.Enabled=val;
            self.Listeners.UseFilterOrder.Enabled=val;
            self.Listeners.FilterOrder.Enabled=val;
            self.Listeners.PassbandFrequency.Enabled=val;
            self.Listeners.PassbandAttenuation.Enabled=val;
            self.Listeners.StopbandFrequency.Enabled=val;
            self.Listeners.StopbandAttenuation.Enabled=val;
            self.Listeners.Zin.Enabled=val;
            self.Listeners.Zout.Enabled=val;
        end

        function resetDialogAccess(self)


            whiteColor=[1,1,1];
            self.NameEdit.BackgroundColor=whiteColor;
            self.FilterOrderEdit.BackgroundColor=whiteColor;
            self.FpEdit.BackgroundColor=whiteColor;
            self.FsEdit.BackgroundColor=whiteColor;
            self.RpEdit.BackgroundColor=whiteColor;
            self.RsEdit.BackgroundColor=whiteColor;
            self.ZinEdit.BackgroundColor=whiteColor;
            self.ZoutEdit.BackgroundColor=whiteColor;
            self.NameEdit.BackgroundColor=whiteColor;
            self.ResponseTypePopup.BackgroundColor=whiteColor;
            self.FilterTypePopup.BackgroundColor=whiteColor;
            self.ImplementationPopup.BackgroundColor=whiteColor;

            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
            self.IsReturnKey=0;
            enableIP2(self.Parent.View.Toolstrip,false);
            self.NameChanged=0;
            self.OtherPropertiesChanged=0;
            if self.Parent.View.UseAppContainer

            else
                self.ApplyLabel.Value=0;
            end
        end

        function setFigureKeyPress(self)





            if self.Parent.View.UseAppContainer
                set(self.Parent.View.ParametersFig.Figure,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig.Figure,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            else
                set(self.Parent.View.ParametersFig,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            end
        end

        function enableUIControls(self,val)




            if val==false
                val='off';
            elseif val==true
                val='on';
            end
            self.FilterOrderEdit.Enable=val;
            self.FpEdit.Enable=val;
            self.FsEdit.Enable=val;
            self.RpEdit.Enable=val;
            self.RsEdit.Enable=val;
            self.ZinEdit.Enable=val;
            self.ZoutEdit.Enable=val;
            self.NameEdit.Enable=val;
            self.ResponseTypePopup.Enable=val;
            self.FilterTypePopup.Enable=val;
            if strcmpi(val,'on')
                if self.OtherPropertiesChanged||...
                    self.NameChanged
                    self.ApplyLabel.Enable='on';
                else
                    self.ApplyLabel.Enable='off';
                end
                if strcmpi(self.FilterType,'InverseChebyshev')
                    self.ImplementationPopup.Enable='off';
                else
                    self.ImplementationPopup.Enable='on';
                end
            else
                self.ApplyLabel.Enable='off';
                self.ImplementationPopup.Enable='off';
            end
        end
    end

    methods(Access=private)


        function createUIControls(self)


            userData=struct(...
            'Dialog','filter',...
            'Stage',self.Parent.SelectedStage);
            if self.Parent.View.UseAppContainer

                self.Layout=uigridlayout(...
                'Parent',self.Parent.View.ParametersFig.Figure,...
                'Scrollable','on',...
                'Tag','Layout',...
                'RowSpacing',3,...
                'ColumnSpacing',2,...
                'Visible','off');
                self.Title=uilabel(...
                'UserData',userData,...
                'Tag','TitleLabel',...
                'Parent',self.Layout,...
                'Text',' Filter Element',...
                'FontColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uilabel(...
                'UserData',userData,...
                'Tag','NameLabel',...
                'Parent',self.Layout,...
                'Text','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uieditfield(...
                'UserData',userData,...
                'Tag','NameEditField',...
                'Parent',self.Layout,...
                'Value','Filter',...
                'HorizontalAlignment','left');
                self.FilterTypeLabel=uilabel(...
                'UserData',userData,...
                'Tag','TypeLabel',...
                'Parent',self.Layout,...
                'Text','Filter Type',...
                'HorizontalAlignment','right');
                self.FilterTypePopup=uidropdown(...
                'UserData',userData,...
                'Tag','TypeDropdown',...
                'Parent',self.Layout,...
                'Items',{'Butterworth','Chebyshev','InverseChebyshev'},...
                'Value','Butterworth');
                self.ResponseTypeLabel=uilabel(...
                'UserData',userData,...
                'Tag','ResponseTypeLabel',...
                'Parent',self.Layout,...
                'Text','Response Type',...
                'HorizontalAlignment','right');
                self.ResponseTypePopup=uidropdown(...
                'UserData',userData,...
                'Tag','ResponseTypeDropdown',...
                'Parent',self.Layout,...
                'Items',{'Lowpass','Highpass','Bandpass','Bandstop'},...
                'Value','Lowpass');
                self.ImplementationLabel=uilabel(...
                'UserData',userData,...
                'Tag','ImplementationLabel',...
                'Parent',self.Layout,...
                'Text','Implementation',...
                'HorizontalAlignment','right');
                self.ImplementationPopup=uidropdown(...
                'UserData',userData,...
                'Tag','ImplementationDropdown',...
                'Parent',self.Layout,...
                'Items',{'LC Tee','LC Pi','Transfer function'});
                self.UseFilterOrderLabel=uilabel(...
                'UserData',userData,...
                'Tag','UseOrderLabel',...
                'Parent',self.Layout,...
                'Text','Use Filter Order',...
                'HorizontalAlignment','right');
                self.UseFilterOrderCheckBox=uicheckbox(...
                'Parent',self.Layout,...
                'Tag','UseOrderCheckbox',...
                'Text','',...
                'Value',1);
                self.FilterOrderLabel=uilabel(...
                'UserData',userData,...
                'Tag','OrderLabel',...
                'Parent',self.Layout,...
                'Text','Filter Order',...
                'HorizontalAlignment','right');
                self.FilterOrderEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','OrderEditField',...
                'Parent',self.Layout,...
                'Value',3,...
                'HorizontalAlignment','left');
                self.FpLabel=uilabel(...
                'UserData',userData,...
                'Tag','FpLabel',...
                'Parent',self.Layout,...
                'Text','Passband Freq(s)',...
                'HorizontalAlignment','right');
                self.FpEdit=uieditfield(...
                'UserData',userData,...
                'Tag','FpEditField',...
                'Parent',self.Layout,...
                'Value','1',...
                'HorizontalAlignment','left');
                self.FpUnits=uidropdown(...
                'UserData',userData,...
                'Tag','FpUnitsDropdown',...
                'Parent',self.Layout,...
                'Items',{'Hz','kHz','MHz','GHz','THz'},...
                'Value','GHz');
                self.FsLabel=uilabel(...
                'UserData',userData,...
                'Tag','FsLabel',...
                'Parent',self.Layout,...
                'Text','Stopband Freq(s)',...
                'HorizontalAlignment','right',...
                'Visible','off');
                self.FsEdit=uieditfield(...
                'UserData',userData,...
                'Tag','FsEditField',...
                'Parent',self.Layout,...
                'Value','2',...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.FsUnits=uidropdown(...
                'UserData',userData,...
                'Tag','FsUnitsDropdown',...
                'Parent',self.Layout,...
                'Items',{'Hz','kHz','MHz','GHz','THz'},...
                'Value','GHz',...
                'Visible','off');
                self.RpLabel=uilabel(...
                'UserData',userData,...
                'Tag','RpLabel',...
                'Parent',self.Layout,...
                'Text','Passband Attenuation',...
                'HorizontalAlignment','right');
                self.RpEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','RpEditField',...
                'Parent',self.Layout,...
                'Value',3.0103,...
                'HorizontalAlignment','left');
                self.RpUnits=uilabel(...
                'UserData',userData,...
                'Tag','RpUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dB',...
                'HorizontalAlignment','left');
                self.RsLabel=uilabel(...
                'UserData',userData,...
                'Tag','RsLabel',...
                'Parent',self.Layout,...
                'Text','Stopband Attenuation',...
                'HorizontalAlignment','right',...
                'Visible','off');
                self.RsEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','RsEditField',...
                'Parent',self.Layout,...
                'Value',40,...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.RsUnits=uilabel(...
                'UserData',userData,...
                'Tag','RsUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dB',...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.ZinLabel=uilabel(...
                'UserData',userData,...
                'Tag','ZinLabel',...
                'Parent',self.Layout,...
                'Text','Source Impedance',...
                'HorizontalAlignment','right');
                self.ZinEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ZinEditField',...
                'Parent',self.Layout,...
                'Value',50,...
                'Tag',...
                'Zin',...
                'HorizontalAlignment','left');
                self.ZinUnits=uilabel(...
                'UserData',userData,...
                'Tag','ZinUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm',...
                'HorizontalAlignment','left');
                self.ZoutLabel=uilabel(...
                'UserData',userData,...
                'Tag','ZoutLabel',...
                'Parent',self.Layout,...
                'Text','Load Impedance',...
                'HorizontalAlignment','right');
                self.ZoutEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ZoutEditField',...
                'Parent',self.Layout,...
                'Value',50,...
                'Tag',...
                'Zout',...
                'HorizontalAlignment','left');
                self.ZoutUnits=uilabel(...
                'UserData',userData,...
                'Tag','ZoutUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm',...
                'HorizontalAlignment','left');
                self.ApplyLabel=uibutton(...
                'Tag','ApplyButton',...
                'Parent',self.Layout,...
                'Text','Apply',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');

                for i=1:length(self.Layout.RowHeight)
                    self.Layout.RowHeight{i}=29;
                end
            else
                self.Panel=uipanel(...
                'Parent',self.Parent.View.ParametersFig,...
                'Title','',...
                'BorderType','line',...
                'HighlightColor',[.5,.5,.5],...
                'Visible','on');
                self.Title=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TitleLabel',...
                'String',' Filter Element',...
                'ForegroundColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NameLabel',...
                'String','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Name',...
                'String','Filter',...
                'HorizontalAlignment','left');
                self.FilterTypeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TypeLabel',...
                'String','Filter Type',...
                'HorizontalAlignment','right');
                self.FilterTypePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Butterworth','Chebyshev','InverseChebyshev'},...
                'Tag','FilterType',...
                'Value',1,...
                'HorizontalAlignment','left');
                self.ResponseTypeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ResponseTypeLabel',...
                'String','Response Type',...
                'HorizontalAlignment','right');
                self.ResponseTypePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Lowpass','Highpass','Bandpass','Bandstop'},...
                'Tag','ResponseType',...
                'Value',1,...
                'HorizontalAlignment','left');
                self.ImplementationLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ImplementationLabel',...
                'String','Implementation',...
                'HorizontalAlignment','right');
                self.ImplementationPopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'LC Tee','LC Pi','Transfer function'},...
                'Tag','Implementation',...
                'HorizontalAlignment','left');
                self.UseFilterOrderLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','UseOrderLabel',...
                'String','Use Filter Order',...
                'HorizontalAlignment','right');
                self.UseFilterOrderCheckBox=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','checkbox',...
                'Tag','UseFilterOrder',...
                'Value',1,...
                'HorizontalAlignment','left');
                self.FilterOrderLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','OrderLabel',...
                'String','Filter Order',...
                'HorizontalAlignment','right');
                self.FilterOrderEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','FilterOrder',...
                'String','3',...
                'HorizontalAlignment','left');
                self.FpLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','FpLabel',...
                'String','Passband Freq(s)',...
                'HorizontalAlignment','right');
                self.FpEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','PassbandFrequency',...
                'String','1',...
                'HorizontalAlignment','left');
                self.FpUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Hz','kHz','MHz','GHz','THz'},...
                'Tag','FpUnits',...
                'Value',4,...
                'HorizontalAlignment','left');
                self.FsLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','FsLabel',...
                'String','Stopband Freq(s)',...
                'HorizontalAlignment','right',...
                'Visible','off');
                self.FsEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','StopbandFrequency',...
                'String','2',...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.FsUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Hz','kHz','MHz','GHz','THz'},...
                'Tag','FsUnits',...
                'Value',4,...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.RpLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RpLabel',...
                'String','Passband Attenuation',...
                'HorizontalAlignment','right');
                self.RpEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','PassbandAttenuation',...
                'String','3.0103',...
                'HorizontalAlignment','left');
                self.RpUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RpUnitsLabel',...
                'String','dB',...
                'HorizontalAlignment','left');
                self.RsLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RsLabel',...
                'String','Stopband Attenuation',...
                'HorizontalAlignment','right',...
                'Visible','off');
                self.RsEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','StopbandAttenuation',...
                'String','40',...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.RsUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RsUnitsLabel',...
                'String','dB',...
                'HorizontalAlignment','left',...
                'Visible','off');
                self.ZinLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZinLabel',...
                'String','Source Impedance',...
                'HorizontalAlignment','right');
                self.ZinEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Zin',...
                'String','50',...
                'Tag',...
                'Zin',...
                'HorizontalAlignment','left');
                self.ZinUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZinUnitsLabel',...
                'String','Ohm',...
                'HorizontalAlignment','left');
                self.ZoutLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZoutLabel',...
                'String','Load Impedance',...
                'HorizontalAlignment','right');
                self.ZoutEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Zout',...
                'String','50',...
                'Tag',...
                'Zout',...
                'HorizontalAlignment','left');
                self.ZoutUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZoutUnitsLabel',...
                'String','Ohm',...
                'HorizontalAlignment','left');
                self.ApplyLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','pushbutton',...
                'String','Apply',...
                'Tag','ApplyTag',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');
            end
        end


        function layoutUIControls(self,~)
            hspacing=3;
            vspacing=4;
            value=self.UseFilterOrder;


            w1=rf.internal.apps.budget.SystemParametersSection.Width1;
            w2=rf.internal.apps.budget.SystemParametersSection.Width2;
            w3=rf.internal.apps.budget.SystemParametersSection.Width3;
            titleHt=16;
            if self.Parent.View.UseAppContainer
            else
                self.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.Panel,...
                'VerticalGap',vspacing,...
                'HorizontalGap',hspacing,...
                'HorizontalWeights',[0,1,0]);
            end
            row=1;

            self.Parent.addTitle(self.Layout,self.Title,row,[1,3],...
            titleHt,hspacing,vspacing,self.Parent.View.UseAppContainer)
            h=24;
            row=row+1;
            self.Parent.addText(self.Layout,self.NameLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.NameEdit,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.FilterTypeLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addPopup(self.Layout,self.FilterTypePopup,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.ResponseTypeLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addPopup(self.Layout,self.ResponseTypePopup,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.ImplementationLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addPopup(self.Layout,self.ImplementationPopup,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.UseFilterOrderLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addPopup(self.Layout,self.UseFilterOrderCheckBox,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            if value
                row=row+1;
                self.Parent.addText(self.Layout,self.FilterOrderLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FilterOrderEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                switch self.ResponseType
                case{'Lowpass','Highpass'}
                    row=row+1;
                    self.Parent.addText(self.Layout,self.FpLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.FpEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addPopup(self.Layout,self.FpUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    row=row+1;
                    self.Parent.addText(self.Layout,self.RpLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.RpEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.RpUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    if strcmpi(self.FilterType,'InverseChebyshev')
                        row=row+1;
                        self.Parent.addText(self.Layout,self.RsLabel,row,1,w1,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addEdit(self.Layout,self.RsEdit,row,2,w2,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addText(self.Layout,self.RsUnits,row,3,w3,...
                        h,self.Parent.View.UseAppContainer)
                    end
                case 'Bandpass'
                    row=row+1;
                    self.Parent.addText(self.Layout,self.FpLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.FpEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addPopup(self.Layout,self.FpUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    row=row+1;
                    self.Parent.addText(self.Layout,self.RpLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.RpEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.RpUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    if strcmpi(self.FilterType,'InverseChebyshev')
                        row=row+1;
                        self.Parent.addText(self.Layout,self.RsLabel,row,1,w1,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addEdit(self.Layout,self.RsEdit,row,2,w2,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addText(self.Layout,self.RsUnits,row,3,w3,...
                        h,self.Parent.View.UseAppContainer)
                    end
                case 'Bandstop'
                    if strcmpi(self.FilterType,'Chebyshev')
                        row=row+1;
                        self.Parent.addText(self.Layout,self.RpLabel,row,1,w1,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addEdit(self.Layout,self.RpEdit,row,2,w2,...
                        h,self.Parent.View.UseAppContainer)
                        self.Parent.addText(self.Layout,self.RpUnits,row,3,w3,...
                        h,self.Parent.View.UseAppContainer)
                    end
                    row=row+1;
                    self.Parent.addText(self.Layout,self.FsLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.FsEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addPopup(self.Layout,self.FsUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    row=row+1;
                    self.Parent.addText(self.Layout,self.RsLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.RsEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.RsUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                end
            else
                row=row+1;
                self.Parent.addText(self.Layout,self.FpLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FpEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addPopup(self.Layout,self.FpUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                row=row+1;
                self.Parent.addText(self.Layout,self.RpLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.RpEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.RpUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                row=row+1;
                self.Parent.addText(self.Layout,self.FsLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FsEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addPopup(self.Layout,self.FsUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                row=row+1;
                self.Parent.addText(self.Layout,self.RsLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.RsEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.RsUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
            end
            row=row+1;
            self.Parent.addText(self.Layout,self.ZinLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.ZinEdit,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addText(self.Layout,self.ZinUnits,row,3,w3,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.ZoutLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.ZoutEdit,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addText(self.Layout,self.ZoutUnits,row,3,w3,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addButton(self.Layout,self.ApplyLabel,row,2,w3,h+10,...
            self.Parent.View.UseAppContainer)
            if self.Parent.View.UseAppContainer
                w=500;
                h=500;
                self.Layout.Visible='on';
            else
                [~,~,w,h]=getMinimumSize(self.Layout);
                self.Width=sum(w)+self.Layout.HorizontalGap*(numel(w)+1);
                self.Height=max(h(2:end-1))*numel(h(2:end))+...
                self.Layout.VerticalGap*(numel(h(2:end-1))+1)+(titleHt+2)+10;
            end

        end

        function parameterChanged(self,e)


            i=self.Parent.View.Canvas.SelectIdx;
            applyPushed=false;
            if self.Parent.View.UseAppContainer
                if strcmpi(e.EventName,'ButtonPushed')&&strcmpi(e.Source.Text,'Apply')
                    applyPushed=true;
                end
            end
            if strcmpi(e.EventName,'PostSet')||strcmpi(e.EventName,'ValueChanged')||applyPushed

                if self.Parent.View.UseAppContainer
                    name=e.Source.Tag;
                    uiObject=e.Source;
                    uiObjectType=class(uiObject);
                else
                    name=e.AffectedObject.Tag;
                    uiObject=e.AffectedObject;
                    uiObjectType=uiObject.Style;
                end
                key='';
            elseif strcmpi(e.EventName,'KeyPress')

                name=e.Source.Tag;
                uiObject=e.Source;
                uiObjectType=uiObject.Style;
                a=get(self.Parent.View.ParametersFig,'CurrentCharacter');
                if isempty(a)


                    return;
                end
                key=e.Key;
                if any(strcmpi(key,{'leftarrow',...
                    'uparrow',...
                    'downarrow',...
                    'rightarrow'}))

                    return;
                end
            end
            drawnow;
            if~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                if~any(strcmpi(uiObjectType,{'popupmenu','matlab.ui.control.DropDown'}))
                    if~strcmpi(key,'return')



                        if strcmpi(name,'NameEditField')||strcmpi(name,'Name')
                            self.NameChanged=1;
                        elseif~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                            self.OtherPropertiesChanged=1;
                        end
                    end
                else
                    if~strcmpi(key,'return')&&~strcmpi(key,'')


                        return;
                    else
                        if strcmpi(key,'')

                            self.OtherPropertiesChanged=1;
                        end
                    end
                end
            end
            if~strcmp(name,'ApplyButton')
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'off'));
            end
            if strcmp(name,'FpUnits')
                name='PassbandFrequency';
            elseif strcmp(name,'FsUnits')
                name='StopbandFrequency';
            end
            responseStr=regexprep(lower(self.ResponseType),...
            '(ow|igh|and|ass|top)','');
            if~strcmpi(key,'return')
                switch name
                case{'TypeDropdown','FilterType'}
                    self.FilterTypePopup.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'ImplementationDropdown','Implementation'}
                    self.ImplementationPopup.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'NameEditField','Name'}
                    self.NameEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'ResponseTypeDropdown','ResponseType'}
                    parameterPaneChange(self);
                    if self.UseFilterOrder
                        switch responseStr
                        case 'bs'
                            self.StopbandFrequency=self.(['DefaultStopFreq_',responseStr]);
                            self.FsEdit.BackgroundColor=[1,0.96,0.88];
                        otherwise
                            self.PassbandFrequency=self.(['DefaultPassFreq_',responseStr]);
                            self.FpEdit.BackgroundColor=[1,0.96,0.88];
                        end
                    else
                        self.PassbandFrequency=self.(['DefaultPassFreq_',responseStr]);
                        self.StopbandFrequency=self.(['DefaultStopFreq_',responseStr]);
                        self.FpEdit.BackgroundColor=[1,0.96,0.88];
                        self.FsEdit.BackgroundColor=[1,0.96,0.88];
                    end
                    self.ResponseTypePopup.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'UseOrderCheckbox','UseFilterOrder'}
                    parameterPaneChange(self,e)
                    try
                        if self.UseFilterOrder
                            switch responseStr
                            case 'bs'
                                self.StopbandFrequency=self.(['DefaultStopFreq_',responseStr]);
                                self.FsEdit.BackgroundColor=[1,0.96,0.88];
                            otherwise
                                self.PassbandFrequency=self.(['DefaultPassFreq_',responseStr]);
                                self.FpEdit.BackgroundColor=[1,0.96,0.88];
                            end
                        else
                            self.PassbandFrequency=self.(['DefaultPassFreq_',responseStr]);
                            self.StopbandFrequency=self.(['DefaultStopFreq_',responseStr]);
                            self.FpEdit.BackgroundColor=[1,0.96,0.88];
                            self.FsEdit.BackgroundColor=[1,0.96,0.88];
                        end
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                    end
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'FilterOrderEditField','FilterOrder'}
                    self.FilterOrderEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'PassbandFrequency','FpEditField'}
                    if self.Parent.View.UseAppContainer
                        val=self.PassbandFrequency;
                    else
                        val=self.(name);
                    end
                    try
                        switch self.ResponseType
                        case 'Lowpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','scalar','finite',...
                            'real','positive'},...
                            mfilename,'Passband frequency')
                        case 'Highpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','scalar','finite',...
                            'real','positive'},...
                            mfilename,'Passband frequency')
                        case 'Bandpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','size',[1,2],'finite',...
                            'real','positive',...
                            'increasing'},mfilename,'Passband frequencies')
                        case 'Bandstop'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','size',[1,2],'finite',...
                            'real','positive',...
                            'increasing'},mfilename,'Passband frequencies')
                        end
                        self.(['DefaultPassFreq_',responseStr])=val;
                    catch

                    end
                    self.FpEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'RpEditField','PassbandAttenuation'}
                    self.RpEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'FsEditField','StopbandFrequency'}
                    if self.Parent.View.UseAppContainer
                        val=self.StopbandFrequency;
                    else
                        val=self.(name);
                    end
                    try
                        switch self.ResponseType
                        case 'Lowpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','scalar','finite','real','positive'},...
                            mfilename,'Stopband frequency')
                        case 'Highpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','scalar','finite','real','positive'},...
                            mfilename,'Stopband frequency')
                        case 'Bandpass'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','size',[1,2],'finite',...
                            'real','positive',...
                            'increasing'},mfilename,'Stopband frequencies')
                        case 'Bandstop'
                            validateattributes(val,{'numeric'},...
                            {'nonempty','size',[1,2],'finite',...
                            'real','positive',...
                            'increasing'},mfilename,'Stopband frequencies')
                        end
                        self.(['DefaultStopFreq_',responseStr])=val;
                    catch

                    end
                    self.FsEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'RsEditField','StopbandAttenuation'}
                    self.RsEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'ApplyButton','ApplyTag'}
                    try
                        self.applyFunction()
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                    end
                case{'ZinEditField','Zin'}
                    self.ZinEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                case{'ZoutEditField','Zout'}
                    self.ZoutEdit.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' or hit ''Enter'' to update Filter parameters.');
                end
            end
            if strcmp(name,'FilterType')||strcmp(name,'TypeDropdown')
                switch self.FilterType
                case 'InverseChebyshev'
                    if self.Parent.View.UseAppContainer
                        self.ImplementationPopup.Value='Transfer function';
                    else
                        self.ImplementationPopup.Value=3;
                    end
                    self.ImplementationPopup.Enable='off';
                otherwise
                    self.ImplementationPopup.Enable='on';
                end
                parameterPaneChange(self,e);
            end
            if self.IsReturnKey
                try
                    self.applyFunction();
                catch me
                    h=errordlg(me.message,'Error Dialog','modal');
                    uiwait(h)
                    self.Parent.View.enableActions(true);
                end
            end
            self.IsReturnKey=0;
        end

        function FigKeyEvent(self,ev)

            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.FilterDialog')
                key=ev.Key;
                switch key
                case 'return'
                    self.IsReturnKey=1;
                end
            end
        end

        function FigKeyEventCanvas(self,ev)



            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.FilterDialog')
                key=ev.Key;
                switch key
                case 'return'
                    try
                        self.applyFunction();
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                    end
                end
            end
        end

        function applyFunction(self)


            if self.Parent.View.UseAppContainer
                valueString='Value';
            else
                valueString='String';
            end
            if~self.NameChanged&&~self.OtherPropertiesChanged
                self.IsReturnKey=0;
                i=self.Parent.View.Canvas.SelectIdx;
                name='ApplyButton';
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'inactive'));
                return;
            end
            self.Parent.View.enableActions(false);
            i=self.Parent.View.Canvas.SelectIdx;
            name='ApplyButton';
            filterObj=simrfV2_filt_design(self);
            self.Parent.notify('DisableCanvas',...
            rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'inactive'));
            if self.NameChanged&&~self.OtherPropertiesChanged
                self.Parent.notify('ElementParameterChanged',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'Name',self.NameEdit.(valueString)));
            else
                self.Parent.notify('ElementParameterChanged',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'ApplyButton',filterObj));
            end
            self.Parent.notify('IconUpdate',...
            rf.internal.apps.budget.ElementParameterChangedEventData(i,...
            'ResponseType',self.ResponseType));
            self.FilterOrderEdit.BackgroundColor=[1,1,1];
            self.FpEdit.BackgroundColor=[1,1,1];
            self.FsEdit.BackgroundColor=[1,1,1];
            self.RpEdit.BackgroundColor=[1,1,1];
            self.RsEdit.BackgroundColor=[1,1,1];
            self.ZinEdit.BackgroundColor=[1,1,1];
            self.ZoutEdit.BackgroundColor=[1,1,1];
            self.NameEdit.BackgroundColor=[1,1,1];
            self.ResponseTypePopup.BackgroundColor=[1,1,1];
            self.FilterTypePopup.BackgroundColor=[1,1,1];
            self.ImplementationPopup.BackgroundColor=[1,1,1];
            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
            self.IsReturnKey=0;
            enableIP2(self.Parent.View.Toolstrip,false);
            self.NameChanged=0;
            self.OtherPropertiesChanged=0;
            self.Parent.View.enableActions(true);
        end

        function parameterPaneChange(self,~)
            value=self.UseFilterOrder;
            flag=toggle(self,~value);
            self.FilterOrderLabel.Visible=toggle(self,value);
            self.FilterOrderEdit.Visible=toggle(self,value);
            if value
                switch self.ResponseType
                case 'Bandstop'
                    if strcmpi(self.FilterType,'Chebyshev')
                        self.RpLabel.Visible=toggle(self,value);
                        self.RpEdit.Visible=toggle(self,value);
                        self.RpUnits.Visible=toggle(self,value);
                    else
                        self.RpLabel.Visible=flag;
                        self.RpEdit.Visible=flag;
                        self.RpUnits.Visible=flag;
                    end
                    self.FpLabel.Visible=flag;
                    self.FpEdit.Visible=flag;
                    self.FpUnits.Visible=flag;
                    self.RsLabel.Visible=toggle(self,value);
                    self.RsEdit.Visible=toggle(self,value);
                    self.RsUnits.Visible=toggle(self,value);
                    self.FsLabel.Visible=toggle(self,value);
                    self.FsEdit.Visible=toggle(self,value);
                    self.FsUnits.Visible=toggle(self,value);
                otherwise
                    self.RpLabel.Visible=toggle(self,value);
                    self.RpEdit.Visible=toggle(self,value);
                    self.RpUnits.Visible=toggle(self,value);
                    self.FpLabel.Visible=toggle(self,value);
                    self.FpEdit.Visible=toggle(self,value);
                    self.FpUnits.Visible=toggle(self,value);
                    self.FsLabel.Visible=flag;
                    self.FsEdit.Visible=flag;
                    self.FsUnits.Visible=flag;
                    if strcmpi(self.FilterType,'InverseChebyshev')
                        self.RsLabel.Visible=toggle(self,value);
                        self.RsEdit.Visible=toggle(self,value);
                        self.RsUnits.Visible=toggle(self,value);
                    else
                        self.RsLabel.Visible=flag;
                        self.RsEdit.Visible=flag;
                        self.RsUnits.Visible=flag;
                    end
                end
            else
                self.RsLabel.Visible=flag;
                self.RsEdit.Visible=flag;
                self.RsUnits.Visible=flag;
                self.FsLabel.Visible=flag;
                self.FsEdit.Visible=flag;
                self.FsUnits.Visible=flag;
                self.RpLabel.Visible=flag;
                self.RpEdit.Visible=flag;
                self.RpUnits.Visible=flag;
                self.FpLabel.Visible=flag;
                self.FpEdit.Visible=flag;
                self.FpUnits.Visible=flag;
            end
            layoutUIControls(self);
        end


        function addListeners(self)

            if self.Parent.View.UseAppContainer
                self.NameEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FilterTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FilterTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ResponseTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ResponseTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ImplementationPopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ImplementationPopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FilterOrderEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FpEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FpUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FpUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.RpEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FsEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FsUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FsUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.RsEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ZinEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ZoutEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.UseFilterOrderCheckBox.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ApplyLabel.ButtonPushedFcn=@(h,e)parameterChanged(self,e);
            else
                self.NameEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.FilterType=addlistener(self.FilterTypePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.FilterTypePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.ResponseType=addlistener(self.ResponseTypePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.ResponseTypePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.Implementation=addlistener(self.ImplementationPopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.ImplementationPopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.FilterOrderEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.FpEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.FpUnits=addlistener(self.FpUnits,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.FpUnits.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.RpEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.FsEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.FsUnits=addlistener(self.FsUnits,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.FsUnits.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.RsEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ZinEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ZoutEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.UseFilterOrder=addlistener(self.UseFilterOrderCheckBox,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.Listeners.ApplyLabel=addlistener(self.ApplyLabel,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
            end
        end

        function visibility=toggle(~,value)
            if value
                visibility='on';
            else
                visibility='off';
            end
        end

        function filterObj=simrfV2_filt_design(self)





            responseStr=regexprep(lower(self.ResponseType),...
            '(ow|igh|and|ass|top)','');
            constFiltPiece={...
            'FilterType',self.FilterType,...
            'ResponseType',self.ResponseType,...
            'Implementation',self.Implementation,...
            'Zin',self.Zin,...
            'Zout',self.Zout,'Name',self.Name};
            switch lower(self.FilterType)
            case 'butterworth'
                if self.UseFilterOrder
                    if strcmpi(responseStr,'bs')
                        stopFreq=self.StopbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'StopbandFrequency',stopFreq,...
                        'StopbandAttenuation',...
                        self.StopbandAttenuation);
                    else
                        passFreq=self.PassbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'PassbandFrequency',passFreq,...
                        'PassbandAttenuation',...
                        self.PassbandAttenuation);
                    end
                else
                    passFreq=self.PassbandFrequency;
                    stopFreq=self.StopbandFrequency;
                    filterObj=rffilter(constFiltPiece{:},...
                    'PassbandFrequency',passFreq,...
                    'PassbandAttenuation',...
                    self.PassbandAttenuation,...
                    'StopbandFrequency',stopFreq,...
                    'StopbandAttenuation',self.StopbandAttenuation);
                end
            case 'chebyshev'
                if self.UseFilterOrder
                    if strcmpi(responseStr,'bs')
                        stopFreq=self.StopbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'PassbandAttenuation',...
                        self.PassbandAttenuation,...
                        'StopbandFrequency',stopFreq,...
                        'StopbandAttenuation',...
                        self.StopbandAttenuation);
                    else
                        passFreq=self.PassbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'PassbandFrequency',passFreq,...
                        'PassbandAttenuation',...
                        self.PassbandAttenuation);
                    end
                else
                    passFreq=self.PassbandFrequency;
                    stopFreq=self.StopbandFrequency;
                    filterObj=rffilter(constFiltPiece{:},...
                    'PassbandFrequency',passFreq,...
                    'PassbandAttenuation',...
                    self.PassbandAttenuation,...
                    'StopbandFrequency',stopFreq,...
                    'StopbandAttenuation',...
                    self.StopbandAttenuation);
                end
            case 'inversechebyshev'
                if self.UseFilterOrder
                    if strcmpi(responseStr,'bs')
                        stopFreq=self.StopbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'StopbandFrequency',stopFreq,...
                        'StopbandAttenuation',...
                        self.StopbandAttenuation);
                    else
                        passFreq=self.PassbandFrequency;
                        filterObj=rffilter(constFiltPiece{:},...
                        'FilterOrder',self.FilterOrder,...
                        'PassbandFrequency',passFreq,...
                        'PassbandAttenuation',...
                        self.PassbandAttenuation,...
                        'StopbandAttenuation',...
                        self.StopbandAttenuation);
                    end
                else
                    passFreq=self.PassbandFrequency;
                    stopFreq=self.StopbandFrequency;
                    filterObj=rffilter(constFiltPiece{:},...
                    'PassbandFrequency',passFreq,...
                    'PassbandAttenuation',...
                    self.PassbandAttenuation,...
                    'StopbandFrequency',stopFreq,...
                    'StopbandAttenuation',self.StopbandAttenuation);
                end
            end
        end
    end
end






