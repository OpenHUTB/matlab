classdef MixerIMTDialog<handle







    properties
Parent
Panel
Layout
        Width=0
        Height=0
Listeners

UseDataFileCheckBox
ConverterTypePopup
IMTuitable
MGrid
    end

    properties(Dependent)
Name
ReferenceInputPower
NominalOutputPower
ConverterType
NF
LO
Zin
Zout
IMT
UseDataFile
FileName
    end

    properties(Access=private)
Title
Title1
NameLabel
NameEdit
ReferenceInputPowerLabel
ReferenceInputPowerEdit
ReferenceInputPowerUnits
NominalOutputPowerLabel
NominalOutputPowerEdit
NominalOutputPowerUnits
NFLabel
NFEdit
NFUnits
LOLabel
LOEdit
LOUnits
ZinLabel
ZinEdit
ZinUnits
ZoutLabel
ZoutEdit
ZoutUnits
IMTLabel
IMTEdit
IMTUnits

UseDataFileLabel

ConverterTypeLabel

FileNameLabel
FileNameEdit
FileNameButton
ApplyLabel
        IsReturnKey=0
        NameChanged=0
        OtherPropertiesChanged=0
    end

    methods


        function self=MixerIMTDialog(parent)




            if nargin==0
                parent=figure;
            end
            self.Parent=parent;
            createUIControls(self)
            ViewDataFunction(self)
            layoutUIControls(self)
            parameterPaneChange(self)
            addListeners(self)

            if self.Parent.View.UseAppContainer
                self.FileNameButton.ButtonPushedFcn=@(~,~)browseAction(self);
            else
                set(self.FileNameButton,'Callback',@(~,~)browseAction(self));
            end
        end
    end

    methods


        function str=get.Name(self)
            if self.Parent.View.UseAppContainer
                str=self.NameEdit.Value;
            else
                str=self.NameEdit.String;
            end
        end

        function set.Name(self,str)
            if self.Parent.View.UseAppContainer
                self.NameEdit.Value=str;
            else
                self.NameEdit.String=str;
            end
        end

        function val=get.ReferenceInputPower(self)
            if self.Parent.View.UseAppContainer
                val=self.ReferenceInputPowerEdit.Value;
            else
                val=str2num(self.ReferenceInputPowerEdit.String);
            end
        end

        function set.ReferenceInputPower(self,val)
            if self.Parent.View.UseAppContainer
                self.ReferenceInputPowerEdit.Value=val;
            else
                self.ReferenceInputPowerEdit.String=num2str(val);
            end
        end

        function val=get.NominalOutputPower(self)
            if self.Parent.View.UseAppContainer
                val=self.NominalOutputPowerEdit.Value;
            else
                val=str2num(self.NominalOutputPowerEdit.String);
            end
        end

        function set.NominalOutputPower(self,val)
            if self.Parent.View.UseAppContainer
                self.NominalOutputPowerEdit.Value=val;
            else
                self.NominalOutputPowerEdit.String=num2str(val);
            end
        end

        function val=get.NF(self)
            if self.Parent.View.UseAppContainer
                val=self.NFEdit.Value;
            else
                val=str2num(self.NFEdit.String);
            end
        end

        function set.NF(self,val)
            if self.Parent.View.UseAppContainer
                self.NFEdit.Value=val;
            else
                self.NFEdit.String=num2str(val);
            end
        end

        function freq=get.LO(self)
            if self.Parent.View.UseAppContainer
                fac=1e3^(find(strcmpi(self.LOUnits.Items,self.LOUnits.Value))-1);
                freq=fac*self.LOEdit.Value;
            else
                fac=1e3^(self.LOUnits.Value-1);
                freq=fac*str2num(self.LOEdit.String);
            end
        end

        function set.LO(self,freq)
            [y,e,u]=engunits(freq);
            i=strcmp(u,{'','k','M','G','T'});
            if self.Parent.View.UseAppContainer
                if any(i)
                    self.LOEdit.Value=y;
                    self.LOUnits.Value=self.LOUnits.Items{i};
                elseif e<...
1e-12
                    self.LOEdit.Value=freq*1e-12;
                    self.LOUnits.Value='THz';
                else
                    self.LOEdit.Value=freq;
                    self.LOUnits.Value='Hz';
                end
            else
                if any(i)
                    self.LOEdit.String=num2str(y);
                    self.LOUnits.Value=find(i);
                elseif e<...
1e-12
                    self.LOEdit.String=num2str(freq*1e-12);
                    self.LOUnits.Value=5;
                else
                    self.LOEdit.String=num2str(freq);
                    self.LOUnits.Value=1;
                end
            end
        end

        function str=get.ConverterType(self)
            if self.Parent.View.UseAppContainer
                str=self.ConverterTypePopup.Value;
            else
                str=self.ConverterTypePopup.String{self.ConverterTypePopup.Value};
            end
        end

        function set.ConverterType(self,str)
            if self.Parent.View.UseAppContainer
                self.ConverterTypePopup.Value=str;
            else
                if strcmp(str,'Down')
                    self.ConverterTypePopup.Value=1;
                else
                    self.ConverterTypePopup.Value=2;
                end
            end
        end

        function val=get.Zin(self)
            if self.Parent.View.UseAppContainer
                val=self.ZinEdit.Value;
            else
                val=str2num(self.ZinEdit.String);
            end
        end

        function set.Zin(self,val)
            if self.Parent.View.UseAppContainer
                self.ZinEdit.Value=val;
            else
                self.ZinEdit.String=num2str(val);
            end
        end

        function val=get.Zout(self)
            if self.Parent.View.UseAppContainer
                val=self.ZoutEdit.Value;
            else
                val=str2num(self.ZoutEdit.String);
            end
        end

        function set.Zout(self,val)
            if self.Parent.View.UseAppContainer
                self.ZoutEdit.Value=val;
            else
                self.ZoutEdit.String=num2str(val);
            end
        end

        function val=get.IMT(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.IMTEdit.Value);
            else
                val=str2num(self.IMTEdit.String);
            end
        end

        function set.IMT(self,val)
            if self.Parent.View.UseAppContainer
                self.IMTEdit.Value=mat2str(val);
            else
                self.IMTEdit.String=mat2str(val);
            end
        end

        function str=get.UseDataFile(self)
            str=self.UseDataFileCheckBox.Value;
        end

        function set.UseDataFile(self,Value)

            self.UseDataFileCheckBox.Value=Value;
            resetDialogAccess(self)



        end

        function set.FileName(self,str)
            if self.Parent.View.UseAppContainer
                self.FileNameEdit.Value=num2str(str);
            else
                self.FileNameEdit.String=str;
            end
        end

        function str=get.FileName(self)
            if self.Parent.View.UseAppContainer
                str=self.FileNameEdit.Value;
            else
                str=self.FileNameEdit.String;
            end
        end

        function resetDialogAccess(self)


            whiteColor=[1,1,1];
            self.NameEdit.BackgroundColor=whiteColor;
            self.ReferenceInputPowerEdit.BackgroundColor=whiteColor;
            self.NominalOutputPowerEdit.BackgroundColor=whiteColor;
            self.NFEdit.BackgroundColor=whiteColor;
            self.ConverterTypePopup.BackgroundColor=whiteColor;
            self.LOEdit.BackgroundColor=whiteColor;
            self.ZinEdit.BackgroundColor=whiteColor;
            self.ZoutEdit.BackgroundColor=whiteColor;
            self.IMTEdit.BackgroundColor=whiteColor;
            self.FileNameEdit.BackgroundColor=whiteColor;
            self.OtherPropertiesChanged=0;
            self.NameChanged=0;
            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
        end

        function setFigureKeyPress(self)






            if self.Parent.View.UseAppContainer
                set(self.Parent.View.ParametersFig.Figure,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig.Figure,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            else
                set(self.Parent.View.ParametersFig,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            end
        end

        function enableUIControls(self,val)




            if~val
                val='off';
            else
                val='on';
            end
            self.NameEdit.Enable=val;
            self.ReferenceInputPowerEdit.Enable=val;
            self.NominalOutputPowerEdit.Enable=val;
            self.NFEdit.Enable=val;
            self.ConverterTypePopup.Enable=val;
            self.LOEdit.Enable=val;
            self.ZinEdit.Enable=val;
            self.ZoutEdit.Enable=val;
            self.IMTEdit.Enable=val;
            self.FileNameEdit.Enable=val;
            if strcmpi(val,'on')
                if self.OtherPropertiesChanged||...
                    self.NameChanged
                    self.ApplyLabel.Enable='on';
                else
                    self.ApplyLabel.Enable='off';
                end
            else
                self.ApplyLabel.Enable='off';
            end


            if self.UseDataFile
                self.ReferenceInputPowerEdit.Enable='off';
                self.NominalOutputPowerEdit.Enable='off';
            end

        end

        function browseAction(self)
            TouchstoneDataFile=...
            'All Touchstone Data files (*.s2d)';
            [filename,pathname]=uigetfile(...
            {'*.s2d',TouchstoneDataFile;...
            '*.*','All files (*.*)'},...
            'Select 2-port Touchstone Data file',pwd);
            wasCanceled=isequal(filename,0)||...
            isequal(pathname,0);
            if wasCanceled
                return;
            end
            self.FileName=[pathname,filename];
            valueChangedColor=[1,0.96,0.88];
            self.FileNameEdit.BackgroundColor=valueChangedColor;
            self.OtherPropertiesChanged=1;
            self.ApplyLabel.Enable='on';
        end
    end

    methods(Access=private)


        function createUIControls(self)


            userData=struct(...
            'Dialog','mixerIMT',...
            'Stage',self.Parent.SelectedStage);
            if self.Parent.View.UseAppContainer

                self.Layout=uigridlayout(...
                'Parent',self.Parent.View.ParametersFig.Figure,...
                'Scrollable','on',...
                'Tag','Layout',...
                'RowSpacing',3,...
                'ColumnSpacing',2,...
                'Visible','off');
                self.Title=uilabel(...
                'UserData',userData,...
                'Tag','TitleLabel',...
                'Parent',self.Layout,...
                'Text','Mixer IMT Element',...
                'FontColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uilabel(...
                'UserData',userData,...
                'Tag','NameLabel',...
                'Parent',self.Layout,...
                'Text','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uieditfield(...
                'UserData',userData,...
                'Tag','NameEditField',...
                'Parent',self.Layout,...
                'Value','MIxerIMT',...
                'HorizontalAlignment','left');
                self.ReferenceInputPowerLabel=uilabel(...
                'UserData',userData,...
                'Tag','ReferenceInputPowerLabel',...
                'Parent',self.Layout,...
                'Text','Reference Input Power',...
                'HorizontalAlignment','right');
                self.ReferenceInputPowerEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ReferenceInputPowerEditField',...
                'Parent',self.Layout,...
                'Value',-15,...
                'HorizontalAlignment','left');
                self.ReferenceInputPowerUnits=uilabel(...
                'UserData',userData,...
                'Tag','ReferenceInputPowerUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dBm',...
                'HorizontalAlignment','left');
                self.NominalOutputPowerLabel=uilabel(...
                'UserData',userData,...
                'Tag','NominalOutputPowerLabel',...
                'Parent',self.Layout,...
                'Text','Nominal Output Power',...
                'HorizontalAlignment','right');
                self.NominalOutputPowerEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','NominalOutputPowerEditField',...
                'Parent',self.Layout,...
                'Value',-5,...
                'HorizontalAlignment','left');
                self.NominalOutputPowerUnits=uilabel(...
                'UserData',userData,...
                'Tag','NominalOutputPowerUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dBm',...
                'HorizontalAlignment','left');
                self.NFLabel=uilabel(...
                'UserData',userData,...
                'Tag','NFLabel',...
                'Parent',self.Layout,...
                'Text','Noise Figure',...
                'HorizontalAlignment','right');
                self.NFEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','NFEditField',...
                'Parent',self.Layout,...
                'Value',0,...
                'HorizontalAlignment','left');
                self.NFUnits=uilabel(...
                'UserData',userData,...
                'Tag','NFUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dBm',...
                'HorizontalAlignment','left');
                self.LOLabel=uilabel(...
                'UserData',userData,...
                'Tag','LOLabel',...
                'Parent',self.Layout,...
                'Text','LO Frequency',...
                'HorizontalAlignment','right');
                self.LOEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','LOEditField',...
                'Parent',self.Layout,...
                'Value',0.1e9,...
                'HorizontalAlignment','left');
                self.LOUnits=uidropdown(...
                'UserData',userData,...
                'Tag','LOUnitsDropdown',...
                'Parent',self.Layout,...
                'Items',{'Hz','kHz','MHz','GHz','THz'},...
                'Value','GHz');
                self.ConverterTypeLabel=uilabel(...
                'UserData',userData,...
                'Tag','TypeLabel',...
                'Parent',self.Layout,...
                'Text','Converter Type',...
                'HorizontalAlignment','right');
                self.ConverterTypePopup=uidropdown(...
                'UserData',userData,...
                'Tag','ConverterTypeDropdown',...
                'Parent',self.Layout,...
                'Items',{'Down','Up'},...
                'Value','Up');
                self.ZinLabel=uilabel(...
                'UserData',userData,...
                'Tag','ZinLabel',...
                'Parent',self.Layout,...
                'Text','Input Impedance',...
                'HorizontalAlignment','right');
                self.ZinEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ZinEditField',...
                'Parent',self.Layout,...
                'Value',50,...
                'HorizontalAlignment','left');
                self.ZinUnits=uilabel(...
                'UserData',userData,...
                'Tag','ZinUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm',...
                'HorizontalAlignment','left');
                self.ZoutLabel=uilabel(...
                'UserData',userData,...
                'Tag','ZoutLabel',...
                'Parent',self.Layout,...
                'Text','Output Impedance',...
                'HorizontalAlignment','right');
                self.ZoutEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ZoutEditField',...
                'Parent',self.Layout,...
                'Value',50,...
                'HorizontalAlignment','left');
                self.ZoutUnits=uilabel(...
                'UserData',userData,...
                'Tag','ZoutUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm',...
                'HorizontalAlignment','left');

                self.IMTLabel=uilabel(...
                'UserData',userData,...
                'Tag','IMTLabel',...
                'Parent',self.Layout,...
                'Text','IMT',...
                'HorizontalAlignment','right');
                self.IMTEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','IMTEditField',...
                'Parent',self.Layout,...
                'Value','[99 99 99; 99 0 99; 99 99 99]',...
                'HorizontalAlignment','left');
                self.IMTUnits=uilabel(...
                'UserData',userData,...
                'Tag','IMTUnitsLabel',...
                'Parent',self.Layout,...
                'Text',' ',...
                'HorizontalAlignment','left');
                self.UseDataFileLabel=uilabel(...
                'UserData',userData,...
                'Tag','UseDataFileLabel',...
                'Parent',self.Layout,...
                'Text','Use Data File',...
                'HorizontalAlignment','right');
                self.UseDataFileCheckBox=uicheckbox(...
                'Parent',self.Layout,...
                'Tag','UseDataFileCheckBox',...
                'Text','',...
                'Value',0);
                self.FileNameLabel=uilabel(...
                'UserData',userData,...
                'Tag','FileNameLabel',...
                'Parent',self.Layout,...
                'Text','File Name',...
                'HorizontalAlignment','right');
                self.FileNameEdit=uieditfield(...
                'UserData',userData,...
                'Tag','FileNameEditField',...
                'Parent',self.Layout,...
                'Value','samplespur1.s2d',...
                'HorizontalAlignment','left');
                self.FileNameButton=uibutton(...
                'UserData',userData,...
                'Tag','FileNameButton',...
                'Parent',self.Layout,...
                'Text',' Browse ');
                self.ApplyLabel=uibutton(...
                'Tag','ApplyButton',...
                'Parent',self.Layout,...
                'Text','Apply',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');
                self.MGrid=uigridlayout('Parent',self.Layout,'RowHeight',{'1x','1x'},'ColumnWidth',{'1x','1x'});
                self.IMTuitable=uitable('Parent',self.MGrid,'RowName','',...
                'ColumnEditable',false);
                self.Title1=uilabel(...
                'UserData',userData,...
                'Parent',self.Layout,...
                'Tag','TitleLabel',...
                'Text','Mixer IMT Table Visualization',...
                'FontColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');

                for i=1:length(self.Layout.RowHeight)
                    self.Layout.RowHeight{i}=29;
                end
            else
                self.Panel=uipanel(...
                'Parent',self.Parent.View.ParametersFig,...
                'Title','',...
                'BorderType','line',...
                'HighlightColor',[.5,.5,.5],...
                'Visible','on');
                self.Title=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TitleLabel',...
                'String','Mixer IMT Element',...
                'ForegroundColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NameLabel',...
                'String','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Name',...
                'String','MixerIMT',...
                'HorizontalAlignment','left');
                self.ReferenceInputPowerLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ReferenceInputPowerLabel',...
                'String','Reference Input Power',...
                'HorizontalAlignment','right');
                self.ReferenceInputPowerEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','ReferenceInputPower',...
                'String','-15',...
                'Tag',...
                'ReferenceInputPower',...
                'HorizontalAlignment','left');
                self.ReferenceInputPowerUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ReferenceInputPowerUnitsLabel',...
                'String','dBm',...
                'HorizontalAlignment','left');
                self.NominalOutputPowerLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NominalOutputPowerLabel',...
                'String','Nominal Output Power',...
                'HorizontalAlignment','right');
                self.NominalOutputPowerEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','NominalOutputPower',...
                'String','-5',...
                'HorizontalAlignment','left');
                self.NominalOutputPowerUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NominalOutputPowerUnitsLabel',...
                'String','dBm',...
                'HorizontalAlignment','left');
                self.NFLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NFLabel',...
                'String','Noise Figure',...
                'HorizontalAlignment','right');
                self.NFEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','NF',...
                'String','0',...
                'HorizontalAlignment','left');
                self.NFUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NFUnitsLabel',...
                'String','dBm',...
                'HorizontalAlignment','left');
                self.LOLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LOLabel',...
                'String','LO Frequency',...
                'HorizontalAlignment','right');
                self.LOEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','LO',...
                'String','0.1e9',...
                'HorizontalAlignment','left');
                self.LOUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Hz','kHz','MHz','GHz','THz'},...
                'Tag','LOUnits',...
                'Value',3,...
                'HorizontalAlignment','left');
                self.ConverterTypeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ConverterTypeLabel',...
                'String','Converter Type',...
                'HorizontalAlignment','right');
                self.ConverterTypePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Down','Up'},...
                'Tag','ConverterType',...
                'Value',2,...
                'HorizontalAlignment','left');
                self.ZinLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZinLabel',...
                'String','Input Impedance',...
                'HorizontalAlignment','right');
                self.ZinEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Zin',...
                'String','50',...
                'HorizontalAlignment','left');
                self.ZinUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZinUnitsLabel',...
                'String','Ohm',...
                'HorizontalAlignment','left');
                self.ZoutLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZoutLabel',...
                'String','Output Impedance',...
                'HorizontalAlignment','right');
                self.ZoutEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Zout',...
                'String','50',...
                'HorizontalAlignment','left');
                self.ZoutUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ZoutUnitsLabel',...
                'String','Ohm',...
                'HorizontalAlignment','left');
                self.IMTLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','IMTLabel',...
                'String','IMT',...
                'HorizontalAlignment','right');
                self.IMTEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','IMT',...
                'String','[99 99 99; 99 0 99; 99 99 99]',...
                'Tag',...
                'IMT',...
                'HorizontalAlignment','left');
                self.IMTUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','IMTUnitsLabel',...
                'String','',...
                'HorizontalAlignment','left');
                self.UseDataFileLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TypeLabel',...
                'String','Use Data File',...
                'HorizontalAlignment','right');
                self.UseDataFileCheckBox=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','checkbox',...
                'Tag','UseDataFile',...
                'Value',0,...
                'HorizontalAlignment','left');
                self.FileNameLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','FileNameLabel',...
                'String','File Name',...
                'HorizontalAlignment','right');
                self.FileNameEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','FileName',...
                'String','samplespur1.s2d',...
                'HorizontalAlignment','left');
                self.FileNameButton=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','pushbutton',...
                'String',' Browse ',...
                'Tag','FileNameButton');
                self.ApplyLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','pushbutton',...
                'String','Apply',...
                'Tag','ApplyTag',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');
                self.IMTuitable=uitable('Parent',self.Panel,'RowName','',...
                'ColumnWidth','auto','ColumnEditable',false);
                self.Title1=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TitleLabel',...
                'String','Mixer IMT Table Visualization',...
                'ForegroundColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
            end
        end


        function layoutUIControls(self)


            hspacing=3;
            vspacing=4;
            value=self.UseDataFile;
            w1=rf.internal.apps.budget.SystemParametersSection.Width1;
            w2=rf.internal.apps.budget.SystemParametersSection.Width2;
            w3=rf.internal.apps.budget.SystemParametersSection.Width3;
            if self.Parent.View.UseAppContainer
            else

                self.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.Panel,...
                'VerticalGap',vspacing,...
                'HorizontalGap',hspacing,...
                'VerticalWeights',[0,0,0,0,0,0,0,0,0,0,0,1],...
                'HorizontalWeights',[0,1,0]);

            end
            row=1;
            titleHt=16;
            self.Parent.addTitle(self.Layout,self.Title,row,[1,3],...
            titleHt,hspacing,vspacing,self.Parent.View.UseAppContainer)
            h=24;
            row=row+1;
            self.Parent.addText(self.Layout,self.NameLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.NameEdit,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            row=row+1;
            self.Parent.addText(self.Layout,self.UseDataFileLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addPopup(self.Layout,self.UseDataFileCheckBox,row,2,w2,...
            h,self.Parent.View.UseAppContainer)

            if value
                row=row+1;
                self.Parent.addText(self.Layout,self.ReferenceInputPowerLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.ReferenceInputPowerEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.ReferenceInputPowerUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.NominalOutputPowerLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.NominalOutputPowerEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.NominalOutputPowerUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.FileNameLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FileNameEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addButton(self.Layout,self.FileNameButton,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.FileNameEdit.BackgroundColor=[1,0.96,0.88];
            else
                row=row+1;
                self.Parent.addText(self.Layout,self.ReferenceInputPowerLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.ReferenceInputPowerEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.ReferenceInputPowerUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.NominalOutputPowerLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.NominalOutputPowerEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.NominalOutputPowerUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.NFLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.NFEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.NFUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.ConverterTypeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addPopup(self.Layout,self.ConverterTypePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.LOLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LOEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addPopup(self.Layout,self.LOUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.ZinLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.ZinEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.ZinUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.ZoutLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.ZoutEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.ZoutUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.IMTLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.IMTEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.IMTUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
            end
            row=row+1;
            self.Parent.addText(self.Layout,self.ApplyLabel,row,2,w3,...
            h+10,self.Parent.View.UseAppContainer)

            row=row+1;
            self.Parent.addTitle(self.Layout,self.Title1,row,[1,3],...
            titleHt,hspacing,vspacing,self.Parent.View.UseAppContainer)


            if self.Parent.View.UseAppContainer
                row=row+1;
                self.Parent.addText(self.Layout,self.IMTuitable,row,[1,2],w3+180,...
                h+90,self.Parent.View.UseAppContainer)
            else
                if self.UseDataFile
                    tableheight=h+90;
                    tablewidth=w3+270;
                else
                    tableheight=h+90;
                    tablewidth=w3+220;
                end
                row=row+1;
                self.Parent.addText(self.Layout,self.IMTuitable,row,[1,2],tablewidth,...
                tableheight,self.Parent.View.UseAppContainer)
            end

            if self.Parent.View.UseAppContainer
                w=500;
                h=500;
                self.Layout.Visible='on';
            else
                [~,~,w,h]=getMinimumSize(self.Layout);
                self.Width=sum(w)+self.Layout.HorizontalGap*(numel(w)+1);
                self.Height=max(h(2:end-1))*numel(h(2:end))+...
                self.Layout.VerticalGap*(numel(h(2:end-1))+1)+(titleHt+2)+10;
            end
        end

        function parameterChanged(self,e)


            i=self.Parent.View.Canvas.SelectIdx;
            if strcmpi(e.EventName,'PostSet')||...
                strcmpi(e.EventName,'ValueChanged')||...
                strcmpi(e.EventName,'ButtonPushed')

                if self.Parent.View.UseAppContainer
                    name=e.Source.Tag;
                    uiObject=e.Source;
                    uiObjectType=class(uiObject);
                else
                    name=e.AffectedObject.Tag;
                    uiObject=e.AffectedObject;
                    uiObjectType=uiObject.Style;
                end
                key='';
            elseif strcmpi(e.EventName,'KeyPress')

                name=e.Source.Tag;
                uiObject=e.Source;
                uiObjectType=uiObject.Style;
                a=get(self.Parent.View.ParametersFig,'CurrentCharacter');
                if isempty(a)


                    return;
                end
                key=e.Key;
                if any(strcmpi(key,{'leftarrow',...
                    'uparrow',...
                    'downarrow',...
                    'rightarrow'}))

                    return;
                end
            end

            if strcmp(name,'LOUnits')
                name='LO';
            end

            applyflag=1;
            valueChangedColor=[1,0.96,0.88];
            if~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                if~any(strcmpi(uiObjectType,{'popupmenu','matlab.ui.control.DropDown'}))
                    if~strcmpi(key,'return')



                        if strcmpi(name,'NameEditField')||strcmpi(name,'Name')
                            self.NameChanged=1;
                        elseif~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                            self.OtherPropertiesChanged=1;
                        end
                    end
                else
                    if~strcmpi(key,'return')&&~strcmpi(key,'')


                        return;
                    elseif strcmpi(key,'')

                        self.OtherPropertiesChanged=1;
                    end
                end
            end
            if~strcmpi(key,'return')


                switch name
                case{'NameEditField','Name'}
                    self.NameEdit.BackgroundColor=valueChangedColor;
                case{'ReferenceInputPowerEditField','ReferenceInputPower'}
                    self.ReferenceInputPowerEdit.BackgroundColor=valueChangedColor;
                case{'NominalOutputPowerEditField','NominalOutputPower'}
                    self.NominalOutputPowerEdit.BackgroundColor=valueChangedColor;
                case{'NFEditField','NF'}
                    self.NFEdit.BackgroundColor=valueChangedColor;
                case{'LOEditField','LO'}
                    self.LOEdit.BackgroundColor=valueChangedColor;
                case{'LOUnitsDropdown'}
                    self.LOEdit.BackgroundColor=valueChangedColor;
                case{'ConverterTypeDropdown','ConverterType'}
                    self.ConverterTypePopup.BackgroundColor=valueChangedColor;
                case{'ZinEditField','Zin'}
                    self.ZinEdit.BackgroundColor=valueChangedColor;
                case{'ZoutEditField','Zout'}
                    self.ZoutEdit.BackgroundColor=valueChangedColor;
                case{'IMTEditField','IMT'}
                    self.IMTEdit.BackgroundColor=valueChangedColor;
                case{'UseDataFileCheckBox','UseDataFile'}
                    if self.Parent.View.UseAppContainer
                        self.ReferenceInputPowerEdit.Value=-15;
                        self.ReferenceInputPowerEdit.BackgroundColor=[1,0.96,0.88];
                        self.NominalOutputPowerEdit.Value=-5;
                        self.NominalOutputPowerEdit.BackgroundColor=[1,0.96,0.88];
                        self.NFEdit.Value=0;
                        self.NFEdit.BackgroundColor=[1,0.96,0.88];
                        self.ConverterTypePopup.Value='Up';
                        self.ConverterTypePopup.BackgroundColor=[1,0.96,0.88];
                        self.LOEdit.Value=100;
                        self.LOEdit.BackgroundColor=[1,0.96,0.88];
                        self.ZinEdit.Value=50;
                        self.ZinEdit.BackgroundColor=[1,0.96,0.88];
                        self.ZoutEdit.Value=50;
                        self.ZoutEdit.BackgroundColor=[1,0.96,0.88];
                        self.IMTEdit.Value=mat2str([99,99,99;99,0,99;99,99,99]);
                        self.IMTEdit.BackgroundColor=[1,0.96,0.88];
                    else
                        self.ReferenceInputPowerEdit.String=num2str(-15);
                        self.ReferenceInputPowerEdit.BackgroundColor=[1,0.96,0.88];
                        self.NominalOutputPowerEdit.String=num2str(-5);
                        self.NominalOutputPowerEdit.BackgroundColor=[1,0.96,0.88];
                        self.NFEdit.String=num2str(0);
                        self.NFEdit.BackgroundColor=[1,0.96,0.88];
                        self.ConverterTypePopup.Value=2;
                        self.ConverterTypePopup.BackgroundColor=[1,0.96,0.88];
                        self.LOEdit.String=num2str(100);
                        self.LOEdit.BackgroundColor=[1,0.96,0.88];
                        self.ZinEdit.String=num2str(50);
                        self.ZinEdit.BackgroundColor=[1,0.96,0.88];
                        self.ZoutEdit.String=num2str(50);
                        self.ZoutEdit.BackgroundColor=[1,0.96,0.88];
                        self.IMTEdit.String=mat2str([99,99,99;99,0,99;99,99,99]);
                        self.IMTEdit.BackgroundColor=[1,0.96,0.88];
                    end
                    parameterPaneChange(self)

                    layoutUIControls(self);
                    ViewDataFunction(self)
                    if self.Parent.View.UseAppContainer
                    else
                        add(...
                        self.Parent.Layout,self.Panel,2,1,...
                        'MinimumWidth',self.Width,...
                        'Fill','Horizontal',...
                        'MinimumHeight',self.Height,...
                        'Anchor','North')
                    end
                    if self.UseDataFile
                        self.ReferenceInputPowerEdit.Enable='off';
                        self.NominalOutputPowerEdit.Enable='off';
                    else
                        self.ReferenceInputPowerEdit.Enable='on';
                        self.NominalOutputPowerEdit.Enable='on';
                    end
                case{'FileNameEditField','FileName'}
                    self.FileNameEdit.BackgroundColor=valueChangedColor;
                case{'ApplyButton','ApplyTag'}
                    try
                        applyflag=0;


                        links=feature('hotlinks',0);
                        cleanup=onCleanup(@()feature('hotlinks',links));
                        applyFunction(self);
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                        if~feature('hotlinks')
                            feature('hotlinks',1)
                        end
                    end
                end
            end
drawnow
            if self.IsReturnKey
                try
                    applyflag=0;


                    links=feature('hotlinks',0);
                    cleanup=onCleanup(@()feature('hotlinks',links));
                    self.applyFunction();
                catch me
                    h=errordlg(me.message,'Error Dialog','modal');
                    uiwait(h)
                    self.Parent.View.enableActions(true);
                    if~feature('hotlinks')
                        feature('hotlinks',1)
                    end
                end
            end
            self.IsReturnKey=0;
            if applyflag
                self.ApplyLabel.Enable='on';
                self.Parent.View.setStatusBarMsg(...
                'Click ''Apply'' or hit ''Enter'' to update IMT parameters.');
                if self.Parent.View.UseAppContainer
                    self.Parent.notify('DisableCanvas',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                    'ApplyButton','off'));
                else
                    self.Parent.notify('DisableCanvas',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                    'ApplyTag','off'));
                end
            end
        end

        function ViewDataFunction(self)

            self.OtherPropertiesChanged=1;

            mixerIMTobj=mixerIMT_design(self);

            n=numel(mixerIMTobj.IMT(:,1));
            idx=1:size(mixerIMTobj.IMT);
            var{1}="N*LO/M*RF";
            Xname=[];
            Yname=[];
            for i=1:n
                Xname{i}=sprintf('LO*%d %s',idx(i)-1);
                var{i+1}=Xname{i};
                Yname{i}=sprintf('RF*%d %s',idx(i)-1);
            end

            data=[Yname(:),mat2cell(mixerIMTobj.IMT,ones(1,size(mixerIMTobj.IMT,2)),ones(1,size(mixerIMTobj.IMT,1)))];

            self.IMTuitable.Data=data;
            self.IMTuitable.ColumnName=var;

            if self.Parent.View.UseAppContainer
                if mixerIMTobj.UseDataFile
                    self.IMTuitable.Layout.Row=[9,18];
                else
                    self.IMTuitable.Layout.Row=[14,18];
                end
            end
        end

        function applyFunction(self)


            if self.Parent.View.UseAppContainer
                valueString='Value';
            else
                valueString='String';
            end

            if~self.NameChanged&&~self.OtherPropertiesChanged

                self.IsReturnKey=0;
                i=self.Parent.View.Canvas.SelectIdx;
                if self.Parent.View.UseAppContainer
                    self.Parent.notify('DisableCanvas',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,'ApplyButton','inactive'));
                else
                    self.Parent.notify('DisableCanvas',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,'ApplyTag','inactive'));
                end
                return;
            end

            self.Parent.View.enableActions(false);
            i=self.Parent.View.Canvas.SelectIdx;

            mixerIMTobj=mixerIMT_design(self);


            ViewDataFunction(self);

            if self.Parent.View.UseAppContainer
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,'ApplyButton','inactive'));
            else
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,'ApplyTag','inactive'));
            end
            if self.NameChanged&&~self.OtherPropertiesChanged

                self.Parent.notify('ElementParameterChanged',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'Name',self.NameEdit.(valueString)));
            else


                if self.Parent.View.UseAppContainer
                    self.Parent.notify('ElementParameterChanged',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                    'ApplyButton',mixerIMTobj));
                else
                    self.Parent.notify('ElementParameterChanged',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                    'ApplyTag',mixerIMTobj));
                end
            end

            whiteColor=[1,1,1];
            self.NameEdit.BackgroundColor=whiteColor;
            self.ReferenceInputPowerEdit.BackgroundColor=whiteColor;
            self.NominalOutputPowerEdit.BackgroundColor=whiteColor;
            self.NFEdit.BackgroundColor=whiteColor;
            self.LOEdit.BackgroundColor=whiteColor;
            self.ZinEdit.BackgroundColor=whiteColor;
            self.ZoutEdit.BackgroundColor=whiteColor;
            self.ConverterTypePopup.BackgroundColor=whiteColor;
            self.IMTEdit.BackgroundColor=whiteColor;
            self.FileNameEdit.BackgroundColor=whiteColor;
            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
            self.NameChanged=0;
            self.OtherPropertiesChanged=0;
            self.IsReturnKey=0;
            self.Parent.View.enableActions(true);
            if self.UseDataFile
                self.ReferenceInputPowerEdit.Enable='off';
                self.NominalOutputPowerEdit.Enable='off';
            end
        end

        function parameterPaneChange(self)
            value=self.UseDataFile;

            if value
                self.ReferenceInputPowerLabel.Visible='on';
                self.ReferenceInputPowerEdit.Visible='on';
                self.ReferenceInputPowerUnits.Visible='on';

                self.NominalOutputPowerLabel.Visible='on';
                self.NominalOutputPowerEdit.Visible='on';
                self.NominalOutputPowerUnits.Visible='on';

                self.NFLabel.Visible='off';
                self.NFEdit.Visible='off';
                self.NFUnits.Visible='off';

                self.ConverterTypeLabel.Visible='off';
                self.ConverterTypePopup.Visible='off';

                self.LOLabel.Visible='off';
                self.LOEdit.Visible='off';
                self.LOUnits.Visible='off';

                self.ZinLabel.Visible='off';
                self.ZinEdit.Visible='off';
                self.ZinUnits.Visible='off';

                self.ZoutLabel.Visible='off';
                self.ZoutEdit.Visible='off';
                self.ZoutUnits.Visible='off';

                self.IMTLabel.Visible='off';
                self.IMTEdit.Visible='off';
                self.IMTUnits.Visible='off';

                self.FileNameLabel.Visible='on';
                self.FileNameEdit.Visible='on';
                self.FileNameButton.Visible='on';

            else
                self.ReferenceInputPowerLabel.Visible='on';
                self.ReferenceInputPowerEdit.Visible='on';
                self.ReferenceInputPowerUnits.Visible='on';

                self.NominalOutputPowerLabel.Visible='on';
                self.NominalOutputPowerEdit.Visible='on';
                self.NominalOutputPowerUnits.Visible='on';

                self.NFLabel.Visible='on';
                self.NFEdit.Visible='on';
                self.NFUnits.Visible='on';

                self.ConverterTypeLabel.Visible='on';
                self.ConverterTypePopup.Visible='on';

                self.LOLabel.Visible='on';
                self.LOEdit.Visible='on';
                self.LOUnits.Visible='on';

                self.ZinLabel.Visible='on';
                self.ZinEdit.Visible='on';
                self.ZinUnits.Visible='on';

                self.ZoutLabel.Visible='on';
                self.ZoutEdit.Visible='on';
                self.ZoutUnits.Visible='on';

                self.IMTLabel.Visible='on';
                self.IMTEdit.Visible='on';
                self.IMTUnits.Visible='on';

                self.FileNameLabel.Visible='off';
                self.FileNameEdit.Visible='off';
                self.FileNameButton.Visible='off';
            end
        end

        function FigKeyEvent(self,ev)

            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.MixerIMTDialog')
                key=ev.Key;
                switch key
                case 'return'
                    self.IsReturnKey=1;
                end
            end
        end

        function FigKeyEventCanvas(self,ev)



            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.MixerIMTDialog')
                key=ev.Key;
                switch key
                case 'return'
                    try
                        self.applyFunction();
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                    end
                end
            end
        end


        function addListeners(self)


            if self.Parent.View.UseAppContainer
                self.NameEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ConverterTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ReferenceInputPowerEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.NominalOutputPowerEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.NFEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LOEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LOUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.IMTEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ZinEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ZoutEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FileNameEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.UseDataFileCheckBox.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ApplyLabel.ButtonPushedFcn=@(h,e)parameterChanged(self,e);
            else
                self.Listeners.LOUnits=addlistener(self.LOUnits,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.LOUnits.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.ConverterType=addlistener(self.ConverterTypePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.ConverterTypePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.NameEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ReferenceInputPowerEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.NFEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.LOEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.NominalOutputPowerEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.IMTEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.UseDataFile=addlistener(self.UseDataFileCheckBox,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.ZinEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ZoutEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.FileNameEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.Apply=addlistener(self.ApplyLabel,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
            end
        end

        function mixerIMTobj=mixerIMT_design(self)



            val=self.UseDataFile;

            if val
                mixerIMTobj=mixerIMT('Name',self.Name,...
                'FileName',self.FileName,...
                'UseDataFile',self.UseDataFile);
                self.ReferenceInputPower=mixerIMTobj.ReferenceInputPower;
                self.NominalOutputPower=mixerIMTobj.NominalOutputPower;
            else
                mixerIMTobj=mixerIMT('Name',self.Name,...
                'ReferenceInputPower',self.ReferenceInputPower,...
                'NominalOutputPower',self.NominalOutputPower,...
                'NF',self.NF,...
                'LO',self.LO,...
                'ConverterType',self.ConverterType,...
                'Zin',self.Zin,...
                'Zout',self.Zout,...
                'IMT',self.IMT,...
                'UseDataFile',self.UseDataFile);
            end
        end
    end
end




