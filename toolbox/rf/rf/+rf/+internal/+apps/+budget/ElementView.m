classdef ElementView<handle&matlab.mixin.Heterogeneous





    properties

Canvas

Panel

Picture


StageText

LineIn

LineOut

Layout

Width

Height
    end

    properties(Dependent)
Visible
ElementTag

ElementRowHeight
ElementColumnWidth

PictureRowHeight
PictureColumnWidth

StageTextRowHeight
StageTextColumnWidth
    end

    properties(Access=protected)
        IsSelected=false
    end

    properties(Constant)
        IconHeight=60
        IconWidth=60
        TextWidth=62
        TextHeight=20
        FontSize=7+ispc*1+ismac*4
        LabelFontSize=11;
        BackGround1=[.85,.85,.85];
        BackGround2=[.945,.945,.945];
    end

    methods

        function self=ElementView(canvas,parent)




            self.Canvas=canvas;

            createElementView(self,parent)
            layoutElementView(self)
        end


        function val=get.Visible(self)
            val=self.Panel.Visible;
        end

        function set.Visible(self,val)
            self.Panel.Visible=val;
            self.LineIn.Visible=val;
            self.LineOut.Visible=val;
        end

        function rtn=get.ElementTag(self)
            switch class(self)
            case 'rf.internal.apps.budget.AmplifierView'
                rtn='amplifier';
            case 'rf.internal.apps.budget.AntennaView'
                rtn='antenna';
            case 'rf.internal.apps.budget.AttenuatorView'
                rtn='attenuator';
            case 'rf.internal.apps.budget.FilterView'
                rtn='filter';
            case 'rf.internal.apps.budget.ModulatorView'
                rtn='modulator';
            case 'rf.internal.apps.budget.NportView'
                rtn='nport';
            case 'rf.internal.apps.budget.RFelementView'
                rtn='rfelement';
            case 'rf.internal.apps.budget.seriesRLCView'
                rtn='seriesRLC';
            case 'rf.internal.apps.budget.shuntRLC'
                rtn='shuntRLC';
            case 'rf.internal.apps.budget.TxlineView'
                rtn='txline';
            case 'rf.internal.apps.budget.MixerIMTView'
                rtn='mixerIMT';
            case 'rf.internal.apps.budget.PowerAmplifierView'
                rtn='powerAmplifier';
            otherwise
                rtn='';
            end
        end

        function rtn=get.ElementRowHeight(self)
            rtn=self.Canvas.CascadeRowHeight;
        end


        function rtn=get.ElementColumnWidth(self)
            rtn={10,self.IconWidth,10};
        end

        function rtn=get.PictureRowHeight(self)
            rtn=self.Canvas.CascadeRowHeight(1:5);
        end

        function rtn=get.PictureColumnWidth(self)
            rtn=self.IconWidth;
        end

        function rtn=get.StageTextRowHeight(self)
            rtn=self.Canvas.CascadeRowHeight(6:9);
        end

        function rtn=get.StageTextColumnWidth(self)
            rtn=self.PictureColumnWidth;
        end



        function createElementView(self,parent)


            if self.Canvas.View.UseAppContainer
                if~isempty(self.Canvas.Cascade)

                    idx=self.Canvas.InsertIdx+3;

                    rf.internal.apps.budget.insert(self.Canvas.Cascade.Layout,'col',idx);
                    self.Canvas.Cascade.Layout.ColumnWidth{idx}=80;

                    self.Layout=uigridlayout(...
                    'Parent',self.Canvas.Cascade.Layout,...
                    'Scrollable','off',...
                    'Padding',[0,0,0,0],...
                    'Tag',[self.ElementTag,'Layout'],...
                    'RowSpacing',0,...
                    'ColumnSpacing',0,...
                    'BackgroundColor','w',...
                    'RowHeight',self.ElementRowHeight,...
                    'ColumnWidth',self.ElementColumnWidth);
                    self.Layout.Layout.Row=[1,9];
                    self.Layout.Layout.Column=idx;
                end
            else
                self.Panel=uipanel(...
                'Tag',[self.ElementTag,'Panel'],...
                'Parent',parent,...
                'Units','pixels',...
                'BackgroundColor','w',...
                'BorderType','none');
            end

            createPicture(self)
            createStageText(self)
            createWires(self,parent)

            self.Visible='off';
        end

        function createPicture(self)

            if self.Canvas.View.UseAppContainer
                if~isempty(self.Canvas.Cascade)

                    self.Picture.Layout=uigridlayout(...
                    'Tag',[self.ElementTag,'PictureLayout'],...
                    'Parent',self.Layout,...
                    'Padding',[0,0,0,0],...
                    'Visible','on',...
                    'ColumnSpacing',0,...
                    'RowSpacing',0,...
                    'BackgroundColor','w',...
                    'RowHeight',self.PictureRowHeight,...
                    'ColumnWidth',self.PictureColumnWidth,...
                    'Scrollable','off');
                    self.Picture.Layout.Layout.Row=[1,5];
                    self.Picture.Layout.Layout.Column=1;

                    self.Picture.Block=uiimage(...
                    'Tag',[self.ElementTag,'PictureBlockImage'],...
                    'Parent',self.Picture.Layout,...
                    'BackgroundColor','w',...
                    'Visible','on');
                    if~isempty(self.Icon)
                        self.Picture.Block.ImageSource=self.Icon;
                    end

                    self.Picture.Name=uilabel(...
                    'Parent',self.Picture.Layout,...
                    'Text','',...
                    'Tag',[self.ElementTag,'PictureNameLabel'],...
                    'FontSize',rf.internal.apps.budget.ElementView.LabelFontSize,...
                    'HorizontalAlignment','center',...
                    'FontColor','k',...
                    'BackgroundColor','w');
                end
            else

                self.Picture.Panel=uipanel(...
                'Tag',[self.ElementTag,'PicturePanel'],...
                'Parent',self.Panel,...
                'Units','pixels',...
                'Title','',...
                'BackgroundColor','w',...
                'BorderType','none',...
                'Visible','on');

                self.Picture.Block=uicontrol(...
                self.Picture.Panel,...
                'Style','checkbox',...
                'Tag',[self.ElementTag,'PictureBlockCheckbox'],...
                'Units','pixels',...
                'BackgroundColor','w',...
                'ForegroundColor','w',...
                'CData',self.Icon,...
                'Enable','inactive',...
                'Visible','on');

                self.Picture.Name=uicontrol(...
                self.Picture.Panel,...
                'Style','text',...
                'Tag',[self.ElementTag,'PictureNameLabel'],...
                'Units','pixels',...
                'String','',...
                'FontSize',rf.internal.apps.budget.ElementView.FontSize,...
                'HorizontalAlignment','center',...
                'ForegroundColor','k',...
                'BackgroundColor','w',...
                'Enable','inactive');
            end
        end

        function createStageText(self)


            if self.Canvas.View.UseAppContainer

                self.StageText.Layout=uigridlayout(...
                'Tag',[self.ElementTag,'StageTextLayout'],...
                'Parent',self.Layout,...
                'Layout',matlab.ui.layout.GridLayoutOptions('Row',[6,9],'Column',1),...
                'RowHeight',self.StageTextRowHeight,...
                'ColumnWidth',self.StageTextColumnWidth,...
                'Padding',[0,0,0,0],...
                'ColumnSpacing',0,...
                'RowSpacing',0,...
                'BackgroundColor','w',...
                'Visible','on');
                self.StageText.Layout.Layout.Row=[6,9];
                self.StageText.Layout.Layout.Column=1;

                self.StageText.ID=uilabel(...
                'Parent',self.StageText.Layout,...
                'Text','1',...
                'FontSize',rf.internal.apps.budget.ElementView.LabelFontSize,...
                'FontWeight','bold',...
                'HorizontalAlignment','center',...
                'FontColor','k',...
                'BackgroundColor','w');

                self.StageText.Gain=uilabel(...
                'Parent',self.StageText.Layout,...
                'Text','0',...
                'FontSize',rf.internal.apps.budget.ElementView.LabelFontSize,...
                'HorizontalAlignment','center',...
                'FontColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround1);

                self.StageText.NF=uilabel(...
                'Parent',self.StageText.Layout,...
                'Text','0',...
                'FontSize',rf.internal.apps.budget.ElementView.LabelFontSize,...
                'HorizontalAlignment','center',...
                'FontColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround2);

                self.StageText.OIP3=uilabel(...
                'Parent',self.StageText.Layout,...
                'Text','Inf',...
                'FontSize',rf.internal.apps.budget.ElementView.LabelFontSize,...
                'HorizontalAlignment','center',...
                'FontColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround1);
            else
                self.StageText.Panel=uipanel(...
                'Tag',[self.ElementTag,'StageTextPanel'],...
                'Parent',self.Panel,...
                'Units','pixels',...
                'Title','',...
                'BackgroundColor','w',...
                'BorderType','none',...
                'Visible','on');

                self.StageText.ID=uicontrol(...
                self.StageText.Panel,...
                'Style','text',...
                'Tag',[self.ElementTag,'StageTextIDLabel'],...
                'Units','pixels',...
                'String','1',...
                'FontSize',rf.internal.apps.budget.ElementView.FontSize,...
                'FontWeight','bold',...
                'HorizontalAlignment','center',...
                'ForegroundColor','k',...
                'BackgroundColor','w',...
                'Enable','inactive');

                self.StageText.Gain=uicontrol(...
                self.StageText.Panel,...
                'Style','edit',...
                'Tag',[self.ElementTag,'StageTextGainEditField'],...
                'Units','pixels',...
                'String','0',...
                'FontSize',rf.internal.apps.budget.ElementView.FontSize,...
                'HorizontalAlignment','center',...
                'ForegroundColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround1,...
                'Enable','inactive');

                self.StageText.NF=uicontrol(...
                self.StageText.Panel,...
                'Style','edit',...
                'Tag',[self.ElementTag,'StageTextNFEditField'],...
                'Units','pixels',...
                'String','0',...
                'FontSize',rf.internal.apps.budget.ElementView.FontSize,...
                'HorizontalAlignment','center',...
                'ForegroundColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround2,...
                'Enable','inactive');

                self.StageText.OIP3=uicontrol(...
                self.StageText.Panel,...
                'Style','edit',...
                'Tag',[self.ElementTag,'StageTextOIP3EditField'],...
                'Units','pixels',...
                'String','Inf',...
                'FontSize',rf.internal.apps.budget.ElementView.FontSize,...
                'HorizontalAlignment','center',...
                'ForegroundColor','k',...
                'BackgroundColor',...
                rf.internal.apps.budget.ElementView.BackGround1,...
                'Enable','inactive');
            end
        end

        function createWires(self,parent)

            if self.Canvas.View.UseAppContainer
                if~isempty(self.Canvas.Cascade)
                    self.LineIn=uipanel(...
                    'Parent',self.Layout,...
                    'Tag',[self.ElementTag,'LineInPanel'],...
                    'ForegroundColor','k',...
                    'BackgroundColor','k',...
                    'BorderType','none',...
                    'Visible','on');
                    self.LineOut=uipanel(...
                    'Parent',self.Layout,...
                    'Tag',[self.ElementTag,'LineOutPanel'],...
                    'ForegroundColor','k',...
                    'BackgroundColor','k',...
                    'BorderType','none',...
                    'Visible','on');
                end
            else
                self.LineIn=uicontrol(parent,...
                'Style','frame',...
                'Units','pixels',...
                'Tag',[self.ElementTag,'LineInPanel'],...
                'ForegroundColor','k',...
                'BackgroundColor','k',...
                'Visible','on');
                self.LineOut=uicontrol(parent,...
                'Style','frame',...
                'Units','pixels',...
                'Tag',[self.ElementTag,'LineOutPanel'],...
                'ForegroundColor','k',...
                'BackgroundColor','k',...
                'Visible','on');
            end
        end


        function layoutElementView(self)








            layoutPicture(self);
            layoutStageText(self);
            if self.Canvas.View.UseAppContainer
                if~isempty(self.Picture)

                    self.Layout.Layout.Row=[1,9];
                    self.Layout.Layout.Column=self.Canvas.InsertIdx+3;

                    self.LineIn.Layout.Row=3;
                    self.LineIn.Layout.Column=1;

                    self.Picture.Layout.Layout.Row=[1,5];
                    self.Picture.Layout.Layout.Column=2;

                    self.StageText.Layout.Layout.Row=[6,9];
                    self.StageText.Layout.Layout.Column=2;

                    self.LineOut.Layout.Row=3;
                    self.LineOut.Layout.Column=3;
                    verticalGap=rf.internal.apps.budget.ElementView.TextHeight/2;

                    self.Width=30;
                    self.Height=30;
                end
            else
                verticalGap=rf.internal.apps.budget.ElementView.TextHeight/2;

                self.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.Panel,...
                'VerticalGap',0,...
                'HorizontalGap',0,...
                'VerticalWeights',[0,0,1],...
                'HorizontalWeights',1);

                add(...
                self.Layout,self.Picture.Panel,1,1,...
                'MinimumWidth',self.Picture.Width+2,...
                'MinimumHeight',self.Picture.Height+2,...
                'Anchor','North')

                add(...
                self.Layout,self.StageText.Panel,2,1,...
                'TopInset',verticalGap,...
                'MinimumWidth',self.StageText.Width+2,...
                'MinimumHeight',self.StageText.Height+3,...
                'Anchor','North')

                [self.Width,self.Height]=getMinimumSize(self.Layout);
            end
        end

        function layoutPicture(self)


            if self.Canvas.View.UseAppContainer
                if~isempty(self.Picture)

                    iconWidth=rf.internal.apps.budget.ElementView.IconWidth;
                    iconHeight=rf.internal.apps.budget.ElementView.IconHeight;

                    self.Picture.Block.Layout.Row=[2,4];
                    self.Picture.Block.Layout.Column=1;

                    textWidth=rf.internal.apps.budget.ElementView.TextWidth;
                    textHeight=rf.internal.apps.budget.ElementView.TextHeight;

                    self.Picture.Name.Layout.Row=5;
                    self.Picture.Name.Layout.Column=1;

                    self.Picture.Width=30;
                    self.Picture.Height=30;
                end
            else

                self.Picture.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.Picture.Panel,...
                'VerticalGap',0,...
                'HorizontalGap',0,...
                'VerticalWeights',[0,1],...
                'HorizontalWeights',0);

                iconWidth=rf.internal.apps.budget.ElementView.IconWidth;
                iconHeight=rf.internal.apps.budget.ElementView.IconHeight;

                add(...
                self.Picture.Layout,self.Picture.Block,1,1,...
                'MinimumWidth',iconWidth+2,...
                'MinimumHeight',iconHeight+2)

                textWidth=rf.internal.apps.budget.ElementView.TextWidth;
                textHeight=rf.internal.apps.budget.ElementView.TextHeight;

                add(...
                self.Picture.Layout,self.Picture.Name,2,1,...
                'MinimumWidth',textWidth,...
                'MinimumHeight',textHeight)

                [self.Picture.Width,self.Picture.Height]=...
                getMinimumSize(self.Picture.Layout);
            end
        end

        function layoutStageText(self)


            if self.Canvas.View.UseAppContainer
                verticalGap=-1;

                textWidth=rf.internal.apps.budget.ElementView.TextWidth;
                textHeight=rf.internal.apps.budget.ElementView.TextHeight;

                self.StageText.ID.Parent=self.StageText.Layout;
                self.StageText.ID.Layout.Row=1;
                self.StageText.ID.Layout.Column=1;

                self.StageText.Gain.Parent=self.StageText.Layout;
                self.StageText.Gain.Layout.Row=2;
                self.StageText.Gain.Layout.Column=1;

                self.StageText.NF.Parent=self.StageText.Layout;
                self.StageText.NF.Layout.Row=3;
                self.StageText.NF.Layout.Column=1;

                self.StageText.OIP3.Parent=self.StageText.Layout;
                self.StageText.OIP3.Layout.Row=4;
                self.StageText.OIP3.Layout.Column=1;

                self.StageText.Width=15;
                self.StageText.Height=15;
            else
                verticalGap=-1;
                self.StageText.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.StageText.Panel,...
                'VerticalGap',verticalGap,...
                'HorizontalGap',0,...
                'VerticalWeights',[zeros(1,5),1],...
                'HorizontalWeights',1);
                textWidth=rf.internal.apps.budget.ElementView.TextWidth;
                textHeight=rf.internal.apps.budget.ElementView.TextHeight;
                add(...
                self.StageText.Layout,self.StageText.ID,1,1,...
                'TopInset',3,...
                'MinimumWidth',textWidth,...
                'MinimumHeight',textHeight-3)
                add(...
                self.StageText.Layout,self.StageText.Gain,2,1,...
                'MinimumWidth',textWidth,...
                'MinimumHeight',textHeight)
                add(...
                self.StageText.Layout,self.StageText.NF,3,1,...
                'MinimumWidth',textWidth,...
                'MinimumHeight',textHeight)
                add(...
                self.StageText.Layout,self.StageText.OIP3,4,1,...
                'MinimumWidth',textWidth,...
                'MinimumHeight',textHeight)
                [self.StageText.Width,self.StageText.Height]=...
                getMinimumSize(self.StageText.Layout);
            end
        end

        function refreshLayout(~)
        end

        function selectElement(self,elem)




            self.IsSelected=true;
            if self.Canvas.View.UseAppContainer
                self.Picture.Block.ImageSource=...
                highlight(self,3,[0,153,255]./255);
            else
                self.Picture.Block.CData=...
                highlight(self,3,[0,153,255]./255);
            end
            self.Canvas.View.Parameters.SelectedStage=self.Canvas.SelectIdx;

            self.Canvas.View.Parameters.ElementType=elem;

            self.Canvas.View.Toolstrip.DeleteBtn.Enabled=true;
        end

        function unselectElement(self)



            self.IsSelected=false;
            if self.Canvas.View.UseAppContainer
                self.Picture.Block.ImageSource=self.Icon;
            else
                self.Picture.Block.CData=self.Icon;
            end
            self.Canvas.View.Parameters.ElementType='';
            self.Canvas.View.Toolstrip.DeleteBtn.Description=...
            'Delete selected element from canvas';
        end

        function out=highlight(self,width,clr)


            out=self.Icon;
            c=uint8(round(clr*255));
            for i=1:3
                out(1:width,:,i)=c(i);
                out(end-width+1:end,:,i)=c(i);
                out(:,1:width,i)=c(i);
                out(:,end-width+1:end,i)=c(i);
            end
        end
    end
end




