classdef TxlineDialog<handle






    properties
Parent
Panel
Layout
        Width=0
        Height=0
Listeners
TypePopup
IntpTypePopup
TerminationPopup
StubModePopup
FrequencyUnits
    end

    properties(Dependent)
Name
Type
txWidth
txHeight
Thickness
EpsilonR
LossTangent
SigmaCond
LineLength
Termination
StubMode

InnerRadius
OuterRadius
MuR

ConductorWidth
SlotWidth

Radius
Separation

Frequency
R
L
C
G
IntpType

Z0
LossDB
PhaseVelocity

TimeDelay
Resistance
ApplyEnableTag

PropertyStruct
DielectricThickness
    end

    properties(Dependent,SetObservable=true)
ApplyValue
    end

    properties(Access=private)
Title

NameLabel
NameEdit

TypeLabel

txWidthLabel
txWidthEdit
txWidthUnits

txHeightLabel
txHeightEdit
txHeightUnits

ThicknessLabel
ThicknessEdit
ThicknessUnits

EpsilonRLabel
EpsilonREdit
EpsilonRUnits

LossTangentLabel
LossTangentEdit
LossTangentUnits

SigmaCondLabel
SigmaCondEdit
SigmaCondUnits

LineLengthLabel
LineLengthEdit
LineLengthUnits

TerminationLabel

StubModeLabel

ApplyLabel

OuterRadiusLabel
OuterRadiusEdit
OuterRadiusUnits

InnerRadiusLabel
InnerRadiusEdit
InnerRadiusUnits

MuRLabel
MuREdit
MuRUnits

ConductorWidthLabel
ConductorWidthEdit
ConductorWidthUnits

SlotWidthLabel
SlotWidthEdit
SlotWidthUnits

RadiusLabel
RadiusEdit
RadiusUnits

SeparationLabel
SeparationEdit
SeparationUnits

FrequencyLabel
FrequencyEdit

RLabel
REdit
RUnits

LLabel
LEdit
LUnits

CLabel
CEdit
CUnits

GLabel
GEdit
GUnits

IntpTypeLabel

Z0Label
Z0Edit
Z0Units

LossDBLabel
LossDBEdit
LossDBUnits

PhaseVelocityLabel
PhaseVelocityEdit
PhaseVelocityUnits

TimeDelayLabel
TimeDelayEdit
TimeDelayUnits
ResistanceLabel
ResistanceEdit
ResistanceUnits

DTLabel
DTEdit
DTUnits

        IsReturnKey=0
        NameChanged=0
        OtherPropertiesChanged=0

        pPropertyStruct=struct(...
        'microstrip',...
        struct(...
        'Name','microstrip',...
        'txHeight','6.3500e-04',...
        'Thickness','5.0000e-06',...
        'txWidth','6.0000e-04',...
        'EpsilonR','9.8',...
        'LossTangent','0',...
        'SigmaCond','Inf',...
        'LineLength','0.0100',...
        'Termination',1',...
        'StubMode',1),...
        'coaxial',...
        struct(...
        'Name','coaxial',...
        'OuterRadius','0.0026',...
        'InnerRadius','7.2500e-04',...
        'MuR','1',...
        'EpsilonR','2.3',...
        'LossTangent','0',...
        'SigmaCond','Inf',...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'cpw',...
        struct(...
        'Name','cpw','ConductorWidth','6.0000e-04',...
        'SlotWidth','2.0000e-04',...
        'txHeight','6.3500e-04',...
        'Thickness','5.0000e-06',...
        'EpsilonR','9.8',...
        'LossTangent','0',...
        'SigmaCond','Inf',...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'twowire',...
        struct(...
        'Name','twowire',...
        'Radius','6.7000e-04',...
        'Separation','0.00162',...
        'MuR','1',...
        'EpsilonR','2.3',...
        'LossTangent','0',...
        'SigmaCond','Inf',...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'parallelplate',...
        struct(...
        'Name','parallelplate',...
        'txWidth','0.0050',...
        'Separation','1.0000e-03',...
        'MuR','1',...
        'EpsilonR','2.3',...
        'LossTangent','0',...
        'SigmaCond','Inf',...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'rlcgline',...
        struct(...
        'Name','rlcgline','Frequency','1',...
        'R','0','L','0',...
        'C','0','G','0',...
        'IntpType',1,...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'equationbased',...
        struct(...
        'Name','equationbased','Frequency','1',...
        'Z0','50','LossDB','0',...
        'PhaseVelocity','299792458',...
        'IntpType',1,...
        'LineLength','0.0100',...
        'Termination',1,...
        'StubMode',1),...
        'delaylossless',...
        struct(...
        'Name','Delaylossless',...
        'Z0','50',...
        'TimeDelay','1e-12'),...
        'delaylossy',...
        struct(...
        'Name','Delaylossy',...
        'Z0','50',...
        'LineLength','0.0100',...
        'TimeDelay','4.7000e-09',...
        'Resistance','0.3000'),...
        'stripline',...
        struct(...
        'Name','stripline',...
        'DielectricThickness','0.0032',...
        'Thickness','1.0000e-05',...
        'txWidth','0.0027',...
        'EpsilonR','2.2',...
        'LossTangent','1.0000e-03',...
        'SigmaConductivity','Inf',...
        'LineLength','0.0100',...
        'Termination',1',...
        'StubMode',1));

        pPropertyStructAppContainer=struct(...
        'microstrip',...
        struct(...
        'Name','microstrip',...
        'txHeight',6.3500e-04,...
        'Thickness',5.0000e-06,...
        'txWidth',6.0000e-04,...
        'EpsilonR',9.8,...
        'LossTangent',0,...
        'SigmaCond',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'coaxial',...
        struct(...
        'Name','coaxial',...
        'OuterRadius',0.0026,...
        'InnerRadius',7.2500e-04,...
        'MuR',1,...
        'EpsilonR',2.3,...
        'LossTangent',0,...
        'SigmaCond',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'cpw',...
        struct(...
        'Name','cpw',...
        'ConductorWidth',6.0000e-04,...
        'SlotWidth',2.0000e-04,...
        'txHeight',6.3500e-04,...
        'Thickness',5.0000e-06,...
        'EpsilonR',9.8,...
        'LossTangent',0,...
        'SigmaCond',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'twowire',...
        struct(...
        'Name','twowire',...
        'Radius',6.7000e-04,...
        'Separation',0.00162,...
        'MuR',1,...
        'EpsilonR',2.3,...
        'LossTangent',0,...
        'SigmaCond',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'parallelplate',...
        struct(...
        'Name','parallelplate',...
        'txWidth',0.0050,...
        'Separation',1.0000e-03,...
        'MuR',1,...
        'EpsilonR',2.3,...
        'LossTangent',0,...
        'SigmaCond',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'rlcgline',...
        struct(...
        'Name','rlcgline',...
        'Frequency',1,...
        'R',0,'L',0,...
        'C',0,'G',0,...
        'IntpType',1,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'equationbased',...
        struct(...
        'Name','equationbased','Frequency',1,...
        'Z0',50,'LossDB',0,...
        'PhaseVelocity',299792458,...
        'IntpType',1,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1),...
        'delaylossless',...
        struct(...
        'Name','Delaylossless',...
        'Z0',50,...
        'TimeDelay',1e-12'),...
        'delaylossy',...
        struct(...
        'Name','Delaylossy',...
        'Z0',50,...
        'LineLength',0.0100,...
        'TimeDelay',4.7000e-09,...
        'Resistance',0.3000),...
        'stripline',...
        struct(...
        'Name','stripline',...
        'DielectricThickness',0.0032,...
        'Thickness',1.0000e-05,...
        'txWidth',0.0027,...
        'EpsilonR',2.2,...
        'LossTangent',1.0000e-03,...
        'SigmaConductivity',Inf,...
        'LineLength',0.0100,...
        'Termination',1,...
        'StubMode',1));
    end

    methods


        function self=TxlineDialog(parent,Type)




            if nargin==0
                parent=figure;
            end
            self.Parent=parent;
            createUIControls(self)
            str={'Microstrip','Coaxial','CPW','TwoWire','ParallelPlate',...
            'RLCGLine','EquationBased','DelayLossless','DelayLossy','Stripline'};
            out=strcmpi(str,Type);
            if self.Parent.View.UseAppContainer
                valueItems='Items';
                valueString='Value';
            else
                valueItems='String';
                valueString='String';
            end

            if self.Parent.View.UseAppContainer
                dropdownChoices={'Microstrip','Coaxial','CPW','Two Wire','Parallel Plate',...
                'RLCG Line','Equation Based','Delay Lossless','Delay Lossy','Stripline'};
                self.TypePopup.(valueItems)=dropdownChoices;
                self.TypePopup.(valueString)=dropdownChoices{out};
            else
                self.TypePopup.Value=find(out);
            end

            layoutUIControls(self)
            parameterPaneChange(self)
            self.ApplyLabel.Enable='off';
            addListeners(self)
        end

        function setFigureKeyPress(self)





            if self.Parent.View.UseAppContainer
                set(self.Parent.View.ParametersFig.Figure,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig.Figure,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            else
                set(self.Parent.View.ParametersFig,...
                'KeyPressFcn',@(h,e)FigKeyEventCanvas(self,e));
                self.Listeners.KeyPress=addlistener(...
                self.Parent.View.ParametersFig,...
                'WindowKeyPress',@(h,e)FigKeyEvent(self,e));
            end
        end
    end

    methods


        function rtn=get.PropertyStruct(self)
            if self.Parent.View.UseAppContainer
                rtn=self.pPropertyStructAppContainer;
            else
                rtn=self.pPropertyStruct;
            end
        end

        function set.PropertyStruct(self,newVal)
            if self.Parent.View.UseAppContainer
                self.pPropertyStructAppContainer=newVal;
            else
                self.pPropertyStruct=newVal;
            end
        end

        function str=get.Name(self)
            if self.Parent.View.UseAppContainer
                str=self.NameEdit.Value;
            else
                str=self.NameEdit.String;
            end
        end

        function set.Name(self,str)
            if self.Parent.View.UseAppContainer
                self.NameEdit.Value=str;
            else
                self.NameEdit.String=str;
            end
        end

        function str=get.Type(self)
            if self.Parent.View.UseAppContainer
                str=self.TypePopup.Value;
                str=strjoin(strsplit(str),'');
            else
                str=self.TypePopup.String{self.TypePopup.Value};
                str=strjoin(strsplit(str),'');
            end
        end

        function set.Type(self,str)
            str=strjoin(strsplit(str),'');
            if self.Parent.View.UseAppContainer
                self.TypePopup.Value=self.TypePopup.Items{strcmpi(self.TypePopup.Items,str)};
            else
                switch str
                case 'microstrip'
                    self.TypePopup.Value=1;
                case 'coaxial'
                    self.TypePopup.Value=2;
                case 'cpw'
                    self.TypePopup.Value=3;
                case 'twowire'
                    self.TypePopup.Value=4;
                case 'parallelplate'
                    self.TypePopup.Value=5;
                case 'rlcgline'
                    self.TypePopup.Value=6;
                case 'equationbased'
                    self.TypePopup.Value=7;
                case 'delaylossless'
                    self.TypePopup.Value=8;
                case 'delaylossy'
                    self.TypePopup.Value=9;
                case 'stripline'
                    self.TypePopup.Value=10;
                end
            end
        end

        function val=get.txWidth(self)
            if self.Parent.View.UseAppContainer
                val=self.txWidthEdit.Value;
            else
                val=str2num(self.txWidthEdit.String);
            end
        end

        function set.txWidth(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).txWidth=val;
                self.txWidthEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).txWidth=num2str(val);
                self.txWidthEdit.String=num2str(val);
            end
        end

        function val=get.txHeight(self)
            if self.Parent.View.UseAppContainer
                val=self.txHeightEdit.Value;
            else
                val=str2num(self.txHeightEdit.String);
            end
        end

        function set.txHeight(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).txHeight=val;
                self.txHeightEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).txHeight=num2str(val);
                self.txHeightEdit.String=num2str(val);
            end
        end

        function val=get.Thickness(self)
            if self.Parent.View.UseAppContainer
                val=self.ThicknessEdit.Value;
            else
                val=str2num(self.ThicknessEdit.String);
            end
        end

        function set.Thickness(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).Thickness=val;
                self.ThicknessEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).Thickness=num2str(val);
                self.ThicknessEdit.String=num2str(val);
            end
        end

        function val=get.EpsilonR(self)
            if self.Parent.View.UseAppContainer
                val=self.EpsilonREdit.Value;
            else
                val=str2num(self.EpsilonREdit.String);
            end
        end

        function set.EpsilonR(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).EpsilonR=val;
                self.EpsilonREdit.Value=val;
            else
                self.PropertyStruct.(self.Type).EpsilonR=num2str(val);
                self.EpsilonREdit.String=num2str(val);
            end
        end

        function val=get.LossTangent(self)
            if self.Parent.View.UseAppContainer
                val=self.LossTangentEdit.Value;
            else
                val=str2num(self.LossTangentEdit.String);
            end
        end

        function set.LossTangent(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).LossTangent=val;
                self.LossTangentEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).LossTangent=num2str(val);
                self.LossTangentEdit.String=num2str(val);
            end
        end

        function val=get.SigmaCond(self)
            if self.Parent.View.UseAppContainer
                val=self.SigmaCondEdit.Value;
            else
                val=str2num(self.SigmaCondEdit.String);
            end
        end

        function set.SigmaCond(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).SigmaCond=val;
                self.SigmaCondEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).SigmaCond=num2str(val);
                self.SigmaCondEdit.String=num2str(val);
            end
        end

        function val=get.LineLength(self)
            if self.Parent.View.UseAppContainer
                val=self.LineLengthEdit.Value;
            else
                val=str2num(self.LineLengthEdit.String);
            end
        end

        function set.LineLength(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).LineLength=val;
                self.LineLengthEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).LineLength=num2str(val);
                self.LineLengthEdit.String=num2str(val);
            end
        end

        function str=get.Termination(self)
            if self.Parent.View.UseAppContainer
                str=self.TerminationPopup.Value;
            else
                str=self.TerminationPopup.String{self.TerminationPopup.Value};
            end
        end

        function set.Termination(self,str)
            if self.Parent.View.UseAppContainer
                if strcmp(str,'NotApplicable')
                    self.TerminationPopup.Items={'NotApplicable'};
                elseif strcmp(str,'Open')
                    self.TerminationPopup.Items={'Open','Short'};
                else
                    self.TerminationPopup.Items={'Open','Short'};
                end
                self.TerminationPopup.Value=str;
                self.PropertyStruct.(self.Type).Termination=self.TerminationPopup.Value;
            else
                if strcmp(str,'NotApplicable')
                    self.TerminationPopup.String={'NotApplicable'};
                    self.TerminationPopup.Value=1;
                elseif strcmp(str,'Open')
                    self.TerminationPopup.String={'Open','Short'};
                    self.TerminationPopup.Value=1;
                else
                    self.TerminationPopup.String={'Open','Short'};
                    self.TerminationPopup.Value=2;
                end
                self.PropertyStruct.(self.Type).Termination=self.TerminationPopup.Value;
            end
        end

        function str=get.StubMode(self)
            if self.Parent.View.UseAppContainer
                str=self.StubModePopup.Value;
            else
                str=self.StubModePopup.String{self.StubModePopup.Value};
            end
        end

        function set.StubMode(self,str)
            if self.Parent.View.UseAppContainer
                self.StubModePopup.Value=str;
                if strcmp(str,'NotAStub')
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                elseif strcmp(str,'Series')
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                else
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                end
                self.PropertyStruct.(self.Type).StubMode=self.StubModePopup.Value;
            else
                if strcmp(str,'NotAStub')
                    self.StubModePopup.Value=1;
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                elseif strcmp(str,'Series')
                    self.StubModePopup.Value=2;
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                else
                    self.StubModePopup.Value=3;
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                end
                self.PropertyStruct.(self.Type).StubMode=self.StubModePopup.Value;
            end
        end

        function set.ApplyValue(self,val)
            if self.Parent.View.UseAppContainer

            else
                self.ApplyLabel.Value=val;
            end
        end

        function val=get.ApplyValue(self)
            if self.Parent.View.UseAppContainer
                val=-1;
            else
                val=self.ApplyLabel.Value;
            end
        end

        function val=get.OuterRadius(self)
            if self.Parent.View.UseAppContainer
                val=self.OuterRadiusEdit.Value;
            else
                val=str2num(self.OuterRadiusEdit.String);
            end
        end

        function set.OuterRadius(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).OuterRadius=val;
                self.OuterRadiusEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).OuterRadius=num2str(val);
                self.OuterRadiusEdit.String=num2str(val);
            end
        end

        function val=get.InnerRadius(self)
            if self.Parent.View.UseAppContainer
                val=self.InnerRadiusEdit.Value;
            else
                val=str2num(self.InnerRadiusEdit.String);
            end
        end

        function set.InnerRadius(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).InnerRadius=val;
                self.InnerRadiusEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).InnerRadius=num2str(val);
                self.InnerRadiusEdit.String=num2str(val);
            end
        end

        function val=get.MuR(self)
            if self.Parent.View.UseAppContainer
                val=self.MuREdit.Value;
            else
                val=str2num(self.MuREdit.String);
            end
        end

        function set.MuR(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).MuR=val;
                self.MuREdit.Value=val;
            else
                self.PropertyStruct.(self.Type).MuR=num2str(val);
                self.MuREdit.String=num2str(val);
            end
        end

        function val=get.ConductorWidth(self)
            if self.Parent.View.UseAppContainer
                val=self.ConductorWidthEdit.Value;
            else
                val=str2num(self.ConductorWidthEdit.String);
            end
        end

        function set.ConductorWidth(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).ConductorWidth=val;
                self.ConductorWidthEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).ConductorWidth=num2str(val);
                self.ConductorWidthEdit.String=num2str(val);
            end
        end

        function val=get.SlotWidth(self)
            if self.Parent.View.UseAppContainer
                val=self.SlotWidthEdit.Value;
            else
                val=str2num(self.SlotWidthEdit.String);
            end
        end

        function set.SlotWidth(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).SlotWidth=val;
                self.SlotWidthEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).SlotWidth=num2str(val);
                self.SlotWidthEdit.String=val;
            end
        end

        function val=get.Radius(self)
            if self.Parent.View.UseAppContainer
                val=self.RadiusEdit.Value;
            else
                val=str2num(self.RadiusEdit.String);
            end
        end

        function set.Radius(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).Radius=val;
                self.RadiusEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).Radius=num2str(val);
                self.RadiusEdit.Value=val;
            end
        end

        function val=get.Separation(self)
            if self.Parent.View.UseAppContainer
                val=self.SeparationEdit.Value;
            else
                val=str2num(self.SeparationEdit.String);
            end
        end

        function set.Separation(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).Separation=val;
                self.SeparationEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).Separation=num2str(val);
                self.SeparationEdit.String=num2str(val);
            end
        end

        function val=get.Frequency(self)
            if self.Parent.View.UseAppContainer
                fac=1e3^(find(strcmpi(self.FrequencyUnits.Value,self.FrequencyUnits.Items))-1);
                val=fac*str2num(self.FrequencyEdit.Value);
            else
                fac=1e3^(self.FrequencyUnits.Value-1);
                val=fac*str2num(self.FrequencyEdit.String);
            end
        end

        function set.Frequency(self,freq)
            [y,e,u]=engunits(freq);
            i=strcmp(u,{'','k','M','G','T'});
            if self.Parent.View.UseAppContainer
                if any(i)
                    self.FrequencyEdit.Value=mat2str(y);
                    self.FrequencyUnits.Value=self.FrequencyUnits.Items{i};
                elseif e<...
1e-12
                    self.FrequencyEdit.Value=freq*1e-12;
                    self.FrequencyUnits.Value='THz';
                else
                    self.FrequencyEdit.Value=freq;
                    self.FrequencyUnits.Value='Hz';
                end
            else
                if any(i)
                    self.FrequencyEdit.String=mat2str(y);
                    self.FrequencyUnits.Value=find(i);
                elseif e<...
1e-12
                    self.FrequencyEdit.String=mat2str(freq*1e-12);
                    self.FrequencyUnits.Value=5;
                else
                    self.FrequencyEdit.String=mat2str(freq);
                    self.FrequencyUnits.Value=1;
                end
            end
            self.PropertyStruct.(self.Type).Frequency=num2str(freq);
        end

        function val=get.R(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.REdit.Value);%#ok<*ST2NM>
            else
                val=str2num(self.REdit.String);%#ok<*ST2NM>
            end
        end

        function set.R(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).R=val;
                self.REdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).R=num2str(val);
                self.REdit.String=mat2str(val);
            end
        end

        function val=get.L(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.LEdit.Value);
            else
                val=str2num(self.LEdit.String);
            end
        end

        function set.L(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).L=val;
                self.LEdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).L=num2str(val);
                self.LEdit.String=mat2str(val);
            end
        end

        function val=get.C(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.CEdit.Value);
            else
                val=str2num(self.CEdit.String);
            end
        end

        function set.C(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).C=val;
                self.CEdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).C=num2str(val);
                self.CEdit.String=mat2str(val);
            end
        end

        function val=get.G(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.GEdit.Value);
            else
                val=str2num(self.GEdit.String);
            end
        end

        function set.G(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).G=val;
                self.GEdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).G=num2str(val);
                self.GEdit.String=mat2str(val);
            end
        end

        function str=get.IntpType(self)
            if self.Parent.View.UseAppContainer
                str=self.IntpTypePopup.Value;
            else
                str=self.IntpTypePopup.String{self.IntpTypePopup.Value};
            end
        end

        function set.IntpType(self,str)
            if self.Parent.View.UseAppContainer
                self.IntpTypePopup.Value=str;
                self.PropertyStruct.(self.Type).IntpType=self.IntpTypePopup.Value;
            else
                if strcmp(str,'Linear')
                    self.IntpTypePopup.Value=1;
                elseif strcmp(str,'Cubic')
                    self.IntpTypePopup.Value=2;
                else
                    self.IntpTypePopup.Value=3;
                end
                self.PropertyStruct.(self.Type).IntpType=self.IntpTypePopup.Value;
            end
        end

        function val=get.Z0(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.Z0Edit.Value);
            else
                val=str2num(self.Z0Edit.String);
            end
        end

        function set.Z0(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).Z0=val;
                self.Z0Edit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).Z0=num2str(val);
                self.Z0Edit.String=mat2str(val);
            end
        end

        function val=get.LossDB(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.LossDBEdit.Value);
            else
                val=str2num(self.LossDBEdit.String);
            end
        end

        function set.LossDB(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).LossDB=val;
                self.LossDBEdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).LossDB=num2str(val);
                self.LossDBEdit.String=mat2str(val);
            end
        end

        function val=get.PhaseVelocity(self)
            if self.Parent.View.UseAppContainer
                val=str2num(self.PhaseVelocityEdit.Value);
            else
                val=str2num(self.PhaseVelocityEdit.String);
            end
        end

        function set.PhaseVelocity(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).PhaseVelocity=val;
                self.PhaseVelocityEdit.Value=mat2str(val);
            else
                self.PropertyStruct.(self.Type).PhaseVelocity=num2str(val);
                self.PhaseVelocityEdit.String=mat2str(val);
            end
        end

        function val=get.TimeDelay(self)
            if self.Parent.View.UseAppContainer
                val=self.TimeDelayEdit.Value;
            else
                val=str2num(self.TimeDelayEdit.String);
            end
        end

        function set.TimeDelay(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).TimeDelay=val;
                self.TimeDelayEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).TimeDelay=num2str(val);
                self.TimeDelayEdit.String=num2str(val);
            end
        end

        function val=get.Resistance(self)
            if self.Parent.View.UseAppContainer
                val=self.ResistanceEdit.Value;
            else
                val=str2num(self.ResistanceEdit.String);
            end
        end

        function set.Resistance(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).Resistance=val;
                self.ResistanceEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).Resistance=num2str(val);
                self.ResistanceEdit.String=num2str(val);
            end
        end

        function val=get.DielectricThickness(self)
            if self.Parent.View.UseAppContainer
                val=self.DTEdit.Value;
            else
                val=str2num(self.DTEdit.String);
            end
        end

        function set.DielectricThickness(self,val)
            if self.Parent.View.UseAppContainer
                self.PropertyStruct.(self.Type).DielectricThickness=val;
                self.DTEdit.Value=val;
            else
                self.PropertyStruct.(self.Type).DielectricThickness=num2str(val);
                self.DTEdit.String=num2str(val);
            end
        end

        function val=get.ApplyEnableTag(self)
            val=self.ApplyLabel.Enable;
        end

        function setListenersEnable(self,val)

            self.Listeners.Name.Enabled=val;
            self.Listeners.Type.Enabled=val;
            self.Listeners.txWidth.Enabled=val;
            self.Listeners.txHeight.Enabled=val;
            self.Listeners.Thickness.Enabled=val;
            self.Listeners.EpsilonR.Enabled=val;
            self.Listeners.LossTangent.Enabled=val;
            self.Listeners.SigmaCond.Enabled=val;
            self.Listeners.Termination.Enabled=val;
            self.Listeners.StubMode.Enabled=val;
            self.Listeners.OuterRadius.Enabled=val;
            self.Listeners.InnerRadius.Enabled=val;
            self.Listeners.MuR.Enabled=val;
            self.Listeners.ConductorWidth.Enabled=val;
            self.Listeners.SlotWidth.Enabled=val;
            self.Listeners.Radius.Enabled=val;
            self.Listeners.Separation.Enabled=val;
            self.Listeners.Frequency.Enabled=val;
            self.Listeners.R.Enabled=val;
            self.Listeners.L.Enabled=val;
            self.Listeners.C.Enabled=val;
            self.Listeners.G.Enabled=val;
            self.Listeners.IntpType.Enabled=val;
            self.Listeners.Z0.Enabled=val;
            self.Listeners.LossDB.Enabled=val;
            self.Listeners.PhaseVelocity.Enabled=val;
            self.Listeners.TimeDelay.Enabled=val;
            self.Listeners.Resistance.Enabled=val;
            self.Listeners.DielectricThickness.Enabled=val;
        end


        function resetDialogAccess(self)

            whiteColor=[1,1,1];
            self.TypePopup.BackgroundColor=whiteColor;
            self.NameEdit.BackgroundColor=whiteColor;
            self.txWidthEdit.BackgroundColor=whiteColor;
            self.txHeightEdit.BackgroundColor=whiteColor;
            self.ThicknessEdit.BackgroundColor=whiteColor;
            self.EpsilonREdit.BackgroundColor=whiteColor;
            self.LossTangentEdit.BackgroundColor=whiteColor;
            self.SigmaCondEdit.BackgroundColor=whiteColor;
            self.LineLengthEdit.BackgroundColor=whiteColor;
            self.TerminationPopup.BackgroundColor=whiteColor;
            self.StubModePopup.BackgroundColor=whiteColor;
            self.InnerRadiusEdit.BackgroundColor=whiteColor;
            self.OuterRadiusEdit.BackgroundColor=whiteColor;
            self.MuREdit.BackgroundColor=whiteColor;
            self.ConductorWidthEdit.BackgroundColor=whiteColor;
            self.SlotWidthEdit.BackgroundColor=whiteColor;
            self.RadiusEdit.BackgroundColor=whiteColor;
            self.SeparationEdit.BackgroundColor=whiteColor;
            self.FrequencyEdit.BackgroundColor=whiteColor;
            self.REdit.BackgroundColor=whiteColor;
            self.LEdit.BackgroundColor=whiteColor;
            self.CEdit.BackgroundColor=whiteColor;
            self.GEdit.BackgroundColor=whiteColor;
            self.IntpTypePopup.BackgroundColor=whiteColor;
            self.Z0Edit.BackgroundColor=whiteColor;
            self.LossDBEdit.BackgroundColor=whiteColor;
            self.PhaseVelocityEdit.BackgroundColor=whiteColor;
            self.TimeDelayEdit.BackgroundColor=whiteColor;
            self.ResistanceEdit.BackgroundColor=whiteColor;
            self.DTEdit.BackgroundColor=whiteColor;

            self.OtherPropertiesChanged=0;
            self.NameChanged=0;
            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
        end

        function enableUIControls(self,val)




            if val==false
                val='off';
            elseif val==true
                val='on';
            end
            self.TypePopup.Enable=val;
            self.NameEdit.Enable=val;
            self.txWidthEdit.Enable=val;
            self.txHeightEdit.Enable=val;
            self.ThicknessEdit.Enable=val;
            self.EpsilonREdit.Enable=val;
            self.LossTangentEdit.Enable=val;
            self.SigmaCondEdit.Enable=val;
            self.LineLengthEdit.Enable=val;
            self.StubModePopup.Enable=val;
            self.InnerRadiusEdit.Enable=val;
            self.OuterRadiusEdit.Enable=val;
            self.MuREdit.Enable=val;
            self.ConductorWidthEdit.Enable=val;
            self.SlotWidthEdit.Enable=val;
            self.RadiusEdit.Enable=val;
            self.SeparationEdit.Enable=val;
            self.FrequencyEdit.Enable=val;
            self.REdit.Enable=val;
            self.LEdit.Enable=val;
            self.CEdit.Enable=val;
            self.GEdit.Enable=val;
            self.IntpTypePopup.Enable=val;
            self.Z0Edit.Enable=val;
            self.LossDBEdit.Enable=val;
            self.PhaseVelocityEdit.Enable=val;
            self.TimeDelayEdit.Enable=val;
            self.ResistanceEdit.Enable=val;
            self.DTEdit.Enable=val;

            if strcmpi(val,'on')
                if self.OtherPropertiesChanged||...
                    self.NameChanged
                    self.ApplyLabel.Enable='on';
                else
                    self.ApplyLabel.Enable='off';
                end
                if strcmpi(self.StubMode,'NotAStub')
                    self.TerminationPopup.Enable='off';
                else
                    self.TerminationPopup.Enable='on';
                end
            else
                self.ApplyLabel.Enable='off';
                self.TerminationPopup.Enable='off';
            end
        end
    end

    methods(Access=private)



        function createUIControls(self)


            userData=struct(...
            'Dialog','txline',...
            'Stage',self.Parent.SelectedStage);
            if self.Parent.View.UseAppContainer

                self.Layout=uigridlayout(...
                'Parent',self.Parent.View.ParametersFig.Figure,...
                'Scrollable','on',...
                'Tag','Layout',...
                'RowSpacing',3,...
                'ColumnSpacing',2,...
                'Visible','off');
                self.Title=uilabel(...
                'UserData',userData,...
                'Tag','TitleLabel',...
                'Parent',self.Layout,...
                'Text',' Transmission Line Element',...
                'FontColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uilabel(...
                'UserData',userData,...
                'Tag','NameLabel',...
                'Parent',self.Layout,...
                'Text','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uieditfield(...
                'UserData',userData,...
                'Tag','NameEditField',...
                'Parent',self.Layout,...
                'Value','TransmissionLine',...
                'HorizontalAlignment','left');
                self.TypeLabel=uilabel(...
                'UserData',userData,...
                'Tag','TypeLabel',...
                'Parent',self.Layout,...
                'Text','Type',...
                'HorizontalAlignment','right');
                self.TypePopup=uidropdown(...
                'UserData',userData,...
                'Tag','TypeDropdown',...
                'Parent',self.Layout,...
                'Items',{'Microstrip','Coaxial','CPW','Two Wire',...
                'Parallel Plate','RLCG Line','Equation Based','Delay Lossless',...
                'Delay Lossy','Stripline'},...
                'Value','Parallel Plate');
                self.txWidthLabel=uilabel(...
                'UserData',userData,...
                'Tag','WidthLabel',...
                'Parent',self.Layout,...
                'Text',...
                'Width',...
                'HorizontalAlignment','right');
                self.txWidthEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','WidthEditField',...
                'Parent',self.Layout,...
                'Value',6.0000e-04,...
                'Tag',...
                'Width',...
                'HorizontalAlignment','left');
                self.txWidthUnits=uilabel(...
                'UserData',userData,...
                'Tag','WidthUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.txHeightLabel=uilabel(...
                'UserData',userData,...
                'Tag','txHeightLabel',...
                'Parent',self.Layout,...
                'Text','Height',...
                'HorizontalAlignment','right');
                self.txHeightEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','HeightEditField',...
                'Parent',self.Layout,...
                'Value',6.3500e-04,...
                'HorizontalAlignment','left');
                self.txHeightUnits=uilabel(...
                'UserData',userData,...
                'Tag','txHeightUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.ThicknessLabel=uilabel(...
                'UserData',userData,...
                'Tag','ThicknessLabel',...
                'Parent',self.Layout,...
                'Text','Thickness',...
                'HorizontalAlignment','right');
                self.ThicknessEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ThicknessEditField',...
                'Parent',self.Layout,...
                'Value',5.0000e-06,...
                'HorizontalAlignment','left');
                self.ThicknessUnits=uilabel(...
                'UserData',userData,...
                'Tag','ThicknessUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.EpsilonRLabel=uilabel(...
                'UserData',userData,...
                'Tag','EpsilonRLabel',...
                'Parent',self.Layout,...
                'Text',...
                'EpsilonR',...
                'HorizontalAlignment','right');
                self.EpsilonREdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','EpsilonREditField',...
                'Parent',self.Layout,...
                'Value',9.8000,...
                'HorizontalAlignment','left');
                self.EpsilonRUnits=uilabel(...
                'UserData',userData,...
                'Tag','EpsilonRUnitsLabel',...
                'Parent',self.Layout,...
                'Text','',...
                'HorizontalAlignment','left');
                self.LossTangentLabel=uilabel(...
                'UserData',userData,...
                'Tag','LossTangentLabel',...
                'Parent',self.Layout,...
                'Text','Loss Tangent',...
                'HorizontalAlignment','right');
                self.LossTangentEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','LossTangentEditField',...
                'Parent',self.Layout,...
                'Value',0,...
                'HorizontalAlignment','left');
                self.LossTangentUnits=uilabel(...
                'UserData',userData,...
                'Tag','LossTangentUnitsLabel',...
                'Parent',self.Layout,...
                'Text','',...
                'HorizontalAlignment','left');
                self.SigmaCondLabel=uilabel(...
                'UserData',userData,...
                'Tag','SigmaLabel',...
                'Parent',self.Layout,...
                'Text','Sigma Conductivity',...
                'HorizontalAlignment','right');
                self.SigmaCondEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','SigmaCondEditField',...
                'Parent',self.Layout,...
                'Value',Inf,...
                'HorizontalAlignment','left');
                self.SigmaCondUnits=uilabel(...
                'UserData',userData,...
                'Tag','SigmaUnitsLabel',...
                'Parent',self.Layout,...
                'Text','S/m',...
                'HorizontalAlignment','left');
                self.LineLengthLabel=uilabel(...
                'UserData',userData,...
                'Tag','LineLengthLabel',...
                'Parent',self.Layout,...
                'Text','Line Length',...
                'HorizontalAlignment','right');
                self.LineLengthEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','LineLengthEditField',...
                'Parent',self.Layout,...
                'Value',0.0100,...
                'HorizontalAlignment','left');
                self.LineLengthUnits=uilabel(...
                'UserData',userData,...
                'Tag','LineLengthUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.TerminationLabel=uilabel(...
                'UserData',userData,...
                'Tag','TerminationLabel',...
                'Parent',self.Layout,...
                'Text',...
                'Termination',...
                'HorizontalAlignment','right');
                self.TerminationPopup=uidropdown(...
                'UserData',userData,...
                'Tag','TerminationDropdown',...
                'Parent',self.Layout,...
                'Items',{'NotApplicable','Open','Short'},...
                'Value','NotApplicable');
                self.StubModeLabel=uilabel(...
                'UserData',userData,...
                'Tag','StubModeLabel',...
                'Parent',self.Layout,...
                'Text','Stub Mode',...
                'HorizontalAlignment','right');
                self.StubModePopup=uidropdown(...
                'UserData',userData,...
                'Tag','StubModeDropdown',...
                'Parent',self.Layout,...
                'Items',{'NotAStub','Series','Shunt'},...
                'Value','NotAStub');

                self.ApplyLabel=uibutton(...
                'Tag','ApplyButton',...
                'Parent',self.Layout,...
                'Text','Apply',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');

                self.OuterRadiusLabel=uilabel(...
                'UserData',userData,...
                'Tag','OuterRadiusLabel',...
                'Parent',self.Layout,...
                'Text','Outer Radius',...
                'HorizontalAlignment','right');
                self.OuterRadiusEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','OuterRadiusEditField',...
                'Parent',self.Layout,...
                'Value',0.0026,...
                'HorizontalAlignment','left');
                self.OuterRadiusUnits=uilabel(...
                'UserData',userData,...
                'Tag','OuterRadiusUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.InnerRadiusLabel=uilabel(...
                'UserData',userData,...
                'Tag','InnerRadiusLabel',...
                'Parent',self.Layout,...
                'Text','Inner Radius',...
                'HorizontalAlignment','right');
                self.InnerRadiusEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','InnerRadiusEditField',...
                'Parent',self.Layout,...
                'Value',7.2500e-4,...
                'HorizontalAlignment','left');
                self.InnerRadiusUnits=uilabel(...
                'UserData',userData,...
                'Tag','InnerRadiusUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.MuRLabel=uilabel(...
                'UserData',userData,...
                'Tag','MuRLabel',...
                'Parent',self.Layout,...
                'Text',...
                'MuR',...
                'HorizontalAlignment','right');
                self.MuREdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','MuREditField',...
                'Parent',self.Layout,...
                'Value',1,...
                'HorizontalAlignment','left');
                self.MuRUnits=uilabel(...
                'UserData',userData,...
                'Tag','MuRUnitsLabel',...
                'Parent',self.Layout,...
                'Text','',...
                'HorizontalAlignment','left');

                self.ConductorWidthLabel=uilabel(...
                'UserData',userData,...
                'Tag','ConductorWidthLabel',...
                'Parent',self.Layout,...
                'Text','Conductor Width',...
                'HorizontalAlignment','right');
                self.ConductorWidthEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ConductorWidthEditField',...
                'Parent',self.Layout,...
                'Value',6.0000e-04,...
                'HorizontalAlignment','left');
                self.ConductorWidthUnits=uilabel(...
                'UserData',userData,...
                'Tag','ConductorWidthUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.SlotWidthLabel=uilabel(...
                'UserData',userData,...
                'Tag','ConductorWidthUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Slot Width',...
                'HorizontalAlignment','right');
                self.SlotWidthEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','SlotWidthEditField',...
                'Parent',self.Layout,...
                'Value',2.0000e-04,...
                'HorizontalAlignment','left');
                self.SlotWidthUnits=uilabel(...
                'UserData',userData,...
                'Tag','SlotWidthLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');

                self.RadiusLabel=uilabel(...
                'UserData',userData,...
                'Tag','RadiusLabel',...
                'Parent',self.Layout,...
                'Text',...
                'Radius',...
                'HorizontalAlignment','right');
                self.RadiusEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','RadiusEditField',...
                'Parent',self.Layout,...
                'Value',6.7000e-04,...
                'HorizontalAlignment','left');
                self.RadiusUnits=uilabel(...
                'UserData',userData,...
                'Tag','RadiusUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');
                self.SeparationLabel=uilabel(...
                'UserData',userData,...
                'Tag','SeparationLabel',...
                'Parent',self.Layout,...
                'Text','Separation',...
                'HorizontalAlignment','right');
                self.SeparationEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','SeparationEditField',...
                'Parent',self.Layout,...
                'Value',0.0016,...
                'HorizontalAlignment','left');
                self.SeparationUnits=uilabel(...
                'UserData',userData,...
                'Tag','SeparationUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');

                self.FrequencyLabel=uilabel(...
                'UserData',userData,...
                'Tag','FrequencyLabel',...
                'Parent',self.Layout,...
                'Text','Frequency',...
                'HorizontalAlignment','right');
                self.FrequencyEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','FrequencyEditField',...
                'Parent',self.Layout,...
                'Value','1',...
                'HorizontalAlignment','left');
                self.FrequencyUnits=uidropdown(...
                'UserData',userData,...
                'Tag','FrequencyUnitsDropdown',...
                'Parent',self.Layout,...
                'Items',{'Hz','kHz','MHz','GHz','THz'},...
                'Value','GHz');
                self.RLabel=uilabel(...
                'UserData',userData,...
                'Tag','RLabel',...
                'Parent',self.Layout,...
                'Text','R',...
                'HorizontalAlignment','right');
                self.REdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','REditField',...
                'Parent',self.Layout,...
                'Value','0',...
                'HorizontalAlignment','left');
                self.RUnits=uilabel(...
                'UserData',userData,...
                'Tag','RUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm/m',...
                'HorizontalAlignment','left');
                self.LLabel=uilabel(...
                'UserData',userData,...
                'Tag','LLabel',...
                'Parent',self.Layout,...
                'Text','L',...
                'HorizontalAlignment','right');
                self.LEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','LEditField',...
                'Parent',self.Layout,...
                'Value','0',...
                'HorizontalAlignment','left');
                self.LUnits=uilabel(...
                'UserData',userData,...
                'Tag','LUnitsLabel',...
                'Parent',self.Layout,...
                'Text','H/m',...
                'HorizontalAlignment','left');
                self.CLabel=uilabel(...
                'UserData',userData,...
                'Tag','CLabel',...
                'Parent',self.Layout,...
                'Text','C',...
                'HorizontalAlignment','right');
                self.CEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','CEditField',...
                'Parent',self.Layout,...
                'Value','0',...
                'HorizontalAlignment','left');
                self.CUnits=uilabel(...
                'UserData',userData,...
                'Tag','CUnitsLabel',...
                'Parent',self.Layout,...
                'Text','F/m',...
                'HorizontalAlignment','left');
                self.GLabel=uilabel(...
                'UserData',userData,...
                'Tag','GLabel',...
                'Parent',self.Layout,...
                'Text','G',...
                'HorizontalAlignment','right');
                self.GEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','GEditField',...
                'Parent',self.Layout,...
                'Value','0',...
                'HorizontalAlignment','left');
                self.GUnits=uilabel(...
                'UserData',userData,...
                'Tag','GUnitsLabel',...
                'Parent',self.Layout,...
                'Text','S/m',...
                'HorizontalAlignment','left');
                self.IntpTypeLabel=uilabel(...
                'UserData',userData,...
                'Tag','IntpTypeLabel',...
                'Parent',self.Layout,...
                'Text','Interpolation Type',...
                'HorizontalAlignment','right');
                self.IntpTypePopup=uidropdown(...
                'UserData',userData,...
                'Tag','IntpTypeDropdown',...
                'Parent',self.Layout,...
                'Items',{'Linear','Cubic','Spline'},...
                'Value','Linear');
                self.Z0Label=uilabel(...
                'UserData',userData,...
                'Tag','Z0Label',...
                'Parent',self.Layout,...
                'Text','Z0',...
                'HorizontalAlignment','right');
                self.Z0Edit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','Z0EditField',...
                'Parent',self.Layout,...
                'Value','50',...
                'HorizontalAlignment','left');
                self.Z0Units=uilabel(...
                'UserData',userData,...
                'Tag','Z0UnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm',...
                'HorizontalAlignment','left');
                self.LossDBLabel=uilabel(...
                'UserData',userData,...
                'Tag','LossDBLabel',...
                'Parent',self.Layout,...
                'Text','Loss',...
                'HorizontalAlignment','right');
                self.LossDBEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','LossDBEditField',...
                'Parent',self.Layout,...
                'Value','0',...
                'HorizontalAlignment','left');
                self.LossDBUnits=uilabel(...
                'UserData',userData,...
                'Tag','LossDBUnitsLabel',...
                'Parent',self.Layout,...
                'Text','dB',...
                'HorizontalAlignment','left');
                self.PhaseVelocityLabel=uilabel(...
                'UserData',userData,...
                'Tag','PhaseVelocityLabel',...
                'Parent',self.Layout,...
                'Text','Phase Velocity',...
                'HorizontalAlignment','right');
                self.PhaseVelocityEdit=uieditfield(...
                'text',...
                'UserData',userData,...
                'Tag','PhaseVelocityEditField',...
                'Parent',self.Layout,...
                'Value','299792458',...
                'HorizontalAlignment','left');
                self.PhaseVelocityUnits=uilabel(...
                'UserData',userData,...
                'Tag','PhaseVelocityUnitsLabel',...
                'Parent',self.Layout,...
                'Text','m/sec',...
                'HorizontalAlignment','left');
                self.TimeDelayLabel=uilabel(...
                'UserData',userData,...
                'Tag','TimeDelayLabel',...
                'Parent',self.Layout,...
                'Text','Time Delay:',...
                'HorizontalAlignment','right');
                self.TimeDelayEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','TimeDelayEditField',...
                'Parent',self.Layout,...
                'Value',1e-12,...
                'HorizontalAlignment','left');
                self.TimeDelayUnits=uilabel(...
                'UserData',userData,...
                'Tag','TimeDelayUnitsLabel',...
                'Parent',self.Layout,...
                'Text','seconds',...
                'HorizontalAlignment','left');
                self.ResistanceLabel=uilabel(...
                'UserData',userData,...
                'Tag','ResistanceLabel',...
                'Parent',self.Layout,...
                'Text','Resistance:',...
                'HorizontalAlignment','right');
                self.ResistanceEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','ResistanceEditField',...
                'Parent',self.Layout,...
                'Value',0.3000,...
                'HorizontalAlignment','left');
                self.ResistanceUnits=uilabel(...
                'UserData',userData,...
                'Tag','ResistanceUnitsLabel',...
                'Parent',self.Layout,...
                'Text','Ohm/m',...
                'HorizontalAlignment','left');
                self.DTLabel=uilabel(...
                'UserData',userData,...
                'Tag','DTLabel',...
                'Parent',self.Layout,...
                'Text','Dielectric Thickness',...
                'HorizontalAlignment','right');
                self.DTEdit=uieditfield(...
                'numeric',...
                'UserData',userData,...
                'Tag','DTEditField',...
                'Parent',self.Layout,...
                'Value',0.0032,...
                'HorizontalAlignment','left');
                self.DTUnits=uilabel(...
                'UserData',userData,...
                'Tag','DTUnitsLabel',...
                'Parent',self.Layout,...
                'Text','meters',...
                'HorizontalAlignment','left');

                for i=1:length(self.Layout.RowHeight)
                    self.Layout.RowHeight{i}=29;
                end
            else
                self.Panel=uipanel(...
                'Parent',self.Parent.View.ParametersFig,...
                'Title','',...
                'BorderType','line',...
                'HighlightColor',[.5,.5,.5],...
                'Visible','on');
                self.Title=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TitleLabel',...
                'String',' Transmission Line Element',...
                'ForegroundColor',[0,0,0],...
                'BackgroundColor',[.94,.94,.94],...
                'HorizontalAlignment','left');
                self.NameLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','NameLabel',...
                'String','Name',...
                'HorizontalAlignment','right');
                self.NameEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Name',...
                'String','TransmissionLine',...
                'HorizontalAlignment','left');
                self.TypeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'String','Type',...
                'HorizontalAlignment','right');
                self.TypePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Microstrip','Coaxial','CPW','Two Wire',...
                'Parallel Plate','RLCG Line','Equation Based','Delay Lossless',...
                'Delay Lossy','Stripline'},...
                'Tag','Type',...
                'Value',1);
                self.txWidthLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TxWidthLabel',...
                'String',...
                'Width',...
                'HorizontalAlignment','right');
                self.txWidthEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','TxWidth',...
                'String','6.0000e-04',...
                'Tag',...
                'Width',...
                'HorizontalAlignment','left');
                self.txWidthUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TxWidthUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.txHeightLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TxHeightLabel',...
                'String','Height',...
                'HorizontalAlignment','right');
                self.txHeightEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Height',...
                'String','6.3500e-04',...
                'HorizontalAlignment','left');
                self.txHeightUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TxHeightUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.ThicknessLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ThicknessLabel',...
                'String','Thickness',...
                'HorizontalAlignment','right');
                self.ThicknessEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Thickness',...
                'String','5.0000e-06',...
                'HorizontalAlignment','left');
                self.ThicknessUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ThicknessUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.EpsilonRLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','EpsilonRLabel',...
                'String',...
                'EpsilonR',...
                'HorizontalAlignment','right');
                self.EpsilonREdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','EpsilonR',...
                'String','9.8000',...
                'HorizontalAlignment','left');
                self.EpsilonRUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','EpsilonRUnitsLabel',...
                'String','',...
                'HorizontalAlignment','left');
                self.LossTangentLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LossTangentLabel',...
                'String','Loss Tangent',...
                'HorizontalAlignment','right');
                self.LossTangentEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','LossTangent',...
                'String','0',...
                'HorizontalAlignment','left');
                self.LossTangentUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LossTangentUnitsLabel',...
                'String','',...
                'HorizontalAlignment','left');
                self.SigmaCondLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SigmaLabel',...
                'String','Sigma Conductivity',...
                'HorizontalAlignment','right');
                self.SigmaCondEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','SigmaCond',...
                'String','Inf',...
                'HorizontalAlignment','left');
                self.SigmaCondUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SigmaUnitsLabel',...
                'String','S/m',...
                'HorizontalAlignment','left');
                self.LineLengthLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LineLengthLabel',...
                'String','Line Length',...
                'HorizontalAlignment','right');
                self.LineLengthEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','LineLength',...
                'String','0.0100',...
                'HorizontalAlignment','left');
                self.LineLengthUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LineLengthUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.TerminationLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TerminationLabel',...
                'String',...
                'Termination',...
                'HorizontalAlignment','right');
                self.TerminationPopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'NotApplicable','Open','Short'},...
                'Tag','Termination',...
                'Value',1);
                self.StubModeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','StubModeLabel',...
                'String','Stub Mode',...
                'HorizontalAlignment','right');
                self.StubModePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'NotAStub','Series','Shunt'},...
                'Tag','StubMode',...
                'Value',1);

                self.ApplyLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','pushbutton',...
                'String','Apply',...
                'Tag','ApplyTag',...
                'HorizontalAlignment','center',...
                'Tooltip','Apply parameters to selected Element (Enter)');

                self.OuterRadiusLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','OuterRadiusLabel',...
                'String','Outer Radius',...
                'HorizontalAlignment','right');
                self.OuterRadiusEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','OuterRadius',...
                'String','0.0026',...
                'HorizontalAlignment','left');
                self.OuterRadiusUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','OuterRadiusUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.InnerRadiusLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','InnerRadiusUnitsLabel',...
                'String','Inner Radius',...
                'HorizontalAlignment','right');
                self.InnerRadiusEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','InnerRadius',...
                'String','7.2500e-4',...
                'HorizontalAlignment','left');
                self.InnerRadiusUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','InnerRadiusUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.MuRLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','MuRLabel',...
                'String',...
                'MuR',...
                'HorizontalAlignment','right');
                self.MuREdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','MuR',...
                'String','1',...
                'HorizontalAlignment','left');
                self.MuRUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','MuRUnitsLabel',...
                'String','',...
                'HorizontalAlignment','left');

                self.ConductorWidthLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ConductorWidthLabel',...
                'String','Conductor Width',...
                'HorizontalAlignment','right');
                self.ConductorWidthEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','ConductorWidth',...
                'String','6.0000e-04',...
                'HorizontalAlignment','left');
                self.ConductorWidthUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ConductorWidthUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.SlotWidthLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SlotWidthLabel',...
                'String','Slot Width',...
                'HorizontalAlignment','right');
                self.SlotWidthEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','SlotWidth',...
                'String','2.0000e-04',...
                'HorizontalAlignment','left');
                self.SlotWidthUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SlotWidthUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');

                self.RadiusLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RadiusLabel',...
                'String',...
                'Radius',...
                'HorizontalAlignment','right');
                self.RadiusEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Radius',...
                'String','6.7000e-04',...
                'HorizontalAlignment','left');
                self.RadiusUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RadiusUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
                self.SeparationLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SeparationLabel',...
                'String','Separation',...
                'HorizontalAlignment','right');
                self.SeparationEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Separation',...
                'String','0.0016',...
                'HorizontalAlignment','left');
                self.SeparationUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','SeparationUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');

                self.FrequencyLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','FrequencyLabel',...
                'String','Frequency',...
                'HorizontalAlignment','right');
                self.FrequencyEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Frequency',...
                'String','1',...
                'HorizontalAlignment','left');
                self.FrequencyUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Hz','kHz','MHz','GHz','THz'},...
                'Tag','FrequencyUnits',...
                'Value',4,...
                'HorizontalAlignment','left');
                self.RLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RLabel',...
                'String','R',...
                'HorizontalAlignment','right');
                self.REdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','R',...
                'String','0',...
                'HorizontalAlignment','left');
                self.RUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','RUnitsLabel',...
                'String','Ohm/m',...
                'HorizontalAlignment','left');
                self.LLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LLabel',...
                'String','L',...
                'HorizontalAlignment','right');
                self.LEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','L',...
                'String','0',...
                'HorizontalAlignment','left');
                self.LUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LUnitsLabel',...
                'String','H/m',...
                'HorizontalAlignment','left');
                self.CLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','CLabel',...
                'String','C',...
                'HorizontalAlignment','right');
                self.CEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','C',...
                'String','0',...
                'HorizontalAlignment','left');
                self.CUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','CUnitsLabel',...
                'String','F/m',...
                'HorizontalAlignment','left');
                self.GLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','GLabel',...
                'String','G',...
                'HorizontalAlignment','right');
                self.GEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','G',...
                'String','0',...
                'HorizontalAlignment','left');
                self.GUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','GUnitsLabel',...
                'String','S/m',...
                'HorizontalAlignment','left');
                self.IntpTypeLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','IntpTypeLabel',...
                'String','Interpolation Type',...
                'HorizontalAlignment','right');
                self.IntpTypePopup=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','popup',...
                'String',{'Linear','Cubic','Spline'},...
                'Tag','IntpType',...
                'Value',1);
                self.Z0Label=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','Z0Label',...
                'String','Z0',...
                'HorizontalAlignment','right');
                self.Z0Edit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Z0',...
                'String','50',...
                'HorizontalAlignment','left');
                self.Z0Units=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','Z0UnitsLabel',...
                'String','Ohm',...
                'HorizontalAlignment','left');
                self.LossDBLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LossDbLabel',...
                'String','Loss',...
                'HorizontalAlignment','right');
                self.LossDBEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','LossDB',...
                'String','0',...
                'HorizontalAlignment','left');
                self.LossDBUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','LossDbUnitsLabel',...
                'String','dB',...
                'HorizontalAlignment','left');
                self.PhaseVelocityLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','PhaseVelocityLabel',...
                'String','Phase Velocity',...
                'HorizontalAlignment','right');
                self.PhaseVelocityEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','PhaseVelocity',...
                'String','299792458',...
                'HorizontalAlignment','left');
                self.PhaseVelocityUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','PhaseVelocityUnitsLabel',...
                'String','m/sec',...
                'HorizontalAlignment','left');
                self.TimeDelayLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TimeDelayLabel',...
                'String','Time Delay:',...
                'HorizontalAlignment','right');
                self.TimeDelayEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','TimeDelay',...
                'String','1e-12',...
                'HorizontalAlignment','left');
                self.TimeDelayUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','TimeDelayUnitsLabel',...
                'String','seconds',...
                'HorizontalAlignment','left');
                self.ResistanceLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ResistanceLabel',...
                'String','Resistance:',...
                'HorizontalAlignment','right');
                self.ResistanceEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','Resistance',...
                'String','0.3000',...
                'HorizontalAlignment','left');
                self.ResistanceUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','ResistanceUnitsLabel',...
                'String','Ohm/m',...
                'HorizontalAlignment','left');
                self.DTLabel=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','DTLabel',...
                'String','Dielectric Thickness',...
                'HorizontalAlignment','right');
                self.DTEdit=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','edit',...
                'Tag','DielectricThickness',...
                'String','0.0032',...
                'HorizontalAlignment','left');
                self.DTUnits=uicontrol(...
                'UserData',userData,...
                'Parent',self.Panel,...
                'Style','text',...
                'Tag','DTUnitsLabel',...
                'String','meters',...
                'HorizontalAlignment','left');
            end
        end



        function layoutUIControls(self)


            self.Panel.Visible='on';
            hspacing=3;
            vspacing=4;
            w1=rf.internal.apps.budget.SystemParametersSection.Width1;
            w2=rf.internal.apps.budget.SystemParametersSection.Width2;
            w3=rf.internal.apps.budget.SystemParametersSection.Width3;
            if self.Parent.View.UseAppContainer
            else
                if~isempty(self.Layout)
                    self.Layout.delete;
                end
                self.Layout=...
                matlabshared.application.layout.GridBagLayout(...
                self.Panel,...
                'VerticalGap',vspacing,...
                'HorizontalGap',hspacing,...
                'HorizontalWeights',[0,1,0]);

            end
            row=1;
            titleHt=16;

            self.Parent.addTitle(self.Layout,self.Title,row,[1,3],...
            titleHt,hspacing,vspacing,self.Parent.View.UseAppContainer)

            h=24;
            row=row+1;
            self.Parent.addText(self.Layout,self.NameLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.NameEdit,row,2,w2,...
            h,self.Parent.View.UseAppContainer)

            row=row+1;
            self.Parent.addText(self.Layout,self.TypeLabel,row,1,w1,...
            h,self.Parent.View.UseAppContainer)
            self.Parent.addEdit(self.Layout,self.TypePopup,row,2,w2,...
            h,self.Parent.View.UseAppContainer)
            if contains(self.Type,{'Microstrip','Coaxial','CPW','TwoWire','ParallelPlate','Stripline'})
                if strcmpi(self.Type,'coaxial')

                    row=row+1;
                    self.Parent.addText(self.Layout,self.OuterRadiusLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.OuterRadiusEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.OuterRadiusUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.OuterRadiusEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.InnerRadiusLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.InnerRadiusEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.InnerRadiusUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.InnerRadiusEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.MuRLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.MuREdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.MuRUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.MuREdit.BackgroundColor=[1,0.96,0.88];
                elseif strcmpi(self.Type,'cpw')
                    self.Panel.Visible='on';

                    row=row+1;
                    self.Parent.addText(self.Layout,self.ConductorWidthLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.ConductorWidthEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.ConductorWidthUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.ConductorWidthEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.SlotWidthLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.SlotWidthEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.SlotWidthUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.SlotWidthEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.ThicknessLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.ThicknessEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.ThicknessUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.ThicknessEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.txHeightLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.txHeightEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.txHeightUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.txHeightEdit.BackgroundColor=[1,0.96,0.88];
                elseif strcmpi(self.Type,'twowire')

                    row=row+1;
                    self.Parent.addText(self.Layout,self.RadiusLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.RadiusEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.RadiusUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.RadiusEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.SeparationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.SeparationEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.SeparationUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.SeparationEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.MuRLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.MuREdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.MuRUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.MuREdit.BackgroundColor=[1,0.96,0.88];
                elseif strcmpi(self.Type,'parallelplate')

                    row=row+1;
                    self.Parent.addText(self.Layout,self.txWidthLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.txWidthEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.txWidthUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.txWidthEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.SeparationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.SeparationEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.SeparationUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.SeparationEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.MuRLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.MuREdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.MuRUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.MuREdit.BackgroundColor=[1,0.96,0.88];
                elseif strcmpi(self.Type,'stripline')

                    row=row+1;
                    self.Parent.addText(self.Layout,self.txWidthLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.txWidthEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.txWidthUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.txWidthEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.DTLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.DTEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.DTUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.DTEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.ThicknessLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.ThicknessEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.ThicknessUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.ThicknessEdit.BackgroundColor=[1,0.96,0.88];
                else
                    self.Panel.Visible='on';

                    row=row+1;
                    self.Parent.addText(self.Layout,self.txWidthLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.txWidthEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.txWidthUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.txWidthEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.txHeightLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.txHeightEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.txHeightUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.txHeightEdit.BackgroundColor=[1,0.96,0.88];

                    row=row+1;
                    self.Parent.addText(self.Layout,self.ThicknessLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.ThicknessEdit,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addText(self.Layout,self.ThicknessUnits,row,3,w3,...
                    h,self.Parent.View.UseAppContainer)
                    self.ThicknessEdit.BackgroundColor=[1,0.96,0.88];
                end



                row=row+1;
                self.Parent.addText(self.Layout,self.EpsilonRLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.EpsilonREdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.EpsilonRUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.LossTangentLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LossTangentEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LossTangentUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.SigmaCondLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.SigmaCondEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.SigmaCondUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.LineLengthLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LineLengthEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LineLengthUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.StubModeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.StubModePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)

                if strcmpi(self.StubMode,'NotAStub')
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                else
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                end
            end
            if strcmpi(self.Type,'rlcgline')

                row=row+1;
                self.Parent.addText(self.Layout,self.FrequencyLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FrequencyEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.FrequencyUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.FrequencyEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.RLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.REdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.RUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.REdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.LLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.LEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.CLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.CEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.CUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.CEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.GLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.GEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.GUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.GEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.IntpTypeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.IntpTypePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.IntpTypePopup.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.LineLengthLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LineLengthEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LineLengthUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)

                row=row+1;
                self.Parent.addText(self.Layout,self.StubModeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.StubModePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)

                if strcmpi(self.StubMode,'NotAStub')
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                else
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                end
            end
            if strcmpi(self.Type,'equationbased')

                row=row+1;
                self.Parent.addText(self.Layout,self.FrequencyLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.FrequencyEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.FrequencyUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.FrequencyEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.Z0Label,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.Z0Edit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.Z0Units,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.Z0Edit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.LossDBLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LossDBEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LossDBUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.LossDBEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.PhaseVelocityLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.PhaseVelocityEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.PhaseVelocityUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.PhaseVelocityEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.IntpTypeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.IntpTypePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.IntpTypePopup.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.LineLengthLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LineLengthEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LineLengthUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)


                row=row+1;
                self.Parent.addText(self.Layout,self.StubModeLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.StubModePopup,row,2,w2,...
                h,self.Parent.View.UseAppContainer)


                if strcmpi(self.StubMode,'NotAStub')
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                else
                    row=row+1;
                    self.Parent.addText(self.Layout,self.TerminationLabel,row,1,w1,...
                    h,self.Parent.View.UseAppContainer)
                    self.Parent.addEdit(self.Layout,self.TerminationPopup,row,2,w2,...
                    h,self.Parent.View.UseAppContainer)
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                end
            end
            if strcmpi(self.Type,'delaylossless')

                row=row+1;
                self.Parent.addText(self.Layout,self.Z0Label,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.Z0Edit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.Z0Units,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.Z0Edit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.TimeDelayLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.TimeDelayEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.TimeDelayUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.TimeDelayEdit.BackgroundColor=[1,0.96,0.88];
            end
            if strcmpi(self.Type,'delaylossy')

                row=row+1;
                self.Parent.addText(self.Layout,self.Z0Label,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.Z0Edit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.Z0Units,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.Z0Edit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.LineLengthLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.LineLengthEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.LineLengthUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.TimeDelayLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.TimeDelayEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.TimeDelayUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.TimeDelayEdit.BackgroundColor=[1,0.96,0.88];

                row=row+1;
                self.Parent.addText(self.Layout,self.ResistanceLabel,row,1,w1,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addEdit(self.Layout,self.ResistanceEdit,row,2,w2,...
                h,self.Parent.View.UseAppContainer)
                self.Parent.addText(self.Layout,self.ResistanceUnits,row,3,w3,...
                h,self.Parent.View.UseAppContainer)
                self.ResistanceEdit.BackgroundColor=[1,0.96,0.88];
            end

            row=row+1;
            self.Parent.addButton(self.Layout,self.ApplyLabel,row,2,w3,...
            h+10,self.Parent.View.UseAppContainer)
            if self.Parent.View.UseAppContainer
                w=500;
                h=500;
                self.Layout.Visible='on';
            else
                [~,~,w,h]=getMinimumSize(self.Layout);
                self.Width=sum(w)+self.Layout.HorizontalGap*(numel(w)+1);
                self.Height=max(h(2:end-1))*numel(h(2:end))+...
                self.Layout.VerticalGap*(numel(h(2:end-1))+1)+(titleHt+2)+10;
            end
        end

        function parameterChanged(self,e)


            self.Panel.Visible='on';

            self.setListenersEnable(0);
            i=self.Parent.View.Canvas.SelectIdx;

            drawnow;
            if self.Parent.View.UseAppContainer
                valueItems='Items';
                valueString='Value';
            else
                valueItems='String';
                valueString='String';
            end
            if strcmpi(e.EventName,'PostSet')||...
                strcmpi(e.EventName,'ValueChanged')||...
                strcmpi(e.EventName,'ButtonPushed')

                if self.Parent.View.UseAppContainer
                    name=e.Source.Tag;
                    uiObject=e.Source;
                    uiObjectType=class(uiObject);
                else
                    name=e.AffectedObject.Tag;
                    uiObject=e.AffectedObject;
                    uiObjectType=uiObject.Style;
                end
                key='';
            elseif strcmpi(e.EventName,'KeyPress')

                name=e.Source.Tag;
                uiObject=e.Source;
                uiObjectType=uiObject.Style;
                a=get(self.Parent.View.ParametersFig,'CurrentCharacter');
                if isempty(a)


                    return;
                end
                key=e.Key;
                if any(strcmpi(key,{'leftarrow',...
                    'uparrow',...
                    'downarrow',...
                    'rightarrow'}))

                    return;
                end
            end
            if strcmp(name,'FrequencyUnits')
                name='Frequency';
            end
            applyflag=1;
            if~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                if~any(strcmpi(uiObjectType,{'popupmenu','matlab.ui.control.DropDown'}))
                    if~strcmpi(key,'return')



                        if strcmpi(name,'NameEditField')||strcmpi(name,'Name')
                            self.NameChanged=1;
                        elseif~strcmpi(name,'ApplyButton')||~strcmpi(name,'ApplyTag')
                            self.OtherPropertiesChanged=1;
                        end
                    end
                else
                    if~strcmpi(key,'return')&&~strcmpi(key,'')


                        return;
                    else
                        if strcmpi(key,'')

                            self.OtherPropertiesChanged=1;
                        end
                    end
                end
            end
            if~strcmpi(key,'return')
                switch name
                case{'TypeDropdown','Type'}
                    self.TypePopup.BackgroundColor=[1,0.96,0.88];
                    self.ApplyLabel.Enable='on';
                    self.Parent.View.setStatusBarMsg(...
                    'Click ''Apply'' to update txline parameters.');

                    propupdate(self)


                    parameterPaneChange(self)

                    layoutUIControls(self);
                    if self.Parent.View.UseAppContainer
                    else
                        add(...
                        self.Parent.Layout,self.Panel,2,1,...
                        'MinimumWidth',self.Width,...
                        'Fill','Horizontal',...
                        'MinimumHeight',self.Height,...
                        'Anchor','North')
                    end
                    if self.Parent.View.UseAppContainer
                        if strcmpi(self.Type,'RLCGLine')||strcmpi(self.Type,'EquationBased')
                            self.FrequencyUnits.Value='GHz';
                            self.FrequencyEdit.BackgroundColor=[1,0.96,0.88];
                        end
                    else
                        if strcmpi(self.Type,'RLCGLine')||strcmpi(self.Type,'EquationBased')
                            self.FrequencyEdit.String=num2str(1);
                            self.FrequencyUnits.Value=4;
                            self.FrequencyEdit.BackgroundColor=[1,0.96,0.88];
                        end
                    end
                case{'NameEditField','Name'}
                    self.NameEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Name=self.NameEdit.(valueString);
                case{'WidthEditField','Width'}
                    self.txWidthEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).txWidth=self.txWidthEdit.(valueString);
                case{'HeightEditField','Height'}
                    self.txHeightEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).txHeight=self.txHeightEdit.(valueString);
                case{'ThicknessEditField','Thickness'}
                    self.ThicknessEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Thickness=self.ThicknessEdit.(valueString);
                case{'EpsilonREditField','EpsilonR'}
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).EpsilonR=self.EpsilonREdit.(valueString);
                case{'LossTangentEditField','LossTangent'}
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).LossTangent=self.LossTangentEdit.(valueString);
                case{'SigmaCondEditField','SigmaCond'}
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).SigmaCond=self.SigmaCondEdit.(valueString);
                case{'LineLengthEditField','LineLength'}
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).LineLength=self.LineLengthEdit.(valueString);
                case{'TerminationDropdown','Termination'}
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                case{'StubModeDropdown','StubMode'}
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                    if isnumeric(self.StubModePopup.Value)
                        if(self.StubModePopup.Value==1)
                            notApplicable=true;
                        else
                            notApplicable=false;
                        end
                    else
                        if strcmpi(self.StubModePopup.Value,'NotAStub')
                            notApplicable=true;
                        else
                            notApplicable=false;
                        end
                    end
                    if notApplicable
                        self.TerminationPopup.(valueItems)={'NotApplicable'};
                        if~self.Parent.View.UseAppContainer
                            self.TerminationPopup.Value=1;
                        end
                        self.TerminationPopup.Enable='off';
                        self.TerminationPopup.Visible='off';
                        self.TerminationLabel.Visible='off';
                    else
                        self.TerminationPopup.(valueItems)={'Open','Short'};
                        self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                        self.TerminationPopup.Enable='on';
                        self.TerminationPopup.Visible='on';
                        self.TerminationLabel.Visible='on';
                    end
                    pause(0.1);
                case{'OuterRadiusEditField','OuterRadius'}
                    self.OuterRadiusEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).OuterRadius=self.OuterRadiusEdit.(valueString);
                case{'InnerRadiusEditField','InnerRadius'}
                    self.InnerRadiusEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).InnerRadius=self.InnerRadiusEdit.(valueString);
                case{'MuREditField','MuR'}
                    self.MuREdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).MuR=self.MuREdit.(valueString);
                case{'ConductorWidthEditField','ConductorWidth'}
                    self.ConductorWidthEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).ConductorWidth=self.ConductorWidthEdit.(valueString);
                case{'SlotWidthEditField','SlotWidth'}
                    self.SlotWidthEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).SlotWidth=self.SlotWidthEdit.(valueString);
                case{'SeparationEditField','Separation'}
                    self.SeparationEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Separation=self.SeparationEdit.(valueString);
                case{'RadiusEditField','Radius'}
                    self.RadiusEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Radius=self.RadiusEdit.(valueString);
                case{'FrequencyEditField','Frequency'}
                    self.FrequencyEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Frequency=self.FrequencyEdit.(valueString);
                case{'REditField','R'}
                    self.REdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).R=self.REdit.(valueString);
                case{'LEditField','L'}
                    self.LEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).L=self.LEdit.(valueString);
                case{'CEditField','C'}
                    self.CEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).C=self.CEdit.(valueString);
                case{'GEditField','G'}
                    self.GEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).G=self.GEdit.(valueString);
                case{'IntpTypeDropdown','IntpType'}
                    self.IntpTypePopup.BackgroundColor=[1,0.96,0.88];
                case{'Z0EditField','Z0'}
                    self.Z0Edit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Z0=self.Z0Edit.(valueString);
                case{'LossDBEditField','LossDB'}
                    self.LossDBEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).LossDB=self.LossDBEdit.(valueString);
                case{'PhaseVelocityEditField','PhaseVelocity'}
                    self.PhaseVelocityEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).PhaseVelocity=self.PhaseVelocityEdit.(valueString);
                case{'TimeDelayEditField','TimeDelay'}
                    self.TimeDelayEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).TimeDelay=self.TimeDelayEdit.(valueString);
                case{'ResistanceEditField','Resistance'}
                    self.ResistanceEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).Resistance=self.ResistanceEdit.(valueString);
                case{'DTEditField','DielectricThickness'}
                    self.DTEdit.BackgroundColor=[1,0.96,0.88];
                    self.PropertyStruct.(self.Type).DielectricThickness=self.DTEdit.(valueString);
                case{'ApplyButton','ApplyTag'}
                    try
                        applyflag=0;
                        self.applyFunction()
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                    end
                end
            end
            if self.IsReturnKey
                try
                    applyflag=0;
                    self.applyFunction();
                    self.Parent.notify('DisableCanvas',...
                    rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'inactive'));
                catch me
                    h=errordlg(me.message,'Error Dialog','modal');
                    uiwait(h)
                    self.Parent.View.enableActions(true);
                end
            end
            self.IsReturnKey=0;
            self.setListenersEnable(1)
            if applyflag
                self.ApplyLabel.Enable='on';
                self.Parent.View.setStatusBarMsg(...
                'Click ''Apply'' to update txline parameters.');
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'off'));
            end
        end

        function applyFunction(self)


            if self.Parent.View.UseAppContainer
                valueString='Value';
            else
                valueString='String';
            end
            if~self.NameChanged&&~self.OtherPropertiesChanged
                self.IsReturnKey=0;
                i=self.Parent.View.Canvas.SelectIdx;
                self.Parent.notify('DisableCanvas',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'ApplyButton','inactive'));
                return;
            end
            self.Parent.View.enableActions(false);
            i=self.Parent.View.Canvas.SelectIdx;
            name='ApplyButton';

            txlineObj=txline_design(self);
            self.Parent.notify('DisableCanvas',...
            rf.internal.apps.budget.ElementParameterChangedEventData(i,name,'inactive'));
            if self.NameChanged&&~self.OtherPropertiesChanged
                self.Parent.notify('ElementParameterChanged',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'Name',self.NameEdit.(valueString)));
            else
                self.Parent.notify('ElementParameterChanged',...
                rf.internal.apps.budget.ElementParameterChangedEventData(i,...
                'ApplyButton',txlineObj));
            end
            self.Parent.notify('IconUpdate',...
            rf.internal.apps.budget.ElementParameterChangedEventData(i,...
            'Type',self.Type));


            self.NameEdit.BackgroundColor=[1,1,1];
            self.TypePopup.BackgroundColor=[1,1,1];
            self.txWidthEdit.BackgroundColor=[1,1,1];
            self.txHeightEdit.BackgroundColor=[1,1,1];
            self.ThicknessEdit.BackgroundColor=[1,1,1];
            self.EpsilonREdit.BackgroundColor=[1,1,1];
            self.LossTangentEdit.BackgroundColor=[1,1,1];
            self.SigmaCondEdit.BackgroundColor=[1,1,1];
            self.TerminationPopup.BackgroundColor=[1,1,1];
            self.StubModePopup.BackgroundColor=[1,1,1];
            self.OuterRadiusEdit.BackgroundColor=[1,1,1];
            self.InnerRadiusEdit.BackgroundColor=[1,1,1];
            self.MuREdit.BackgroundColor=[1,1,1];
            self.ConductorWidthEdit.BackgroundColor=[1,1,1];
            self.SlotWidthEdit.BackgroundColor=[1,1,1];
            self.RadiusEdit.BackgroundColor=[1,1,1];
            self.SeparationEdit.BackgroundColor=[1,1,1];
            self.FrequencyEdit.BackgroundColor=[1,1,1];
            self.REdit.BackgroundColor=[1,1,1];
            self.LEdit.BackgroundColor=[1,1,1];
            self.CEdit.BackgroundColor=[1,1,1];
            self.GEdit.BackgroundColor=[1,1,1];
            self.IntpTypePopup.BackgroundColor=[1,1,1];
            self.LineLengthEdit.BackgroundColor=[1,1,1];
            self.Z0Edit.BackgroundColor=[1,1,1];
            self.LossDBEdit.BackgroundColor=[1,1,1];
            self.PhaseVelocityEdit.BackgroundColor=[1,1,1];
            self.TimeDelayEdit.BackgroundColor=[1,1,1];
            self.ResistanceEdit.BackgroundColor=[1,1,1];
            self.DTEdit.BackgroundColor=[1,1,1];
            self.ApplyLabel.Enable='off';
            self.Parent.View.setStatusBarMsg('');
            self.IsReturnKey=0;
            enableIP2(self.Parent.View.Toolstrip,false);
            self.NameChanged=0;
            self.OtherPropertiesChanged=0;
            self.Parent.View.enableActions(true);
        end

        function parameterPaneChange(self)


            if contains(self.Type,{'Microstrip','Coaxial','CPW','TwoWire','ParallelPlate','RLCGLine','EquationBased','DelayLossless','DelayLossy','Stripline'})

                if strcmpi(self.Type,'Coaxial')

                    propOn={'OuterRadius','InnerRadius','MuR','EpsilonR','LossTangent','SigmaCond','LineLength'};

                    propOff={'txWidth','txHeight','Thickness','ConductorWidth','SlotWidth','Radius','Separation',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'Microstrip')
                    propOn={'txWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond','LineLength'};
                    propOff={'OuterRadius','InnerRadius','MuR','ConductorWidth','SlotWidth','Radius','Separation',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'CPW')
                    propOn={'ConductorWidth','SlotWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond','LineLength'};
                    propOff={'OuterRadius','InnerRadius','MuR','txWidth','Radius','Separation',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'TwoWire')
                    propOn={'Radius','Separation','MuR','EpsilonR','LossTangent','SigmaCond','LineLength'};
                    propOff={'txWidth','txHeight','Thickness','OuterRadius','InnerRadius','ConductorWidth','SlotWidth',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'ParallelPlate')
                    propOn={'txWidth','Separation','MuR','EpsilonR','LossTangent','SigmaCond','LineLength'};
                    propOff={'Thickness','OuterRadius','InnerRadius','ConductorWidth','SlotWidth','Radius',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','txHeight','DT'};
                elseif strcmpi(self.Type,'RLCGLine')
                    propOn={'Frequency','R','L','C','G','LineLength'};
                    propOff={'txWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond',...
                    'OuterRadius','InnerRadius','MuR','Radius','Separation','ConductorWidth','SlotWidth',...
                    'Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'EquationBased')
                    propOn={'Frequency','Z0','LossDB','PhaseVelocity','LineLength'};
                    propOff={'txWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond',...
                    'OuterRadius','InnerRadius','MuR','Radius','Separation','ConductorWidth','SlotWidth',...
                    'R','L','C','G','TimeDelay','Resistance','DT'};
                elseif strcmpi(self.Type,'DelayLossless')
                    propOn={'Z0','TimeDelay'};
                    propOff={'txWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond',...
                    'OuterRadius','InnerRadius','MuR','Radius','Separation','ConductorWidth','SlotWidth',...
                    'LineLength','Frequency','R','L','C','G','LossDB','PhaseVelocity','Resistance','DT'};
                elseif strcmpi(self.Type,'DelayLossy')
                    propOn={'Z0','TimeDelay','LineLength','Resistance'};
                    propOff={'txWidth','txHeight','Thickness','EpsilonR','LossTangent','SigmaCond',...
                    'OuterRadius','InnerRadius','MuR','ConductorWidth','SlotWidth','Radius','Separation',...
                    'Frequency','R','L','C','G','LossDB','PhaseVelocity','DT'};
                elseif strcmpi(self.Type,'Stripline')
                    propOn={'txWidth','DT','Thickness','EpsilonR','LossTangent','SigmaCond','LineLength'};
                    propOff={'OuterRadius','InnerRadius','MuR','ConductorWidth','SlotWidth','Radius','Separation',...
                    'Frequency','R','L','C','G','Z0','TimeDelay','LossDB','PhaseVelocity','Resistance','txHeight'};
                end

                str=regexprep(propOn,'(Label)','${" "+$0}');
                StrLabel=regexprep(str,'\<.','${($0)}')+"Label";
                StrEdit=regexprep(str,'\<.','${($0)}')+"Edit";
                StrUnits=regexprep(str,'\<.','${($0)}')+"Units";

                strs=[StrLabel,StrEdit,StrUnits];
                for k=1:numel(strs)
                    self.(strs(k)).Visible='on';
                end

                if strcmpi(self.Type,'DelayLossless')||strcmpi(self.Type,'DelayLossy')
                    self.StubModeLabel.Visible='off';
                    self.StubModePopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    self.TerminationPopup.Visible='off';
                else
                    self.StubModeLabel.Visible='on';
                    self.StubModePopup.Visible='on';
                end


                str1=regexprep(propOff,'(Label)','${" "+$0}');
                StrLabelOff=regexprep(str1,'\<.','${($0)}')+"Label";
                StrEditOff=regexprep(str1,'\<.','${($0)}')+"Edit";
                StrUnitsOff=regexprep(str1,'\<.','${($0)}')+"Units";

                strsOff=[StrLabelOff,StrEditOff,StrUnitsOff];
                for k=1:numel(strsOff)
                    self.(strsOff(k)).Visible='off';
                end

                if strcmpi(self.Type,'RLCGLine')||strcmpi(self.Type,'EquationBased')
                    self.IntpTypeLabel.Visible='on';
                    self.IntpTypePopup.Visible='on';
                else
                    self.IntpTypeLabel.Visible='off';
                    self.IntpTypePopup.Visible='off';
                end
            end

            self.ApplyLabel.Enable='on';

        end

        function FigKeyEvent(self,ev)

            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.TxlineDialog')
                key=ev.Key;
                switch key
                case 'return'
                    self.IsReturnKey=1;
                end
            end
        end

        function FigKeyEventCanvas(self,ev)


            if isa(self.Parent.ElementDialog,'rf.internal.apps.budget.TxlineDialog')
                key=ev.Key;
                switch key
                case 'return'
                    try
                        self.applyFunction();
                    catch me
                        h=errordlg(me.message,'Error Dialog','modal');
                        uiwait(h)
                        self.Parent.View.enableActions(true);
                    end
                end
            end
        end


        function addListeners(self)

            if self.Parent.View.UseAppContainer
                self.NameEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.TypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.txWidthEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.txHeightEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ThicknessEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.EpsilonREdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LossTangentEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.SigmaCondEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LineLengthEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.TerminationPopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.TerminationPopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.StubModePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.StubModePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ApplyLabel.ButtonPushedFcn=@(h,e)parameterChanged(self,e);
                self.OuterRadiusEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.InnerRadiusEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.MuREdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ConductorWidthEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.SlotWidthEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.RadiusEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.SeparationEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FrequencyUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FrequencyUnits.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.FrequencyEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.REdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.CEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.GEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.IntpTypePopup.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.Z0Edit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.LossDBEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.PhaseVelocityEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.TimeDelayEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.ResistanceEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
                self.DTEdit.ValueChangedFcn=@(h,e)parameterChanged(self,e);
            else
                self.NameEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.Type=addlistener(self.TypePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.TypePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.txWidthEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.txHeightEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ThicknessEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.EpsilonREdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.LossTangentEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.SigmaCondEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.LineLengthEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.Termination=addlistener(self.TerminationPopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.TerminationPopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.StubMode=addlistener(self.StubModePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.StubModePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.ApplyLabel=addlistener(self.ApplyLabel,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.OuterRadiusEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.InnerRadiusEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.MuREdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ConductorWidthEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.SlotWidthEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.RadiusEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.SeparationEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.FrequencyUnits=addlistener(self.FrequencyUnits,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.FrequencyUnits.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.FrequencyEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.REdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.LEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.CEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.GEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Listeners.IntpType=addlistener(self.IntpTypePopup,...
                'Value',...
                'PostSet',@(h,e)parameterChanged(self,e));
                self.IntpTypePopup.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.Z0Edit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.LossDBEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.PhaseVelocityEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.TimeDelayEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.ResistanceEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
                self.DTEdit.KeyPressFcn=@(h,e)parameterChanged(self,e);
            end

        end

        function txlineObj=txline_design(self)
            switch lower(self.Type)
            case 'microstrip'
                txlineObj=txlineMicrostrip('Name',self.Name,...
                'Width',self.txWidth,...
                'Height',self.txHeight,'Thickness',self.Thickness,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaCond',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'coaxial'
                txlineObj=txlineCoaxial('Name',self.Name,...
                'OuterRadius',self.OuterRadius,...
                'InnerRadius',self.InnerRadius,...
                'MuR',self.MuR,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaCond',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'cpw'
                txlineObj=txlineCPW('Name',self.Name,'ConductorWidth',self.ConductorWidth,...
                'SlotWidth',self.SlotWidth,'Height',self.txHeight,...
                'Thickness',self.Thickness,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaCond',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'twowire'
                txlineObj=txlineTwoWire('Name',self.Name,...
                'Radius',self.Radius,...
                'Separation',self.Separation,...
                'MuR',self.MuR,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaCond',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'parallelplate'
                txlineObj=txlineParallelPlate('Name',self.Name,...
                'Width',self.txWidth,...
                'Separation',self.Separation,...
                'MuR',self.MuR,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaCond',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'rlcgline'
                txlineObj=txlineRLCGLine('Name',self.Name,'Frequency',self.Frequency,...
                'R',self.R,'L',self.L,...
                'C',self.C,'G',self.G,...
                'IntpType',self.IntpType,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'equationbased'
                txlineObj=txlineEquationBased('Name',self.Name,'Frequency',self.Frequency,...
                'Z0',self.Z0,'LossDB',self.LossDB,...
                'PhaseVelocity',self.PhaseVelocity,...
                'IntpType',self.IntpType,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            case 'delaylossless'
                txlineObj=txlineDelayLossless('Name',self.Name,'Z0',self.Z0,...
                'TimeDelay',self.TimeDelay);
            case 'delaylossy'
                txlineObj=txlineDelayLossy('Name',self.Name,'Z0',self.Z0,...
                'LineLength',self.LineLength,...
                'TimeDelay',self.TimeDelay,...
                'Resistance',self.Resistance);
            case 'stripline'
                txlineObj=txlineStripline('Name',self.Name,...
                'Width',self.txWidth,...
                'DielectricThickness',self.DielectricThickness,...
                'Thickness',self.Thickness,...
                'EpsilonR',self.EpsilonR,...
                'LossTangent',self.LossTangent,...
                'SigmaConductivity',self.SigmaCond,...
                'LineLength',self.LineLength,...
                'Termination',self.Termination,...
                'StubMode',self.StubMode);
            end
        end

        function propupdate(self)
            if self.Parent.View.UseAppContainer
                valueString='Value';
                valueItems='Items';
            else
                valueString='String';
                valueItems='String';
            end
            switch lower(self.Type)
            case 'coaxial'
                self.OuterRadiusEdit.(valueString)=self.PropertyStruct.coaxial.OuterRadius;
                self.InnerRadiusEdit.(valueString)=self.PropertyStruct.coaxial.InnerRadius;
                self.MuREdit.(valueString)=self.PropertyStruct.coaxial.MuR;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.coaxial.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.coaxial.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.coaxial.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.coaxial.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.coaxial.SigmaCond)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.coaxial.SigmaCond;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.coaxial.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.coaxial.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.coaxial.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.coaxial.StubMode};
                    StubModePopupValue=self.PropertyStruct.coaxial.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.coaxial.StubMode;
                    StubModePopupValue=self.PropertyStruct.coaxial.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable
                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.coaxial.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.coaxial.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.coaxial.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.coaxial.Termination;
                    end
                end
            case 'microstrip'
                self.txWidthEdit.(valueString)=self.PropertyStruct.microstrip.txWidth;
                self.txHeightEdit.(valueString)=self.PropertyStruct.microstrip.txHeight;
                self.ThicknessEdit.(valueString)=self.PropertyStruct.microstrip.Thickness;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.microstrip.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.microstrip.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.microstrip.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.microstrip.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.microstrip.SigmaCond)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.microstrip.SigmaCond;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.microstrip.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.microstrip.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.microstrip.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.microstrip.StubMode};
                    StubModePopupValue=self.PropertyStruct.microstrip.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.microstrip.StubMode;
                    StubModePopupValue=self.PropertyStruct.microstrip.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable
                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.microstrip.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.microstrip.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.microstrip.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.microstrip.Termination;
                    end
                end
            case 'cpw'
                self.ConductorWidthEdit.(valueString)=self.PropertyStruct.cpw.ConductorWidth;
                self.SlotWidthEdit.(valueString)=self.PropertyStruct.cpw.SlotWidth;
                self.txHeightEdit.(valueString)=self.PropertyStruct.cpw.txHeight;
                self.ThicknessEdit.(valueString)=self.PropertyStruct.cpw.Thickness;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.cpw.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.cpw.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.cpw.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.cpw.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.cpw.SigmaCond)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.cpw.SigmaCond;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.cpw.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.cpw.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.cpw.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.cpw.StubMode};
                    StubModePopupValue=self.PropertyStruct.cpw.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.cpw.StubMode;
                    StubModePopupValue=self.PropertyStruct.cpw.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable
                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.cpw.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.cpw.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.cpw.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.cpw.Termination;
                    end
                end
            case 'twowire'
                self.RadiusEdit.(valueString)=self.PropertyStruct.twowire.Radius;
                self.SeparationEdit.(valueString)=self.PropertyStruct.twowire.Separation;
                self.MuREdit.(valueString)=self.PropertyStruct.twowire.MuR;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.twowire.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.twowire.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.twowire.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.twowire.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.twowire.SigmaCond)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.twowire.SigmaCond;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.twowire.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.twowire.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.twowire.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.twowire.StubMode};
                    StubModePopupValue=self.PropertyStruct.twowire.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.twowire.StubMode;
                    StubModePopupValue=self.PropertyStruct.twowire.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable

                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.twowire.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.twowire.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.twowire.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.twowire.Termination;
                    end
                end
            case 'parallelplate'
                self.txWidthEdit.(valueString)=self.PropertyStruct.parallelplate.txWidth;
                self.SeparationEdit.(valueString)=self.PropertyStruct.parallelplate.Separation;
                self.MuREdit.(valueString)=self.PropertyStruct.parallelplate.MuR;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.parallelplate.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.parallelplate.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.parallelplate.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.parallelplate.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.parallelplate.SigmaCond)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.parallelplate.SigmaCond;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.parallelplate.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.parallelplate.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.parallelplate.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.parallelplate.StubMode};
                    StubModePopupValue=self.PropertyStruct.parallelplate.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.parallelplate.StubMode;
                    StubModePopupValue=self.PropertyStruct.parallelplate.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable

                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.parallelplate.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.parallelplate.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.parallelplate.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.parallelplate.Termination;
                    end
                end
            case 'rlcgline'
                self.FrequencyEdit.(valueString)=num2str(self.PropertyStruct.rlcgline.Frequency);
                self.REdit.(valueString)=num2str(self.PropertyStruct.rlcgline.R);
                self.LEdit.(valueString)=num2str(self.PropertyStruct.rlcgline.L);
                self.CEdit.(valueString)=num2str(self.PropertyStruct.rlcgline.C);
                self.GEdit.(valueString)=num2str(self.PropertyStruct.rlcgline.G);
                if self.Parent.View.UseAppContainer
                    self.IntpTypePopup.Value=self.IntpTypePopup.Items{self.PropertyStruct.rlcgline.IntpType};
                else
                    self.IntpTypePopup.Value=self.PropertyStruct.rlcgline.IntpType;
                end
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.rlcgline.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.rlcgline.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.rlcgline.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.rlcgline.StubMode};
                    StubModePopupValue=self.PropertyStruct.rlcgline.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.rlcgline.StubMode;
                    StubModePopupValue=self.PropertyStruct.rlcgline.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable

                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.rlcgline.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.rlcgline.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.rlcgline.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.rlcgline.Termination;
                    end
                end
            case 'equationbased'
                self.FrequencyEdit.(valueString)=num2str(self.PropertyStruct.equationbased.Frequency);
                self.Z0Edit.(valueString)=num2str(self.PropertyStruct.equationbased.Z0);
                self.LossDBEdit.(valueString)=num2str(self.PropertyStruct.equationbased.LossDB);
                self.PhaseVelocityEdit.(valueString)=num2str(self.PropertyStruct.equationbased.PhaseVelocity);
                if self.Parent.View.UseAppContainer
                    self.IntpTypePopup.Value=self.IntpTypePopup.Items{self.PropertyStruct.equationbased.IntpType};
                else
                    self.IntpTypePopup.Value=self.PropertyStruct.equationbased.IntpType;
                end
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.equationbased.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.equationbased.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.equationbased.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.equationbased.StubMode};
                    StubModePopupValue=self.PropertyStruct.equationbased.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.equationbased.StubMode;
                    StubModePopupValue=self.PropertyStruct.equationbased.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable

                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.equationbased.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.equationbased.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.equationbased.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.equationbased.Termination;
                    end
                end
            case 'delaylossless'
                self.Z0Edit.(valueString)=num2str(self.PropertyStruct.delaylossless.Z0);
                self.TimeDelayEdit.(valueString)=self.PropertyStruct.delaylossless.TimeDelay;
            case 'delaylossy'
                self.Z0Edit.(valueString)=num2str(self.PropertyStruct.delaylossy.Z0);
                self.LineLengthEdit.(valueString)=self.PropertyStruct.delaylossy.LineLength;
                self.TimeDelayEdit.(valueString)=self.PropertyStruct.delaylossy.TimeDelay;
                self.ResistanceEdit.(valueString)=self.PropertyStruct.delaylossy.Resistance;
            case 'stripline'
                self.txWidthEdit.(valueString)=self.PropertyStruct.stripline.txWidth;
                self.DTEdit.(valueString)=self.PropertyStruct.stripline.DielectricThickness;
                self.ThicknessEdit.(valueString)=self.PropertyStruct.stripline.Thickness;
                if~strcmp(self.EpsilonREdit.(valueString),self.PropertyStruct.stripline.EpsilonR)
                    self.EpsilonREdit.BackgroundColor=[1,0.96,0.88];
                end
                self.EpsilonREdit.(valueString)=self.PropertyStruct.stripline.EpsilonR;
                if~strcmp(self.LossTangentEdit.(valueString),self.PropertyStruct.stripline.LossTangent)
                    self.LossTangentEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LossTangentEdit.(valueString)=self.PropertyStruct.stripline.LossTangent;
                if~strcmp(self.SigmaCondEdit.(valueString),self.PropertyStruct.stripline.SigmaConductivity)
                    self.SigmaCondEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.SigmaCondEdit.(valueString)=self.PropertyStruct.stripline.SigmaConductivity;
                if~strcmp(self.LineLengthEdit.(valueString),self.PropertyStruct.stripline.LineLength)
                    self.LineLengthEdit.BackgroundColor=[1,0.96,0.88];
                end
                self.LineLengthEdit.(valueString)=self.PropertyStruct.stripline.LineLength;
                if(self.StubModePopup.Value~=self.PropertyStruct.stripline.StubMode)
                    self.StubModePopup.BackgroundColor=[1,0.96,0.88];
                end
                if self.Parent.View.UseAppContainer
                    self.StubModePopup.Value=self.StubModePopup.Items{self.PropertyStruct.stripline.StubMode};
                    StubModePopupValue=self.PropertyStruct.stripline.StubMode;
                else
                    self.StubModePopup.Value=self.PropertyStruct.stripline.StubMode;
                    StubModePopupValue=self.PropertyStruct.stripline.StubMode;
                end
                if isnumeric(self.StubModePopup.Value)
                    if(self.StubModePopup.Value==1)
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                else
                    if strcmpi(self.StubModePopup.Value,'NotAStub')
                        notApplicable=true;
                    else
                        notApplicable=false;
                    end
                end
                if notApplicable

                    self.TerminationPopup.(valueItems)={'NotApplicable'};
                    self.TerminationPopup.Enable='off';
                    self.TerminationPopup.Visible='off';
                    self.TerminationLabel.Visible='off';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.stripline.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.stripline.Termination;
                    end
                else
                    self.TerminationPopup.(valueItems)={'Open','Short'};
                    self.TerminationPopup.BackgroundColor=[1,0.96,0.88];
                    self.TerminationPopup.Enable='on';
                    self.TerminationPopup.Visible='on';
                    self.TerminationLabel.Visible='on';
                    if self.Parent.View.UseAppContainer
                        self.TerminationPopup.Value=self.TerminationPopup.Items{self.PropertyStruct.stripline.Termination};
                    else
                        self.TerminationPopup.Value=self.PropertyStruct.stripline.Termination;
                    end
                end
            end
        end
    end
end







