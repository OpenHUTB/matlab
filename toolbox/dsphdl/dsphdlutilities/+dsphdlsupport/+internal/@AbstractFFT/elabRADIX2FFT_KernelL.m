function stageL=elabRADIX2FFT_KernelL(this,topNet,blockInfo,dataRate,stageIn,twiddle_re,twiddle_im,din_re,din_im,din_vld,softReset,stageOut,twiddleAddr,dout_re,dout_im,dout_vld,startOutS,endOutS)%#ok<INUSD>





    SIGNED=din_re.Type.Signed;
    WORDLENGTH=din_re.Type.WordLength;
    FRACTIONLENGTH=din_re.Type.FractionLength;
    TWDL_WORDLENGTH=blockInfo.TWDL_WORDLENGTH;
    TWDL_FRACTIONLENGTH=-blockInfo.TWDL_FRACTIONLENGTH;

    FFTLENGTH=blockInfo.actualFFTLength;
    TOTALSTAGES=log2(FFTLENGTH);
    ADDRWIDTH=log2(blockInfo.actualFFTLength)-4;
    if ADDRWIDTH<=0
        ADDRWIDTH=1;
    end
    ADDRRANGE=2^ADDRWIDTH;
    OVERFLOWACTION=blockInfo.OverflowAction;
    ROUNDINGMETHOD=blockInfo.RoundingMethod;
    NORMALIZE=blockInfo.Normalize;


    InportNames={stageIn.Name,twiddle_re.Name,twiddle_im.Name,din_re.Name,din_im.Name,din_vld.Name,softReset.Name};
    InportTypes=[stageIn.Type;twiddle_re.Type;twiddle_im.Type;din_re.Type;din_im.Type;din_vld.Type;softReset.Type];
    InportRates=[dataRate;dataRate;dataRate;dataRate;dataRate;dataRate;dataRate];

    if blockInfo.outMode(1)&&blockInfo.outMode(2)&&blockInfo.BitReversedOutput
        outPortNames={stageOut.Name,twiddleAddr.Name,dout_re.Name,dout_im.Name,dout_vld.Name,startOutS.Name,endOutS.Name};
        outPortTypes=[stageOut.Type;twiddleAddr.Type;dout_re.Type;dout_im.Type;dout_vld.Type;startOutS.Type;endOutS.Type];
    elseif blockInfo.outMode(1)&&blockInfo.BitReversedOutput
        outPortNames={stageOut.Name,twiddleAddr.Name,dout_re.Name,dout_im.Name,dout_vld.Name,startOutS.Name};
        outPortTypes=[stageOut.Type;twiddleAddr.Type;dout_re.Type;dout_im.Type;dout_vld.Type;startOutS.Type];
    elseif blockInfo.outMode(2)&&blockInfo.BitReversedOutput
        outPortNames={stageOut.Name,twiddleAddr.Name,dout_re.Name,dout_im.Name,dout_vld.Name,endOutS.Name};
        outPortTypes=[stageOut.Type;twiddleAddr.Type;dout_re.Type;dout_im.Type;dout_vld.Type;endOutS.Type];
    else
        outPortNames={stageOut.Name,twiddleAddr.Name,dout_re.Name,dout_im.Name,dout_vld.Name};
        outPortTypes=[stageOut.Type;twiddleAddr.Type;dout_re.Type;dout_im.Type;dout_vld.Type];
    end

    stageL=pirelab.createNewNetwork(...
    'Network',topNet,...
    'Name','RADIX2FFT_KernelL',...
    'InportNames',InportNames,...
    'InportTypes',InportTypes,...
    'InportRates',InportRates,...
    'OutportNames',outPortNames,...
    'OutportTypes',outPortTypes);

    inputPort=stageL.PirInputSignals;
    outputPort=stageL.PirOutputSignals;

    stageIn=inputPort(1);
    twiddle_re=inputPort(2);
    twiddle_im=inputPort(3);
    din_re=inputPort(4);
    din_im=inputPort(5);
    din_vld=inputPort(6);

    HASRESETPORT=blockInfo.inMode(2);
    if HASRESETPORT
        softReset=inputPort(7);
    else
        softReset='';
    end


    stageOut=outputPort(1);
    twiddleAddr=outputPort(2);
    if blockInfo.outMode(1)&&blockInfo.outMode(2)&&blockInfo.BitReversedOutput
        dout_re=outputPort(3);
        dout_im=outputPort(4);
        dout_vld=outputPort(5);
        startOutS=outputPort(6);
        endOutS=outputPort(7);
    elseif blockInfo.outMode(1)&&blockInfo.BitReversedOutput
        dout_re=outputPort(3);
        dout_im=outputPort(4);
        dout_vld=outputPort(5);
        startOutS=outputPort(6);
    elseif blockInfo.outMode(2)&&blockInfo.BitReversedOutput
        dout_re=outputPort(3);
        dout_im=outputPort(4);
        dout_vld=outputPort(5);
        endOutS=outputPort(6);
    else
        dout_re=outputPort(3);
        dout_im=outputPort(4);
        dout_vld=outputPort(5);
    end

    if FFTLENGTH>16
        x_re=stageL.addSignal2('Type',din_re.Type,'Name','x_re');
        x_re.SimulinkRate=dataRate;
        x_im=stageL.addSignal2('Type',din_im.Type,'Name','x_im');
        x_im.SimulinkRate=dataRate;
        y_re=stageL.addSignal2('Type',din_re.Type,'Name','y_re');
        y_re.SimulinkRate=dataRate;
        y_im=stageL.addSignal2('Type',din_im.Type,'Name','y_im');
        y_im.SimulinkRate=dataRate;
        wrEnb_1=stageL.addSignal2('Type',pir_boolean_t,'Name','WrEnb_1');
        wrEnb_1.SimulinkRate=dataRate;
        wrAddr_1=stageL.addSignal2('Type',pir_ufixpt_t(ADDRWIDTH,0),'Name','wrAddr_1');
        wrAddr_1.SimulinkRate=dataRate;
        rdEnb_1=stageL.addSignal2('Type',pir_boolean_t(),'Name','rdEnb_1');
        rdEnb_1.SimulinkRate=dataRate;
        rdAddr_1=stageL.addSignal2('Type',pir_ufixpt_t(ADDRWIDTH,0),'Name','rdAddr_1');
        rdAddr_1.SimulinkRate=dataRate;
        wrEnb_2=stageL.addSignal2('Type',pir_boolean_t,'Name','WrEnb_2');
        wrEnb_2.SimulinkRate=dataRate;
        wrAddr_2=stageL.addSignal2('Type',pir_ufixpt_t(ADDRWIDTH,0),'Name','wrAddr_2');
        wrAddr_2.SimulinkRate=dataRate;
        rdEnb_2=stageL.addSignal2('Type',pir_boolean_t(),'Name','rdEnb_2');
        rdEnb_2.SimulinkRate=dataRate;
        rdAddr_2=stageL.addSignal2('Type',pir_ufixpt_t(ADDRWIDTH,0),'Name','rdAddr_2');
        rdAddr_2.SimulinkRate=dataRate;
        realIn_vld=stageL.addSignal2('Type',pir_boolean_t(),'Name','realIn_vld');
        realIn_vld.SimulinkRate=dataRate;
        twdlRdEnb=stageL.addSignal2('Type',pir_boolean_t(),'Name','twdlRdEnb');
        twdlRdEnb.SimulinkRate=dataRate;

        useDlyData_1=stageL.addSignal2('Type',pir_boolean_t(),'Name','useDlyData_1');
        useDlyData_1.SimulinkRate=dataRate;
        useDlyData_2=stageL.addSignal2('Type',pir_boolean_t(),'Name','useDlyData_2');
        useDlyData_2.SimulinkRate=dataRate;
        twdlDly=stageL.addSignal2('Type',pir_boolean_t(),'Name','twdlDly');
        twdlDly.SimulinkRate=dataRate;
        ZERO=stageL.addSignal2('Type',pir_boolean_t(),'Name','zeroS');
        ZERO.SimulinkRate=dataRate;
        pirelab.getConstComp(stageL,ZERO,false);
        useMemData=stageL.addSignal2('Type',pir_boolean_t(),'Name','useMemData');
        useMemData.SimulinkRate=dataRate;



        if wrAddr_1.Type.WordLength==1

            fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
            '+dsphdlsupport','+internal','@AbstractFFT','cgireml','twoLocationReg.m'),'r');
            fcnBody=fread(fid,Inf,'char=>char')';
            fclose(fid);

            desc='twoLocationReg';

            twoLocationReg_1=stageL.addComponent2(...
            'kind','cgireml',...
            'Name','twoLocationReg',...
            'InputSignals',[din_re,din_im,wrAddr_1,wrEnb_1,rdAddr_1],...
            'OutputSignals',[x_re,x_im],...
            'ExternalSynchronousResetSignal',softReset,...
            'EMLFileName','twoLocationReg',...
            'EMLFileBody',fcnBody,...
            'EMLParams',{WORDLENGTH,FRACTIONLENGTH},...
            'EMLFlag_TreatInputIntsAsFixpt',true,...
            'EMLFlag_SaturateOnIntOverflow',false,...
            'EMLFlag_TreatInputBoolsAsUfix1',false,...
            'BlockComment',desc);

            twoLocationReg_1.runConcurrencyMaximizer(0);
            twoLocationReg_2=stageL.addComponent2(...
            'kind','cgireml',...
            'Name','twoLocationReg',...
            'InputSignals',[din_re,din_im,wrAddr_2,wrEnb_2,rdAddr_2],...
            'OutputSignals',[y_re,y_im],...
            'ExternalSynchronousResetSignal',softReset,...
            'EMLFileName','twoLocationReg',...
            'EMLFileBody',fcnBody,...
            'EMLParams',{WORDLENGTH,FRACTIONLENGTH},...
            'EMLFlag_TreatInputIntsAsFixpt',true,...
            'EMLFlag_SaturateOnIntOverflow',false,...
            'EMLFlag_TreatInputBoolsAsUfix1',false,...
            'BlockComment',desc);

            twoLocationReg_2.runConcurrencyMaximizer(0);
        else
            pirelab.getSimpleDualPortRamComp(stageL,[din_re,wrAddr_1,wrEnb_1,rdAddr_1],x_re,'dataMEM_re_1');
            pirelab.getSimpleDualPortRamComp(stageL,[din_im,wrAddr_1,wrEnb_1,rdAddr_1],x_im,'dataMEM_im_1');
            pirelab.getSimpleDualPortRamComp(stageL,[din_re,wrAddr_2,wrEnb_2,rdAddr_2],y_re,'dataMEM_re_2');
            pirelab.getSimpleDualPortRamComp(stageL,[din_im,wrAddr_2,wrEnb_2,rdAddr_2],y_im,'dataMEM_im_2');
        end


        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','wrStateMachineL.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='wrStateMachineL';

        wrStateMachineL=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','wrStateMachineL',...
        'InputSignals',[din_vld],...
        'OutputSignals',[wrEnb_1,wrAddr_1,wrEnb_2,wrAddr_2],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','wrStateMachineL',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{ADDRWIDTH,ADDRRANGE,FFTLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        wrStateMachineL.runConcurrencyMaximizer(0);


        procEnb=stageL.addSignal2('Type',pir_boolean_t(),'Name','procEnb');
        procEnb.SimulinkRate=dataRate;
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','rdStateMachineL.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='rdStateMachineL';

        rdStateMachineL=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','rdStateMachineL',...
        'InputSignals',[din_vld,wrAddr_1],...
        'OutputSignals',[rdAddr_1,rdAddr_2,procEnb,realIn_vld,rdEnb_1,rdEnb_2,twdlRdEnb,useDlyData_1,useDlyData_2,twdlDly,useMemData],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','rdStateMachineL',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{ADDRWIDTH,ADDRRANGE,FFTLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        rdStateMachineL.runConcurrencyMaximizer(0);


        din_re_dly1=stageL.addSignal2('Type',din_re.Type,'Name','din_re_dly1');
        din_re_dly1.SimulinkRate=dataRate;
        din_im_dly1=stageL.addSignal2('Type',din_re.Type,'Name','din_im_dly1');
        din_im_dly1.SimulinkRate=dataRate;
        din_re_dly2=stageL.addSignal2('Type',din_re.Type,'Name','din_re_dly2');
        din_re_dly2.SimulinkRate=dataRate;
        din_im_dly2=stageL.addSignal2('Type',din_re.Type,'Name','din_im_dly2');
        din_im_dly2.SimulinkRate=dataRate;
        din_re_dly3=stageL.addSignal2('Type',din_re.Type,'Name','din_re_dly3');
        din_re_dly3.SimulinkRate=dataRate;
        din_im_dly3=stageL.addSignal2('Type',din_re.Type,'Name','din_im_dly3');
        din_im_dly3.SimulinkRate=dataRate;
        x_re_dly1=stageL.addSignal2('Type',din_re.Type,'Name','x_re_dly1');
        x_re_dly1.SimulinkRate=dataRate;
        x_im_dly1=stageL.addSignal2('Type',din_re.Type,'Name','x_im_dly1');
        x_im_dly1.SimulinkRate=dataRate;
        x_re_dly2=stageL.addSignal2('Type',din_re.Type,'Name','x_re_dly2');
        x_re_dly2.SimulinkRate=dataRate;
        x_im_dly2=stageL.addSignal2('Type',din_re.Type,'Name','x_im_dly2');
        x_im_dly2.SimulinkRate=dataRate;
        y_re_dly1=stageL.addSignal2('Type',din_re.Type,'Name','y_re_dly1');
        y_re_dly1.SimulinkRate=dataRate;
        y_im_dly1=stageL.addSignal2('Type',din_re.Type,'Name','y_im_dly1');
        y_im_dly1.SimulinkRate=dataRate;

        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','delayBlockL.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='delayBlockL';

        delayBlockL=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','delayBlockL',...
        'InputSignals',[realIn_vld,x_re,x_im,y_re,y_im,din_re,din_im,din_vld],...
        'OutputSignals',[x_re_dly1,x_im_dly1,x_re_dly2,x_im_dly2,y_re_dly1,y_im_dly1,...
        din_re_dly1,din_im_dly1,din_re_dly2,din_im_dly2,din_re_dly3,din_im_dly3],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','delayBlockL',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{SIGNED,WORDLENGTH,FRACTIONLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        delayBlockL.runConcurrencyMaximizer(0);


        twdl_re=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_re');
        twdl_re.SimulinkRate=dataRate;
        twdl_im=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_im');
        twdl_im.SimulinkRate=dataRate;
        x_u_in=stageL.addSignal2('Type',din_re.Type,'Name','x_u_in');
        x_u_in.SimulinkRate=dataRate;
        y_v_in=stageL.addSignal2('Type',din_re.Type,'Name','y_v_in');
        y_v_in.SimulinkRate=dataRate;
        v_y_in=stageL.addSignal2('Type',din_re.Type,'Name','v_y_in');
        v_y_in.SimulinkRate=dataRate;
        twdl_re_dly=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_re_dly');
        twdl_re_dly.SimulinkRate=dataRate;
        twdl_im_dly=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_im_dly');
        twdl_im_dly.SimulinkRate=dataRate;
        extended_dvld=stageL.addSignal2('Type',pir_boolean_t(),'Name','extended_dvld');
        extended_dvld.SimulinkRate=dataRate;
        procEnbReg=stageL.addSignal2('Type',pir_boolean_t(),'Name','procEnbReg');
        procEnbReg.SimulinkRate=dataRate;
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','commutatorL.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='CommutatorL';

        commuatorL=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','commutatorL',...
        'InputSignals',[procEnb,realIn_vld,useMemData,useDlyData_1,useDlyData_2,...
        din_re,din_im,din_re_dly1,din_im_dly1,din_re_dly2,din_im_dly2,din_re_dly3,din_im_dly3,...
        x_re,x_im_dly1,y_re,y_im,y_re_dly1,y_im_dly1,twdl_re,twdl_im],...
        'OutputSignals',[x_u_in,y_v_in,v_y_in,twdl_re_dly,twdl_im_dly,extended_dvld,procEnbReg],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','commutatorL',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH,WORDLENGTH,FRACTIONLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        commuatorL.runConcurrencyMaximizer(0);


        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','twiddleAddrG.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='twiddleAddrG';
        stageNum=TOTALSTAGES;
        twiddleAddrG=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','twiddleAddrG',...
        'InputSignals',[twdlRdEnb,twiddle_re,twiddle_im,twdlDly,ZERO],...
        'OutputSignals',[twiddleAddr,twdl_re,twdl_im],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','twiddleAddrG',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{TOTALSTAGES,stageNum,TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        twiddleAddrG.runConcurrencyMaximizer(0);


        x_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','x_out');
        x_out.SimulinkRate=dataRate;
        y_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','y_out');
        y_out.SimulinkRate=dataRate;
        u_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','u_out');
        u_out.SimulinkRate=dataRate;
        v_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','v_out');
        v_out.SimulinkRate=dataRate;
        realOut_dvld=stageL.addSignal2('Type',pir_boolean_t(),'Name','realOut_dvld');
        realOut_dvld.SimulinkRate=dataRate;
        doutVld=stageL.addSignal2('Type',pir_boolean_t(),'Name','doutVld');
        doutVld.SimulinkRate=dataRate;

        softReset_Parent=inputPort(7);
        ButterFlyG=this.elabRADIX2ButterflyG(stageL,TOTALSTAGES,WORDLENGTH,FRACTIONLENGTH,blockInfo,dataRate,stageIn,...
        procEnbReg,twdl_re_dly,twdl_im_dly,x_u_in,y_v_in,v_y_in,extended_dvld,softReset_Parent,stageOut,x_out,u_out,y_out,v_out,realOut_dvld,doutVld);

        pirelab.instantiateNetwork(stageL,ButterFlyG,[stageIn,procEnbReg,twdl_re_dly,twdl_im_dly,x_u_in,y_v_in,v_y_in,extended_dvld,softReset_Parent],...
        [stageOut,x_out,u_out,y_out,v_out,realOut_dvld,doutVld],'ButterflyG');

    else
        x_u_in=stageL.addSignal2('Type',din_re.Type,'Name','x_u_in');
        x_u_in.SimulinkRate=dataRate;
        y_v_in=stageL.addSignal2('Type',din_re.Type,'Name','y_v_in');
        y_v_in.SimulinkRate=dataRate;
        v_y_in=stageL.addSignal2('Type',din_re.Type,'Name','v_y_in');
        v_y_in.SimulinkRate=dataRate;
        twdlRdEnb=stageL.addSignal2('Type',pir_boolean_t(),'Name','twdlRdEnb');
        twdlRdEnb.SimulinkRate=dataRate;
        twdlDly=stageL.addSignal2('Type',pir_boolean_t(),'Name','twdlDly');
        twdlDly.SimulinkRate=dataRate;
        pirelab.getConstComp(stageL,twdlDly,false);
        procEnbReg=stageL.addSignal2('Type',pir_boolean_t(),'Name','procEnb');
        procEnbReg.SimulinkRate=dataRate;
        ZERO=stageL.addSignal2('Type',pir_boolean_t(),'Name','zeroS');
        ZERO.SimulinkRate=dataRate;
        pirelab.getConstComp(stageL,ZERO,false);
        extended_dvld=stageL.addSignal2('Type',pir_boolean_t(),'Name','extended_dvld');
        extended_dvld.SimulinkRate=dataRate;
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','commutatorLs.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='CommutatorLs';

        commuatorLs=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','commutatorLs',...
        'InputSignals',[din_vld,din_re,din_im],...
        'OutputSignals',[x_u_in,y_v_in,v_y_in,twdlRdEnb,extended_dvld,procEnbReg],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','commutatorLs',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{WORDLENGTH,FRACTIONLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        commuatorLs.runConcurrencyMaximizer(0);

        twdl_re=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_re');
        twdl_re.SimulinkRate=dataRate;
        twdl_im=stageL.addSignal2('Type',pir_sfixpt_t(TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH),'Name','twdl_im');
        twdl_im.SimulinkRate=dataRate;
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','twiddleAddrG.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='twiddleAddrG';
        stageNum=TOTALSTAGES;
        twiddleAddrG=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','twiddleAddrG',...
        'InputSignals',[twdlRdEnb,twiddle_re,twiddle_im,twdlDly,ZERO],...
        'OutputSignals',[twiddleAddr,twdl_re,twdl_im],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','twiddleAddrG',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{TOTALSTAGES,stageNum,TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        twiddleAddrG.runConcurrencyMaximizer(0);


        x_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','x_out');
        x_out.SimulinkRate=dataRate;
        y_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','y_out');
        y_out.SimulinkRate=dataRate;
        u_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','u_out');
        u_out.SimulinkRate=dataRate;
        v_out=stageL.addSignal2('Type',pir_sfixpt_t(WORDLENGTH+TWDL_WORDLENGTH+2,FRACTIONLENGTH+TWDL_FRACTIONLENGTH),'Name','v_out');
        v_out.SimulinkRate=dataRate;
        realOut_dvld=stageL.addSignal2('Type',pir_boolean_t(),'Name','realOut_dvld');
        realOut_dvld.SimulinkRate=dataRate;
        doutVld=stageL.addSignal2('Type',pir_boolean_t(),'Name','doutVld');
        doutVld.SimulinkRate=dataRate;

        softReset_Parent=inputPort(7);
        ButterFlyG=this.elabRADIX2ButterflyG(stageL,TOTALSTAGES,WORDLENGTH,FRACTIONLENGTH,blockInfo,dataRate,stageIn,...
        procEnbReg,twdl_re,twdl_im,x_u_in,y_v_in,v_y_in,extended_dvld,softReset_Parent,stageOut,x_out,u_out,y_out,v_out,realOut_dvld,doutVld);

        pirelab.instantiateNetwork(stageL,ButterFlyG,[stageIn,procEnbReg,twdl_re,twdl_im,x_u_in,y_v_in,v_y_in,extended_dvld,softReset_Parent],...
        [stageOut,x_out,u_out,y_out,v_out,realOut_dvld,doutVld],'ButterflyG');

    end



    fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
    '+dsphdlsupport','+internal','@AbstractFFT','cgireml','outputMuxL.m'),'r');
    fcnBody=fread(fid,Inf,'char=>char')';
    fclose(fid);

    desc='outputMuxL';
    outMuxL=stageL.addComponent2(...
    'kind','cgireml',...
    'Name','outputMuxL',...
    'InputSignals',[doutVld,realOut_dvld,x_out,y_out,u_out,v_out],...
    'OutputSignals',[dout_re,dout_im,dout_vld],...
    'ExternalSynchronousResetSignal',softReset,...
    'EMLFileName','outputMuxL',...
    'EMLFileBody',fcnBody,...
    'EMLParams',{SIGNED,dout_re.Type.WordLength,dout_re.Type.FractionLength,OVERFLOWACTION,ROUNDINGMETHOD,NORMALIZE},...
    'EMLFlag_TreatInputIntsAsFixpt',true,...
    'EMLFlag_SaturateOnIntOverflow',false,...
    'EMLFlag_TreatInputBoolsAsUfix1',false,...
    'BlockComment',desc);

    outMuxL.runConcurrencyMaximizer(0);


    if blockInfo.outMode(1)&&blockInfo.BitReversedOutput
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities','+dsphdlsupport','+internal',...
        '@AbstractFFT','cgireml','startOutput.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='startOutput';

        startOutComp=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','startOutput',...
        'InputSignals',[dout_vld],...
        'OutputSignals',startOutS,...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','startOutput',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{TOTALSTAGES},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        startOutComp.runConcurrencyMaximizer(0);

    end


    if blockInfo.outMode(2)&&blockInfo.BitReversedOutput
        fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
        '+dsphdlsupport','+internal','@AbstractFFT','cgireml','endOutput.m'),'r');
        fcnBody=fread(fid,Inf,'char=>char')';
        fclose(fid);

        desc='endOutput';

        endOutput=stageL.addComponent2(...
        'kind','cgireml',...
        'Name','endOutput',...
        'InputSignals',[dout_vld],...
        'OutputSignals',[endOutS],...
        'ExternalSynchronousResetSignal',softReset,...
        'EMLFileName','endOutput',...
        'EMLFileBody',fcnBody,...
        'EMLParams',{TOTALSTAGES},...
        'EMLFlag_TreatInputIntsAsFixpt',true,...
        'EMLFlag_SaturateOnIntOverflow',false,...
        'EMLFlag_TreatInputBoolsAsUfix1',false,...
        'BlockComment',desc);

        endOutput.runConcurrencyMaximizer(0);

    end

end
