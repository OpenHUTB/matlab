function btf=elabComplexMultiply(this,topNet,DATA_WORDLENGTH,DATA_FRACTIONLENGTH,TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH,dataRate,din1,din2,twiddle_re,twiddle_im,result1,result2)






    btf=pirelab.createNewNetwork(...
    'Network',topNet,...
    'Name','ComplexMultiply',...
    'InportNames',{din1.Name,din2.Name,twiddle_re.Name,twiddle_im.Name},...
    'InportTypes',[din1.Type;din2.Type;twiddle_re.Type;twiddle_im.Type],...
    'InportRates',[dataRate;dataRate;dataRate;dataRate],...
    'OutportNames',{result1.Name,result2.Name},...
    'OutportTypes',[result1.Type;result2.Type]...
    );


    inputPort=btf.PirInputSignals;
    outputPort=btf.PirOutputSignals;

    din1=inputPort(1);
    din2=inputPort(2);
    twiddle_re=inputPort(3);
    twiddle_im=inputPort(4);

    result1=outputPort(1);
    result2=outputPort(2);


    fid=fopen(fullfile(matlabroot,'toolbox','dsphdl','dsphdlutilities',...
    '+dsphdlsupport','+internal','@AbstractFFT','cgireml','complexMultiply.m'),'r');
    fcnBody=fread(fid,Inf,'char=>char')';
    fclose(fid);

    desc='ComplexMultiply';

    ComplexMultiply=btf.addComponent2(...
    'kind','cgireml',...
    'Name','ComplexMultiply',...
    'InputSignals',[din1,din2,twiddle_re,twiddle_im],...
    'OutputSignals',[result1,result2],...
    'EMLFileName','complexMultiply',...
    'EMLFileBody',fcnBody,...
    'EMLParams',{DATA_WORDLENGTH,DATA_FRACTIONLENGTH,TWDL_WORDLENGTH,TWDL_FRACTIONLENGTH},...
    'EMLFlag_TreatInputIntsAsFixpt',true,...
    'EMLFlag_SaturateOnIntOverflow',false,...
    'EMLFlag_TreatInputBoolsAsUfix1',false,...
    'BlockComment',desc);

    ComplexMultiply.runConcurrencyMaximizer(0);
    ComplexMultiply.resetNone(true);


end
