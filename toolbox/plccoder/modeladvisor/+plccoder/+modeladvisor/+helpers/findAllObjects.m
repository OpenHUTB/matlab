function [allObjects] = findAllObjects(system)
%

%   Copyright 2020 The MathWorks, Inc.

    mdladvObj = Simulink.ModelAdvisor.getModelAdvisor(system);
    sysObj     = get_param(system,'Object');

    allObjects.rlInports = get_param(find_system(system, 'BlockType', 'Inport'),'Object');
    allObjects.rlInports = mdladvObj.filterResultWithExclusion(allObjects.rlInports);
    allObjects.rlInportsNames = cellfun(@(x) x.Name,allObjects.rlInports,'UniformOutput',false);

    allObjects.rlOutports = get_param(find_system(system, 'BlockType', 'Outport'),'Object');
    allObjects.rlOutports = mdladvObj.filterResultWithExclusion(allObjects.rlOutports);
    allObjects.rlOutportsNames = cellfun(@(x) x.Name,allObjects.rlOutports,'UniformOutput',false);

    findArgs = {...
        '-isa','Stateflow.State'     ,'-or',...
        '-isa','Stateflow.EMFunction','-or',...
        '-isa','Stateflow.Function'  ,'-or',...
        '-isa','Stateflow.SLFunction','-or',...
        '-isa','Stateflow.Box'       ,'-or',...
        '-isa','Stateflow.Data'      ,'-or',...
        '-isa','Stateflow.Event'     ,'-or',...
        '-isa','Stateflow.TruthTable'};
    allObjects.sfObjects     = sysObj.find(findArgs{:});
    allObjects.sfObjects = mdladvObj.filterResultWithExclusion(allObjects.sfObjects);
    allObjects.sfObjectsNames = unique(arrayfun(@(x) x.Name,allObjects.sfObjects,'UniformOutput',false));

    % allObjects.blocks = get_param(find_system(system,...
    %     'FollowLinks'   ,'on',...
    %     'LookUnderMasks','all',...
    %     'Type'          ,'block'),'Object');
    % allObjects.blocks = mdladvObj.filterResultWithExclusion(allObjects.blocks);
    % allObjects.blocksNames = arrayfun(@(x) x{1}.Name,allObjects.blocks,'UniformOutput',false);

    allObjects.dataStores = get_param(find_system(system,...
                                                  'FollowLinks'   ,'on',...
                                                  'LookUnderMasks','all',...
                                                  'RegExp'        ,'on',...
                                                  'BlockType'          ,'DataStore'),'Object');
    allObjects.dataStores = mdladvObj.filterResultWithExclusion(allObjects.dataStores);
    allObjects.dataStoresNames = unique(arrayfun(@(x) x{1}.DataStoreName,allObjects.dataStores,'UniformOutput',false));

    allObjects.signals = get_param(find_system(system,...
                                               'FindAll'       ,'on',...
                                               'FollowLinks'   ,'on',...
                                               'LookUnderMasks','all',...
                                               'Type'          ,'line'),'Object');
    allObjects.signals = mdladvObj.filterResultWithExclusion(allObjects.signals);
    allObjects.signalsNames = unique(arrayfun(@(x) replace(x{1}.Name,["<",">"],''),allObjects.signals,'UniformOutput',false));

    try
        allObjects.parameters = Simulink.findVars(system,'SourceType','base workspace');
    catch
        allObjects.parameters = Simulink.findVars(system,'SearchMethod','cached','SourceType','base workspace');
    end
    allObjects.parameters = mdladvObj.filterResultWithExclusion(allObjects.parameters);
    allObjects.parametersNames = unique(arrayfun(@(x) x.Name,allObjects.parameters,'UniformOutput',false));

    % LocalWords:  mdladvObj
