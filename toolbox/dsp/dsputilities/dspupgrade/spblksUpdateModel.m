function spblksUpdateModel(h)







    if h.CheckFlags.BlockReplace
        ReplaceInfoNoCompile={...
        {'ReferenceBlock',sprintf('dspobslib/DSP\nConstant')},...
        'ReplaceDSPConstant';
        {'ReferenceBlock',sprintf('dspxfrm3/FFT'),'TableOpt','HYBRID'},...
        'RemoveFFTWarnForNormalizeCB';
        {'ReferenceBlock',sprintf('dspxfrm3/FFT'),'TableOpt','Speed'},...
        'RemoveFFTWarnForNormalizeCB';
        {'ReferenceBlock',sprintf('dspxfrm3/FFT'),'TableOpt','Memory'},...
        'RemoveFFTWarnForNormalizeCB';
        {'ReferenceBlock',sprintf('dspmlti4/CIC\nDecimation'),...
        'ftype','Zero-latency decimator'},...
        'UpdateZeroLatencyCICFilter';
        {'ReferenceBlock',sprintf('dspmlti4/CIC\nInterpolation'),...
        'ftype','Zero-latency interpolator'},...
        'UpdateZeroLatencyCICFilter';
        };

        ReplaceInfoNoCompile=...
        cell2struct(ReplaceInfoNoCompile,{'BlockDesc','ReplaceFcn'},2);
        replaceBlocks(h,ReplaceInfoNoCompile);
    end


    if h.CheckFlags.Compiled





        ReplaceFrameSourceList={...
        {'ReferenceBlock','dspsrcs4/Sine Wave'},...
        {'ReferenceBlock','dspsrcs4/Chirp'}...
        ,{'ReferenceBlock',sprintf('dspsrcs4/Random\nSource')},...
        {'ReferenceBlock',sprintf('dspobslib/From Audio\nDevice')},...
        {'ReferenceBlock',sprintf('dspsrcs4/Discrete \nImpulse')},...
        {'ReferenceBlock',sprintf('dspsrcs4/Signal From\nWorkspace')},...
        {'ReferenceBlock','dspsrcs4/NCO'},...
        {'ReferenceBlock','dspsigops/NCO'},...
        {'ReferenceBlock',sprintf('dspmlti4/CIC\nInterpolation')},...
        {'ReferenceBlock',sprintf('dspmlti4/Dyadic Synthesis\nFilter Bank')},...
        {'ReferenceBlock',sprintf('dspmlti4/Dyadic Analysis\nFilter Bank')},...
        {'ReferenceBlock',sprintf('dspbuff3/Delay Line')},...
        {'ReferenceBlock',sprintf('dspxfrm3/DWT')},...
        {'ReferenceBlock',sprintf('dspxfrm3/IDWT')},...
        {'ReferenceBlock',sprintf('dspsigops/Triggered Signal\nFrom Workspace')},...
        {'ReferenceBlock',sprintf('dspxfrm3/Inverse \nShort-Time FFT')},...
        {'BlockType','Buffer'},...
        };
        numBlksReplaceFrameSource=length(ReplaceFrameSourceList);
        ReplaceFrameSource=cell(numBlksReplaceFrameSource,2);

        for idx=1:numBlksReplaceFrameSource
            ReplaceFrameSource(idx,:)={{...
            sprintf('%s',ReplaceFrameSourceList{idx}{1}),...
            sprintf('%s',ReplaceFrameSourceList{idx}{2})},...
            'FrameSourceRegisterCompileCheck'};
        end

        UpdateFrameBasedConstantBlock=...
        {{'BlockType','Constant'},'ConstantRegisterCompileCheck'};








        ReplaceInfoOutport={...
        {'BlockType','Outport'},...
        'SLCheckerBlocksRegisterCompileCheck'};
        ReplaceInfoSigSpec={...
        {'BlockType','SignalSpecification'},...
        'SLCheckerBlocksRegisterCompileCheck'};
        ReplaceInfoSPCDelay={...
        {'ReferenceBlock',sprintf('dspobslib/Delay')},...
        'DelayRegisterCompileCheck'};




        ReplaceInfoDSPMatrixSum={...
        {'ReferenceBlock',sprintf('dspobslib/Matrix\nSum')},...
        'DSPMatrixSumRegisterCompileCheck'};


        ReplaceInfoVectorScope={...
        {'ReferenceBlock',sprintf('dspobslib/Vector\nScope')},...
        'VectorScopeRegisterCompileCheck'};


        FDesignList=dspGetFrameUpgradeList;
        numBlksFDesignList=size(FDesignList,1);
        ReplaceInfoFDesign=cell(numBlksFDesignList,2);
        for idx=1:numBlksFDesignList
            ReplaceInfoFDesign(idx,:)={...
            {'MaskType',sprintf('%s',FDesignList{idx,1})},...
            'FDesignRegisterCompileCheck'};
        end


        ReplaceInfoDFD={...
        {'MaskType','Digital Filter Design'},...
        'DFDRegisterCompileCheck'};


























        ReplaceDigitalFilter={...
        {'ReferenceBlock',sprintf('dspobslib/Digital Filter')},...
        'digitalFilterRegisterCompileCheck'};

        ReplaceSPCDelay={...
        {'ReferenceBlock',sprintf('dspobslib/Delay')},...
        'SPCDelayRegisterCompileCheck'};

        ReplaceSPCVariableIntegerDelay={...
        {'ReferenceBlock',sprintf('dspobslib/Variable\nInteger Delay')},...
        'SPCVariableIntegerDelayRegisterCompileCheck'};

        ReplaceFromMultimediaFile={...
        {'ReferenceBlock','dspvision/From Multimedia File'},...
        'FromMultimediaFileRegisterCompileCheck'};


        ReplaceInfoDSPOBSLIB={...
        {'ReferenceBlock',sprintf('dspobslib/Dyadic Analysis\nFilter Bank')},...
        'DSPOBSLIBRegisterCompileCheck';
        {'ReferenceBlock',sprintf('dspobslib/Dyadic Synthesis\nFilter Bank')},...
        'DSPOBSLIBRegisterCompileCheck';
        {'ReferenceBlock',sprintf('dspobslib/Wavelet\nAnalysis')},...
        'DSPOBSLIBRegisterCompileCheck';
        {'ReferenceBlock',sprintf('dspobslib/Wavelet\nSynthesis')},...
        'DSPOBSLIBRegisterCompileCheck';
        {'ReferenceBlock',sprintf('dspobslib/Integer Delay')},...
        'DSPOBSLIBRegisterCompileCheck'};

        ReplaceInfo=[...
        ReplaceInfoDSPMatrixSum;...
        ReplaceInfoVectorScope;...
        ReplaceInfoFDesign;...
        ReplaceInfoSPCDelay;...
        ReplaceInfoDFD;...
        ReplaceInfoOutport;...
        ReplaceInfoSigSpec;...
        ReplaceFrameSource;...
        UpdateFrameBasedConstantBlock;...
        ReplaceInfoDSPOBSLIB;...
        ReplaceDigitalFilter;...
        ReplaceSPCDelay;...
        ReplaceSPCVariableIntegerDelay;...
        ReplaceFromMultimediaFile];

        if slfeature('FrameSignalUpgradeCheck')
            ReplaceInfoInport={{'BlockType','Inport'},...
            'SLCheckerBlocksRegisterCompileCheck'};
            ReplaceInfo=[ReplaceInfo;ReplaceInfoInport];
        end

        ReplaceInfo=...
        cell2struct(ReplaceInfo,{'BlockDesc','ReplaceFcn'},2);

        replaceBlocks(h,ReplaceInfo);
    end



