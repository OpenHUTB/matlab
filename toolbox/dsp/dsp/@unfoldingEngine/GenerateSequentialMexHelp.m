function GenerateSequentialMexHelp(obj)




    gen=sigutils.internal.emission.MatlabFunctionGenerator([obj.data.mname,'_st']);
    gen.Path=obj.data.workdirectory;
    gen.RCSRevisionAndDate=false;
    gen.EndOfFileMarker=false;
    gen.TimeStampInHeader=false;
    gen.InputArgs={'varargin'};
    gen.OutputArgs={'varargout'};
    gen.CodeAnalyzerSuppression='STOUT';

    gen.H1Line=sprintf('Single-threaded MEX file corresponding to %s',[obj.data.fname,obj.data.fext]);
    hText=StringWriter;
    hText.addcr('Single-threaded MEX file automatically generated by dspunfold,');
    hText.addcr('%%   corresponding to %s',[obj.data.fname,obj.data.fext]);
    hText.addcr('%');
    hText.addcr('%%   Generated on %s',char(datetime('now')));
    hText.addcr('%');

    hText.addcr('%   Syntax');
    workcall=sigutils.internal.emission.MatlabFunctionGenerator([obj.data.mname,'_st']);
    for i=1:numel(obj.data.TopFunctionOutputs)
        workcall.OutputArgs=[workcall.OutputArgs,{sprintf('y%d',i)}];
    end
    for i=1:numel(obj.data.TopFunctionInputs)
        workcall.InputArgs=[workcall.InputArgs,{sprintf('u%d',i)}];
    end
    hText.addcr('%%     %s;',strtrim(workcall.getFcnInterface.char))
    if numel(obj.data.TopFunctionInputs)
        for i=1:numel(obj.data.TopFunctionInputs)
            hText.add('%%     u%d: %s',i,obj.data.TopFunctionInputs{i}.VarType.LogInfo.Class);
            if~isempty(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                hText.add(', ');
                for j=1:numel(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                    hText.add('%d',obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size(j));
                    if j<numel(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                        hText.add('x');
                    end
                end
            end
            st='';
            if(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Complex)
                st=[st,'complex'];%#ok<*AGROW>
            end
            if obj.data.FrameInputs(i)
                if~isempty(st)
                    st=[st,','];
                end
                st=[st,'frame'];
            end
            if isa(obj.InputArgs{i},'coder.Constant')
                if~isempty(st)
                    st=[st,','];
                end
                st=[st,'constant'];
            end
            if~isempty(st)
                hText.add([' (',st,')']);
            end
            hText.addcr();
        end
    end
    if numel(obj.data.TopFunctionOutputs)
        for i=1:numel(obj.data.TopFunctionOutputs)
            hText.add('%%     y%d: %s',i,obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Class);
            if~isempty(obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Size)
                hText.add(', ');
                for j=1:numel(obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Size)
                    hText.add('%d',obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Size(j));
                    if j<numel(obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Size)
                        hText.add('x');
                    end
                end
            end
            if(obj.data.TopFunctionOutputs{i}.VarType.LogInfo.Complex)
                hText.add(', (complex)');
            end
            hText.addcr();
        end
    end

    gen.Help=hText.char;
    gen.addCode('try');
    gen.addCode('coder.internal.error(''dsp:dspunfold:MissingGeneratedMex'',mfilename,mexext);');
    gen.addCode('catch err');
    gen.addCode('error(err.identifier,err.message);');
    gen.addCode('end');
    gen.writeFile;

    movefile(fullfile(obj.data.workdirectory,[obj.data.mname,'_st.m']),fullfile(obj.data.workdirectory,[obj.data.tempname,'_st.m']),'f');

end

