function GenerateAnalyzerHelp(obj)




    gen=sigutils.internal.emission.MatlabFunctionGenerator([obj.data.mname,'_analyzer']);
    gen.Path=obj.data.workdirectory;
    gen.RCSRevisionAndDate=false;
    gen.EndOfFileMarker=false;
    gen.TimeStampInHeader=false;
    gen.InputArgs={'varargin'};
    gen.OutputArgs={'varargout'};
    gen.CodeAnalyzerSuppression='STOUT';

    gen.H1Line=sprintf('Multi-threaded performance analysis for %s',obj.data.real_mname);

    hText=StringWriter;
    hText.addcr('Performance analysis for %s, a multi-threaded MEX implementation of',obj.data.real_mname);
    hText.addcr('%%   %s, automatically generated by dspunfold.',[obj.data.fname,obj.data.fext]);
    hText.addcr('%');
    hText.addcr('%%   Generated on %s',char(datetime('now')));
    hText.addcr('%');

    hText.addcr('%   Syntax');
    workcall=sigutils.internal.emission.MatlabFunctionGenerator([obj.data.mname,'_analyzer']);
    workcall.OutputArgs={'report'};
    for i=1:numel(obj.data.TopFunctionInputs)
        workcall.InputArgs=[workcall.InputArgs,{sprintf('u%d',i)}];
    end
    hText.addcr('%%     %s;',strtrim(workcall.getFcnInterface.char))
    if numel(obj.data.TopFunctionInputs)
        for i=1:numel(obj.data.TopFunctionInputs)
            hText.add('%%     u%d: %s',i,obj.data.TopFunctionInputs{i}.VarType.LogInfo.Class);
            if~isempty(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                hText.add(', ');
                for j=1:numel(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                    hText.add('%d',obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size(j));
                    if j<numel(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Size)
                        hText.add('x');
                    end
                end
            end
            st='';
            if(obj.data.TopFunctionInputs{i}.VarType.LogInfo.Complex)
                st=[st,'complex'];%#ok<*AGROW>
            end
            if isa(obj.InputArgs{i},'coder.Constant')
                if~isempty(st)
                    st=[st,','];
                end
                st=[st,'constant'];
            end
            if~isempty(st)
                hText.add([' (',st,')']);
            end
            hText.addcr();
        end
    end

    hText.addcr('%');
    hText.addcr('%%   %s measures the speed increase between the',strtrim(workcall.getFcnInterface.char))
    hText.addcr('%%   multi-threaded and single-threaded MEX file implementations of %s.',[obj.data.fname,obj.data.fext]);
    hText.addcr('%   It also verifies output values match.');
    if numel(obj.data.TopFunctionInputs)
        hText.addcr('%   The analyzer accepts the first dimension of each input to be multiple');
        hText.addcr('%   of the ones mentioned above, representing multiple frames. The analyzer ');
        hText.addcr('%   will alternate between these frames while doing the output match verification.');
        hText.addcr('%   It''s strongly recommended to use, for each input, at least 2 different frames.');
    end
    hText.addcr('%');
    workcall=sigutils.internal.emission.MatlabFunctionGenerator([obj.data.mname,'_analyzer']);
    workcall.OutputArgs={'report'};
    workcall.InputArgs={'''latency'''};
    hText.addcr('%%   %s reports the latency of the',strtrim(workcall.getFcnInterface.char))
    hText.addcr('%%   multi-threaded MEX file (%s) introduced by unfolding.  Latency',obj.data.real_mname)
    hText.addcr('%   measures delay of output values relative to input values.');
    hText.addcr('%');
    hText.addcr('%   report is a structure with the following fields:');
    hText.addcr('%     Latency: The value of the latency (in frames)');
    hText.addcr('%     Speedup: The speed increase.');
    hText.addcr('%              When ''latency'' option is used, the value of this field is empty []');
    hText.addcr('%        Pass: Logical value that shows if the outputs match between');
    hText.addcr('%              the automatically generated multi-threaded and single-threaded MEX files.');
    hText.addcr('%              When ''latency'' option is used, the value of this field is empty []');

    gen.Help=hText.char;

    gen.addCode('try');
    gen.addCode('coder.internal.error(''dsp:dspunfold:MissingGeneratedAnalyzer'',mfilename);');
    gen.addCode('catch err');
    gen.addCode('error(err.identifier,err.message);');
    gen.addCode('end');

    gen.writeFile;

    movefile(fullfile(obj.data.workdirectory,[obj.data.mname,'_analyzer.m']),fullfile(obj.data.workdirectory,[obj.data.tempname,'_analyzer_help.m']),'f');

end
