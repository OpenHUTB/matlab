classdef Util






    methods(Static)


...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...

        function absPath=getAbsolutePath(aName)


            if isfolder(aName)
                aName=[aName,'*'];
            end
            dirOut=dir(aName);
            if isempty(dirOut)
                error(message('dds:util:FileOrFolderNotFound',aName));
            end

            dirOut=dirOut(1);
            absPath=fullfile(dirOut.folder,dirOut.name);
        end

        function sharedDir=sharedUtilsDir(buildInfo,isAbsolute)








            sharedDir='';
            for i=1:length(buildInfo.BuildArgs)
                if strcmpi(buildInfo.BuildArgs(i).Key,'SHARED_SRC_DIR')
                    sharedDir=strtrim(buildInfo.BuildArgs(i).Value);
                    break;
                end
            end
            if~isempty(sharedDir)&&isAbsolute


                codegenFolder=RTW.getBuildDir(buildInfo.ModelName).CodeGenFolder;
                sharedDir=RTW.getBuildDir(buildInfo.ModelName).SharedUtilsTgtDir;

                sharedDir=fullfile(codegenFolder,sharedDir);
            end
        end

        function varName=genCppVarName(name,exclusiveList)







            if~isletter(name(1))&&~isequal(name(1),'_')
                name=['var',name];
            end



            varName=regexprep(name,'[^A-Za-z_0-9]+([a-z])','${upper($1)}');

            varName=regexprep(varName,'[^A-Za-z_0-9]+','');


            varName=regexprep(varName,'_(_+)','_');


            keywordList={'alignas','alignof','asm','auto','bool','break',...
            'case','catch','char','char8_t','char16_t','char32_t','class',...
            'concept','const','consteval','constexpr','constinit','const_cast',...
            'continue','co_await','co_return','co_yield','decltype','default','delete',...
            'do','double','dynamic_cast','else','enum','explicit','export','extern',...
            'false','float','for','friend','goto','if','inline','int','long','mutable',...
            'namespace','new','noexcept','nullptr','operator','private','protected',...
            'public','register','reinterpret_cast','requires','return','short',...
            'signed','sizeof','static','static_assert','static_cast','struct',...
            'switch','template','this','thread_local','throw','true','try',...
            'typedef','typeid','typename','union','unsigned','using','virtual',...
            'void','volatile','wchar_t','while'};
            exclusiveList=[exclusiveList,keywordList];
            index=1;
            while any(strcmp(exclusiveList,varName))
                varName=[varName,num2str(index,'%d')];
                index=index+1;
            end
        end
    end

end
