classdef(Sealed)VMgrAutoGenConfigToolStripBroker<handle







    properties

        Precondition(1,:)char='';

        ExcludeVCD(1,:)char='';

        ConfigValidity(1,:)char='valid-unique';

        AddPreconditionAsConstraint(1,1)logical=false;
    end

    methods
        function obj=VMgrAutoGenConfigToolStripBroker()
        end

        function generateConfigs(obj,modelH)
            import slvariants.internal.manager.ui.config.VMgrConstants;
            try
                modelName=getfullname(modelH);
                genConfigsParamInfo=MException(message('Simulink:VariantManagerUI:AutoGenConfigGeneratedConfigsParamInfo',obj.getArgsAsInfo(false)));
                sldiagviewer.reportInfo(genConfigsParamInfo,'Component',VMgrConstants.DiagComponentName,'Category',VMgrConstants.DiagAutoGenConfigCategory);
                argsStr=obj.getArgsAsInfo(true);
                args=obj.constructCmdLineOptionalArgs(modelName);
                [vcd,configsInfo,ctrlVarsData]=obj.generateConfigurationsFromUI(modelName,args);
                obj.setVcdToGenConfigsDialog(vcd,configsInfo,ctrlVarsData,argsStr,modelH);
            catch excep

                sldiagviewer.reportError(excep);
            end
        end

        function addSelectedConfigs(obj,modelH)
            try
                configs=obj.getSelectedConfigurations(modelH);
                obj.addConfigurationsToManageDialog(configs,modelH);
                constraints=obj.getConstraintsFromGeneratedVCD(modelH);
                obj.addConstraintsToManageDialog(constraints,modelH);
            catch excep

                sldiagviewer.reportError(excep);
            end
        end

        function reset(obj,modelH)
            import slvariants.internal.manager.ui.config.VMgrConstants;
            try
                obj.resetCtrlVarsData(modelH);
                ctrlVarsData=obj.getCtrlVarsData(modelH);

                obj.setVcdToGenConfigsDialog(Simulink.VariantConfigurationData(),{},ctrlVarsData,'',modelH);

                resetInfo=MException(message('Simulink:VariantManagerUI:AutoGenConfigReset'));
                sldiagviewer.reportInfo(resetInfo,'Component',VMgrConstants.DiagComponentName,'Category',VMgrConstants.DiagAutoGenConfigCategory);
            catch excep

                sldiagviewer.reportError(excep);
            end
        end

        function initializeGenerateTab(obj,modelHandle)
            import slvariants.internal.manager.ui.config.VMgrConstants;
            modelName=getfullname(modelHandle);
            slvariants.internal.manager.core.restoreDiagnosticViewer(modelHandle);
            diagInterceptor=slvariants.internal.manager.ui.diag.VMgrDiagInterceptor(modelName);
            diagProcessor=Simulink.output.registerProcessor(diagInterceptor);%#ok<SETNU>
            diagCleanupObj=onCleanup(@()cleanupFcn());

            migDiagStageName=getString(message('Simulink:VariantManagerUI:LaunchGenerateConfigsDiagStage'));
            migDiagStage=sldiagviewer.createStage(migDiagStageName,ModelName=diagInterceptor.DiagnosticViewerName);%#ok<NASGU>

            configCtrlVarsInfo=MException(message('Simulink:VariantManagerUI:AutoGenConfigSettingUpConfigCtrlVars'));
            sldiagviewer.reportInfo(configCtrlVarsInfo,'Component',VMgrConstants.DiagComponentName,'Category',VMgrConstants.DiagAutoGenConfigCategory);

            try
                obj.resetParameters();
                obj.clearUIData(modelHandle);
                slvariants.internal.manager.ui.configgen.setIgnoreConfigTextAtLaunch(modelHandle);
                autoGenConfigureCtrlVarDDGComp=obj.getConfigCtrlVariablesDDGComp(modelHandle);
                autoGeneratedConfigsDDGComp=obj.getGenConfigsDDGComp(modelHandle);
                slvariants.internal.manager.ui.configgen.populateConfigureCtrlVariablesData(modelHandle,autoGenConfigureCtrlVarDDGComp,autoGeneratedConfigsDDGComp);
            catch excep

                sldiagviewer.reportError(excep);
            end

            function cleanupFcn()
                clear diagInterceptor;
                clear diagProcessor;
            end
        end

        function constraints=getConstraintsFromGeneratedVCD(obj,modelH)
            dlg=obj.getGenConfigsDialog(modelH);
            vcd=dlg.getSource().getGeneratedConfigsSource().getGeneratedVCD();
            constraints=vcd.getConstraints();
        end
    end

    methods(Access=private)
        function clearUIData(obj,modelH)
            modelName=getfullname(modelH);
            autoGenConfigureCtrlVarDDGComp=obj.getConfigCtrlVariablesDDGComp(modelH);
            autoGeneratedConfigsDDGComp=obj.getGenConfigsDDGComp(modelH);
            newDialogSource=slvariants.internal.manager.ui.configgen.ConfigCtrlVariablesDialogSchema({},modelName);
            autoGenConfigureCtrlVarDDGComp.updateSource(newDialogSource);
            newDialogSource=slvariants.internal.manager.ui.configgen.GeneratedConfigsDialogSchema({},modelName);
            autoGeneratedConfigsDDGComp.updateSource(newDialogSource);
        end

        function resetParameters(obj)


            obj.Precondition='';
            obj.ExcludeVCD='';
            obj.ConfigValidity='valid-unique';
            obj.AddPreconditionAsConstraint=false;
        end

        function precondition=getParsedPreconditionForCmdLineArgs(obj,modelName)
            precondition=obj.Precondition;
            try

                evaluatedPred=Simulink.data.evalinGlobal(modelName,precondition);
                if(iscell(evaluatedPred))


                    precondition=evaluatedPred;
                end
            catch

            end
        end

        function args=constructCmdLineOptionalArgs(obj,modelName)
            args{1}='Validity';
            args{2}=obj.ConfigValidity;

            if~isempty(obj.Precondition)
                args{end+1}='Precondition';
                args{end+1}=obj.getParsedPreconditionForCmdLineArgs(modelName);
                args{end+1}='AddPreconditionAsConstraint';
                args{end+1}=true;
            end

            if~isempty(obj.ExcludeVCD)
                args{end+1}='ExcludeVariantConfigurationData';
                args{end+1}=obj.ExcludeVCD;
            end



        end

        function argsStr=getArgsAsInfo(obj,encodeAsHtml)
            argsStr='';
            if~isempty(obj.Precondition)
                precondition=obj.Precondition;
                if encodeAsHtml


                    precondition=strrep(precondition,'<','&lt;');
                    precondition=strrep(precondition,'>','&gt;');
                    precondition=[precondition,'<br/>'];
                end
                argsStr=[argsStr,'Precondition : ',precondition,' '];
            end
            argsStr=[argsStr,'Validity : ',obj.ConfigValidity];
            if~isempty(obj.ExcludeVCD)
                argsStr=[argsStr,'     ExcludeVariantConfigurationData : ',obj.ExcludeVCD];
            end
        end

        function[vcdGen,configsInfo,ctrlVarsData]=generateConfigurationsFromUI(obj,modelName,args)
            parsedInputStruct=slvariants.internal.manager.configgen.parseInputs(modelName,args{:});
            bdHandle=get_param(parsedInputStruct.ModelName,'Handle');
            ctrlVarsData=obj.getCtrlVarsData(bdHandle);
            slvariants.internal.manager.configgen.setCtrlVarsData(bdHandle,ctrlVarsData);
            logger=slvariants.internal.manager.configgen.EnvLogger(parsedInputStruct);
            slvariants.internal.manager.configgen.generateConfigs(bdHandle,...
            parsedInputStruct.Precondition);
            [vcdGen,configsInfo]=slvariants.internal.manager.configgen.constructOutput(parsedInputStruct);
            logger.setConfigGenOutput(struct('VCDO',vcdGen,'ConfigsInfo',configsInfo));
        end

        function ddgComp=getConfigCtrlVariablesDDGComp(~,modelHandle)
            vmStudioHandle=slvariants.internal.manager.core.getStudio(modelHandle);
            ddgComp=vmStudioHandle.getComponent('GLUE2:DDG Component',message('Simulink:VariantManagerUI:AutoGenConfigureControlVariablesDDG').getString());
        end


        function dlg=getConfigCtrlVariablesDialog(obj,modelHandle)
            ddgComp=obj.getConfigCtrlVariablesDDGComp(modelHandle);
            dlg=ddgComp.getDialog;
        end

        function ctrlVarsData=getCtrlVarsData(obj,modelH)
            dlg=obj.getConfigCtrlVariablesDialog(modelH);
            ctrlVarsData=dlg.getSource().getCtrlVarsData();
        end

        function resetCtrlVarsData(obj,modelH)
            dlg=obj.getConfigCtrlVariablesDialog(modelH);
            dlg.getSource().resetCtrlVarsData();
            dlg.refresh();
        end

        function ddgComp=getGenConfigsDDGComp(~,modelHandle)
            vmStudioHandle=slvariants.internal.manager.core.getStudio(modelHandle);
            ddgComp=vmStudioHandle.getComponent('GLUE2:DDG Component',message('Simulink:VariantManagerUI:AutoGeneratedConfigsDDG').getString());
        end

        function dlg=getGenConfigsDialog(obj,modelHandle)
            ddgComp=obj.getGenConfigsDDGComp(modelHandle);
            dlg=ddgComp.getDialog;
        end

        function setVcdToGenConfigsDialog(obj,vcd,configsInfo,ctrlVarsData,argsStr,modelH)
            dlg=obj.getGenConfigsDialog(modelH);
            dlg.getSource().setGeneratedConfigurations(vcd,configsInfo,ctrlVarsData,dlg);
            dlg.getSource().updateGenerateArgsLabel(argsStr,dlg);
            dlg.refresh();
        end

        function configs=getSelectedConfigurations(obj,modelH)
            dlg=obj.getGenConfigsDialog(modelH);
            configs=dlg.getSource().getSelectedConfigurations();
        end

        function dlg=getConfigsDialog(~,modelHandle)
            modelName=getfullname(modelHandle);
            dlg=slvariants.internal.manager.ui.config.getConfigurationsDialog(modelName);
        end

        function dlg=getConstrsDialog(~,modelHandle)
            modelName=getfullname(modelHandle);
            dlg=slvariants.internal.manager.ui.config.getConstraintsDialog(modelName);
        end

        function addConfigurationsToManageDialog(obj,configurations,modelH)
            import slvariants.internal.manager.ui.config.VMgrConstants;
            numOfAddedConfigs=0;
            dlg=obj.getConfigsDialog(modelH);
            configSchema=dlg.getSource;
            for idx=1:numel(configurations)
                existingCfgNames=configSchema.ConfigSSSrc.getConfigurationNames();
                if ismember(configurations(idx).Name,existingCfgNames)

                    excep=MException(message("Simulink:VariantManagerUI:AutoGenConfigConfigNameAlreadyExist",...
                    configurations(idx).Name));
                    sldiagviewer.reportError(excep);
                    continue;
                end


                configSchema.ConfigSSSrc.addConfiguration(configurations(idx),length(existingCfgNames)+1);
                configSchema.setSourceObjDirtyFlag(configSchema);
                numOfAddedConfigs=numOfAddedConfigs+1;
            end
            dlg.refresh();

            addConfigsInfo=MException(message('Simulink:VariantManagerUI:AutoGenConfigAddConfigsInfo',numOfAddedConfigs));
            sldiagviewer.reportInfo(addConfigsInfo,'Component',VMgrConstants.DiagComponentName,'Category',VMgrConstants.DiagAutoGenConfigCategory);
        end

        function addConstraintsToManageDialog(obj,constraints,modelH)
            import slvariants.internal.manager.ui.config.VMgrConstants;
            if~obj.AddPreconditionAsConstraint
                return
            end

            if isempty(obj.Precondition)
                return
            end
            newConstraintAdded=false;
            for idx=1:numel(constraints)
                dlg=obj.getConstrsDialog(modelH);
                constraintSchema=dlg.getSource;
                existingConstraintNames=constraintSchema.ConstrSSSrc.getConstraintNames();
                newConstr=constraints(idx);

                newConstr.Name=matlab.lang.makeUniqueStrings('Constraint',existingConstraintNames);
                constraintSchema.addNewConstraint(constraintSchema.ConstrSSSrc,newConstr);
                newConstraintAdded=true;

                addConstrInfo=MException(message('Simulink:VariantManagerUI:AutoGenConfigAddConstraintInfo',newConstr.Name,newConstr.Condition));
                sldiagviewer.reportInfo(addConstrInfo,'Component',VMgrConstants.DiagComponentName,'Category',VMgrConstants.DiagAutoGenConfigCategory);
            end
            if newConstraintAdded
                dlg=obj.getConstrsDialog(modelH);
                constraintSchema=dlg.getSource;
                constraintSchema.setCacheObjDirtyFlag();
                dlg.refresh();
            end
        end
    end
end


