function updatePeaksContextMenu( p, hMenu, m )




delete( hMenu.Children );

ds_idx = getDataSetIndex( m );
peakID = m.ID;
totalPeaks = numel( p.pPeakLocationList{ ds_idx } );
str1 = sprintf( 'PEAK %d of %d', m.Index, totalPeaks );
str3 = sprintf( '  INDEX %d', m.DataIndex );


if getNumDatasets( p ) > 1
assert( strcmpi( m.DataSetMode, 'manual' ) )
str2 = sprintf( 'DATASET %d', ds_idx );
label = [ '<html><b>', str1, '</b><br>' ...
, '<font size=3><i>', str2, '</i><br>' ...
, '<i>', str3, '</i></font></html>' ];
else 
label = [ '<html><b>', str1, '</b><br>' ...
, '<font size=3><i>', str3, '</i></font></html>' ];
end 

headerOpts = { hMenu, label, '', 'Enable', 'off' };
internal.ContextMenus.createContext( headerOpts );




N = getNumDatasets( p );
vals = cell( N, 1 );
for i = 1:N
vals{ i } = sprintf( 'Dataset %d', i );
end 


if N > 1
make = true;
sep = true;
ID = m.ID;
m = findPeakAngleMarkerByID( p, ID );
internal.ContextMenus.createContextSubmenu( m, make, sep, hMenu,  ...
'Connect to...', vals, 'DataSetConnect' );
end 








st = m.Visible;
hc = internal.ContextMenus.createContext( { hMenu,  ...
'Show Table',  ...
@( ~, ~ )showPeaksTable( p, st ) } );
if N == 1
hc.Separator = 'on';
end 
hc.Checked = internal.LogicalToOnOff( ~st );


make = true;
parentLabel = 'Num Peaks';
childLabel = [ '<html><b>PEAKS</b><br>' ...
, '<font size=3><i> DATASET ', sprintf( '%d', ds_idx ) ...
, '</i><br></html>' ];
menuLabels = { parentLabel, childLabel };
sep = true;
internal.ContextMenus.createContextSubmenu( p, make, sep,  ...
hMenu, menuLabels,  ...
p.PeaksValues, { 'Peaks', ds_idx }, p.PeaksValuesInt );

 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...

internal.ContextMenus.createContext( { hMenu, 'Refresh Peaks', @( ~, ~ )m_refreshPeaks( p, getDataSetIndex( m ) ) } );
internal.ContextMenus.createContext( { hMenu, 'Remove Peaks', @( ~, ~ )m_removePeaks( p, getDataSetIndex( m ) ) } );
internal.ContextMenus.createContext( { hMenu, 'Export Peaks', @( ~, ~ )m_exportPeaks( p ) } );

 ...
 ...
 ...
 ...
 ...
 ...


internal.ContextMenus.createContext( { hMenu, 'Bring to Front',  ...
@( ~, ~ )m_reorderAngleMarker( p, peakID,  + 1 ), 'separator', 'on' } );
internal.ContextMenus.createContext( { hMenu, 'Send to Back',  ...
@( ~, ~ )m_reorderAngleMarker( p, peakID,  - 1 ) } );

% Decoded using De-pcode utility v1.2 from file /tmp/tmpn5T5_Q.p.
% Please follow local copyright laws when handling this file.

