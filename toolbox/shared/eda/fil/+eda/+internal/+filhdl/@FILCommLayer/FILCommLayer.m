



classdef(ConstructOnLoad)FILCommLayer<eda.internal.component.WhiteBox



    properties
clk
reset
txclk_en
rxclk_en

dut_rst
dut_din
dut_dinvld
dut_dinrdy
simcycle

dut_dout
dut_doutvld
dut_doutrdy

buildInfo
    end

    methods
        function this=FILCommLayer(BuildInfo)

            this.flatten=false;
            this.buildInfo=BuildInfo;

            this.clk=eda.internal.component.ClockPort;
            this.reset=eda.internal.component.ResetPort;
            this.txclk_en=eda.internal.component.Inport('FiType','boolean');
            this.rxclk_en=eda.internal.component.Inport('FiType','boolean');

            this.dut_rst=eda.internal.component.Outport('FiType','boolean');
            this.dut_din=eda.internal.component.Outport('FiType','std8');
            this.dut_dinvld=eda.internal.component.Outport('FiType','boolean');
            this.dut_dinrdy=eda.internal.component.Inport('FiType','boolean');
            this.simcycle=eda.internal.component.Outport('FiType','std16');

            this.dut_dout=eda.internal.component.Inport('FiType','std8');
            this.dut_doutvld=eda.internal.component.Inport('FiType','boolean');
            this.dut_doutrdy=eda.internal.component.Outport('FiType','boolean');

            if strcmpi(this.buildInfo.BoardObj.Component.Communication_Channel,'Altera JTAG')
                addprop(this,'CLK125');
                this.CLK125=eda.internal.component.ClockPort;
            else
                props={'gmii_rx_clk',...
                'gmii_rxd',...
                'gmii_rx_dv',...
                'gmii_rx_er',...
                'gmii_tx_clk',...
                'gmii_txd',...
                'gmii_tx_en',...
                'gmii_tx_er',...
                'gmii_col',...
                'gmii_crs'};
                for m=1:numel(props)
                    addprop(this,props{m});
                end
                this.gmii_rx_clk=eda.internal.component.ClockPort;
                this.gmii_rxd=eda.internal.component.Inport('FiType','std8');
                this.gmii_rx_dv=eda.internal.component.Inport('FiType','boolean');
                this.gmii_rx_er=eda.internal.component.Inport('FiType','boolean');
                this.gmii_tx_clk=eda.internal.component.ClockPort;
                this.gmii_txd=eda.internal.component.Outport('FiType','std8');
                this.gmii_tx_en=eda.internal.component.Outport('FiType','boolean');
                this.gmii_tx_er=eda.internal.component.Outport('FiType','boolean');
                this.gmii_col=eda.internal.component.Inport('FiType','boolean');
                this.gmii_crs=eda.internal.component.Inport('FiType','boolean');
            end
        end

        function implement(this)
            mac_rxdata=this.signal('Name','mac_rxdata','FiType','std8');
            mac_rxvld=this.signal('Name','mac_rxvld','FiType','boolean');
            mac_rxeop=this.signal('Name','mac_rxeop','FiType','boolean');
            mac_rxcrcok=this.signal('Name','mac_rxcrcok','FiType','boolean');
            mac_rxcrcbad=this.signal('Name','mac_rxcrcbad','FiType','boolean');
            mac_rxdstport=this.signal('Name','mac_rxdstport','FiType','std2');
            mac_rxreset=this.signal('Name','mac_rxreset','FiType','boolean');
            mac_txreset=this.signal('Name','mac_txreset','FiType','boolean');
            mac_txdata=this.signal('Name','mac_txdata','FiType','std8');
            mac_txvld=this.signal('Name','mac_txvld','FiType','boolean');
            mac_txeop=this.signal('Name','mac_txeop','FiType','boolean');
            mac_txrdy=this.signal('Name','mac_txrdy','FiType','boolean');
            mac_txdatalength=this.signal('Name','mac_txdatalength','FiType','std13');
            mac_txsrcport=this.signal('Name','mac_txsrcport','FiType','std2');

            if strcmpi(this.buildInfo.BoardObj.Component.Communication_Channel,'Altera JTAG')
                this.component(...
                'Name','MWAJTAG',...
                'Component',eda.internal.component.MWAJTAG,...
                'CLK125',this.CLK125,...
                'RxData',mac_rxdata,...
                'RxDataValid',mac_rxvld,...
                'RxEOP',mac_rxeop,...
                'RxCRCOK',mac_rxcrcok,...
                'RxCRCBad',mac_rxcrcbad,...
                'TxReady',mac_txrdy,...
                'TxData',mac_txdata,...
                'TxDataValid',mac_txvld,...
                'TxDataLength',mac_txdatalength,...
                'TxEOP',mac_txeop);
                txclk=this.CLK125;
                rxclk=this.CLK125;
            else
                IPAddress=getIPAddress(this.buildInfo);
                this.component(...
                'Name','MWMAC',...
                'Component',eda.internal.component.MWMAC(IPAddress{:}),...
                'rxclk',this.gmii_rx_clk,...
                'txclk',this.gmii_tx_clk,...
                'rxclk_en',this.rxclk_en,...
                'txclk_en',this.txclk_en,...
                'gmii_rxd',this.gmii_rxd,...
                'gmii_rx_dv',this.gmii_rx_dv,...
                'gmii_rx_er',this.gmii_rx_er,...
                'gmii_txd',this.gmii_txd,...
                'gmii_tx_en',this.gmii_tx_en,...
                'gmii_tx_er',this.gmii_tx_er,...
                'gmii_col',this.gmii_col,...
                'gmii_crs',this.gmii_crs,...
                'RxData',mac_rxdata,...
                'RxDataValid',mac_rxvld,...
                'RxEOP',mac_rxeop,...
                'RxCRCOK',mac_rxcrcok,...
                'RxCRCBad',mac_rxcrcbad,...
                'RxDstPort',mac_rxdstport,...
                'RxReset',mac_rxreset,...
                'TxData',mac_txdata,...
                'TxDataValid',mac_txvld,...
                'TxEOP',mac_txeop,...
                'TxReady',mac_txrdy,...
                'TxReset',mac_txreset,...
                'TxDataLength',mac_txdatalength,...
                'TxSrcPort',mac_txsrcport);

                txclk=this.gmii_tx_clk;
                rxclk=this.gmii_rx_clk;
            end

            version=getVersion(this.buildInfo);
            if this.buildInfo.EnableHWBuffer&&~strcmpi(this.buildInfo.BoardObj.Component.Communication_Channel,'Altera JTAG')
                rxbufferAddrWidth=15;
            else
                rxbufferAddrWidth=12;
            end
            this.component(...
            'Name','FILPktProc',...
            'Component',eda.internal.filhdl.FILPktProc('VERSION',version,'RXBUFFERADDRWIDTH',num2str(rxbufferAddrWidth)),...
            'rxclk',rxclk,...
            'txclk',txclk,...
            'rxclk_en',this.rxclk_en,...
            'txclk_en',this.txclk_en,...
            'RxData',mac_rxdata,...
            'RxDataValid',mac_rxvld,...
            'RxEOP',mac_rxeop,...
            'RxCRCOK',mac_rxcrcok,...
            'RxCRCBad',mac_rxcrcbad,...
            'RxDstPort',mac_rxdstport,...
            'RxReset',mac_rxreset,...
            'TxData',mac_txdata,...
            'TxDataValid',mac_txvld,...
            'TxEOP',mac_txeop,...
            'TxReady',mac_txrdy,...
            'TxReset',mac_txreset,...
            'TxDataLength',mac_txdatalength,...
            'TxSrcPort',mac_txsrcport,...
            'clk',this.clk,...
            'rst',this.reset,...
            'dut_rst',this.dut_rst,...
            'dut_din',this.dut_din,...
            'dut_dinvld',this.dut_dinvld,...
            'dut_dinrdy',this.dut_dinrdy,...
            'simcycle',this.simcycle,...
            'dut_dout',this.dut_dout,...
            'dut_doutvld',this.dut_doutvld,...
            'dut_doutrdy',this.dut_doutrdy);
        end
    end
end


function ipAddr=getIPAddress(buildInfo)











    IPAddress=textscan(buildInfo.IPAddress,'%s','Delimiter','.');
    MACAddress=textscan(buildInfo.MACAddress,'%s','Delimiter','-');
    ipAddr={'MWMACADDR1',num2str(hex2dec(MACAddress{1}{1})),...
    'MWMACADDR2',num2str(hex2dec(MACAddress{1}{2})),...
    'MWMACADDR3',num2str(hex2dec(MACAddress{1}{3})),...
    'MWMACADDR4',num2str(hex2dec(MACAddress{1}{4})),...
    'MWMACADDR5',num2str(hex2dec(MACAddress{1}{5})),...
    'MWMACADDR6',num2str(hex2dec(MACAddress{1}{6})),...
    'MWIPADDR1',num2str(IPAddress{1}{1}),...
    'MWIPADDR2',num2str(IPAddress{1}{2}),...
    'MWIPADDR3',num2str(IPAddress{1}{3}),...
    'MWIPADDR4',num2str(IPAddress{1}{4})};
end

function version=getVersion(buildInfo)
    version=['X"0',num2str(buildInfo.FILVersion.Major),'0',num2str(buildInfo.FILVersion.Minor),'"'];
end
