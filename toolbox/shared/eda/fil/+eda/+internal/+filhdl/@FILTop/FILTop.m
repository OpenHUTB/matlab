


classdef FILTop<eda.internal.component.MWTop



    properties
sysrst

    end

    methods
        function this=FILTop(FILCore)

            this.Partition=FILCore.Partition;
            FILCore.Partition.Device='';
            this.UniqueName=this.Partition.Name;
            this.flatten=false;
            Device=this.getDevice(this.Partition.Device.PartInfo);
            if isa(this.Partition.Device.PartInfo,'eda.fpga.Altera')
                Device.RGMII_TX_PhaseShift=this.Partition.Device.PartInfo.RGMII_TX_PhaseShift;
            end
            SYSCLK=this.Partition.Device.SYSCLK;
            SynthFreq=this.Partition.SynthFreq;

            hMgr=eda.internal.boardmanager.BoardManager.getInstance;
            boardObj=hMgr.getFILBoardObj(this.Partition.Board);




            if isfield(this.Partition.Device,'SYSRST')
                this.sysrst=eda.internal.component.ResetPort;
            end
            this.addSYSClock;
            this.addChannelIO;



            dutclk=this.signal('Name','dutClk','FiType','boolean');
            rst=this.signal('Name','rst','FiType','boolean');
            ClkIn=this.signal('Name','ClkIn','FiType','boolean');
            rxclk=this.signal('Name','rxclk','FiType','boolean');
            txclk=this.signal('Name','txclk','FiType','boolean');
            rxd=this.signal('Name','rxd','FiType','std8');
            txd=this.signal('Name','txd','FiType','std8');
            txclk_en=this.signal('Name','txclk_en','FiType','boolean');
            rxclk_en=this.signal('Name','rxclk_en','FiType','boolean');


            if strcmpi(this.Partition.Device.SYSCLK.Type,'DIFF')
                Device.ibufgds(this,this.sysclk_n,this.sysclk_p,ClkIn);
            else
                Device.ibufg(this,this.sysclk,ClkIn);
            end


            dcm_reset=this.signal('Name','dcm_reset','FiType','boolean');
            if isfield(this.Partition.Device,'SYSRST')
                if strcmpi(this.Partition.Device.SYSRST.Polarity,'ACTIVE_LOW')
                    this.assign(' ~ this.sysrst',dcm_reset);
                else
                    this.assign(this.sysrst,dcm_reset);
                end
            else

                BitZero=this.signal('Name','BitZero','FiType','boolean');
                this.assign('fi(0,0,1,0)',BitZero);
                this.assign(BitZero,dcm_reset);
            end


            switch this.Partition.Device.Communication_Channel
            case 'Altera JTAG'
                Bit0=this.signal('Name','Bit0','FiType','boolean');
                this.assign('fi(0,0,1,0)',Bit0);
                ref_clk=this.signal('Name','ref_clk','FiType','boolean');

                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_GMII(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'RXCLK_IN',Bit0,...
                'DUTCLK',dutclk,...
                'MACRXCLK','OPEN',...
                'MACTXCLK',ref_clk,...
                'TXCLK','OPEN',...
                'RESET_OUT',rst);


                filCore=this.component(...
                'Name','FILCore',...
                'Component',FILCore,...
                'clk',dutclk,...
                'reset',rst,...
                'CLK125',ref_clk,...
                'txclk_en',txclk_en,...
                'rxclk_en',rxclk_en);

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);

                filCore.flatten=false;
                return;

            case 'PCIe'
                Bit0=this.signal('Name','Bit0','FiType','boolean');
                this.assign('fi(0,0,1,0)',Bit0);

                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_PCIe(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'DUTCLK',dutclk,...
                'RESET_OUT',rst);
                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);


                filCore=this.component(...
                'Name','FILCore',...
                'Component',FILCore,...
                'clk',dutclk,...
                'reset',rst,...
                'pcie_clk_p',this.pcie_clk_p,...
                'pcie_clk_n',this.pcie_clk_n,...
                'pcie_slot_reset_b',this.pcie_slot_reset_b,...
                'pcie_tx_p',this.pcie_tx_p,...
                'pcie_tx_n',this.pcie_tx_n,...
                'pcie_rx_p',this.pcie_rx_p,...
                'pcie_rx_n',this.pcie_rx_n,...
                'txclk_en',txclk_en,...
                'rxclk_en',rxclk_en);

                filCore.flatten=false;
                return;
            case 'SGMII'
                rxdvld=this.signal('Name','rxdvld','FiType','boolean');
                rxerror=this.signal('Name','rxerror','FiType','boolean');
                txen=this.signal('Name','txen','FiType','boolean');

                txerror=this.signal('Name','txerror','FiType','boolean');
                rxclk_in=this.signal('Name','rxclk_in','FiType','boolean');
                col=this.signal('Name','col','FiType','boolean');
                crs=this.signal('Name','crs','FiType','boolean');
                ref_clk=this.signal('Name','ref_clk','FiType','boolean');

                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_GMII(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'RXCLK_IN',rxclk_in,...
                'DUTCLK',dutclk,...
                'MACRXCLK','OPEN',...
                'MACTXCLK',ref_clk,...
                'TXCLK','OPEN',...
                'RESET_OUT',rst);

                switch this.Partition.Device.PartInfo.FPGAFamily
                case 'Stratix IV'
                    genericstr='"STRATIXIV"';
                otherwise
                    genericstr='"STRATIXV"';
                end
                this.component(...
                'Name','altsgmii',...
                'Component',eda.internal.component.ALTSGMII('DEVICE_FAMILY',genericstr),...
                'gmii_rx_d',rxd,...
                'gmii_rx_dv',rxdvld,...
                'gmii_rx_err',rxerror,...
                'tx_clk',txclk,...
                'rx_clk',rxclk,...
                'tx_clkena','OPEN',...
                'rx_clkena','OPEN',...
                'txp',this.ETH_TXP,...
                'gmii_tx_d',txd,...
                'gmii_tx_en',txen,...
                'gmii_tx_err',txerror,...
                'clk',dutclk,...
                'reset',rst,...
                'rxp',this.ETH_RXP,...
                'ref_clk',ref_clk);

                rxd_i=rxd;
                rxdvld_i=rxdvld;
                rxerror_i=rxerror;
                txd_i=txd;
                txen_i=txen;
                txerror_i=txerror;
                col_i=col;
                crs_i=crs;

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);
                this.assign('fi(0,0,1,0)',col);
                this.assign('fi(0,0,1,0)',crs);
                this.assign('fi(0,0,1,0)',rxclk_in);
            case 'Arria10SGMII'
                rxdvld=this.signal('Name','rxdvld','FiType','boolean');
                rxerror=this.signal('Name','rxerror','FiType','boolean');
                txen=this.signal('Name','txen','FiType','boolean');

                txerror=this.signal('Name','txerror','FiType','boolean');
                rxclk_in=this.signal('Name','rxclk_in','FiType','boolean');
                col=this.signal('Name','col','FiType','boolean');
                crs=this.signal('Name','crs','FiType','boolean');

                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_GMII(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'RXCLK_IN',rxclk_in,...
                'DUTCLK',dutclk,...
                'MACRXCLK','OPEN',...
                'MACTXCLK','OPEN',...
                'TXCLK','OPEN',...
                'RESET_OUT',rst);

                sgmii=eda.internal.component.Arria10SGMII(boardObj.getIOStandard('ETH_TXP'));
                this.component(...
                'Name','altsgmii',...
                'Component',sgmii,...
                'gmii_rx_d',rxd,...
                'gmii_rx_dv',rxdvld,...
                'gmii_rx_err',rxerror,...
                'tx_clk',txclk,...
                'rx_clk',rxclk,...
                'gmii_tx_d',txd,...
                'gmii_tx_en',txen,...
                'gmii_tx_err',txerror,...
                'clk',dutclk,...
                'reset',rst,...
                'txp',this.ETH_TXP,...
                'rxp',this.ETH_RXP,...
                'ref_clk_p',this.ETH_GTREFCLK_P,...
                'ref_clk_n',this.ETH_GTREFCLK_N);

                rxd_i=rxd;
                rxdvld_i=rxdvld;
                rxerror_i=rxerror;
                txd_i=txd;
                txen_i=txen;
                txerror_i=txerror;
                col_i=col;
                crs_i=crs;

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);
                this.assign('fi(0,0,1,0)',col);
                this.assign('fi(0,0,1,0)',crs);
                this.assign('fi(0,0,1,0)',rxclk_in);
            case{'XlnxSGMII','XlnxSGMII625MhzRef'}
                rxdvld=this.signal('Name','rxdvld','FiType','boolean');
                rxerror=this.signal('Name','rxerror','FiType','boolean');
                txen=this.signal('Name','txen','FiType','boolean');
                txerror=this.signal('Name','txerror','FiType','boolean');
                col_i=this.signal('Name','col','FiType','boolean');
                crs_i=this.signal('Name','crs','FiType','boolean');
                dcm_locked=this.signal('Name','dcm_locked','FiType','boolean');
                macclk=this.signal('Name','mac_clk','FiType','boolean');

                componentName=this.Partition.Device.Communication_Channel;
                if strcmpi(componentName,'XlnxSGMII')
                    component=eda.internal.component.XLNXSGMII;
                else
                    component=eda.internal.component.XlnxSGMII625MHzRef;
                end
                this.component(...
                'Name','xlnxsgmii',...
                'Component',component,...
                'rxp',this.ETH_RXP,...
                'rxn',this.ETH_RXN,...
                'txp',this.ETH_TXP,...
                'txn',this.ETH_TXN,...
                'gtrefclk_p',this.ETH_GTREFCLK_P,...
                'gtrefclk_n',this.ETH_GTREFCLK_N,...
                'clk',ClkIn,...
                'gmii_txd',txd,...
                'gmii_tx_en',txen,...
                'gmii_tx_er',txerror,...
                'gmii_rxd',rxd,...
                'gmii_rx_dv',rxdvld,...
                'gmii_rx_er',rxerror,...
                'mac_clk',macclk,...
                'dut_clk',dutclk,...
                'reset',dcm_reset,...
                'dcm_locked',dcm_locked);

                this.assign(' ~ dcm_locked',rst);
                this.assign(macclk,txclk);
                this.assign(macclk,rxclk);

                rxd_i=rxd;
                rxdvld_i=rxdvld;
                rxerror_i=rxerror;
                txd_i=txd;
                txen_i=txen;
                txerror_i=txerror;

                this.assign('fi(0,0,1,0)',col_i);
                this.assign('fi(0,0,1,0)',crs_i);

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);

            case{'MII','MIIwith25MHzOut'}
                rxdvld=this.signal('Name','rxdvld','FiType','boolean');
                rxerror=this.signal('Name','rxerror','FiType','boolean');
                txen=this.signal('Name','txen','FiType','boolean');
                txerror=this.signal('Name','txerror','FiType','boolean');
                col=this.signal('Name','col','FiType','boolean');
                crs=this.signal('Name','crs','FiType','boolean');

                if strcmpi(this.Partition.Device.Communication_Channel,'MIIwith25MHzOut')
                    this.component(...
                    'Name','ClockManager',...
                    'Component',Device.ClkMgr_MII(SYSCLK,SynthFreq),...
                    'RESET_IN',dcm_reset,...
                    'CLK_IN',ClkIn,...
                    'DUTCLK',dutclk,...
                    'RXCLK_IN',this.ETH_RXCLK,...
                    'TXCLK_IN',this.ETH_TXCLK,...
                    'RXCLK_OUT',rxclk,...
                    'TXCLK_OUT',txclk,...
                    'RESET_OUT',rst,...
                    'CLK25',this.ETH_CLK25);
                else
                    this.component(...
                    'Name','ClockManager',...
                    'Component',Device.ClkMgr_MII(SYSCLK,SynthFreq),...
                    'RESET_IN',dcm_reset,...
                    'CLK_IN',ClkIn,...
                    'DUTCLK',dutclk,...
                    'RXCLK_IN',this.ETH_RXCLK,...
                    'TXCLK_IN',this.ETH_TXCLK,...
                    'RXCLK_OUT',rxclk,...
                    'TXCLK_OUT',txclk,...
                    'RESET_OUT',rst);
                end

                portConn={
                'rxclk',rxclk,...
                'txclk',txclk,...
                'reset',rst,...
                'mii_rxdv',this.ETH_RXDV,...
                'mii_rxer',this.ETH_RXER,...
                'mii_col',this.ETH_COL,...
                'mii_crs',this.ETH_CRS,...
                'mii_rxd',this.ETH_RXD,...
                'mii_txd',this.ETH_TXD,...
                'mii_txen',this.ETH_TXEN,...
                'mii_txer',this.ETH_TXER,...
                'rxdvld',rxdvld,...
                'txerror',txerror,...
                'rxerror',rxerror,...
                'txd',txd,...
                'rxd',rxd,...
                'col',col,...
                'crs',crs,...
                'txen',txen',...
                'txclk_en',txclk_en,...
                'rxclk_en',rxclk_en};

                this.component(...
                'Name','mii2gmii',...
                'Component',eda.internal.component.MWMII2GMII,...
                portConn{:});

                rxd_i=rxd;
                rxdvld_i=rxdvld;
                rxerror_i=rxerror;
                txd_i=txd;
                txen_i=txen;
                txerror_i=txerror;
                col_i=col;
                crs_i=crs;


            case 'GMII'
                rxdvld=this.signal('Name','rxdvld','FiType','boolean');
                rxerror=this.signal('Name','rxerror','FiType','boolean');
                txen=this.signal('Name','txen','FiType','boolean');
                txerror=this.signal('Name','txerror','FiType','boolean');
                col=this.signal('Name','col','FiType','boolean');
                crs=this.signal('Name','crs','FiType','boolean');

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);

                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_GMII(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'RXCLK_IN',this.ETH_RXCLK,...
                'DUTCLK',dutclk,...
                'MACRXCLK',rxclk,...
                'MACTXCLK',txclk,...
                'TXCLK',this.ETH_GTXCLK,...
                'RESET_OUT',rst);

                rxd_i=rxd;
                rxdvld_i=rxdvld;
                rxerror_i=rxerror;
                txd_i=txd;
                txen_i=txen;
                txerror_i=txerror;
                col_i=col;
                crs_i=crs;


                this.component(...
                'Name','rxdvldReg',...
                'Component',eda.internal.component.Register,...
                'clk',this.ETH_RXCLK,...
                'reset',rst,...
                'din',this.ETH_RXDV,...
                'dout',rxdvld);

                this.component(...
                'Name','rxerror',...
                'Component',eda.internal.component.Register,...
                'clk',this.ETH_RXCLK,...
                'reset',rst,...
                'din',this.ETH_RXER,...
                'dout',rxerror);

                this.component(...
                'Name','rxdataReg',...
                'Component',eda.internal.component.Register,...
                'clk',this.ETH_RXCLK,...
                'reset',rst,...
                'din',this.ETH_RXD,...
                'dout',rxd);

                this.component(...
                'Name','collosion',...
                'Component',eda.internal.component.Register,...
                'clk',this.ETH_RXCLK,...
                'reset',rst,...
                'din',this.ETH_COL,...
                'dout',col);

                this.component(...
                'Name','crs',...
                'Component',eda.internal.component.Register,...
                'clk',this.ETH_RXCLK,...
                'reset',rst,...
                'din',this.ETH_CRS,...
                'dout',crs);


                this.component(...
                'Name','txdataReg',...
                'Component',eda.internal.component.Register,...
                'clk',txclk,...
                'reset',rst,...
                'din',txd,...
                'dout',this.ETH_TXD);

                this.component(...
                'Name','txen',...
                'Component',eda.internal.component.Register,...
                'clk',txclk,...
                'reset',rst,...
                'din',txen,...
                'dout',this.ETH_TXEN);
                this.component(...
                'Name','txerror',...
                'Component',eda.internal.component.Register,...
                'clk',txclk,...
                'reset',rst,...
                'din',txerror,...
                'dout',this.ETH_TXER);

            case 'RGMII'

                rxd_l=this.signal('Name','rxd_l','FiType','std4');
                rxd_h=this.signal('Name','rxd_h','FiType','std4');
                rxctrl_l=this.signal('Name','rxctrl_l','FiType','boolean');
                rxctrl_h=this.signal('Name','rxctrl_h','FiType','boolean');
                txctrl_l=this.signal('Name','txctrl_l','FiType','boolean');
                txctrl_h=this.signal('Name','txctrl_h','FiType','boolean');
                txd_l=this.signal('Name','txd_l','FiType','std4');
                txd_h=this.signal('Name','txd_h','FiType','std4');
                rxd_i=this.signal('Name','rxd_i','FiType','std8');
                rxdvld_i=this.signal('Name','rxdvld_i','FiType','boolean');
                rxerror_i=this.signal('Name','rxerror_i','FiType','boolean');
                txd_i=this.signal('Name','txd_i','FiType','std8');
                txen_i=this.signal('Name','txen_i','FiType','boolean');
                txerror_i=this.signal('Name','txerror_i','FiType','boolean');
                col_i=this.signal('Name','col_i','FiType','boolean');
                crs_i=this.signal('Name','crs_i','FiType','boolean');
                rxctrl=this.signal('Name','rxctrl','FiType','std2');
                txctrl=this.signal('Name','txctrl','FiType','std2');

                rgmii_txctrl_i=this.signal('Name','rgmii_ctrl_i','FiType','boolean');
                rgmii_txd_i=this.signal('Name','rgmii_txd_i','FiType','std4');

                rgmii_rx_composite=this.signal('Name','rgmii_rx_composite','FiType','std5');
                rx_composite_h=this.signal('Name','rx_composite_h','FiType','std5');
                rx_composite_l=this.signal('Name','rx_composite_l','FiType','std5');

                rgmii_tx_composite=this.signal('Name','rgmii_tx_composite','FiType','std5');
                tx_composite_h=this.signal('Name','tx_composite_h','FiType','std5');
                tx_composite_l=this.signal('Name','tx_composite_l','FiType','std5');

                this.assign('fi(1,0,1,0)',txclk_en);
                this.assign('fi(1,0,1,0)',rxclk_en);


                this.component(...
                'Name','ClockManager',...
                'Component',Device.ClkMgr_RGMII(SYSCLK,SynthFreq),...
                'RESET_IN',dcm_reset,...
                'CLK_IN',ClkIn,...
                'RXCLK_IN',this.ETH_RXCLK,...
                'DUTCLK',dutclk,...
                'MACRXCLK',rxclk,...
                'MACTXCLK',txclk,...
                'TXCLK',this.ETH_TXCLK,...
                'RESET_OUT',rst);

                this.assign('bitconcat(this.ETH_RXD, this.ETH_RX_CTL)',rgmii_rx_composite);
                if isa(Device,'eda.fpga.Xilinx')
                    for m=0:4
                        iddr_in(m+1)=this.signal('Name',sprintf('iddr_in_%d',m),'FiType','boolean');%#ok<AGROW>
                        iddr_out1(m+1)=this.signal('Name',sprintf('iddr_out1_%d',m),'FiType','boolean');%#ok<AGROW>
                        iddr_out2(m+1)=this.signal('Name',sprintf('iddr_out2_%d',m),'FiType','boolean');%#ok<AGROW>

                        this.assign(...
                        sprintf('bitsliceget(rgmii_rx_composite, %d)',m),iddr_in(m+1));
                        Device.iddr(this,rxclk,iddr_in(m+1),'HIGH',iddr_out1(m+1),iddr_out2(m+1),'LOW','LOW','"SAME_EDGE"');
                    end
                    this.assign('bitconcat(iddr_out1_4, iddr_out1_3, iddr_out1_2, iddr_out1_1, iddr_out1_0)',rx_composite_h);
                    this.assign('bitconcat(iddr_out2_4, iddr_out2_3, iddr_out2_2, iddr_out2_1, iddr_out2_0)',rx_composite_l);
                else
                    Device.multiBitIddr(this,rxclk,rst,rgmii_rx_composite,rx_composite_h,rx_composite_l,5);
                end
                this.assign('bitsliceget(rx_composite_h, 0)',rxctrl_h);
                this.assign('bitsliceget(rx_composite_h, 4, 1)',rxd_h);
                this.assign('bitsliceget(rx_composite_l, 0)',rxctrl_l);
                this.assign('bitsliceget(rx_composite_l, 4, 1)',rxd_l);
                this.assign('bitconcat(rxd_l, rxd_h)',rxd);
                this.assign('bitconcat(rxctrl_l, rxctrl_h)',rxctrl);

                this.assign('bitsliceget(txd, 7, 4)',txd_l);
                this.assign('bitsliceget(txd, 3, 0)',txd_h);
                this.assign('bitsliceget(txctrl, 0)',txctrl_l);
                this.assign('bitsliceget(txctrl, 1)',txctrl_h);

                this.assign('bitconcat(txd_l, txctrl_l)',tx_composite_l);
                this.assign('bitconcat(txd_h, txctrl_h)',tx_composite_h);
                if isa(Device,'eda.fpga.Xilinx')
                    for m=0:4
                        oddr_in1(m+1)=this.signal('Name',sprintf('oddr_in1_%d',m),'FiType','boolean');%#ok<AGROW>
                        oddr_in2(m+1)=this.signal('Name',sprintf('oddr_in2_%d',m),'FiType','boolean');%#ok<AGROW>
                        oddr_out(m+1)=this.signal('Name',sprintf('oddr_out_%d',m),'FiType','boolean');%#ok<AGROW>
                        this.assign(sprintf('bitsliceget(tx_composite_h, %d)',m),oddr_in1(m+1));
                        this.assign(sprintf('bitsliceget(tx_composite_l, %d)',m),oddr_in2(m+1));
                        Device.oddr(this,txclk,oddr_in1(m+1),oddr_in2(m+1),'HIGH',oddr_out(m+1),'LOW','LOW','"SAME_EDGE"');
                    end
                    this.assign('bitconcat(oddr_out_4, oddr_out_3, oddr_out_2, oddr_out_1, oddr_out_0)',rgmii_tx_composite);
                else
                    Device.multiBitOddr(this,txclk,rst,tx_composite_l,tx_composite_h,rgmii_tx_composite,5);
                end
                this.assign('bitsliceget(rgmii_tx_composite, 0)',rgmii_txctrl_i);
                this.assign('bitsliceget(rgmii_tx_composite, 4,1)',rgmii_txd_i);
                this.assign(rgmii_txctrl_i,this.ETH_TX_CTL);
                this.assign(rgmii_txd_i,this.ETH_TXD);

                this.component(...
                'Name','RGMIIBridge',...
                'Component',eda.internal.component.RGMIIBridge,...
                'rxclk',rxclk,...
                'txclk',txclk,...
                'reset',rst,...
                'rgmii_rxd',rxd,...
                'rgmii_rxctrl',rxctrl,...
                'rgmii_txd',txd,...
                'rgmii_txctrl',txctrl,...
                'gmii_rxd',rxd_i,...
                'gmii_rx_dv',rxdvld_i,...
                'gmii_rx_er',rxerror_i,...
                'gmii_txd',txd_i,...
                'gmii_tx_en',txen_i,...
                'gmii_tx_er',txerror_i,...
                'gmii_col',col_i,...
                'gmii_crs',crs_i);
            case 'RMII'
                macclk=this.signal('Name','macclk','FiType','boolean');
                rxdvld_i=this.signal('Name','rxdvld_i','FiType','boolean');
                rxerror_i=this.signal('Name','rxerror_i','FiType','boolean');
                txen_i=this.signal('Name','txen_i','FiType','boolean');
                txerror_i=this.signal('Name','txerror_i','FiType','boolean');
                col_i=this.signal('Name','col_i','FiType','boolean');
                crs_i=this.signal('Name','crs_i','FiType','boolean');
                rxd_i=this.signal('Name','rxd_i','FiType','std8');
                txd_i=this.signal('Name','txd_i','FiType','std8');

                this.component(...
                'Name','RMIIBridge',...
                'Component',eda.internal.component.MWXlnxRMII2GMII,...
                'sysclk',ClkIn,...
                'dutclk',dutclk,...
                'macclk',macclk,...
                'dcm_reset',dcm_reset,...
                'ETH_CRS',this.ETH_CRS,...
                'ETH_RXD',this.ETH_RXD,...
                'ETH_RXER',this.ETH_RXER,...
                'ETH_TXD',this.ETH_TXD,...
                'ETH_TXEN',this.ETH_TXEN,...
                'ETH_REFCLK',this.ETH_REFCLK,...
                'txclk',txclk,...
                'rxclk',rxclk,...
                'txclk_en',txclk_en,...
                'rxclk_en',rxclk_en,...
                'rxd',rxd_i,...
                'txd',txd_i,...
                'rxdvld',rxdvld_i,...
                'rxerror',rxerror_i,...
                'txen',txen_i,...
                'txerror',txerror_i,...
                'col',col_i,...
                'crs',crs_i,...
                'rst',rst);
            end

            filCore=this.component(...
            'Name','FILCore',...
            'Component',FILCore,...
            'clk',dutclk,...
            'reset',rst,...
            'txclk_en',txclk_en,...
            'rxclk_en',rxclk_en,...
            'gmii_rx_clk',rxclk,...
            'gmii_rxd',rxd_i,...
            'gmii_rx_dv',rxdvld_i,...
            'gmii_rx_er',rxerror_i,...
            'gmii_tx_clk',txclk,...
            'gmii_txd',txd_i,...
            'gmii_tx_en',txen_i,...
            'gmii_tx_er',txerror_i,...
            'gmii_col',col_i,...
            'gmii_crs',crs_i);

            filCore.flatten=false;


            if strcmpi(this.Partition.Device.Communication_Channel,'XlnxSGMII625MHzRef')&&isfield(this.Partition.Device,'PhyAddr')
                phy_addr=this.Partition.Device.PhyAddr;
                mdio=eda.internal.component.MWMdioAdv(...
                'DownSampleFactor','50',...
                'data0',l_getMDIOcmd('00',phy_addr,0),...
                'data1',l_getMDIOcmd('00',phy_addr,0),...
                'data2',l_getMDIOcmd('01',phy_addr,9),...
                'data3','"0000111100000000"',...
                'data4',l_getMDIOcmd('01',phy_addr,27),...
                'data5','"1000000010000000"',...
                'data6',l_getMDIOcmd('01',phy_addr,0),...
                'data7','"1001000000000000"');
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'CLK',dutclk,...
                'RESET',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            elseif strcmpi(this.Partition.Device.Communication_Channel,'GMII')&&isfield(this.Partition.Device,'PhyAddr')
                phy_addr=this.Partition.Device.PhyAddr;
                mdio=eda.internal.component.MWMdioAdv(...
                'DownSampleFactor','50',...
                'data0',l_getMDIOcmd('00',phy_addr,0),...
                'data1',l_getMDIOcmd('00',phy_addr,0),...
                'data2',l_getMDIOcmd('01',phy_addr,9),...
                'data3','"0000111100000000"',...
                'data4',l_getMDIOcmd('01',phy_addr,27),...
                'data5','"1000000010001111"',...
                'data6',l_getMDIOcmd('01',phy_addr,0),...
                'data7','"1001000000000000"');
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'CLK',dutclk,...
                'RESET',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            elseif strcmpi(this.Partition.Device.Communication_Channel,'MII')&&isfield(this.Partition.Device,'PhyAddr')
                phy_addr=this.Partition.Device.PhyAddr;
                mdio=eda.internal.component.MWMdioAdv(...
                'DownSampleFactor','10',...
                'data0',l_getMDIOcmd('00',phy_addr,0),...
                'data1',l_getMDIOcmd('00',phy_addr,0),...
                'data2',l_getMDIOcmd('01',phy_addr,9),...
                'data3','"0000000000000000"',...
                'data4',l_getMDIOcmd('01',phy_addr,27),...
                'data5','"1000000010001111"',...
                'data6',l_getMDIOcmd('01',phy_addr,0),...
                'data7','"1001000000000000"');
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'CLK',dutclk,...
                'RESET',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            elseif strcmpi(this.Partition.Device.Communication_Channel,'RGMII')&&isfield(this.Partition.Device,'PhyAddr')
                phy_addr=this.Partition.Device.PhyAddr;
                mdio=eda.internal.component.MWMdioAdv(...
                'DownSampleFactor','50',...
                'data0',l_getMDIOcmd('01',phy_addr,20),...
                'data1','"0000110011101010"',...
                'data2',l_getMDIOcmd('01',phy_addr,9),...
                'data3','"0000111100000000"',...
                'data4',l_getMDIOcmd('01',phy_addr,27),...
                'data5','"1000000010001011"',...
                'data6',l_getMDIOcmd('01',phy_addr,0),...
                'data7','"1001000000000000"');
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'CLK',dutclk,...
                'RESET',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            elseif strcmpi(this.Partition.Device.Communication_Channel,'SGMII')&&isfield(this.Partition.Device,'PhyAddr')
                phy_addr=this.Partition.Device.PhyAddr;
                mdio=eda.internal.component.MWMdioAdv(...
                'DownSampleFactor','50',...
                'data0',l_getMDIOcmd('00',phy_addr,0),...
                'data1',l_getMDIOcmd('00',phy_addr,0),...
                'data2',l_getMDIOcmd('01',phy_addr,9),...
                'data3','"0000111100000000"',...
                'data4',l_getMDIOcmd('01',phy_addr,27),...
                'data5','"1000000010000000"',...
                'data6',l_getMDIOcmd('01',phy_addr,0),...
                'data7','"1001000000000000"');
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'CLK',dutclk,...
                'RESET',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            else


                mdio=eda.internal.component.MWMdioBasic;
                this.component(...
                'Name','MWMdioAdv',...
                'Component',mdio,...
                'RESET_IN',rst,...
                'ETH_RESET_n',this.ETH_RESET_n,...
                'ETH_MDC',this.ETH_MDC,...
                'ETH_MDIO',this.ETH_MDIO);
            end
            rst_n=this.signal('Name','rst_n','FiType','boolean');
            this.assign(' ~ rst',rst_n);


        end
    end
end

function r=l_getMDIOcmd(cmd,phy_addr,reg_addr)
    r=sprintf('"0000%s%s%s"',cmd,dec2bin(phy_addr,5),dec2bin(reg_addr,5));
end
