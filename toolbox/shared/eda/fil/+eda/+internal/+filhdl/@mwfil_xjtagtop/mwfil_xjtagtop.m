


classdef mwfil_xjtagtop<eda.internal.component.WhiteBox



    properties
        buildInfo;
        commprops;
        use_xlinx_unisim;
        hasReset;
        isDiffClock;
        isActiveLow;
        isZynqArmClk;
    end

    methods
        function this=mwfil_xjtagtop(BuildInfo)
            this.buildInfo=BuildInfo;
            this.flatten=false;
            h=eda.internal.boardmanager.BoardManager.getInstance;
            b=h.getBoardObj(this.buildInfo.Board);
            this.hasReset=b.FPGA.hasReset;
            this.isDiffClock=b.FPGA.getClock.isDiffClock;
            this.isZynqArmClk=isa(b.FPGA.getClock,'eda.internal.boardmanager.ZynqArmClockInterface');


            if this.hasReset
                this.isActiveLow=b.FPGA.getReset.isActiveLow;
                this.addprop('sysrst');
                this.sysrst=eda.internal.component.ResetPort;
            end
            if this.isZynqArmClk

            elseif this.isDiffClock
                this.addprop('sysclk_p');
                this.addprop('sysclk_n');
                this.sysclk_p=eda.internal.component.ClockPort;
                this.sysclk_n=eda.internal.component.ClockPort;
            else
                this.addprop('sysclk');
                this.sysclk=eda.internal.component.ClockPort;
            end
        end

        function implement(this)

            din=this.signal('Name','din','FiType','std8');
            din_valid=this.signal('Name','din_valid','FiType','boolean');
            din_ready=this.signal('Name','din_ready','FiType','boolean');
            dout=this.signal('Name','dout','FiType','std8');
            dout_valid=this.signal('Name','dout_valid','FiType','boolean');
            dout_ready=this.signal('Name','dout_ready','FiType','boolean');
            simcycle=this.signal('Name','simcycle','FiType','std16');

            dutClk=this.signal('Name','dutClk','FiType','boolean');
            chif_reset=this.signal('Name','chif_reset','FiType','boolean');

            locked=this.signal('Name','locked','FiType','boolean');
            mac_reset=this.signal('Name','mac_reset','FiType','boolean');

            CAPTURE=this.signal('Name','CAPTURE','FiType','boolean');
            DRCK=this.signal('Name','DRCK','FiType','boolean');
            RESET=this.signal('Name','RESET','FiType','boolean');
            RUNTEST=this.signal('Name','RUNTEST','FiType','boolean');
            SEL=this.signal('Name','SEL','FiType','boolean');
            SHIFT=this.signal('Name','SHIFT','FiType','boolean');
            TCK=this.signal('Name','TCK','FiType','boolean');
            TDI=this.signal('Name','TDI','FiType','boolean');
            TMS=this.signal('Name','TMS','FiType','boolean');
            UPDATE=this.signal('Name','UPDATE','FiType','boolean');
            TDO=this.signal('Name','TDO','FiType','boolean');

            dcm_reset=this.signal('Name','dcm_reset','FiType','boolean');
            if this.hasReset
                if this.isActiveLow
                    this.assign(' ~ this.sysrst',dcm_reset);
                else
                    this.assign(this.sysrst,dcm_reset);
                end
            else
                BitZero=this.signal('Name','BitZero','FiType','boolean');
                this.assign('fi(0,0,1,0)',BitZero);
                this.assign(BitZero,dcm_reset);
            end


            if this.isZynqArmClk

                p=mfilename('fullpath');
                designDir=fileparts(p);

                armclk=this.signal('Name','armclk','FiType','boolean');
                armclk_rst=this.signal('Name','armclk_rst','FiType','boolean');
                armPortInfo={'clk_out','OUTPUT','boolean',...
                'reset','OUTPUT','boolean'};
                armPortConn={'clk_out',armclk,...
                'reset',armclk_rst};

                arm=this.component(...
                'UniqueName','arm_clock',...
                'InstName','arm_clock',...
                'Component',eda.internal.component.BlackBox(armPortInfo),...
                'HDLFiles',{'arm_clock.bd'},...
                'HDLFileDir',{designDir},...
                armPortConn{:});
                arm.addprop('CopyHDLFiles');

                portInfo={'clk_in1','INPUT','boolean'};
                portConn={'clk_in1',armclk};


            elseif this.isDiffClock
                portInfo={'clk_in1_p','INPUT','boolean',...
                'clk_in1_n','INPUT','boolean'};
                portConn={'clk_in1_p',this.sysclk_p,...
                'clk_in1_n',this.sysclk_n};
            else
                portInfo={'clk_in1','INPUT','boolean'};
                portConn={'clk_in1',this.sysclk};
            end

            portInfo=[portInfo,...
            {'clk_out1','OUTPUT','boolean',...
            'reset','INPUT','boolean',...
            'locked','OUTPUT','boolean'}];

            portConn=[portConn,...
            {'clk_out1',dutClk,...
            'reset',dcm_reset,...
            'locked',locked}];



            h=this.component(...
            'UniqueName','clk_wiz_0',...
            'InstName','clk_wiz_0',...
            'Component',eda.internal.component.BlackBox(portInfo),...
            portConn{:});
            h.addprop('NoHDLFiles');

            this.assign(' ~ locked',mac_reset);


            portInfo={'CAPTURE','OUTPUT','boolean',...
            'DRCK','OUTPUT','boolean',...
            'RESET','OUTPUT','boolean',...
            'RUNTEST','OUTPUT','boolean',...
            'SEL','OUTPUT','boolean',...
            'SHIFT','OUTPUT','boolean',...
            'TCK','OUTPUT','boolean',...
            'TDI','OUTPUT','boolean',...
            'TMS','OUTPUT','boolean',...
            'UPDATE','OUTPUT','boolean',...
            'TDO','INPUT','boolean'};
            portConn={'CAPTURE',CAPTURE,...
            'DRCK',DRCK,...
            'RESET',RESET,...
            'RUNTEST',RUNTEST,...
            'SEL',SEL,...
            'SHIFT',SHIFT,...
            'TCK',TCK,...
            'TDI',TDI,...
            'TMS',TMS,...
            'UPDATE',UPDATE,...
            'TDO',TDO};

            h=this.component(...
            'UniqueName','BSCANE2',...
            'InstName','BSCANE2',...
            'Component',eda.internal.component.BlackBox(portInfo),...
            portConn{:});
            h.addprop('NoHDLFiles');


            portInfo={'chif_clk','INPUT','boolean',...
            'sys_rst','INPUT','boolean',...
            'tck','INPUT','boolean',...
            'tdi','INPUT','boolean',...
            'tdo','OUTPUT','boolean',...
            'chif_din','OUTPUT','std8',...
            'chif_dout','INPUT','std8',...
            'chif_din_valid','OUTPUT','boolean',...
            'chif_dout_ready','OUTPUT','boolean',...
            'chif_din_ready','INPUT','boolean',...
            'chif_dout_valid','INPUT','boolean',...
            'chif_simcycle','OUTPUT','std16',...
            'chif_reset','OUTPUT','boolean'};
            portConn={'chif_clk',dutClk,...
            'sys_rst',mac_reset,...
            'tck',TCK,...
            'tdi',TDI,...
            'tdo',TDO,...
            'chif_din',din,...
            'chif_dout',dout,...
            'chif_din_valid',din_valid,...
            'chif_dout_ready',dout_ready,...
            'chif_din_ready',din_ready,...
            'chif_dout_valid',dout_valid,...
            'chif_simcycle',simcycle,...
            'chif_reset',chif_reset};

            filename=mfilename('fullpath');
            [filepath,~,~]=fileparts(filename);
            h=this.component(...
            'UniqueName','jtag_mac',...
            'InstName','jtag_mac',...
            'Component',eda.internal.component.BlackBox(portInfo),...
            'HDLFiles',{'jtag_mac.v','jtag_mac_fifo_wrapper.vhd','simcycle_fifo_wrapper.vhd'},...
            'HDLFileDir',{filepath},...
            portConn{:});
            h.addprop('CopyHDLFiles');


            this.component(...
            'Name','mwfil_chiftop',...
            'Component',eda.internal.filhdl.mwfil_chiftop(this.buildInfo,8),...
            'clk',dutClk,...
            'reset',chif_reset,...
            'din',din,...
            'din_valid',din_valid,...
            'din_ready',din_ready,...
            'dout',dout,...
            'dout_valid',dout_valid,...
            'dout_ready',dout_ready,...
            'simcycle',simcycle);


        end
    end
end





