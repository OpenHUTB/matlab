


classdef(ConstructOnLoad=true)glueLogic_rx<eda.internal.component.WhiteBox



    properties
clk
rst
run

muxctrl
adc_a_ofs
adc_b_ofs
phase_inc
scale
enbANDRate
prod_i
prod_q
i_out
q_out
gpio_ena
io_rx


adcAdj_i
scaleAdj_i
adcAdj_q
scaleAdj_q
prod_i23_0
prod_q23_0
phase_31_8
rate
load_rate
sample
    end

    methods

        function this=glueLogic_rx
            this.clk=eda.internal.component.ClockPort;
            this.rst=eda.internal.component.ResetPort;
            this.run=eda.internal.component.Inport('FiType','boolean');

            this.muxctrl=eda.internal.component.Inport('FiType','ufix32');
            this.adc_a_ofs=eda.internal.component.Inport('FiType','ufix14');
            this.adc_b_ofs=eda.internal.component.Inport('FiType','ufix14');
            this.phase_inc=eda.internal.component.Inport('FiType','ufix32');
            this.scale=eda.internal.component.Inport('FiType','ufix32');
            this.enbANDRate=eda.internal.component.Inport('FiType','ufix32');
            this.prod_i=eda.internal.component.Inport('FiType','ufix36');
            this.prod_q=eda.internal.component.Inport('FiType','ufix36');
            this.i_out=eda.internal.component.Inport('FiType','ufix18');
            this.q_out=eda.internal.component.Inport('FiType','ufix18');
            this.gpio_ena=eda.internal.component.Inport('FiType','ufix32');
            this.io_rx=eda.internal.component.Inport('FiType','ufix16');

            this.phase_31_8=eda.internal.component.Outport('FiType','ufix24');
            this.adcAdj_i=eda.internal.component.Outport('FiType','ufix18');
            this.scaleAdj_i=eda.internal.component.Outport('FiType','ufix18');
            this.adcAdj_q=eda.internal.component.Outport('FiType','ufix18');
            this.scaleAdj_q=eda.internal.component.Outport('FiType','ufix18');
            this.prod_i23_0=eda.internal.component.Outport('FiType','ufix24');
            this.prod_q23_0=eda.internal.component.Outport('FiType','ufix24');
            this.rate=eda.internal.component.Outport('FiType','ufix8');
            this.load_rate=eda.internal.component.Outport('FiType','boolean');

            this.sample=eda.internal.component.Outport('FiType','ufix32');
            this.flatten=false;


        end

        function hdlcode=componentBody(this)
            hdlcode=this.hdlcodeinit;
            hdlcode.arch_signals=['reg [31:0]  phase;\n',...
            'reg [31:0] sample_reg;\n',...
            'wire [15:0] scale_i;\n',...
            'wire [15:0] scale_q;\n',...
            'reg [13:0] adc_i;\n',...
            'reg [13:0] adc_q;\n\n'];
            hdlcode.arch_body_blocks=[...
            '  always @(posedge clk) \n',...
            '    case(muxctrl[1:0])		// The I mapping\n',...
            '         0: adc_i <= adc_b_ofs;	// "the real A"\n',...
            '         1: adc_i <= adc_a_ofs;\n',...
            '         2: adc_i <= 0;\n',...
            '         default: adc_i <= 0;\n',...
            '    endcase // case(muxctrl[1:0])\n\n',...
            '  always @(posedge clk)\n',...
            '    case(muxctrl[3:2])		// The Q mapping\n',...
            '       0: adc_q <= adc_b_ofs;	// "the real A"\n',...
            '       1: adc_q <= adc_a_ofs;\n',...
            '       2: adc_q <= 0;\n',...
            '       default: adc_q <= 0;\n',...
            '    endcase // case(muxctrl[3:2])\n\n',...
            '  always @(posedge clk)\n',...
            '    if(rst)\n',...
            '      phase <= 0;\n',...
            '    else if(~run)\n',...
            '      phase <= 0;\n',...
            '    else\n',...
            '      phase <= phase + phase_inc;\n\n',...
            '  always @(posedge clk)\n',...
            '    begin\n',...
            '      sample_reg[31:17] <= i_out[15:1];\n',...
            '      sample_reg[15:1]  <= q_out[15:1];\n',...
            '      sample_reg[16]    <= gpio_ena[0] ? io_rx[15] : i_out[0]; \n',...
            '      sample_reg[0]     <= gpio_ena[1] ? io_rx[14] : q_out[0];\n',...
            '    end\n\n',...
            '  assign      sample     = sample_reg;\n',...
            '  assign      scale_i    = scale[31:16];\n',...
            '  assign      scale_q    = scale[15:0];\n',...
            '  assign      rate       = enbANDRate[7:0];\n',...
            '  assign      load_rate  = ~run;\n',...
            '  assign      adcAdj_i   = {{4{adc_i[13]}},adc_i};\n',...
            '  assign      scaleAdj_i = {{2{scale_i[15]}},scale_i};\n',...
            '  assign      adcAdj_q   = {{4{adc_q[13]}},adc_q};\n',...
            '  assign      scaleAdj_q = {{2{scale_q[15]}},scale_q};\n',...
            '  assign      prod_i23_0 = prod_i[23:0];\n',...
            '  assign      prod_q23_0 = prod_q[23:0];\n',...
            '  assign      phase_31_8 = phase[31:8];\n'];
        end

    end

end

