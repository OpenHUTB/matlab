classdef(ConstructOnLoad=true)altpll<eda.internal.component.BlackBox

    properties

inclk
areset
clk
locked


generic

NoHDLFiles
wrapperFileNotNeeded
    end

    methods
        function this=altpll(outputClkWidth,inputClkFreq,outputClk0Freq,outputClk1Freq,outputClk2Freq,outputClk2Phase)

            [N,D]=rat(outputClk0Freq/inputClkFreq,0.01);
            Mult1=sprintf('%5d',N);
            Div1=sprintf('%5d',D);

            if Mult1>512
                Mult1=512;
            elseif Mult1<1
                Mult1=1;
            end
            if Div1>512
                Div1=512;
            elseif Div1<1
                Div1=1;
            end

            [N,D]=rat(outputClk1Freq/inputClkFreq,0.01);
            Mult2=sprintf('%5d',N);
            Div2=sprintf('%5d',D);

            [N,D]=rat(outputClk2Freq/inputClkFreq,0.01);
            Mult3=sprintf('%5d',N);
            Div3=sprintf('%5d',D);

            clkPeriod=sprintf('%6d',round(1e6./inputClkFreq));


            this.UniqueName='altpll';

            this.clk=eda.internal.component.Outport('FiType',['std',outputClkWidth]);
            this.inclk=eda.internal.component.Inport('FiType','std2');
            this.areset=eda.internal.component.Inport('FiType','boolean');
            this.locked=eda.internal.component.Outport('FiType','boolean');

            dcmGenericsDef=...
            {'width_clock','natural',outputClkWidth,...
            'bandwidth_type','string','"AUTO"',...
            'clk0_divide_by','natural','',...
            'clk0_duty_cycle','natural','',...
            'clk0_multiply_by','natural','',...
            'clk0_phase_shift','string','',...
            'compensate_clock','string','"CLK0"',...
            'inclk0_input_frequency','natural','',...
            'intended_devcie_family','string','"NONE"',...
            'lpm_hint','string','"CBX_MODULE_PREFIX=clockmodule"',...
            'lpm_type','string','"altpll"',...
            'operation_mode','string','"NORMAL"',...
            'pll_type','string','"AUTO"',...
            'port_activeclock','string','"PORT_UNUSED"',...
            'port_areset','string','"PORT_USED"',...
            'port_clkbad0','string','"PORT_UNUSED"',...
            'port_clkbad1','string','"PORT_UNUSED"',...
            'port_clkloss','string','"PORT_UNUSED"',...
            'port_clkswitch','string','"PORT_UNUSED"',...
            'port_configupdate','string','"PORT_UNUSED"',...
            'port_fbin','string','"PORT_UNUSED"',...
            'port_inclk0','string','"PORT_USED"',...
            'port_inclk1','string','"PORT_UNUSED"',...
            'port_locked','string','"PORT_USED"',...
            'port_pfdena','string','"PORT_UNUSED"',...
            'port_phasecounterselect','string','"PORT_UNUSED"',...
            'port_phasedone','string','"PORT_UNUSED"',...
            'port_phasestep','string','"PORT_UNUSED"',...
            'port_phaseupdown','string','"PORT_UNUSED"',...
            'port_pllena','string','"PORT_UNUSED"',...
            'port_clk0','string','"PORT_USED"',...
            'port_clk1','string','"PORT_UNUSED"',...
            'port_clk2','string','"PORT_UNUSED"',...
            'port_clk3','string','"PORT_UNUSED"',...
            'port_clk4','string','"PORT_UNUSED"',...
            'port_clk5','string','"PORT_UNUSED"',...
            'port_clenak0','string','"PORT_UNUSED"',...
            'port_clkena1','string','"PORT_UNUSED"',...
            'port_clkena2','string','"PORT_UNUSED"',...
            'port_clkena3','string','"PORT_UNUSED"',...
            'port_clkena4','string','"PORT_UNUSED"',...
            'port_clkena5','string','"PORT_UNUSED"',...
            'port_extclk0','string','"PORT_UNUSED"',...
            'port_extclk1','string','"PORT_UNUSED"',...
            'port_extclk2','string','"PORT_UNUSED"',...
            'port_extclk3','string','"PORT_UNUSED"'};

            dcmGenerics={
            'clk0_divide_by',Div1,...
            'clk0_duty_cycle','50',...
            'clk0_multiply_by',Mult1,...
            'clk0_phase_shift','"0"',...
            'inclk0_input_frequency',clkPeriod,...
            };

            if outputClk1Freq~=0
                tmp={'clk1_divide_by','natural','',...
                'clk1_duty_cycle','natural','',...
                'clk1_multiply_by','natural','',...
                'clk1_phase_shift','string',''};
                dcmGenericsDef=[dcmGenericsDef,tmp];

                dcmGenerics=[dcmGenerics,...
                'clk1_divide_by',Div2,...
                'clk1_duty_cycle','50',...
                'clk1_multiply_by',Mult2,...
                'clk1_phase_shift','"0"',...
                'port_clk1','"PORT_USED"'];
            end

            if outputClk2Freq~=0
                tmp={'clk2_divide_by','natural','',...
                'clk2_duty_cycle','natural','',...
                'clk2_multiply_by','natural','',...
                'clk2_phase_shift','string',''};
                dcmGenericsDef=[dcmGenericsDef,tmp];

                dcmGenerics=[dcmGenerics,...
                'clk2_divide_by',Div3,...
                'clk2_duty_cycle','50',...
                'clk2_multiply_by',Mult3,...
                'clk2_phase_shift',outputClk2Phase,...
                'port_clk2','"PORT_USED"'];
            end

            this.generic=generics(dcmGenericsDef{:});
            this.setGenerics(dcmGenerics);
        end

    end
end

