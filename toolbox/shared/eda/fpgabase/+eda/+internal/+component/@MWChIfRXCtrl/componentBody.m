function hdlcode=componentBody(this)





    hdlcode=this.hdlcodeinit;




    hdlcode.arch_typedefs=['  type DRDY_STATE_TYPE is (DRDY_IDLE,  DRDY_WAIT4DUTENB, DRDY_WAIT4TXCOMPLETED, DRDY_WAIT4TXFINISHING);\n',...
    '  type DUTENB_STATE_TYPE is (DUTENB_IDLE, DUTENB_DEASSERT, DUTENB_WAIT, DUTENB_WAIT4TXDONE);\n',...
    '  type SIMCYCLE_STATE_TYPE is (SIMCYCLE_IDLE, SIMCYCLE_START, SIMCYCLE_WAIT4COMPLETION);\n\n'];




    [enbCycleCnt,ptr]=hdlnewsignal('enbCycleCnt','block',-1,0,0,'unsigned(15 DOWNTO 0)','uint16');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [simCycle_tmp,ptr]=hdlnewsignal('simCycle_tmp','block',-1,0,0,'std_logic_vector(15 DOWNTO 0)','std_logic_vector');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [rdy,ptr]=hdlnewsignal('rdy','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [dutEnb_state,ptr]=hdlnewsignal('dutEnb_state','block',-1,0,0,'DUTENB_STATE_TYPE','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [dutEnb_tmp,ptr]=hdlnewsignal('dutEnb_tmp','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [drdy_state,ptr]=hdlnewsignal('drdy_state','block',-1,0,0,'DRDY_STATE_TYPE','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [simcycle_state,ptr]=hdlnewsignal('simcycle_state','block',-1,0,0,'SIMCYCLE_STATE_TYPE','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [tx_stream_en_sync1,ptr]=hdlnewsignal('tx_stream_en_sync1','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [tx_stream_en_sync2,ptr]=hdlnewsignal('tx_stream_en_sync2','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [dutEnb_tmp_d,ptr]=hdlnewsignal('dutEnb_tmp_d','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [dutEnb_tmp_posedge,ptr]=hdlnewsignal('dutEnb_tmp_posedge','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];


    clk=this.findSignalName('clk','componentBody');
    reset=this.findSignalName('reset','componentBody');
    unPackDone=this.findSignalName('unPackDone','componentBody');
    simCycle=this.findSignalName('simCycle','componentBody');
    dutEnb=this.findSignalName('dutEnb','componentBody');
    rxRdy=this.findSignalName('rxRdy','componentBody');
    txCompleted=this.findSignalName('txCompleted','componentBody');
    txDone=this.findSignalName('txDone','componentBody');
    updateSimCycle=this.findSignalName('updateSimCycle','componentBody');
    rxEOP=this.findSignalName('rxEOP','componentBody');
    tx_stream_en=this.findSignalName('tx_stream_en','componentBody');

    rdyStr=[' ',rxRdy,' <= ',rdy,' and (not ',unPackDone,')',' and ',tx_stream_en_sync2,';\n\n'];

    hdlcode.arch_body_blocks=[...
    '  sync_proc : process(',clk,')\n',...
    '  begin \n',...
    '    if ',clk,'''event and ',clk,' = ''1'' then \n',...
    '      ',tx_stream_en_sync1,' <= ',tx_stream_en,';\n',...
    '      ',tx_stream_en_sync2,' <= ',tx_stream_en_sync1,';\n',...
    '    end if;\n',...
    '  end process sync_proc;\n',...
    rdyStr,...
    ' dutEnb_proc: process (',clk,')\n',...
    '   begin \n',...
    '     if ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       if ',reset,' = ''1'' then\n',...
    '         ',dutEnb_tmp,'     <= ''0'';\n',...
    '         ',dutEnb_state,'   <= DUTENB_IDLE;\n',...
    '         ',enbCycleCnt,' <= to_unsigned(0, 16);\n',...
    '         ',simCycle_tmp,' <= (others => ''0'');\n',...
    '       else \n',...
    '         case ',dutEnb_state,' is\n',...
    '           when DUTENB_IDLE=> \n',...
    '             ',dutEnb_state,'   <= DUTENB_IDLE;\n',...
    '             ',enbCycleCnt,'    <= to_unsigned(0, 16);\n',...
    '             ',dutEnb_tmp,'     <= ''0'';\n',...
    '             if unsigned(',simCycle,') > to_unsigned(0, 16) then\n',...
    '               --',simCycle_tmp,' <= ',simCycle,';\n',...
    '               if ',unPackDone,' = ''1'' then\n',...
    '                 ',simCycle_tmp,' <= ',simCycle,';\n',...
    '                 if ',txDone,' = ''1'' then \n',...
    '                   ',enbCycleCnt,' <= to_unsigned(1, 16);\n',...
    '                   ',dutEnb_tmp,'  <= ''1'';\n',...
    '                   ',dutEnb_state,' <= DUTENB_DEASSERT;\n',...
    '                 else\n',...
    '                   ',dutEnb_state,' <= DUTENB_WAIT;\n',...
    '                 end if;\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when DUTENB_DEASSERT =>\n',...
    '             if unsigned(',simCycle,') > to_unsigned(0, 16) then\n',...
    '               ',simCycle_tmp,' <= ',simCycle,';\n',...
    '             end if;\n',...
    '             if ',enbCycleCnt,' < unsigned(',simCycle_tmp,') then\n',...
    '               if ',txDone,' = ''1'' then \n',...
    '                 ',dutEnb_tmp,'  <= ''1'';\n',...
    '                 ',enbCycleCnt,' <= ',enbCycleCnt,' + 1 ;\n',...
    '               else\n',...
    '                 ',dutEnb_state,' <= DUTENB_WAIT;\n',...
    '                 ',dutEnb_tmp,'   <= ''0'';\n',...
    '               end if;\n',...
    '             else\n',...
    '               ',dutEnb_tmp,'   <= ''0'';\n',...
    '               ',dutEnb_state,'   <= DUTENB_IDLE;\n',...
    '               ',enbCycleCnt,' <= to_unsigned(0, 16);\n',...
    '             end if;\n',...
    '           when DUTENB_WAIT =>\n',...
    '             if ',txDone,' = ''1'' AND ',unPackDone,' = ''1'' then\n',...
    '               ',dutEnb_tmp,'  <= ''1'';\n',...
    '               ',enbCycleCnt,' <= to_unsigned(1, 16);\n',...
    '               ',dutEnb_state,'   <= DUTENB_DEASSERT;\n',...
    '             elsif ',unPackDone,' = ''1'' then\n',...
    '               ',enbCycleCnt,'    <= to_unsigned(0, 16);\n',...
    '               ',dutEnb_tmp,'     <= ''0'';\n',...
    '               ',dutEnb_state,'   <= DUTENB_WAIT4TXDONE;\n',...
    '             elsif ',txDone,' = ''1'' then\n',...
    '               if ',enbCycleCnt,' < unsigned(',simCycle_tmp,') then\n',...
    '                 ',dutEnb_tmp,'   <= ''1'';\n',...
    '                 ',enbCycleCnt,'  <= ',enbCycleCnt,' + 1 ;\n',...
    '                 ',dutEnb_state,' <= DUTENB_DEASSERT;\n',...
    '               else\n',...
    '                 ',dutEnb_state,'   <= DUTENB_IDLE;\n',...
    '                 ',enbCycleCnt,'    <= to_unsigned(0, 16);\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when DUTENB_WAIT4TXDONE =>\n',...
    '             if ',txDone,' = ''1'' then\n',...
    '               ',enbCycleCnt,' <= to_unsigned(1, 16);\n',...
    '               ',dutEnb_tmp,'  <= ''1'';\n',...
    '               if ',enbCycleCnt,' < unsigned(',simCycle_tmp,') then\n',...
    '                 ',enbCycleCnt,' <= ',enbCycleCnt,' + 1 ;\n',...
    '                 ',dutEnb_state,' <= DUTENB_DEASSERT;\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when others => \n',...
    '             ',dutEnb_tmp,'     <= ''0'';\n',...
    '             ',dutEnb_state,'   <= DUTENB_IDLE;\n',...
    '             ',enbCycleCnt,' <= to_unsigned(0, 16);\n',...
    '         end case;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process dutEnb_proc;\n\n',...
    ' Rdy_proc: process (',clk,')\n',...
    '   begin \n',...
    '     if ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       if ',reset,' = ''1'' then\n',...
    '         ',rdy,'        <= ''1'';\n',...
    '         ',drdy_state,' <= DRDY_IDLE;\n',...
    '       else \n',...
    '         case ',drdy_state,' is\n',...
    '           when DRDY_IDLE => \n',...
    '             ',rdy,'        <= ''1'';\n',...
    '             ',drdy_state,' <= DRDY_IDLE;\n',...
    '             if ',unPackDone,' = ''1'' then\n',...
    '               ',rdy,'        <= ''0'';\n',...
    '               if ',rxEOP,' = ''1'' then\n',...
    '                 ',drdy_state,' <= DRDY_WAIT4DUTENB;\n',...
    '               elsif  unsigned(',simCycle_tmp,') = to_unsigned(1, 16) AND ',txDone,' = ''1'' then\n',...
    '                 ',rdy,'        <= ''1'';\n',...
    '                 ',drdy_state,' <= DRDY_IDLE;\n',...
    '               else\n',...
    '                 ',drdy_state,' <= DRDY_WAIT4TXFINISHING;\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when DRDY_WAIT4TXFINISHING => \n',...
    '             if ',enbCycleCnt,' = unsigned(',simCycle_tmp,') - to_unsigned(1, 16) AND ',txDone,' = ''1'' then\n',...
    '               ',rdy,'        <= ''1'';\n',...
    '               ',drdy_state,' <= DRDY_IDLE;\n',...
    '             end if;\n',...
    '           when DRDY_WAIT4DUTENB => \n',...
    '             if ',dutEnb_tmp,' = ''1'' AND ',enbCycleCnt,' = unsigned(',simCycle_tmp,') then\n',...
    '               ',drdy_state,' <= DRDY_WAIT4TXCOMPLETED;\n',...
    '             end if;\n',...
    '           when DRDY_WAIT4TXCOMPLETED => \n',...
    '             if ',txCompleted,' = ''1'' then\n',...
    '               ',drdy_state,' <= DRDY_IDLE;\n',...
    '               ',rdy,'        <= ''1'';\n',...
    '             end if;\n',...
    '           when others => \n',...
    '             ',rdy,'        <= ''1'';\n',...
    '             ',drdy_state,' <= DRDY_IDLE;\n',...
    '         end case;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process Rdy_proc;\n\n',...
    ' simCycleUpdate_proc: process (',clk,')\n',...
    '   begin \n',...
    '     if  ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       if ',reset,' = ''1'' then\n',...
    '        ',updateSimCycle,'  <= ''0'';\n',...
    '        ',simcycle_state,'  <= SIMCYCLE_IDLE;\n',...
    '       else \n',...
    '         case ',simcycle_state,' is \n',...
    '           when SIMCYCLE_IDLE =>\n',...
    '             ',updateSimCycle,' <= ''1'';\n',...
    '             ',simcycle_state,' <= SIMCYCLE_START;\n',...
    '           when SIMCYCLE_START =>\n',...
    '             if ',rxEOP,' = ''1'' then\n',...
    '               ',updateSimCycle,' <= ''0'';\n',...
    '               ',simcycle_state,' <= SIMCYCLE_WAIT4COMPLETION;\n',...
    '             end if;\n',...
    '           when SIMCYCLE_WAIT4COMPLETION =>\n',...
    '             if ',txCompleted,'= ''1'' then\n',...
    '               ',simcycle_state,' <= SIMCYCLE_IDLE;\n',...
    '             end if;\n',...
    '           when others =>\n',...
    '             ',updateSimCycle,'  <= ''0'';\n',...
    '             ',simcycle_state,'  <= SIMCYCLE_IDLE;\n',...
    '         end case;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process simCycleUpdate_proc;\n\n',...
    ' -- if SDR tx, dutEnb is dutEnb_tmp_posedge; if FIL, dutEnb is dutEnb_tmp. \n',...
    ' process(',clk,') \n',...
    '   begin \n',...
    '     if  ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       ',dutEnb_tmp_d,' <= ',dutEnb_tmp,';\n',...
    '     end if;\n',...
    '   end process; \n\n',...
    ' ',dutEnb_tmp_posedge,' <= (not ',dutEnb_tmp_d,') and ',dutEnb_tmp,';\n',...
    ' ',dutEnb,'         <= ',dutEnb_tmp_posedge,' when COUPLE_RXTX  = ''0'' else ',dutEnb_tmp,';\n'];
end