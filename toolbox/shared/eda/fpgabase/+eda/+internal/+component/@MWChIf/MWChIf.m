classdef(ConstructOnLoad)MWChIf<eda.internal.component.WhiteBox








    properties
txdclk
txsclk
rxdclk
rxcclk
txdrst
rxdrst
sys_rst

chif_rxdata
chif_rxdvld
chif_rxdeop
chif_rxdrdy

chif_rxcmd
chif_rxcvld
chif_rxceop
chif_rxcrdy

chif_txdata
chif_txdvld
chif_txdeop
chif_txdrdy

chif_cmd
chif_cmdvld
chif_cmdrdy
chif_cmdEOP

chif_datafromdut
chif_datafromdutvld
chif_datatodut
chif_dutenb

chif_NOPcmd

tx_stream_en


        generic=generics('DUT_INPUT_DATAWIDTH','integer','8',...
        'DUT_OUTPUT_DATAWIDTH','integer','8',...
        'COUPLE_RXTX','boolean','''1''');
    end

    methods
        function this=MWChIf(varargin)
            this.setGenerics(varargin);
            this.txdclk=eda.internal.component.ClockPort;
            this.txsclk=eda.internal.component.ClockPort;
            this.rxdclk=eda.internal.component.ClockPort;
            this.rxcclk=eda.internal.component.ClockPort;
            this.txdrst=eda.internal.component.ResetPort;
            this.rxdrst=eda.internal.component.ResetPort;
            this.sys_rst=eda.internal.component.ResetPort;
            this.chif_rxdata=eda.internal.component.Inport('FiType','std8');
            this.chif_rxdvld=eda.internal.component.Inport('FiType','boolean');
            this.chif_rxdeop=eda.internal.component.Inport('FiType','boolean');
            this.chif_rxdrdy=eda.internal.component.Outport('FiType','boolean');
            this.chif_rxcmd=eda.internal.component.Inport('FiType','std8');
            this.chif_rxcvld=eda.internal.component.Inport('FiType','boolean');
            this.chif_rxceop=eda.internal.component.Inport('FiType','boolean');
            this.chif_rxcrdy=eda.internal.component.Outport('FiType','boolean');

            this.chif_txdata=eda.internal.component.Outport('FiType','std8');
            this.chif_txdvld=eda.internal.component.Outport('FiType','boolean');
            this.chif_txdeop=eda.internal.component.Outport('FiType','boolean');
            this.chif_txdrdy=eda.internal.component.Inport('FiType','boolean');

            this.chif_NOPcmd=eda.internal.component.Inport('FiType','boolean');

            this.chif_cmd=eda.internal.component.Outport('FiType','std8');
            this.chif_cmdvld=eda.internal.component.Outport('FiType','boolean');
            this.chif_cmdEOP=eda.internal.component.Outport('FiType','boolean');
            this.chif_cmdrdy=eda.internal.component.Inport('FiType','boolean');
            this.chif_dutenb=eda.internal.component.Outport('FiType','boolean');

            this.tx_stream_en=eda.internal.component.Inport('FiType','boolean');

            dataWidth=this.getGenericInstanceValue(this.generic.DUT_OUTPUT_DATAWIDTH);
            if dataWidth>0
                this.chif_datafromdut=eda.internal.component.Inport('FiType',this.generic.DUT_OUTPUT_DATAWIDTH);
            else
                this.chif_datafromdut=eda.internal.component.Inport('FiType','boolean');
            end
            this.chif_datafromdutvld=eda.internal.component.Inport('FiType','boolean');

            dataWidth=this.getGenericInstanceValue(this.generic.DUT_INPUT_DATAWIDTH);
            if dataWidth>0
                this.chif_datatodut=eda.internal.component.Outport('FiType',this.generic.DUT_INPUT_DATAWIDTH);
            else
                this.chif_datatodut=eda.internal.component.Outport('FiType','boolean');
            end
            this.flatten=false;
        end

        function implement(this)
            shftOutReg=this.signal('Name','shftOutReg','FiType','boolean');
            rxRdy=this.signal('Name','rxRdy','FiType','boolean');
            simCycle=this.signal('Name','simCycle','FiType','std16');
            simMode=this.signal('Name','simMode','FiType','boolean');
            txDataLength=this.signal('Name','txDataLength','FiType','std16');
            rxEOPAck=this.signal('Name','rxEOPAck','FiType','boolean');
            updateSimCycle=this.signal('Name','updateSimCycle','FiType','boolean');

            dataWidth=this.getGenericInstanceValue(this.generic.DUT_INPUT_DATAWIDTH);
            if dataWidth>0
                unPackDone=this.signal('Name','unPackDone','FiType','boolean');
                unPackDone_O=unPackDone;
                unPackDone_I=unPackDone;
            else
                unPackDone_O='OPEN';
                unPackDone_I=rxEOPAck;
            end

            this.component(...
            'Name','MWChIfRX',...
            'Component',eda.internal.component.MWChIfRX('OUTPUT_DATAWIDTH',this.generic.DUT_INPUT_DATAWIDTH,...
            'COUPLE_RXTX',this.generic.COUPLE_RXTX),...
            'clk',this.rxdclk,...
            'rxdrst',this.rxdrst,...
            'cmdrst',this.sys_rst,...
            'rxData',this.chif_rxdata,...
            'rxVld',this.chif_rxdvld,...
            'rxRdy',rxRdy,...
            'rxEOP',this.chif_rxdeop,...
            'updateSimCycle',updateSimCycle,...
            'simMode',simMode,...
            'simCycle',simCycle,...
            'rxEOPAck',rxEOPAck,...
            'txDataLength',txDataLength,...
            'unPackDone',unPackDone_O,...
            'dout',this.chif_datatodut,...
            'rxcclk',this.rxcclk,...
            'rxCmd',this.chif_rxcmd,...
            'rxCmdVld',this.chif_rxcvld,...
            'rxCmdRdy',this.chif_rxcrdy,...
            'rxCmdEOP',this.chif_rxceop,...
            'cmd',this.chif_cmd,...
            'cmdVld',this.chif_cmdvld,...
            'cmdRdy',this.chif_cmdrdy,...
            'cmdEOP',this.chif_cmdEOP);

            this.component(...
            'Name','MWChIfTX',...
            'Component',eda.internal.component.MWChIfTX('OUTPUT_DATAWIDTH',this.generic.DUT_OUTPUT_DATAWIDTH),...
            'dclk',this.txdclk,...
            'reset',this.txdrst,...
            'dataIn',this.chif_datafromdut,...
            'dataInVld',this.chif_datafromdutvld,...
            'txPayLoad',shftOutReg,...
            'dataOut',this.chif_txdata,...
            'dataOutVld',this.chif_txdvld);

            this.component(...
            'Name','MWChIfCtrl',...
            'Component',eda.internal.component.MWChIfCtrl('RX_DATAWIDTH',this.generic.DUT_INPUT_DATAWIDTH,...
            'TX_DATAWIDTH',this.generic.DUT_OUTPUT_DATAWIDTH,...
            'COUPLE_RXTX',this.generic.COUPLE_RXTX),...
            'rxdclk',this.rxdclk,...
            'txdclk',this.txdclk,...
            'rxdrst',this.rxdrst,...
            'txdrst',this.txdrst,...
            'dinVld',this.chif_datafromdutvld,...
            'unPackDone',unPackDone_I,...
            'txRdy',this.chif_txdrdy,...
            'rxEOP',rxEOPAck,...
            'simCycle',simCycle,...
            'updateSimCycle',updateSimCycle,...
            'dutEnb',this.chif_dutenb,...
            'shftOutReg',shftOutReg,...
            'rxRdy',rxRdy,...
            'txEOP',this.chif_txdeop,...
            'simMode',simMode,...
            'NOPcmd',this.chif_NOPcmd,...
            'tx_stream_en',this.tx_stream_en);

            this.assign(rxRdy,this.chif_rxdrdy);
        end
    end
end