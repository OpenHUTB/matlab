classdef(ConstructOnLoad)MWAPBUART<eda.internal.component.WhiteBox


    properties

pClk
pResetn
pSel
pEnable
pReady
pAddr
pWrite
pRdata
pWdata
pSlvErr
pStrb

status

UART_RX
UART_TX

        generic=generics('baudrate','integer','9600',...
        'clockfreq','integer','25000000',...
        'SLV_BASEADDR','std8','"00000010"');

    end

    methods
        function this=MWAPBUART(varargin)
            this.setGenerics(varargin);
            this.pClk=eda.internal.component.ClockPort;
            this.pResetn=eda.internal.component.ResetPort;
            this.pSel=eda.internal.component.Inport('FiType','boolean');
            this.pEnable=eda.internal.component.Inport('FiType','boolean');
            this.pReady=eda.internal.component.Outport('FiType','boolean');
            this.pAddr=eda.internal.component.Inport('FiType','std32');
            this.pWrite=eda.internal.component.Inport('FiType','boolean');
            this.pWdata=eda.internal.component.Inport('FiType','std32');
            this.pRdata=eda.internal.component.Outport('FiType','std32');
            this.pSlvErr=eda.internal.component.Outport('FiType','boolean');
            this.pStrb=eda.internal.component.Inport('FiType','std4');
            this.status=eda.internal.component.Outport('FiType','boolean');

            this.UART_RX=eda.internal.component.Inport('FiType','boolean');
            this.UART_TX=eda.internal.component.Outport('FiType','boolean');
            this.flatten=false;
        end

        function implement(this)
            clear_err=this.signal('Name','clear_err','FiType','boolean');
            uart_rxdata=this.signal('Name','uart_rxdata','FiType','std8');
            uart_rxvld=this.signal('Name','uart_rxvld','FiType','boolean');
            uart_txdata=this.signal('Name','uart_txdata','FiType','std8');
            uart_txvld=this.signal('Name','uart_txvld','FiType','boolean');
            uart_txrdy=this.signal('Name','uart_txrdy','FiType','boolean');
            uart_rxEOP=this.signal('Name','uart_rxEOP','FiType','boolean');
            uart_txEOP=this.signal('Name','uart_txEOP','FiType','boolean');
            uart_err=this.signal('Name','uart_err','FiType','boolean');

            rst=this.signal('Name','rst','FiType','boolean');

            this.assign(' ~ this.pResetn',rst);




            this.component(...
            'Name','UARTAPBSlave',...
            'Component',eda.internal.component.MWAPBSlave('SLV_DATA_WIDTH','8',...
            'SLV_BASEADDR',this.generic.SLV_BASEADDR),...
            'pClk',this.pClk,...
            'pResetn',this.pResetn,...
            'pAddr',this.pAddr,...
            'pSel',this.pSel,...
            'pEnable',this.pEnable,...
            'pWrite',this.pWrite,...
            'pWdata',this.pWdata,...
            'pRdata',this.pRdata,...
            'pReady',this.pReady,...
            'pSlvErr',this.pSlvErr,...
            'pStrb',this.pStrb,...
            'status',this.status,...
            'clearErr',clear_err,...
            'slv_rxdata',uart_rxdata,...
            'slv_rxvld',uart_rxvld,...
            'slv_txdata',uart_txdata,...
            'slv_txvld',uart_txvld,...
            'slv_txrdy',uart_txrdy,...
            'slv_rxEOP',uart_rxEOP,...
            'slv_txEOP',uart_txEOP,...
            'slv_err',uart_err);




            uart=this.component(...
            'UniqueName','uart',...
            'InstName','uart',...
            'Component',eda.internal.component.BlackBox({...
            'clk','INPUT','boolean',...
            'reset','INPUT','boolean',...
            'rxserial','INPUT','boolean',...
            'txserial','OUTPUT','boolean',...
            'tx_vld','INPUT','boolean',...
            'tx_data_byte','INPUT','std8',...
            'rx_vld','OUTPUT','boolean',...
            'rx_data_byte','OUTPUT','std8',...
            'txrdy','OUTPUT','boolean'}),...
            'clk',this.pClk,...
            'reset',rst,...
            'rxserial',this.UART_RX,...
            'txserial',this.UART_TX,...
            'tx_vld',uart_txvld,...
            'tx_data_byte',uart_txdata,...
            'rx_vld',uart_rxvld,...
            'rx_data_byte',uart_rxdata,...
            'txrdy',uart_txrdy);

            uart.addprop('generic');
            uart.generic=generics('baudrate','integer','9600',...
            'clockfreq','integer','25000000');
            uart.setGenerics({'baudrate',this.generic.baudrate,...
            'clockfreq',this.generic.clockfreq})

            uart.addprop('CopyHDLFiles');
            uart.HDLFileDir={fullfile(matlabroot,'toolbox','shared','eda','fpgabase',...
            '+eda','+internal','+component','@MWAPBUART')};
            uart.HDLFiles={'uart.vhd'};




            uart_status=this.component(...
            'UniqueName','uartStatus',...
            'InstName','uartStatus',...
            'Component',eda.internal.component.BlackBox({...
            'pClk','INPUT','boolean',...
            'pResetn','INPUT','boolean',...
            'pAddr','INPUT','std32',...
            'pSel','INPUT','boolean',...
            'pEnable','INPUT','boolean',...
            'pWrite','INPUT','boolean',...
            'pWdata','INPUT','std32',...
            'rxEOP','OUTPUT','boolean',...
            'txEOP','OUTPUT','boolean',...
            'ERR','OUTPUT','boolean',...
            'clearErr','INPUT','boolean',...
            'uart_rxdata','INPUT','std8',...
            'uart_rxvld','INPUT','boolean'}),...
            'pClk',this.pClk,...
            'pResetn',this.pResetn,...
            'pAddr',this.pAddr,...
            'pSel',this.pSel,...
            'pEnable',this.pEnable,...
            'pWrite',this.pWrite,...
            'pWdata',this.pWdata,...
            'rxEOP',uart_rxEOP,...
            'txEOP',uart_txEOP,...
            'ERR',uart_err,...
            'clearErr',clear_err,...
            'uart_rxdata',uart_rxdata,...
            'uart_rxvld',uart_rxvld);

            uart_status.addprop('CopyHDLFiles');
            uart_status.HDLFileDir={fullfile(matlabroot,'toolbox','shared','eda','fpgabase',...
            '+eda','+internal','+component','@MWAPBUART')};
            uart_status.HDLFiles={'uartStatus.vhd'};

        end

    end

end

