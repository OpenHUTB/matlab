function hdlcode=componentBody(this)

















    hdlcode=this.hdlcodeinit;


    hdlcode.arch_typedefs=['  type DSTATE_TYPE is (IDLE_DSTATE, WAIT4READY_DSTATE, WAIT4VALID_DSTATE, EOP_DSTATE, ',...
    ' DATA_DSTATE, SET_TXLEN_DSTATE_1, SET_TXLEN_DSTATE_2, SET_CYCLE_DSTATE_1, SET_CYCLE_DSTATE_2);\n'];

    hdlcode.arch_typedefs=[hdlcode.arch_typedefs,'  type CSTATE_TYPE is (IDLE_CSTATE, WAIT4READY_CSTATE, WAIT4VALID_CSTATE, CMD_WAIT4DATA, EOP_CSTATE, ',...
    ' CMD_LEN_1, CMD_LEN_2, CMD_DATA);\n'];



    [DATA_PACKET,ptr]=hdlnewsignal('DATA_PACKET','block',-1,0,0,'std_logic_vector(1 downto 0)','');
    hdlcode.arch_constants=[hdlcode.arch_constants,makehdlconstantdecl(ptr,'"00"')];


    [COMMAND_PACKET,ptr]=hdlnewsignal('COMMAND_PACKET','block',-1,0,0,'std_logic_vector(1 downto 0)','');
    hdlcode.arch_constants=[hdlcode.arch_constants,makehdlconstantdecl(ptr,'"10"')];


    [dstate,ptr]=hdlnewsignal('dstate','block',-1,0,0,'DSTATE_TYPE','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [cstate,ptr]=hdlnewsignal('cstate','block',-1,0,0,'CSTATE_TYPE','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [pktHeader,ptr]=hdlnewsignal('pktHeader','block',-1,0,0,'std_logic_vector(1 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [cmdHeader,ptr]=hdlnewsignal('cmdHeader','block',-1,0,0,'std_logic_vector(1 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [simModeS,ptr]=hdlnewsignal('simModeS','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [rxEOPS,ptr]=hdlnewsignal('rxEOPS','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [rxdLock,ptr]=hdlnewsignal('rxdLock','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [rxcLock,ptr]=hdlnewsignal('rxcLock','block',-1,0,0,'std_logic','boolean');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [simCycle_tmp,ptr]=hdlnewsignal('simCycle_tmp','block',-1,0,0,'std_logic_vector(15 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [simCycle_dly,ptr]=hdlnewsignal('simCycle_dly','block',-1,0,0,'std_logic_vector(15 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [cmdLength,ptr]=hdlnewsignal('cmdLength','block',-1,0,0,'unsigned(15 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];

    [cmdLenTmp,ptr]=hdlnewsignal('cmdLenTmp','block',-1,0,0,'std_logic_vector(7 DOWNTO 0)','');
    hdlcode.arch_signals=[hdlcode.arch_signals,makehdlsignaldecl(ptr)];


    clk=this.findSignalName('clk','componentBody');
    rxdrst=this.findSignalName('rxdrst','componentBody');
    cmdrst=this.findSignalName('cmdrst','componentBody');
    rxData=this.findSignalName('rxData','componentBody');
    rxVld=this.findSignalName('rxVld','componentBody');
    rxRdy=this.findSignalName('rxRdy','componentBody');
    txDataLength=this.findSignalName('txDataLength','componentBody');
    rxEOP=this.findSignalName('rxEOP','componentBody');
    rxEOPAck=this.findSignalName('rxEOPAck','componentBody');
    simMode=this.findSignalName('simMode','componentBody');
    simCycle=this.findSignalName('simCycle','componentBody');
    updateSimCycle=this.findSignalName('updateSimCycle','componentBody');
    unPackDone=this.findSignalName('unPackDone','componentBody');
    payLoad=this.findSignalName('payLoad','componentBody');
    payLoadVld=this.findSignalName('payLoadVld','componentBody');
    rxcclk=this.findSignalName('rxcclk','componentBody');
    rxCmd=this.findSignalName('rxCmd','componentBody');
    rxCmdVld=this.findSignalName('rxCmdVld','componentBody');
    rxCmdRdy=this.findSignalName('rxCmdRdy','componentBody');
    rxCmdEOP=this.findSignalName('rxCmdEOP','componentBody');
    cmd=this.findSignalName('cmd','componentBody');
    cmdVld=this.findSignalName('cmdVld','componentBody');
    cmdRdy=this.findSignalName('cmdRdy','componentBody');
    cmdEOP=this.findSignalName('cmdEOP','componentBody');
    coupleRxTx=this.findSignalName('coupleRxTx','componentBody');

    hdlcode.arch_body_blocks=[...
    ' ',pktHeader,'  <= ',rxData,'(7 downto 6);\n',...
    ' ',simMode,'    <= ',simModeS,';\n',...
    ' ',rxEOPAck,'   <= ',rxEOPS,';\n',...
    ' ',rxCmdRdy,'   <= ',cmdRdy,';\n',...
    ' saveSimCycle: process(',clk,')\n',...
    '   begin \n',...
    '     if ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       if ',rxdrst,' = ''1'' then\n',...
    '         ',simCycle_dly,'  <= (others => ''0'');\n',...
    '         ',simCycle,'       <= (others => ''0'');\n',...
    '       else \n',...
    '         if ',updateSimCycle,' = ''1'' then\n',...
    '           ',simCycle,'   <= ',simCycle_tmp,';\n',...
    '         else\n',...
    '           ',simCycle,'   <=  ',simCycle_dly,';\n\n',...
    '         end if;\n',...
    '         if ',updateSimCycle,' = ''1'' then\n',...
    '           ',simCycle_dly,'       <= ',simCycle_tmp,';\n',...
    '         end if;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process saveSimCycle;\n\n',...
    ' dstate_machine: process (',clk,')\n',...
    '   begin \n',...
    '     if ',clk,'''event and ',clk,' = ''1'' then \n',...
    '       if ',rxdrst,' = ''1'' then\n',...
    '         ',dstate,'        <= IDLE_DSTATE;\n',...
    '         ',simModeS,'     <= ''0'';\n',...
    '         ',txDataLength,' <= (others => ''0'');\n',...
    '         ',rxEOPS,'       <= ''0'';\n',...
    '         ',simCycle_tmp,'  <= (others => ''0'');\n',...
    '         ',rxdLock,'       <= ''0'';\n',...
    '       else \n',...
    '         case ',dstate,' is \n',...
    '           when IDLE_DSTATE => \n',...
    '             ',rxEOPS,'       <= ''0'';\n',...
    '             ',simModeS,'     <= ''0'';\n',...
    '             ',simCycle_tmp,'  <= (others => ''0'');\n',...
    '             ',rxdLock,'       <= ''0'';\n',...
    '             if ',rxRdy,' = ''1'' then\n',...
    '               if ',rxVld,' = ''0'' then\n',...
    '                 ',dstate,'    <= WAIT4VALID_DSTATE;\n',...
    '               elsif ',rxcLock,' = ''0'' AND ',rxVld,' = ''1'' AND ',pktHeader,' = ',DATA_PACKET,' then\n',...
    '                 ',dstate,'     <= SET_TXLEN_DSTATE_1;\n',...
    '                 ',simModeS,'   <= ',rxData,'(0) OR (NOT ',coupleRxTx,');\n',...
    '                 ',rxdLock,'     <= ',coupleRxTx,';\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when WAIT4VALID_DSTATE =>\n',...
    '             if ',rxcLock,' = ''0'' then\n',...
    '               if ',rxVld,' = ''1'' AND ',pktHeader,' = ',DATA_PACKET,' then\n',...
    '                 ',dstate,'     <= SET_TXLEN_DSTATE_1;\n',...
    '                 ',simModeS,'   <= ',rxData,'(0) OR (NOT ',coupleRxTx,');\n',...
    '                 ',rxdLock,'     <= ',coupleRxTx,';\n',...
    '               end if;\n',...
    '             else\n',...
    '               ',dstate,'        <= IDLE_DSTATE;\n',...
    '             end if;\n',...
    '           when SET_TXLEN_DSTATE_1 =>\n',...
    '             if ',rxVld,' = ''1''  then\n',...
    '             -- Endianness --------------\n',...
    '             -- Big Endian\n',...
    '             --  ',txDataLength,'(15 downto 8) <= ',rxData,';\n',...
    '             -- Little Endian\n',...
    '               ',txDataLength,'(7 downto 0) <= ',rxData,';\n',...
    '             -----------------------------\n',...
    '               ',dstate,'                  <= SET_TXLEN_DSTATE_2;\n',...
    '             end if;\n',...
    '           when SET_TXLEN_DSTATE_2 =>\n',...
    '             if ',rxVld,' = ''1''  then\n',...
    '             -- Endianness --------------\n',...
    '             -- Big Endian\n',...
    '             -- ',txDataLength,'(7 downto 0) <= ',rxData,';\n',...
    '             -- Little Endian\n',...
    '               ',txDataLength,'(15 downto 8) <= ',rxData,';\n',...
    '              -----------------------------\n',...
    '               ',dstate,'                  <= SET_CYCLE_DSTATE_1;\n',...
    '             end if;\n',...
    '           when SET_CYCLE_DSTATE_1 =>\n',...
    '             if ',rxVld,' = ''1''  then\n',...
    '             -- Endianness --------------\n',...
    '             -- Big Endian\n',...
    '             -- ',simCycle_tmp,'(15 downto 8) <= ',rxData,';\n',...
    '             -- Little Endian\n',...
    '               ',simCycle_tmp,'(7 downto 0) <= ',rxData,';\n',...
    '             -----------------------------\n',...
    '               ',dstate,'                 <= SET_CYCLE_DSTATE_2;\n',...
    '             end if;\n',...
    '           when SET_CYCLE_DSTATE_2 =>\n',...
    '             if ',rxVld,' = ''1''  then\n',...
    '             -- Endianness --------------\n',...
    '             -- Big Endian\n',...
    '             -- ',simCycle_tmp,'(7 downto 0) <= ',rxData,';\n',...
    '             -- Little Endian\n',...
    '               ',simCycle_tmp,'(15 downto 8) <= ',rxData,';\n',...
    '            -----------------------------\n',...
    '               ',dstate,'                    <= DATA_DSTATE;\n',...
    '               if ',rxEOP,' = ''1'' then\n',...
    '                 ',dstate,' <= IDLE_DSTATE;\n',...
    '                 ',rxEOPS,' <= ''1'';\n',...
    '                 ',rxdLock,' <= ''0'';\n',...
'               end if;\n'...
    ,'             end if;\n',...
    '           when DATA_DSTATE =>\n',...
    '             if ',simModeS,' = ''0'' then\n',...
    '               if ',unPackDone,' = ''1'' then\n',...
    '                 ',dstate,' <= IDLE_DSTATE;\n',...
    '                 ',rxdLock,' <= ''0'';\n',...
    '                 ',rxEOPS,' <= ',rxEOP,';\n',...
    '               elsif ',rxVld,' = ''1''  then\n',...
    '                 ',rxEOPS,' <= ',rxEOP,';\n',...
    '               end if;\n',...
    '             else \n',...
    '               if ',unPackDone,' = ''1'' then\n',...
    '                 ',dstate,'  <= WAIT4READY_DSTATE;\n',...
    '                 ',rxEOPS,' <= ',rxEOP,';\n',...
    '                 if ',rxEOP,' = ''1'' then\n',...
    '                   ',dstate,' <= EOP_DSTATE;\n',...
'                 end if;\n'...
    ,'               elsif ',rxVld,' = ''1''  then\n',...
    '                 ',rxEOPS,' <= ',rxEOP,';\n',...
    '                 if ',rxEOP,' = ''1'' then\n',...
    '                   ',dstate,' <= EOP_DSTATE;\n',...
'                 end if;\n'...
    ,'               end if;\n',...
    '             end if;\n',...
    '           when EOP_DSTATE => \n',...
    '             if ',updateSimCycle,' = ''1'' then\n',...
    '               ',dstate,'     <= IDLE_DSTATE;\n',...
    '               ',rxdLock,'    <= ''0'';\n',...
    '               ',rxEOPS,'    <= ''0'';\n',...
    '             end if;\n',...
    '           when WAIT4READY_DSTATE => \n',...
    '             if ',rxRdy,' = ''1''  then\n',...
    '               ',dstate,' <= DATA_DSTATE;\n',...
    '             end if;\n',...
    '           when others =>\n',...
    '             ',dstate,'     <= IDLE_DSTATE;\n',...
    '             ',rxdLock,'     <= ''0'';\n',...
    '             ',rxEOPS,'     <= ''0'';\n',...
    '         end case;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process dstate_machine;\n\n',...
    '   ',payLoad,'    <= ',rxData,';\n',...
    '   ',payLoadVld,' <= ''1'' when (',rxVld,' = ''1'' AND ',dstate,' = DATA_DSTATE) else\n',...
    '                      ''0'';\n',...
    '\n\n',...
    ' ',cmdHeader,'  <= ',rxCmd,'(7 downto 6);\n',...
    '   cstate_machine: process (',rxcclk,')\n',...
    '   begin \n',...
    '     if ',rxcclk,'''event and ',rxcclk,' = ''1'' then \n',...
    '       if ',cmdrst,' = ''1'' then\n',...
    '         ',cstate,'  <= IDLE_CSTATE;\n',...
    '         ',cmd,'     <= (others => ''0'');\n',...
    '         ',cmdVld,'  <= ''0'';\n',...
    '         ',cmdEOP,'   <= ''0'';\n',...
    '         ',rxcLock,'  <= ''0'';\n',...
    '         ',cmdLength,'<= to_unsigned(0,16);\n',...
    '         ',cmdLenTmp,'<= (others => ''0'');\n',...
    '       else \n',...
    '         case ',cstate,' is \n',...
    '           when IDLE_CSTATE => \n',...
    '             ',cmdVld,'  <= ''0'';\n',...
    '             ',rxcLock,'  <= ''0'';\n',...
    '             ',cmdEOP,'   <= ''0'';\n',...
    '             ',cmdLength,' <= to_unsigned(0,16);\n',...
    '             if ',cmdRdy,' = ''1'' then\n',...
    '               if ',rxCmdVld,' = ''0'' then \n',...
    '                 ',cstate,'    <= WAIT4VALID_CSTATE;\n',...
    '               elsif ',rxdLock,' = ''0'' AND ',cmdHeader,' = ',COMMAND_PACKET,' then\n',...
    '                 ',rxcLock,'  <= ',coupleRxTx,';\n',...
    '                 ',cstate,'  <= CMD_LEN_1;\n',...
    '                 ',cmd,'      <= ',rxCmd,';\n',...
    '                 ',cmdVld,'  <= ''1'';\n',...
    '               end if;\n',...
    '             end if;\n',...
    '           when WAIT4VALID_CSTATE =>\n',...
    '             if ',rxdLock,' = ''0'' then\n',...
    '               if ',rxCmdVld,' = ''1''  AND ',cmdHeader,' = ',COMMAND_PACKET,' then\n',...
    '                 ',rxcLock,'  <= ',coupleRxTx,';\n',...
    '                 ',cstate,'  <= CMD_LEN_1;\n',...
    '                 ',cmd,'      <= ',rxCmd,';\n',...
    '                 ',cmdVld,'  <= ''1'';\n',...
    '               end if;\n',...
'             else\n'...
    ,'               ',cstate,'  <= IDLE_CSTATE;\n',...
    '             end if;\n',...
    '           when CMD_LEN_1 =>\n',...
    '             if ',rxCmdVld,' = ''1''  then\n',...
    '               ',cmd,'        <= ',rxCmd,';\n',...
    '               ',cmdLenTmp,'  <= ',rxCmd,';\n',...
    '               ',cmdVld,'    <= ''1'';\n',...
    '               ',cstate,'    <= CMD_LEN_2;\n',...
    '             else\n',...
    '               ',cmdVld,'  <= ''0'';\n',...
    '             end if;\n',...
    '           when CMD_LEN_2 =>\n',...
    '             if ',rxCmdVld,' = ''1''  then\n',...
    '               ',cmd,'       <= ',rxCmd,';\n',...
    '               ',cmdVld,'   <= ''1'';\n',...
    '             -- Endianness --------------------------------------------\n',...
    '             -- Big Endian --\n',...
    '             -- ',cmdLength,' <= unsigned(',cmdLenTmp,' & ',rxCmd,');\n',...
    '             -- if unsigned(',cmdLenTmp,' & ',rxCmd,') = to_unsigned(0, 8) then\n',...
    '             --    ',cmdLength,' <= to_unsigned(5, 16);\n',...
    '             -- end if;\n',...
    '             -- Small Endian --\n',...
    '               ',cmdLength,' <= unsigned(',rxCmd,' & ',cmdLenTmp,');\n',...
    '               if unsigned(',rxCmd,' & ',cmdLenTmp,') = to_unsigned(0, 8) then\n',...
    '                 ',cmdLength,' <= to_unsigned(5, 16);\n',...
    '               end if;\n',...
    '               ',cstate,' <= CMD_DATA;\n',...
    '             else\n',...
    '               ',cmdVld,'  <= ''0'';\n',...
    '             end if;\n',...
    '           when CMD_DATA =>\n',...
    '             if ',cmdLength,' = to_unsigned(0, 16) then\n',...
    '               ',cstate,' <= IDLE_CSTATE;\n',...
    '               ',rxcLock,' <= ''0'';\n',...
    '               ',cmdVld,' <= ''0'';\n',...
    '             elsif ',rxCmdVld,' = ''1''  and ',cmdRdy,' = ''1'' then\n',...
    '               ',cmd,'        <= ',rxCmd,';\n',...
    '               ',cmdVld,'    <= ''1'';\n',...
    '               ',cmdLength,' <= ',cmdLength,' - 1;\n',...
    '             elsif ',rxCmdVld,' = ''1''  and ',cmdRdy,' = ''0'' then\n',...
    '               ',cmd,'        <= ',rxCmd,';\n',...
    '               ',cmdVld,'    <= ''1'';\n',...
    '               ',cmdLength,' <= ',cmdLength,' - 1;\n',...
    '               ',cstate,' <= CMD_WAIT4DATA;\n',...
    '             else\n',...
    '               ',cmdVld,'  <= ''0'';\n',...
    '             end if;\n',...
    '             ',cmdEOP,' <= ',rxCmdEOP,';\n',...
    '           when CMD_WAIT4DATA =>\n',...
    '             if ',cmdLength,' = to_unsigned(0, 16) then\n',...
    '               ',cstate,' <= IDLE_CSTATE;\n',...
    '               ',rxcLock,' <= ''0'';\n',...
    '               ',cmdVld,' <= ''0'';\n',...
    '             elsif ',cmdRdy,' = ''1'' then\n',...
    '             --',cmd,'        <= ',rxCmd,';\n',...
    '             --',cmdVld,'    <= ''1'';\n',...
    '             --',cmdLength,' <= ',cmdLength,' - 1;\n',...
    '               ',cstate,' <= CMD_DATA;\n',...
    '             else\n',...
    '               ',cmdVld,'  <= ''0'';\n',...
    '             end if;\n',...
    '             ',cmdEOP,' <= ',rxCmdEOP,';\n',...
    '           when others =>\n',...
    '             ',cstate,'  <= IDLE_CSTATE;\n',...
    '             ',cmd,'     <= (others => ''0'');\n',...
    '             ',cmdVld,'  <= ''0'';\n',...
    '             ',rxcLock,'  <= ''0'';\n',...
    '             ',cmdLength,' <= to_unsigned(0,16);\n',...
    '         end case;\n',...
    '       end if;\n',...
    '     end if;\n',...
    '   end process cstate_machine;\n'];
end