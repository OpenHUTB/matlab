classdef(ConstructOnLoad)ASYNCFIFO<eda.internal.component.WhiteBox



    properties
clkA
clkB
rst
dinA
wrenA
rdenB
doutB
fullA
emptyB

        generic=generics(...
        'DATAWIDTH','integer','8',...
        'ADDRWIDTH','integer','8');

    end

    methods
        function this=ASYNCFIFO(varargin)
            this.flatten=false;
            this.setGenerics(varargin);

            this.clkA=eda.internal.component.ClockPort;
            this.clkB=eda.internal.component.ClockPort;
            this.rst=eda.internal.component.ResetPort;
            this.dinA=eda.internal.component.Inport('FiType',this.generic.DATAWIDTH);
            this.wrenA=eda.internal.component.Inport('FiType','boolean');
            this.rdenB=eda.internal.component.Inport('FiType','boolean');
            this.doutB=eda.internal.component.Outport('FiType',this.generic.DATAWIDTH);
            this.emptyB=eda.internal.component.Outport('FiType','boolean');
            this.fullA=eda.internal.component.Outport('FiType','boolean');

        end

        function implement(this)

            addrWidth=this.getGenericInstanceValue(this.generic.ADDRWIDTH);
            cntWidth=str2double(addrWidth)+1;

            wr_addrA=this.signal('Name','wr_addrA','FiType',this.generic.ADDRWIDTH);
            rd_addrB=this.signal('Name','rd_addrB','FiType',this.generic.ADDRWIDTH);
            wrCntA=this.signal('Name','wrCntA','FiType',['std',num2str(cntWidth)]);
            rdCntB=this.signal('Name','rdCntB','FiType',['std',num2str(cntWidth)]);
            wrCntB=this.signal('Name','wrCntB','FiType',['std',num2str(cntWidth)]);
            rdCntA=this.signal('Name','rdCntA','FiType',['std',num2str(cntWidth)]);
            cntwr_addrB_reg=this.signal('Name','cntwr_addrB_reg','FiType',['std',num2str(cntWidth)]);
            cntrd_addrA_reg=this.signal('Name','cntrd_addrA_reg','FiType',['std',num2str(cntWidth)]);
            cntwr_addrB_grayCode=this.signal('Name','cntwr_addrB_grayCode','FiType',['std',num2str(cntWidth)]);
            cntrd_addrA_grayCode=this.signal('Name','cntrd_addrA_grayCode ','FiType',['std',num2str(cntWidth)]);

            ramOutput=this.signal('Name','ramOutput','FiType',this.generic.DATAWIDTH);
            rdCntEnb=this.signal('Name','rdCntEnb','FiType','boolean');
            wrCntEnb=this.signal('Name','wrCntEnb','FiType','boolean');
            fullFlag=this.signal('Name','fullFlag','FiType','boolean');
            emptyFlag=this.signal('Name','emptyFlag','FiType','boolean');
            notFull=this.signal('Name','notFull','FiType','boolean');
            notEmpty=this.signal('Name','notEmpty','FiType','boolean');

            this.component(...
            'Name','DPRAM',...
            'Component',eda.internal.component.DPRAM('DATAWIDTH',this.generic.DATAWIDTH,...
            'ADDRWIDTH',this.generic.ADDRWIDTH),...
            'clkA',this.clkA,...
            'clkB',this.clkB,...
            'wr_enA',this.wrenA,...
            'wr_dinA',this.dinA,...
            'wr_addrA',wr_addrA,...
            'enbA','1',...
            'enbB','1',...
            'rd_addrB',rd_addrB,...
            'rd_doutB',ramOutput);

            this.assign(['bitsliceget(wrCntA,',num2str(str2double(addrWidth)-1),',0)'],wr_addrA);
            this.assign(['bitsliceget(rdCntB ,',num2str(str2double(addrWidth)-1),',0)'],rd_addrB);

            this.assign('~emptyFlag',notEmpty);
            this.assign('~fullFlag',notFull);
            this.assign('bitand(notEmpty, this.rdenB)',rdCntEnb);
            this.assign('bitand(notFull, this.wrenA)',wrCntEnb);

            this.component(...
            'Name','Counter',...
            'flatten',false,...
            'Component',eda.internal.component.Counter('CNTWIDTH',num2str(cntWidth)),...
            'clk',this.clkB,...
            'rst',this.rst,...
            'enb',rdCntEnb,...
            'cnt',rdCntB);

            this.component(...
            'Name','Counter',...
            'flatten',false,...
            'Component',eda.internal.component.Counter('CNTWIDTH',num2str(cntWidth)),...
            'clk',this.clkA,...
            'rst',this.rst,...
            'enb',wrCntEnb,...
            'cnt',wrCntA);


            this.component(...
            'Name','doutReg',...
            'Component',eda.internal.component.Register,...
            'clk',this.clkB,...
            'reset',this.rst,...
            'clkenb',this.rdenB,...
            'din',ramOutput,...
            'dout',this.doutB);






            this.component(...
            'Name','binary2gray',...
            'flatten',false,...
            'Component',eda.internal.component.Binary2Gray('DATAWIDTH',num2str(cntWidth)),...
            'clk',this.clkB,...
            'rst',this.rst,...
            'binary_in',wrCntA,...
            'gray_out',cntwr_addrB_grayCode);


            this.component(...
            'Name','sync_clkB',...
            'Component',eda.internal.component.Register,...
            'clk',this.clkB,...
            'reset',this.rst,...
            'din',cntwr_addrB_grayCode,...
            'dout',cntwr_addrB_reg);


            this.component(...
            'Name','gray2binary',...
            'flatten',false,...
            'Component',eda.internal.component.Gray2Binary('DATAWIDTH',num2str(cntWidth)),...
            'clk',this.clkB,...
            'rst',this.rst,...
            'gray_in',cntwr_addrB_reg,...
            'binary_out',wrCntB);







            this.component(...
            'Name','binary2gray',...
            'flatten',false,...
            'Component',eda.internal.component.Binary2Gray('DATAWIDTH',num2str(cntWidth)),...
            'clk',this.clkA,...
            'rst',this.rst,...
            'binary_in',rdCntB,...
            'gray_out',cntrd_addrA_grayCode);


            this.component(...
            'Name','sync_clkA',...
            'Component',eda.internal.component.Register,...
            'clk',this.clkA,...
            'reset',this.rst,...
            'din',cntrd_addrA_grayCode,...
            'dout',cntrd_addrA_reg);


            this.component(...
            'Name','gray2binary',...
            'flatten',false,...
            'Component',eda.internal.component.Gray2Binary('DATAWIDTH',num2str(cntWidth)),...
            'clk',this.clkA,...
            'rst',this.rst,...
            'gray_in',cntrd_addrA_reg,...
            'binary_out',rdCntA);

            FIFOStatus=this.component(...
            'Name','FIFOStatus',...
            'UniqueName','FIFOStatus',...
            'flatten',true,...
            'DescFunc',this.ASYNCFIFOStatus(cntWidth),...
            'Component',eda.internal.component.WhiteBox({'wrCntA','INPUT',['std',num2str(cntWidth)],...
            'rdCntA','INPUT',['std',num2str(cntWidth)],...
            'wrCntB','INPUT',['std',num2str(cntWidth)],...
            'rdCntB','INPUT',['std',num2str(cntWidth)],...
            'fullA','OUTPUT','boolean',...
            'emptyB','OUTPUT','boolean'}),...
            'wrCntA',wrCntA,...
            'rdCntA',rdCntA,...
            'wrCntB',wrCntB,...
            'rdCntB',rdCntB,...
            'fullA',fullFlag,...
            'emptyB',emptyFlag);

            FIFOStatus.addprop('enableCodeGen');

            this.assign(fullFlag,this.fullA);
            this.assign(emptyFlag,this.emptyB);

        end

        hdlcode=ASYNCFIFOStatus(this,cntWidth);
    end

end

