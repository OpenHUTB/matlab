function compileRepeatedSubfunction(visitor,fcnWrapper,funName)


































    numInputs=numel(fcnWrapper.Inputs);
    numOutputs=fcnWrapper.NumArgOut;
    optimInputs=fcnWrapper.OptimInputs;
    optimOutputs=(1:numOutputs)';


    subfunInputs="input"+(1:numInputs)';

    subfunOutputs="output"+optimOutputs;





    persistentInputs="lastInput"+optimInputs;


    persistentOutputs="lastOutput"+optimOutputs;


    allfunInputs=getCompiledRepeatedFunInputs(fcnWrapper,subfunInputs,visitor.ExtraParamsName);

    functionSignature="function ["+strjoin(subfunOutputs,',')+"] = "+...
    funName+...
    "("+strjoin(allfunInputs,', ')+")"+newline;


    helpText=upper(funName)+" "+getString(message('shared_adlib:codeComments:ReuseEvaluationFunctionHeader'))+newline+...
    newline+...
    "["+strjoin(upper(subfunOutputs),',')+"] = "+funName+"("+strjoin(upper(allfunInputs),', ')+") "+...
    getString(message('shared_adlib:codeComments:ReuseEvaluationFunctionSyntax'))+newline+...
    newline+...
    getString(message('shared_adlib:codeComments:AutoGenerated',datestr(now)))+newline;

    helpText=matlab.internal.display.printWrapped(helpText,73);

    helpText=strjoin("% "+splitlines(helpText),'\n')+newline+newline;





    extraParams=visitor.ExtraParams;
    numExtraParams=visitor.NumExtraParams;
    visitor.ExtraParams={};
    visitor.NumExtraParams=0;
    [subFun,subFunBody]=compileFunctionCall(fcnWrapper,subfunInputs,visitor);







    visitor.ExtraParams=extraParams;
    visitor.NumExtraParams=numExtraParams;

    subFunBody=regexprep(subFunBody,'\n','\n    ');
    subfunCall=subFunBody+...
    "["+strjoin(subfunOutputs,',')+'] = '+...
    subFun+";";


    declarePersistentOutputs=strjoin("persistent "+persistentOutputs+";",'\n');
    returnSavedOutputs=strjoin(blanks(4)+subfunOutputs+" = "+persistentOutputs+";",'\n');
    saveOutputs=strjoin(blanks(4)+persistentOutputs+" = "+subfunOutputs+";",'\n');


    ifBranchComments=getString(message('shared_adlib:codeComments:ReuseEvaluationReuseStoredOutputs'));

    ifBranchComments=matlab.internal.display.printWrapped(ifBranchComments,73);

    ifBranchComments(end)=[];

    ifBranchComments=strjoin(blanks(4)+"% "+splitlines(ifBranchComments),'\n');


    elseBranchComments=getString(message('shared_adlib:codeComments:ReuseEvaluationComputeOutputs'));

    elseBranchComments=matlab.internal.display.printWrapped(elseBranchComments,73);

    elseBranchComments(end)=[];

    elseBranchComments=strjoin(blanks(4)+"% "+splitlines(elseBranchComments),'\n');

    if optimInputs



        declarePersistentInputs=strjoin("persistent "+persistentInputs+";",'\n');
        isequalChecks=strjoin("isequal("+subfunInputs(optimInputs)+","+persistentInputs+")",' && ');
        saveInputs=strjoin(blanks(4)+persistentInputs+" = "+subfunInputs(optimInputs)+";",'\n');



        funBody=functionSignature+...
        helpText+...
        "% "+getString(message('shared_adlib:codeComments:ReuseEvaluationPreviousInputs'))+newline+...
        declarePersistentInputs+newline+...
        "% "+getString(message('shared_adlib:codeComments:ReuseEvaluationPreviousOutputs'))+newline+...
        declarePersistentOutputs+newline+newline+...
        "if "+isequalChecks+newline+...
        ifBranchComments+newline+...
        returnSavedOutputs+newline+...
        "else"+newline+...
        elseBranchComments+newline+...
        blanks(4)+subfunCall+newline+newline+...
        blanks(4)+"% "+getString(message('shared_adlib:codeComments:ReuseEvaluationSaveValues'))+newline+...
        saveInputs+newline+...
        saveOutputs+newline+...
        "end"+newline+newline+...
        "end";

    else


        funBody=functionSignature+...
        helpText+...
        "% "+getString(message('shared_adlib:codeComments:ReuseEvaluationPreviousOutputs'))+newline+...
        declarePersistentOutputs+newline+newline+...
        "if "+strjoin("isempty("+persistentOutputs+")",' || ')+newline+...
        elseBranchComments+newline+...
        blanks(4)+subfunCall+newline+newline+...
        blanks(4)+"% "+getString(message('shared_adlib:codeComments:ReuseEvaluationSaveValues'))+newline+...
        saveOutputs+newline+...
        "else"+newline+...
        ifBranchComments+newline+...
        returnSavedOutputs+newline+...
        "end"+newline+newline+...
        "end";
    end


    visitor.Subfun.(funName)=funBody;

end