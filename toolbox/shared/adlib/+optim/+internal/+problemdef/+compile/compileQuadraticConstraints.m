function probStruct=compileQuadraticConstraints(probStruct,prob,inMemory,useParallel,constraints,NumNonlinIneqConstraints,...
    idxNonlinIneqConstraints,NumNonlinEqConstraints,idxNonlinEqConstraints,constraintFcnName)


























    cineqValue="cineq";
    ceqValue="ceq";
    cineqGradValue="cineqGrad";
    ceqGradValue="ceqGrad";
    inputVariables="inputVariables";
    extraParamsName="extraParams";
    HessNameIneq="Hineq";
    HessIneqTimesX="Hineqmvec";
    FNameIneq="fineq";
    RHSNameIneq="rhsineq";
    HessNameEq="Heq";
    HessEqTimesX="Heqmvec";
    FNameEq="feq";
    RHSNameEq="rhseq";
    HessIneqTimeXcell="HineqmvecCell";
    HessEqTimeXcell="HeqmvecCell";


    extraParams={};


    FunctionBlock="%% "+getString(message('shared_adlib:codeComments:ComputeInequalityConstraints'))+newline;


    [compiledNonlinFun,compiledIneqGrad,extraParams]=...
    optim.internal.problemdef.compile.writeQPConstrGradientBlock(constraints,...
    probStruct.NumVars,NumNonlinIneqConstraints,idxNonlinIneqConstraints,...
    cineqValue,cineqGradValue,inputVariables,extraParams,extraParamsName,...
    HessNameIneq,HessIneqTimesX,FNameIneq,RHSNameIneq,HessIneqTimeXcell);

    FunctionBlock=FunctionBlock+compiledNonlinFun;


    FunctionBlock=FunctionBlock+newline+"%% "+getString(message('shared_adlib:codeComments:ComputeEqualityConstraints'))+newline;
    [compiledNonlinFun,compiledEqGrad,extraParams]=...
    optim.internal.problemdef.compile.writeQPConstrGradientBlock(constraints,...
    probStruct.NumVars,NumNonlinEqConstraints,idxNonlinEqConstraints,...
    ceqValue,ceqGradValue,inputVariables,extraParams,extraParamsName,...
    HessNameEq,HessEqTimesX,FNameEq,RHSNameEq,HessEqTimeXcell);

    FunctionBlock=FunctionBlock+compiledNonlinFun;


    GradientBlock=compiledIneqGrad+compiledEqGrad;

    numFcnOutputs=2;
    GradientComment=optim.internal.problemdef.compile.gradComment(...
    numFcnOutputs,'ComputeConstraintGradient',{},'gradient');
    GradientBlock=GradientComment+GradientBlock;


    gradientBlockFirst=false;
    jointFunAndGrad=false;
    CombinedBlock=optim.internal.problemdef.compile.combineBody(...
    FunctionBlock,GradientBlock,numFcnOutputs,...
    gradientBlockFirst,jointFunAndGrad);





    helpThreeSpaces="   ";





    if isstrprop(constraintFcnName,"lower")
        helpFcnName=upper(constraintFcnName);
    else
        helpFcnName=constraintFcnName;
    end


    headerMsgId='shared_adlib:codeComments:ConstraintFunctionHeaderWithGradient';



    functionSignature="function ["+cineqValue+", "+ceqValue+", "+cineqGradValue+", "+ceqGradValue+"] = "+...
    constraintFcnName+"("+inputVariables+", "+extraParamsName+")"+newline;


    helpText=helpFcnName+" "+getString(message(headerMsgId))+newline+...
    newline+...
    helpThreeSpaces+"["+upper(cineqValue)+", "+upper(ceqValue)+"] = "+helpFcnName+"("+upper(inputVariables)+", "+upper(extraParamsName)+") "+...
    getString(message('shared_adlib:codeComments:ConstraintFunctionSyntaxWithExtraParams',...
    upper(cineqValue),upper(ceqValue),upper(inputVariables),upper(extraParamsName)))+newline+...
    newline+...
    helpThreeSpaces+"["+upper(cineqValue)+", "+upper(ceqValue)+", "+upper(cineqGradValue)+", "+upper(ceqGradValue)+"] = "+...
    helpFcnName+"("+upper(inputVariables)+", "+upper(extraParamsName)+") ";


    helpText=helpText+getString(message('shared_adlib:codeComments:ConstraintGradientSyntax',...
    upper(cineqGradValue),upper(ceqGradValue)))+newline+...
    newline+...
    helpThreeSpaces+getString(message('shared_adlib:codeComments:AutoGenerated',datestr(now)));

    helpText=matlab.internal.display.printWrapped(helpText,73);
    helpText(end)=[];


    helpText=strjoin("%"+splitlines(helpText),'\n')+newline+newline;


    constraintBody=functionSignature+helpText+CombinedBlock;



    if inMemory


        constrhandle=optim.internal.problemdef.writeCompiledFun2VirtualFile(constraintFcnName,constraintBody,prob.GeneratedFileFolder);
        probStruct.nonlcon=optim.internal.problemdef.compile.snapExtraParams(constrhandle,extraParams);


        probStruct=optim.internal.problemdef.compile.writeFcnOnVFSWorkers(...
        probStruct,prob,useParallel,"confcn",constraintFcnName,...
        constraintBody,extraParams);
    else

        constrhandle=optim.internal.problemdef.writeCompiledFun2StandardFile(...
        constraintFcnName,constraintBody,probStruct.filePath);

        if isempty(extraParams)
            probStruct.nonlcon=constrhandle;
        else
            probStruct.nonlcon=optim.internal.problemdef.compile.snapExtraParams(constrhandle,extraParams);
        end
    end


