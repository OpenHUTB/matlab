function createComparisonReport(varargin)





    indentSize=4;
    singleFile=true;

    if nargin==6
        reportDir=varargin{1};
        reportName=varargin{2};
        rowsToReport=varargin{3};
        colsToReport=varargin{4};
        reportTitle=varargin{5};
        reportAuthor=varargin{6};
    else
        error('Incorrect number of arguments.  Please try again.');
    end


    compareRunID=Simulink.sdi.getRecentValidComparisonRunID();
    drr=Simulink.sdi.DiffRunResult(compareRunID);


    imageDir=fullfile(tempname,'sdireports');


    reportPath=fullfile(matlabroot,'toolbox','shared','sdi','web','Report');
    groupIconsPath=fullfile(matlabroot,'toolbox','shared','sdi','web','MainView','SDI2','icons','widgets');
    reportRelPath=fullfile(reportPath,'release');
    reportCmprPath=fullfile(reportPath,'comparison');

    originalCmprReport=fullfile(reportCmprPath,'CompareReportTemplate.html');
    jsMainFile=fullfile(reportCmprPath,'js','cmprReportMain.js');
    cssMainFile=fullfile(reportCmprPath,'css','cmprReport.css');
    combinedCmprReport=fullfile(reportRelPath,'CompareReportTemplateCombined.html');


    if~singleFile
        createFolderStructure(reportDir);
        copyFiles(reportDir,reportName,originalCmprReport,jsMainFile,cssMainFile);
    end
    columnInfo=getCompareData(drr);
    groupedColumnInfo=getGroupingInfo();
    if strcmp(rowsToReport,'ReportOnlyMismatchedSignals')
        mask=arrayfun(@(x)...
        (x.Result=="OutOfTolerance")||...
        (x.Result=="UnitsMismatch")||...
        (x.Result=="DataTypeMismatch")||...
        (x.Result=="Unaligned")||...
        (x.Result=="Canceled")||...
        (x.Result=="TimeMismatch")||...
        (x.Result=="StartStopMismatch")||...
        (x.Result=="Unsupported")||...
        (x.Result=="EmptySynced"),...
        columnInfo);
        columnInfo=columnInfo(mask);
    end

    if isempty(columnInfo)
        columnInfo=initCompareData(false);
    end

    imgCount=cmprImgCapture(columnInfo,drr,imageDir,singleFile,743,869);
    imgJs=imgFileCreate(imgCount,imageDir,singleFile,indentSize,groupIconsPath);
    jsonJs=createJsonTxt(columnInfo,groupedColumnInfo,reportDir,singleFile,indentSize);
    dataJs=genReportData(...
    drr,reportName,reportDir,reportTitle,reportAuthor,...
    rowsToReport,colsToReport,singleFile,indentSize);

    if singleFile
        mergeFiles(combinedCmprReport,imgJs,dataJs,jsonJs,reportDir,reportName,reportCmprPath);
    end
end

function jsonJsTxt=createJsonTxt(columnInfo,groupedColumnInfo,reportDir,singleFile,indentSize)
    if singleFile
        space=blanks(indentSize*2);
    else
        space=blanks(0);
    end
    jsonStrRaw=jsonencode(columnInfo);
    groupJsonStrRaw=jsonencode(groupedColumnInfo);

    if strcmp(jsonStrRaw(1),'{')
        jsonStrRaw=['[',jsonStrRaw,']'];
    end
    if strcmp(groupJsonStrRaw(1),'{')
        groupJsonStrRaw=['[',groupJsonStrRaw,']'];
    end
    jsonStr=jsonFormat(jsonStrRaw);
    groupJsonStr=jsonFormat(groupJsonStrRaw);

    if~singleFile
        fileNameJson=sprintf('cmprJsonData.json');
        filePathJson=fullfile(reportDir,'sdicmprrpt','json',fileNameJson);
        fid=fopen(filePathJson,'w');
        fprintf(fid,'%s',jsonStr);
        fclose(fid);
    end


    jsonJsTxt=jsonStr;
    groupJsonJsTxt=groupJsonStr;


    lftStr='[';
    baseSpc=blanks(indentSize*2);
    spcStr=[space,baseSpc];

    index=strfind(jsonJsTxt,lftStr);
    first=index(1);
    jsonJsTxt=[jsonJsTxt(1:first-1),[spcStr,lftStr],jsonJsTxt(first+length(lftStr):end)];
    jsonJsTxt=regexprep(jsonJsTxt,'[\n\r]+',['\r',spcStr]);

    index=strfind(groupJsonJsTxt,lftStr);
    first=index(1);
    groupJsonJsTxt=[groupJsonJsTxt(1:first-1),[spcStr,lftStr],groupJsonJsTxt(first+length(lftStr):end)];
    groupJsonJsTxt=regexprep(groupJsonJsTxt,'[\n\r]+',['\r',spcStr]);


    preText=sprintf('%sfunction getJSON() {\n%s    var dataJSON =\n',space,space);
    postText=sprintf(';\n%s    return dataJSON;\n%s}',space,space);
    jsonJsTxt=sprintf([preText,'%s',postText],jsonJsTxt);

    groupPreText=sprintf('%sfunction getGroupJSON() {\n%s    var dataGroupJSON =\n',space,space);
    groupPostText=sprintf(';\n%s    return dataGroupJSON;\n%s}',space,space);
    groupJsonJsTxt=sprintf([groupPreText,'%s',groupPostText],groupJsonJsTxt);

    jsonJsTxt=append(jsonJsTxt,groupJsonJsTxt);


    if~singleFile
        fileNameJs=sprintf('cmprJsonData.js');
        filePathJs=fullfile(reportDir,'sdicmprrpt','js',fileNameJs);
        fid=fopen(filePathJs,'w');
        fprintf(fid,'%s',jsonJsTxt);
        fclose(fid);
    end
end

function columnInfo=getCompareData(drr)

    columnInfo=initCompareData(1);
    columnInfo=repmat(columnInfo,1,drr.Count);
    for n=1:drr.Count

        dsr=drr.getResultByIndex(n);
        if(dsr.Status=="StartStopMismatch")
            baselineSignalValues=Simulink.sdi.getSignal(dsr.SignalID1).Values;
            if(baselineSignalValues.TimeInfo.Start)
                baselineStartTime=baselineSignalValues.TimeInfo.Start;
                baselineStopTime=baselineSignalValues.TimeInfo.End;
            else
                baselineStartTime=' ';
                baselineStopTime=' ';
            end
            compareToValues=Simulink.sdi.getSignal(dsr.SignalID2).Values;
            if(compareToValues.TimeInfo.Start)
                compareToStartTime=compareToValues.TimeInfo.Start;
                compareToStopTime=compareToValues.TimeInfo.End;
            else
                compareToStartTime=' ';
                compareToStopTime=' ';
            end
        end
        [baseline,compareTo]=dsr.getSynchronizedIDs();
        comparisonSig=Simulink.sdi.getSignal(dsr.ComparisonSignalID);
        if~isempty(baseline)
            baselineSig=Simulink.sdi.getSignal(baseline);
        else
            baselineSig=comparisonSig;
        end

        columnInfo(n).Index=n;
        columnInfo(n).SignalName=comparisonSig.Name;
        columnInfo(n).Result=char(dsr.Status);
        columnInfo(n).MaxDifference=dsr.MaxDifference;


        columnInfo(n).BlockPath1=baselineSig.BlockPath;
        columnInfo(n).ComparisonSignalID=comparisonSig.ID;
        columnInfo(n).DataSource1=baselineSig.DataSource;
        columnInfo(n).SignalName1=baselineSig.Name;
        columnInfo(n).SignalDescription1=char(baselineSig.Description);
        columnInfo(n).AbsTol1=baselineSig.AbsTol;
        columnInfo(n).RelTol1=sprintf('%.2f%%',100*baselineSig.RelTol);
        columnInfo(n).SyncMethod1=baselineSig.SyncMethod;
        columnInfo(n).InterpMethod1=subResult(baselineSig.InterpMethod,...
        ["none","linear","zoh"],...
        string({getString(message('SDI:sdi:NoneEventBased')),"linear","zoh"}));
        columnInfo(n).Run1=drr.BaselineRunName;
        columnInfo(n).CompareToRunName=drr.CompareToRunName;
        if(dsr.Status=="StartStopMismatch")
            columnInfo(n).StartTime1=baselineStartTime;
            columnInfo(n).StopTime1=baselineStopTime;
            columnInfo(n).StartTime2=compareToStartTime;
            columnInfo(n).StopTime2=compareToStopTime;
        end
        columnInfo(n).Channel1=baselineSig.Channel;
        columnInfo(n).Model1=baselineSig.Model;
        columnInfo(n).BlockName1=baselineSig.BlockName;
        columnInfo(n).Dimensions1=sprintf('[%d]',baselineSig.Dimensions);
        columnInfo(n).TimeSeriesRoot1=baselineSig.RootSource;
        columnInfo(n).TimeSource1=baselineSig.TimeSource;
        columnInfo(n).LineColor1=baselineSig.LineColor;
        columnInfo(n).LineDashed1=baselineSig.LineDashed;
        columnInfo(n).Port1=baselineSig.PortIndex;
        columnInfo(n).AlignBy1=dsr.AlignBy;
        columnInfo(n).Units1=baselineSig.Units;
        columnInfo(n).SigDataType1=baselineSig.DataType;
        columnInfo(n).SigSampleTime1=baselineSig.SampleTime;
        columnInfo(n).TimeTol1=baselineSig.TimeTol;
        columnInfo(n).OverrideGlobalTol1=subResult(baselineSig.OverrideGlobalTol,...
        [0,1],...
        string({getString(message('SDI:sdi:mgOptionNo')),...
        getString(message('SDI:sdi:mgOptionYes'))}));


        if~isempty(compareTo)
            compareToSig=Simulink.sdi.getSignal(compareTo);
            columnInfo(n).BlockPath2=compareToSig.BlockPath;
            columnInfo(n).DataSource2=compareToSig.DataSource;
            columnInfo(n).SignalName2=compareToSig.Name;
            columnInfo(n).SignalDescription2=char(compareToSig.Description);
            columnInfo(n).AbsTol2=compareToSig.AbsTol;
            columnInfo(n).RelTol2=sprintf('%.2f%%',100*compareToSig.RelTol);
            columnInfo(n).SyncMethod2=compareToSig.SyncMethod;
            columnInfo(n).InterpMethod2=subResult(compareToSig.InterpMethod,...
            ["none","linear","zoh"],...
            string({getString(message('SDI:sdi:NoneEventBased')),"linear","zoh"}));
            columnInfo(n).Run2=drr.CompareToRunName;
            columnInfo(n).Channel2=compareToSig.Channel;
            columnInfo(n).Model2=compareToSig.Model;
            columnInfo(n).BlockName2=compareToSig.BlockName;
            columnInfo(n).Dimensions2=sprintf('[%d]',compareToSig.Dimensions);
            columnInfo(n).TimeSeriesRoot2=compareToSig.RootSource;
            columnInfo(n).TimeSource2=compareToSig.TimeSource;
            columnInfo(n).LineColor2=compareToSig.LineColor;
            columnInfo(n).LineDashed2=compareToSig.LineDashed;
            columnInfo(n).Port2=compareToSig.PortIndex;
            columnInfo(n).AlignBy2=dsr.AlignBy;
            columnInfo(n).Units2=compareToSig.Units;
            columnInfo(n).SigDataType2=compareToSig.DataType;
            columnInfo(n).SigSampleTime2=compareToSig.SampleTime;
            columnInfo(n).TimeTol2=compareToSig.TimeTol;
            columnInfo(n).OverrideGlobalTol2=subResult(compareToSig.OverrideGlobalTol,...
            [0,1],...
            string({getString(message('SDI:sdi:mgOptionNo')),...
            getString(message('SDI:sdi:mgOptionYes'))}));
        end
    end
end

function initCol=initCompareData(initFlag)
    if initFlag
        signalName='';
        defaultValue=0;
    else
        signalName=getString(message('SDI:sdi:NoSignals'));
        defaultValue='';
    end


    initCol.Index=0;
    initCol.SignalName=signalName;
    initCol.Result='';
    initCol.BlockPath1='';
    initCol.BlockPath2='';
    initCol.DataSource1='';
    initCol.DataSource2='';
    initCol.SignalName1=signalName;
    initCol.SignalName2=signalName;
    initCol.ComparisonSignalID=0;
    initCol.SignalDescription1='';
    initCol.SignalDescription2='';
    initCol.AbsTol1=defaultValue;
    initCol.AbsTol2=defaultValue;
    initCol.RelTol1=defaultValue;
    initCol.RelTol2=defaultValue;
    initCol.SyncMethod1='';
    initCol.SyncMethod2='';
    initCol.InterpMethod1='';
    initCol.InterpMethod2='';
    initCol.Run1='';
    initCol.CompareToRunName='';
    initCol.StartTime1=0;
    initCol.StopTime1=0;
    initCol.StartTime2=0;
    initCol.StopTime2=0;
    initCol.Run2='';
    initCol.Channel1=[];
    initCol.Channel2=[];
    initCol.Model1='';
    initCol.Model2='';
    initCol.BlockName1='';
    initCol.BlockName2='';
    initCol.Dimensions1=defaultValue;
    initCol.Dimensions2=defaultValue;
    initCol.TimeSeriesRoot1='';
    initCol.TimeSeriesRoot2='';
    initCol.TimeSource1='';
    initCol.TimeSource2='';
    initCol.LineColor1=[];
    initCol.LineColor2=[];
    initCol.LineDashed1='';
    initCol.LineDashed2='';
    initCol.Port1=defaultValue;
    initCol.Port2=defaultValue;
    initCol.AlignBy1='';
    initCol.AlignBy2='';
    initCol.Units1='';
    initCol.Units2='';
    initCol.SigDataType1='';
    initCol.SigDataType2='';
    initCol.SigSampleTime1='';
    initCol.SigSampleTime2='';
    initCol.MaxDifference=defaultValue;
    initCol.TimeTol1=defaultValue;
    initCol.TimeTol2=defaultValue;
    initCol.OverrideGlobalTol1=false;
    initCol.OverrideGlobalTol2=false;
end

function groupedColumnInfo=getGroupingInfo()
    firstRow=Simulink.sdi.internalGetTableRows('comparison',0,1);


    groupedColumnInfo=jsondecode(firstRow);





    if Simulink.sdi.enableComparisonReportGrouping
        assert(~isempty(firstRow),'Empty Grouping Information found');
    end
    if Simulink.sdi.enableComparisonReportGrouping
        assert((groupedColumnInfo.Level==0),'Incomplete Grouping Information found');
    end
    i=1;
    if~isempty(groupedColumnInfo)
        while true
            groupData=Simulink.sdi.internalGetTableRows('comparison',i,50);
            groupJSONData=jsondecode(groupData);
            if isempty(groupJSONData)
                break
            else
                i=i+50;
                groupedColumnInfo=[groupedColumnInfo;groupJSONData];
            end
        end
    end
    if Simulink.sdi.enableComparisonReportGrouping
        assert((length(groupedColumnInfo)>1),'Incomplete Grouping Information found, no signal data present');
    end
end

function imgCount=cmprImgCapture(columnInfo,drr,imageDir,singleFile,imgHeight,imgWidth)
    if(numel(columnInfo)==1)&&(columnInfo.Index==0)
        imgCount=0;
    else
        customSnap=Simulink.sdi.CustomSnapshot;
        customSnap.Width=imgWidth;
        customSnap.Height=imgHeight;

        imgCount=numel(columnInfo);
        for n=1:imgCount
            dsr=drr.getResultByIndex(columnInfo(n).Index);
            customSnap.plotComparison(dsr);
            fileNameImg=sprintf('cmprImage%d.png',n);
            if~singleFile
                imagePath=fullfile(reportDir,'sdicmprrpt','image');
            else
                [~,~]=mkdir(fullfile(imageDir,'image'));
                imagePath=fullfile(imageDir,'image');
            end
            imageName=fullfile(imagePath,fileNameImg);
            customSnap.snapshot('to','file','filename',imageName);
        end
    end
end

function imgJsTxt=imgFileCreate(imgCount,imageDir,singleFile,indentSize,groupIconsPath)
    if singleFile
        space=blanks(indentSize*2);
    else
        space=blanks(0);
    end
    imgJsTxt=sprintf('%sfunction getImage(imageSelect) {\n',space);
    for n=1:imgCount
        fileNameImg=sprintf('cmprImage%d.png',n);
        if singleFile
            [~,~]=mkdir(fullfile(imageDir,'image'));
            imagePath=fullfile(imageDir,'image');
        else
            imagePath=fullfile(reportDir,'sdicmprrpt','image');
        end
        imageName=fullfile(imagePath,fileNameImg);
        imgJsTxt=sprintf('%s%s    let imageData%d = ''data:image/png;base64,%s'';\n\n',imgJsTxt,space,n,file2base64(imageName));
    end
    imageName=fullfile(groupIconsPath,'workspace_ts_16.png');
    imgJsTxt=sprintf('%s%s    let imageDataWorkspace = ''data:image/png;base64,%s'';\n\n',imgJsTxt,space,file2base64(imageName));
    imageName=fullfile(groupIconsPath,'new_model_ts_16.png');
    imgJsTxt=sprintf('%s%s    let imageDataModel = ''data:image/png;base64,%s'';\n\n',imgJsTxt,space,file2base64(imageName));
    imgJsTxt=sprintf([imgJsTxt...
    ,'%s    const count = %d;\n'...
    ,'%s    let data = null;\n'...
    ,'%s    if (imageSelect <= count && count > 0) {\n'...
    ,'%s        data = ''imageData'' + String(imageSelect);\n'...
    ,'%s    }\n'...
    ,'%s    switch(imageSelect) {\n'...
    ,'%s        case -1: data = ''imageDataEmpty'';\n'...
    ,'%s        break;\n'...
    ,'%s        case -2: data = ''imageDataWorkspace'';\n'...
    ,'%s        break;\n'...
    ,'%s        case -3: data = ''imageDataModel'';\n'...
    ,'%s        break;\n'...
    ,'%s    }\n'...
    ,'%s    let obj = {\n'...
    ,'%s        "Data": eval(data),\n'...
    ,'%s        "Count": count\n'...
    ,'%s    };\n'...
    ,'%s    return obj;\n'...
    ,'%s}'],...
    space,imgCount,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space);

    if singleFile
        if imgCount>0
            rmdir(imagePath,'s');
        end
    else
        fileNameJs=sprintf('cmprImageData.js');
        filePathJs=fullfile(reportDir,'sdicmprrpt','js',fileNameJs);
        fid=fopen(filePathJs,'w');
        fprintf(fid,imgJsTxt);
        fclose(fid);
    end
end

function dataJsTxt=genReportData(...
    drr,reportName,reportDir,reportTitle,reportAuthor,...
    rowsToReport,colsToReport,singleFile,indentSize)

    reportTitle=getTitle(reportTitle,drr);
    reportAuthor=getAuthor(reportAuthor);

    if singleFile
        space=blanks(indentSize*2);
    else
        space=blanks(0);
    end
    baseSpc=blanks(indentSize);
    labels=buildLabels([space,baseSpc]);
    tooltips=buildTooltips;
    dataJsTxt=sprintf([...
'%sfunction getMetaData() {\n'...
    ,'%s    let tab = ''%s'';\n\n'...
    ,'%s    let reportTitle = ''%s'';\n\n'...
    ,'%s    let reportAuthor = ''%s'';\n\n'...
    ,'%s    let reportDate = ''%s'';\n\n'...
    ,'%s    let reportMLV = ''%s'';\n\n'...
    ,'%s    let comparisonLabel = ''%s'';\n\n'...
    ,'%s    let propertiesLabel = ''%s'';\n\n'...
    ,'%s    let baselineLabel = ''%s'';\n\n'...
    ,'%s    let compareToLabel = ''%s'';\n\n'...
    ,'%s    let summaryLabel = ''%s'';\n\n'...
    ,'%s    let interactiveLabel = ''%s'';\n\n'...
    ,'%s    let printableLabel = ''%s'';\n\n'...
    ,'%s    let rowsToReport = ''%s'';\n\n'...
    ,'%s    let colsToReport = %s;\n\n'...
    ,'%s    let matched = ''%s'';\n\n'...
    ,'%s    let unmatched = ''%s'';\n\n'...
    ,'%s    let unmatchedEmptySynced = ''%s'';\n\n'...
    ,'%s    let empty = ''%s'';\n\n'...
    ,'%s    let canceled = ''%s'';\n\n'...
    ,'%s    let unsupported = ''%s'';\n\n'...
    ,'%s    let datatypeMismatch = ''%s'';\n\n'...
    ,'%s    let timeMismatch = ''%s'';\n\n'...
    ,'%s    let startstopMismatch = ''%s'';\n\n'...
    ,'%s    let notCompared = ''%s'';\n\n'...
    ,'%s    let unaligned = ''%s'';\n\n'...
    ,'%s    let unprocessed = ''%s'';\n\n'...
    ,'%s    let unknownStatus = ''%s'';\n\n'...
    ,'%s    let processingComparison = ''%s'';\n\n'...
    ,'%s    let unitsMismatch = ''%s'';\n\n'...
    ,'%s    let emptyBaseline = ''%s'';\n\n'...
    ,'%s    let unitsMismatchStatus = ''%s'';\n\n'...
    ,'%s    let datatypesMismatchStatus = ''%s'';\n\n'...
    ,'%s    let unalignedStatus = ''%s'';\n\n'...
    ,'%s    let canceledStatus = ''%s'';\n\n'...
    ,'%s    let timeMismatchStatus = ''%s'';\n\n'...
    ,'%s    let startStopTimesMismatchStatus = ''%s'';\n\n'...
    ,'%s    let unsupportedStatus = ''%s'';\n\n'...
    ,'%s    let emptySyncedStatus = ''%s'';\n\n'...
    ,'%s    let emptySignalsStatus = ''%s'';\n\n'...
    ,'%s\n\n'...
    ,'%s\n\n'...
    ,'%s\n\n'...
    ,'%s    let combinedNames = [];\n'...
    ,'%s    let combinedIds = [];\n'...
    ,'%s    let combinedVars = [];\n\n'...
    ,'%s    combinedNames = combinedNames.concat(propertyNames.slice(0, 1),\n'...
    ,'%s        [''%s'', ''%s''], propertyNames.slice(2, propertyNames.length));\n\n'...
    ,'%s    combinedIds = combinedIds.concat(propertyIds.slice(0, 1),\n'...
    ,'%s        [''Result'', ''Max Diff''], propertyIds.slice(2, propertyIds.length));\n\n'...
    ,'%s    combinedVars = combinedVars.concat(propertyVars.slice(0, 1),\n'...
    ,'%s        [''Result'', ''MaxDifference''], propertyVars.slice(2, propertyVars.length));\n\n'...
    ,'%s\n\n'...
    ,'%s\n\n'...
    ,'%s    let obj = {\n'...
    ,'%s        "TabTitle": tab,\n'...
    ,'%s        "ReportTitle": reportTitle,\n'...
    ,'%s        "ReportAuthor": reportAuthor,\n'...
    ,'%s        "ReportDate": reportDate,\n'...
    ,'%s        "ReportMatlabVersion": reportMLV,\n'...
    ,'%s        "ComparisonLabel": comparisonLabel,\n'...
    ,'%s        "PropertiesLabel": propertiesLabel,\n'...
    ,'%s        "BaselineLabel": baselineLabel,\n'...
    ,'%s        "CompareToLabel": compareToLabel,\n'...
    ,'%s        "SummaryLabel": summaryLabel,\n'...
    ,'%s        "InteractiveLabel": interactiveLabel,\n'...
    ,'%s        "PrintableLabel": printableLabel,\n'...
    ,'%s        "RowsToReport": rowsToReport,\n'...
    ,'%s        "ColumnsToReport": colsToReport,\n'...
    ,'%s        "ColumnHeaders": colHeaders,\n'...
    ,'%s        "ColumnNames": colNames,\n'...
    ,'%s        "PropertyNames": propertyNames,\n'...
    ,'%s        "PropertyIds": propertyIds,\n'...
    ,'%s        "PropertyVars": propertyVars,\n'...
    ,'%s        "CombinedNames": combinedNames,\n'...
    ,'%s        "CombinedIds": combinedIds,\n'...
    ,'%s        "CombinedVars": combinedVars,\n'...
    ,'%s        "MatchedTip": matched,\n'...
    ,'%s        "UnmatchedTip": unmatched,\n'...
    ,'%s        "UnmatchedEmptySyncedTip": unmatchedEmptySynced,\n'...
    ,'%s        "EmptyTip": empty,\n'...
    ,'%s        "CanceledTip": canceled,\n'...
    ,'%s        "UnsupportedTip": unsupported,\n'...
    ,'%s        "DatatypeMismatchTip": datatypeMismatch,\n'...
    ,'%s        "TimeMismatchTip": timeMismatch,\n'...
    ,'%s        "StartStopMismatchTip": startstopMismatch,\n'...
    ,'%s        "NotComparedTip": notCompared,\n'...
    ,'%s        "UnalignedTip": unaligned,\n'...
    ,'%s        "UnprocessedTip": unprocessed,\n'...
    ,'%s        "UnknownStatusTip": unknownStatus,\n'...
    ,'%s        "ProcessingComparisonTip": processingComparison,\n'...
    ,'%s        "UnitsMismatchTip": unitsMismatch,\n'...
    ,'%s        "EmptyBaselineTip": emptyBaseline,\n'...
    ,'%s        "UnitsMismatchStatus": unitsMismatchStatus,\n'...
    ,'%s        "DatatypesMismatchStatus": datatypesMismatchStatus,\n'...
    ,'%s        "UnalignedStatus": unalignedStatus,\n'...
    ,'%s        "CanceledStatus": canceledStatus,\n'...
    ,'%s        "TimeMismatchStatus": timeMismatchStatus,\n'...
    ,'%s        "StartStopTimesMismatchStatus": startStopTimesMismatchStatus,\n'...
    ,'%s        "UnsupportedStatus": unsupportedStatus,\n'...
    ,'%s        "EmptySyncedStatus": emptySyncedStatus,\n'...
    ,'%s        "EmptySignalsStatus": emptySignalsStatus,\n'...
    ,'%s    };\n'...
    ,'%s    return obj;\n'...
    ,'%s}'],...
    space,...
    space,reportName,...
    space,reportTitle,...
    space,reportAuthor,...
    space,datestr(now),...
    space,sprintf('R%s',version('-release')),...
    space,labels.ComparisonLabel,...
    space,labels.PropertiesLabel,...
    space,labels.BaselineLabel,...
    space,labels.CompareToLabel,...
    space,labels.Summary,...
    space,labels.Interactive,...
    space,labels.Printable,...
    space,rowsToReport,...
    space,enumArrayToChar(colsToReport),...
    space,tooltips.Matched,...
    space,tooltips.Unmatched,...
    space,tooltips.UnmatchedEmptySynced,...
    space,tooltips.Empty,...
    space,tooltips.Canceled,...
    space,tooltips.Unsupported,...
    space,tooltips.DatatypeMismatch,...
    space,tooltips.TimeMismatch,...
    space,tooltips.StartStopMismatch,...
    space,tooltips.NotCompared,...
    space,tooltips.Unaligned,...
    space,tooltips.Unprocessed,...
    space,tooltips.UnknownStatus,...
    space,tooltips.ProcessingComparison,...
    space,tooltips.UnitsMismatch,...
    space,tooltips.EmptyBaseline,...
    space,labels.UnitsMismatchStatus,...
    space,labels.DatatypesMismatchStatus,...
    space,labels.UnalignedStatus,...
    space,labels.CanceledStatus,...
    space,labels.TimeMismatchStatus,...
    space,labels.StartStopTimesMismatchStatus,...
    space,labels.UnsupportedStatus,...
    space,labels.EmptySyncedStatus,...
    space,labels.EmptySignalsStatus,...
    labels.PropertyNames,...
    labels.PropertyIds,...
    labels.PropertyVars,...
    space,...
    space,...
    space,...
    space,...
    space,labels.Result,labels.MaxDiff,...
    space,...
    space,...
    space,...
    space,...
    labels.ColumnHeaders,...
    labels.ColumnNames,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space,...
    space);

    if~singleFile
        fileNameJs=sprintf('cmprReportData.js');
        filePathJs=fullfile(reportDir,'sdicmprrpt','js',fileNameJs);
        fid=fopen(filePathJs,'w');
        fprintf(fid,'%s',dataJsTxt);
        fclose(fid);
    end
end

function charArray=enumArrayToChar(enumArray)
    enumArray=cellstr(enumArray);
    for n=1:numel(enumArray)
        if numel(enumArray)>1
            if n==1
                charArray=['[''',enumArray{n},''', '];
            elseif n==numel(enumArray)
                charArray=[charArray,'''',enumArray{n},''']'];%#ok<AGROW>
            else
                charArray=[charArray,'''',enumArray{n},''', '];%#ok<AGROW>
            end
        else
            charArray=['''',enumArray{n},''''];
        end
    end
end

function out=getTitle(str,drr)
    if strcmp(str,'Default')

        try
            baseSigRunName=Simulink.sdi.getRun(drr.RunID1).name;
        catch
            baseSigRunName='';
        end
        try
            cmprSigRunName=Simulink.sdi.getRun(drr.RunID2).name;
        catch
            cmprSigRunName='';
        end
        labels=buildLabels(blanks(0));
        reportType=labels.Compare;
        baseSigRun=baseSigRunName;
        cmprSigRun=cmprSigRunName;
        if isempty(baseSigRun)||isempty(cmprSigRun)
            out=sprintf('%s: ',reportType);
        else
            out=sprintf('%s: %s vs. %s',reportType,baseSigRun,cmprSigRun);
        end
    else
        out=str;
    end
    out=Simulink.sdi.internal.controllers.ReportDialog.jsUpdateStr(out);
end

function out=getAuthor(str)
    if strcmp(str,'Default')
        username=getenv('username');
        out=username;
    else
        out=str;
    end
    out=Simulink.sdi.internal.controllers.ReportDialog.jsUpdateStr(out);
end

function tooltips=buildTooltips()
    tooltips.Matched=getString(message('SDI:dialogs:MatchedTooltip'));
    tooltips.Unmatched=getString(message('SDI:sdi:UnmatchedTooltip'));
    tooltips.UnmatchedEmptySynced=getString(message('SDI:sdi:EmptySyncedTooltip'));
    tooltips.Empty=getString(message('SDI:sdi:EmptyTooltip'));
    tooltips.Canceled=getString(message('SDI:sdi:CanceledSummaryStatus'));
    tooltips.Unsupported=getString(message('SDI:sdi:UnsupportedTooltip'));
    tooltips.DatatypeMismatch=getString(message('SDI:sdi:DatatypeMismatchTooltip'));
    tooltips.TimeMismatch=getString(message('SDI:sdi:TimeMismatchTooltip'));
    tooltips.StartStopMismatch=getString(message('SDI:sdi:StartStopMismatchTooltip'));
    tooltips.NotCompared=getString(message('SDI:sdi:NotComparedStatus'));
    tooltips.Unaligned=getString(message('SDI:sdi:UnalignedTooltip'));
    tooltips.Unprocessed=getString(message('SDI:sdi:UnprocessedTooltip'));
    tooltips.UnknownStatus=getString(message('SDI:dialogs:UnknownStatusTooltip'));
    tooltips.ProcessingComparison=getString(message('SDI:sdi:ProcessingComparisonTooltip'));
    tooltips.UnitsMismatch=getString(message('SDI:sdi:UnitsMismatchTooltip'));
    tooltips.EmptyBaseline=getString(message('SDI:sdi:EmptyBaselineTooltip'));
end

function labels=buildLabels(space)
    labels.ComparisonLabel=getString(message('SDI:dialogs:Comparisons'));
    labels.Compare=getString(message('SDI:dialogs:Compare'));
    labels.PropertiesLabel=getString(message('SDI:sdi:SPProperties'));
    labels.BaselineLabel=getString(message('SDI:sdi:mgRun1'));
    labels.CompareToLabel=getString(message('SDI:sdi:mgRun2'));

    labels.UnitsMismatchStatus=getString(message('SDI:sdi:UnitsMismatchStatus'));
    labels.DatatypesMismatchStatus=getString(message('SDI:sdi:DatatypesMismatchStatus'));
    labels.UnalignedStatus=getString(message('SDI:sdi:UnalignedStatus','Arg1','Arg2'));
    labels.CanceledStatus=getString(message('SDI:sdi:CanceledStatus'));
    labels.TimeMismatchStatus=getString(message('SDI:sdi:TimeMismatchStatus'));
    labels.StartStopTimesMismatchStatus=getString(message('SDI:sdi:StartStopTimesMismatchStatus'));
    labels.UnsupportedStatus=getString(message('SDI:sdi:UnsupportedStatus'));
    labels.EmptySyncedStatus=getString(message('SDI:sdi:EmptySyncedStatus'));
    labels.EmptySignalsStatus=getString(message('SDI:sdi:EmptySignalsStatus'));

    baseLbl=getString(message('SDI:sdi:mgRun1Short'));
    cmprLbl=getString(message('SDI:sdi:mgRun2Short'));
    nameLbl=getString(message('SDI:sdi:mgNameLabel'));
    absTolLbl=getString(message('SDI:sdi:mgAbsTolV2'));
    relTolLbl=getString(message('SDI:sdi:mgRelTolV2'));
    maxDiffLbl=getString(message('SDI:sdi:mgMaxDiff'));
    resultLbl=getString(message('SDI:sdi:mgTest'));
    absTolLblShrt=getString(message('SDI:sdi:mgAbsTolV2Short'));
    relTolLblShrt=getString(message('SDI:sdi:mgRelTolV2Short'));
    maxDiffLblShrt=getString(message('SDI:sdi:mgMaxDiffShort'));
    testLbl=getString(message('SDI:sdi:mgTest'));
    blkPthLbl=getString(message('SDI:sdi:IGBlockSourceColName'));
    dataSrcLbl=getString(message('SDI:sdi:IGDataSourceColName'));
    dataSrcLblShrt=getString(message('SDI:sdi:IGDataSourceColNameShort'));
    blkNameLbl=getString(message('SDI:sdi:mgBlockName'));
    descLbl=getString(message('SDI:sdi:mgDescription'));
    syncMethodLbl=getString(message('SDI:sdi:mgSyncMethod'));
    intrpMethodLbl=getString(message('SDI:sdi:mgInterpMethodV2'));
    runLbl=getString(message('SDI:sdi:mgRun'));
    alignLbl=getString(message('SDI:sdi:mgAlignedBy'));
    chnlLbl=getString(message('SDI:sdi:mgChannel'));
    mdlLbl=getString(message('SDI:sdi:IGModelSourceColName'));
    dimLbl=getString(message('SDI:sdi:mgDimension'));
    timeSrsRtLbl=getString(message('SDI:sdi:IGRootSourceColName'));
    timeSrcLbl=getString(message('SDI:sdi:IGTimeSourceColName'));
    lineLbl=getString(message('SDI:sdi:mgLine'));
    colorLbl=getString(message('SDI:sdi:MGInspactColNameColor'));
    dashedLbl=getString(message('SDI:sdi:DashedLabel'));
    portLbl=getString(message('SDI:sdi:IGPortIndexColName'));
    unitsLbl=getString(message('SDI:sdi:mgUnits'));
    dataTypeLbl=getString(message('SDI:sdi:DataTypeLbl'));
    sampleTimeLbl=getString(message('SDI:sdi:SampleTimeLbl'));
    timeTolLbl=getString(message('SDI:sdi:mgTimeTol'));
    timeTolLblShrt=getString(message('SDI:sdi:mgTimeTolShort'));
    overRideGlblTolLbl=getString(message('SDI:sdi:mgOverrideGlobalTol'));
    overRideGlblTolLblShrt=getString(message('SDI:sdi:mgOverrideGlobalTolShort'));
    reportSummaryLbl=getString(message('SDI:sdi:rgReportSummary'));
    reportInteractiveLbl=getString(message('SDI:sdi:rgWebStyleLabel'));
    reportPrintableLbl=getString(message('SDI:sdi:rgPrintableLabel'));

    labels.ColumnHeaders=sprintf([...
'%slet colHeaders = [''%s (%s)'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s %s (%s)'', ''%s %s (%s)'',\n'...
    ,'%s    ''%s %s (%s)'', ''%s %s (%s)'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s (%s)'', ''%s (%s)'',\n'...
    ,'%s    ''%s (%s)'', ''%s (%s)'', ''%s'', ''%s''];'],...
    space,nameLbl,baseLbl,absTolLblShrt,relTolLblShrt,maxDiffLblShrt,...
    space,testLbl,nameLbl,cmprLbl,blkPthLbl,baseLbl,blkPthLbl,cmprLbl,...
    space,dataSrcLblShrt,baseLbl,dataSrcLblShrt,cmprLbl,blkNameLbl,baseLbl,...
    space,blkNameLbl,cmprLbl,descLbl,syncMethodLbl,intrpMethodLbl,...
    space,runLbl,baseLbl,runLbl,cmprLbl,alignLbl,chnlLbl,baseLbl,chnlLbl,cmprLbl,...
    space,mdlLbl,baseLbl,mdlLbl,cmprLbl,dimLbl,baseLbl,dimLbl,cmprLbl,...
    space,timeSrsRtLbl,baseLbl,timeSrsRtLbl,cmprLbl,timeSrcLbl,baseLbl,...
    space,timeSrcLbl,cmprLbl,lineLbl,colorLbl,baseLbl,lineLbl,colorLbl,cmprLbl,...
    space,lineLbl,dashedLbl,baseLbl,lineLbl,dashedLbl,cmprLbl,portLbl,baseLbl,portLbl,cmprLbl,...
    space,unitsLbl,baseLbl,unitsLbl,cmprLbl,dataTypeLbl,baseLbl,dataTypeLbl,cmprLbl,...
    space,sampleTimeLbl,baseLbl,sampleTimeLbl,cmprLbl,timeTolLblShrt,overRideGlblTolLblShrt);

    labels.ColumnNames=sprintf([...
'%slet colNames = [''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s''];'],...
    space,'SignalName','AbsTol1','RelTol1','MaxDifference','Result',...
    space,'SignalName2','BlockPath1','BlockPath2','DataSource1','DataSource2',...
    space,'BlockName1','BlockName2','SignalDescription1','SyncMethod1',...
    space,'InterpMethod1','Run1','Run2','AlignBy1','Channel1','Channel2',...
    space,'Model1','Model2','Dimensions1','Dimensions2','TimeSeriesRoot1',...
    space,'TimeSeriesRoot2','TimeSource1','TimeSource2','LineColor1','LineColor2',...
    space,'LineDashed1','LineDashed2','Port1','Port2','Units1','Units2',...
    space,'SigDataType1','SigDataType2','SigSampleTime1','SigSampleTime2','TimeTol1',...
    space,'OverrideGlobalTol1');

    labels.PropertyNames=sprintf([...
'%slet propertyNames = [''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', \n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s''];'],...
    space,nameLbl,descLbl,lineLbl,overRideGlblTolLbl,...
    space,absTolLbl,relTolLbl,timeTolLbl,unitsLbl,dataTypeLbl,sampleTimeLbl,...
    space,runLbl,alignLbl,mdlLbl,blkNameLbl,blkPthLbl,portLbl,dimLbl,chnlLbl,...
    space,intrpMethodLbl,syncMethodLbl,timeSrsRtLbl,timeSrcLbl,dataSrcLbl);

    labels.PropertyIds=sprintf([...
'%slet propertyIds = [''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', \n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s''];'],...
    space,'Name','Description','Line','Override Global Tolerance',...
    space,'Absolute Tolerance','Relative Tolerance','Time Tolerance','Units','Data Type','Sample Time',...
    space,'Run','Align By','Model','Block Name','Block Path','Port','Dimensions','Channel',...
    space,'Interp Method','Sync Method','Time Series Root','Time Source','Data Source');

    labels.PropertyVars=sprintf([...
'%slet propertyVars = [''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'',\n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', ''%s'', \n'...
    ,'%s    ''%s'', ''%s'', ''%s'', ''%s'', ''%s''];'],...
    space,'SignalName','SignalDescription','LineColor','OverrideGlobalTol',...
    space,'AbsTol','RelTol','TimeTol','Units','SigDataType','SigSampleTime',...
    space,'Run','AlignBy','Model','BlockName','BlockPath','Port','Dimensions','Channel',...
    space,'InterpMethod','SyncMethod','TimeSeriesRoot','TimeSource','DataSource');

    labels.MaxDiff=maxDiffLbl;
    labels.Result=resultLbl;
    labels.Summary=reportSummaryLbl;
    labels.Interactive=reportInteractiveLbl;
    labels.Printable=reportPrintableLbl;
end

function base64str=file2base64(file)
    base64str=Simulink.sdi.getCanvasURL(file);
end

function status=copyFiles(reportDir,reportName,htmlPathSrc,jsPathSrc,cssPathSrc)
    [~,~,~]=fileparts(htmlPathSrc);
    [~,nameJs,extJs]=fileparts(jsPathSrc);
    [~,nameCss,extCss]=fileparts(cssPathSrc);

    htmlPathDst=fullfile(reportDir,'sdicmprrpt',reportName);
    jsPathDst=fullfile(reportDir,'sdicmprrpt','js',[nameJs,extJs]);
    cssPathDst=fullfile(reportDir,'sdicmprrpt','css',[nameCss,extCss]);

    [status1,~]=copyfile(htmlPathSrc,htmlPathDst);
    [status2,~]=copyfile(jsPathSrc,jsPathDst);
    [status3,~]=copyfile(cssPathSrc,cssPathDst);

    if(status1&&status2&&status3)
        status=1;
    else
        status=0;
    end
end

function status=createFolderStructure(reportDir)
    [status1,~]=mkdir(fullfile(reportDir,'sdicmprrpt','css'));
    [status2,~]=mkdir(fullfile(reportDir,'sdicmprrpt','image'));
    [status3,~]=mkdir(fullfile(reportDir,'sdicmprrpt','js'));
    [status4,~]=mkdir(fullfile(reportDir,'sdicmprrpt','json'));

    if(status1&&status2&&status3&&status4)
        status=1;
    else
        status=0;
    end
end

function mergeFiles(reportTmpCmb,imgJs,reportJs,jsonJs,reportDir,reportName,reportCmprPath)

    dataReportTmpCmb=fileread(reportTmpCmb);


    dataImgJs=sprintf('<script type="text/javascript">\n%s\n    </script>\n',imgJs);
    dataReportJs=sprintf('<script type="text/javascript">\n%s\n    </script>\n',reportJs);
    dataJsonJs=sprintf('<script type="text/javascript">\n%s\n    </script>\n',jsonJs);


    dataReportTmpCmb=strrep(dataReportTmpCmb,'<script type="text/javascript" src="js/cmprJsonData.js"></script>',dataJsonJs);
    dataReportTmpCmb=strrep(dataReportTmpCmb,'<script type="text/javascript" src="js/cmprReportData.js"></script>',dataReportJs);
    dataReportTmpCmb=strrep(dataReportTmpCmb,'<script type="text/javascript" src="js/cmprImageData.js"></script>',dataImgJs);


    if Simulink.sdi.enableComparisonReportSorting
        sortFlag=sprintf(...
        '<script type="text/javascript">\n%s\n    </script></body>\n',...
'var isSortingEnabled = true;'...
        );
    else
        sortFlag=sprintf(...
        '<script type="text/javascript">\n%s\n    </script></body>\n',...
'var isSortingEnabled = false;'...
        );
    end
    dataReportTmpCmb=strrep(dataReportTmpCmb,'</body>',sortFlag);
    if Simulink.sdi.enableComparisonReportGrouping
        groupFlag=sprintf(...
        '<script type="text/javascript">\n%s\n    </script></body>\n',...
'var isGroupingEnabled = true;'...
        );
    else
        groupFlag=sprintf(...
        '<script type="text/javascript">\n%s\n    </script></body>\n',...
'var isGroupingEnabled = false;'...
        );
    end
    dataReportTmpCmb=strrep(dataReportTmpCmb,'</body>',groupFlag);
    if Simulink.sdi.enableComparisonReportSorting||Simulink.sdi.enableComparisonReportGrouping
        cssSortFile=fullfile(reportCmprPath,'css','cmprReportSortingGrouping.css');
        dataSortCss=sprintf(...
        '<style>\n%s\n</style>\n</head>\n',...
        fileread(cssSortFile)...
        );
        dataReportTmpCmb=strrep(dataReportTmpCmb,'</head>',dataSortCss);
    end


    fid=fopen(fullfile(reportDir,reportName),'w','n','UTF-8');
    fprintf(fid,'%s',dataReportTmpCmb);
    fclose(fid);
end

function out=subResult(inputValue,inputMap,outputMap)
    index=find(inputValue==inputMap);
    if~isempty(index)
        assert(numel(index)==1);
        out=outputMap(index);
    else
        out=inputValue;
    end
end

function jsonStrFmt=jsonFormat(varargin)


    parser=inputParser;
    addRequired(parser,'JSON',@(x)validateattributes(x,{'char','string'},{'scalartext'}));
    addParameter(parser,'Format','pretty',@(x)validateattributes(x,{'char','string'},{'scalartext'}));
    addParameter(parser,'Indent',4,@(x)validateattributes(x,{'numeric'},{'nonempty','integer','positive'}));
    parse(parser,varargin{:});

    jsonStr=parser.Results.JSON;
    format=validatestring(parser.Results.Format,{'compact','pretty'});
    indent=parser.Results.Indent;


    expression=[...
    '(?<NAME>"[a-zA-Z]{1}[a-zA-Z0-9_]*"(?=:))|',...
    '(?<STRING>"[^"]*?")|',...
    '(?<LCURLY>{)|',...
    '(?<RCURLY>})|',...
    '(?<LBRACE>[)|',...
    '(?<RBRACE>])|',...
    '(?<COMMA>,)|',...
    '(?<COLON>:)|',...
    '(?<NULL>null)|',...
    '(?<TRUE>true)|',...
    '(?<FALSE>false)|',...
    '(?<NUMBER>-?\d+\.\d+([eE][\+-]?\d+)?)|',...
    '(?<INT>-?\d+)|',...
    '($<OTHER>.*)'];
    tokens=regexp(jsonStr,expression,'match');


    if strcmp(format,'pretty')
        try
            endl=newline;
        catch
            endl=char(10);%#ok<CHARTEN>
        end
        skipl=false;
        count=0;
        for idx=1:numel(tokens)
            switch tokens{idx}
            case '{'
                if idx<numel(tokens)&&strcmp(tokens{idx+1},'}')
                    skipl=true;
                else
                    tokens{idx}=['{',endl,repmat(' ',1,indent*(count+1))];
                end
                count=count+1;
            case '['
                if idx<numel(tokens)&&strcmp(tokens{idx+1},']')
                    skipl=true;
                else
                    tokens{idx}=['[',endl,repmat(' ',1,indent*(count+1))];
                end
                count=count+1;
            case{'}',']'}
                if skipl
                    skipl=false;
                else
                    tokens{idx}=[endl,repmat(' ',1,indent*(count-1)),tokens{idx}];
                end
                count=count-1;
            case ':'
                tokens{idx}=': ';
            case ','
                tokens{idx}=[',',endl,repmat(' ',1,indent*(count))];
            end
        end
    end
    jsonStrFmt=strjoin(tokens,'');
end