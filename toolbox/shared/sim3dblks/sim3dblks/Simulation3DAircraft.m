classdef Simulation3DAircraft<Simulation3DActor





    properties
    end

    properties(Nontunable)



        Translation(:,3)double{mustBeFinite,mustBeReal}=zeros(11,3)




        Rotation(:,3)double{mustBeFinite,mustBeReal}=zeros(11,3)



        Mesh='Sky Hogg'


        MeshPath='/MathWorksAerospaceContent/Vehicles/Aircraft/Custom/Mesh/SK_HL20.SK_HL20'

        MeshPathAT='/MathWorksAerospaceContent/Vehicles/Aircraft/AirTransport/Mesh/SK_AirTransport.SK_AirTransport'

        MeshPathGA='/MathWorksAerospaceContent/Vehicles/Aircraft/GeneralAviation/Mesh/SK_GeneralAviation.SK_GeneralAviation'



        AircraftColor='Red'



        LightsConfig='Automatic lights'


        ActorTag='SimulinkAircraft1'





        GHRayLength(1,1)double{mustBeFinite,mustBePositive,mustBeReal}=1524



        GHBodyOffset(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=0.90



        GHFrontTireRadius(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=0.21



        GHLeftTireRadius(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=0.21


        GHRightTireRadius(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=0.21


        TaxiLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=150000;


        LandingLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=300000;


        TaxiLightConeAngle(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=36;


        LandingLightConeAngle(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=15;


        NavLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=500;


        BeaconLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=4000;


        StrobeLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=5000;


        PositionLightIntensity(1,1)double{mustBeFinite,mustBeNonnegative,mustBeReal}=500;


        CustomLeftLandingLightOrientation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        CustomLeftLandingLightLocation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        CustomRightLandingLightOrientation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        CustomRightLandingLightLocation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        CustomTaxiLightOrientation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        CustomTaxiLightLocation(1,3)double{mustBeFinite,mustBeReal}=[0,0,0];


        IsGHSensorEnabled(1,1)logical=true


        AreGHRaysVisible(1,1)logical=false
    end

    properties(Hidden,Constant)

        MeshSet=matlab.system.StringSet({'Sky Hogg','Airliner',...
        'General aviation','Air transport','Custom'})


        AircraftColorSet=matlab.system.StringSet({'Red','Orange','Yellow',...
        'Green','Cyan','Blue','Black','White','Silver','Metal'})


        LightsConfigSet=matlab.system.StringSet({'Automatic lights','Configurable lights','Lights off'})




        AviationRedColor=[1,0,0];


        AviationGreenColor=[0,1,0];


        AviationWhiteColor=[1,1,1];


        AirlinerLeftLandingLightOrientation=[0,-90,0];


        AirlinerLeftLandingLightLocation=[0,0,0];


        AirlinerRightLandingLightOrientation=[0,-90,0];


        AirlinerRightLandingLightLocation=[0,0,0];


        AirlinerTaxiLightOrientation=[-90,0,0];


        AirlinerTaxiLightLocation=[-5,0,-5];


        SkyHoggLeftLandingLightOrientation=[-90,0,0];


        SkyHoggLeftLandingLightLocation=[0,-1,-4];


        SkyHoggRightLandingLightOrientation=[-90,0,0];


        SkyHoggRightLandingLightLocation=[0,1,-4];


        LandingAttenuationRadius=60000;


        TaxiAttenuationRadius=10000;


        MatLightPath='/MathWorksSimulation/VehicleCommon/Materials/Lights/M_VehicleMatLight.M_VehicleMatLight';
    end

    properties(Access=private)

VehObj


VehicleType


ActorColor


        ModelName=[];


LightConfiguration


        RayLength1,RayLength2
    end

    methods(Access=protected)
        function[nrows,ncols]=getAircraftInputSize(obj)

            ncols=3;
            switch obj.Mesh
            case 'Sky Hogg'
                nrows=11;
            case 'Airliner'
                nrows=12;
            case 'General aviation'
                nrows=15;
            case 'Air transport'
                nrows=30;
            case 'Custom'
                nrows=57;
            otherwise
                nrows=11;
            end
        end

        function validatePropertiesImpl(obj)

            [nrows,ncols]=getAircraftInputSize(obj);

            szt=size(obj.Translation,1);
            szr=size(obj.Rotation,1);
            isok=(szt==szr);
            if isok
                isok=(szt==nrows);
            end
            if~isok
                error(message('shared_sim3dblks:sim3dblkAircraft:maskInputError',nrows,ncols));
            end
        end

        function validateInputsImpl(obj,translation,rotation,lightstates)

            [nrows,ncols]=getAircraftInputSize(obj);
            szt=size(translation);
            szr=size(rotation);
            isok=(numel(szt)==numel(szr))&&all(szt==szr);
            if isok
                isok=all(szt==[nrows,ncols]);
            end
            if~isok
                error(message('shared_sim3dblks:sim3dblkAircraft:blockInputError',nrows,ncols));
            end
            lightstatesSize=size(lightstates);
            if(~isequal(lightstatesSize,[7,1]))
                error(message('shared_sim3dblks:sim3dblkAircraft:invalidLightStatesSize'));
            end
        end

        function setupImpl(self)

            setupImpl@Simulation3DActor(self);
            self.ActorColor=lower(self.AircraftColor);
            self.VehicleType=sim3d.utils.internal.StringMap.fwd(self.Mesh);
            self.LightConfiguration=self.generateLightsConfig();
            if strcmp(self.VehicleType,'Custom')
                actorClass='FixedWingAircraft';
            else
                actorClass=[self.VehicleType,'Aircraft'];
            end


            if strcmp(self.VehicleType,'GeneralAviation')
                MP=self.MeshPathGA;
            elseif strcmp(self.VehicleType,'AirTransport')
                MP=self.MeshPathAT;
            else
                MP=self.MeshPath;
            end



            self.VehObj=sim3d.aircraft.(actorClass)(self.ActorTag,self.VehicleType,...
            'Color',self.ActorColor,...
            'Translation',self.Translation,...
            'Rotation',self.Rotation,...
            'Mesh',MP,...
            'LightConfiguration',self.LightConfiguration);
            self.VehObj.setup();
            self.VehObj.reset();
            self.ModelName=['Simulation3DAircraft/',self.ActorTag];



            self.RayLength1=min(self.GHRayLength,1E8);
            self.RayLength2=10.0;
            offsets=[min(self.GHBodyOffset,1E8),...
            min(self.GHFrontTireRadius,1E8),...
            min(self.GHLeftTireRadius,1E8),...
            min(self.GHRightTireRadius,1E8),...
            0.08,0.08];

            if strcmp(self.Mesh,'Airliner')
                offsets(5)=0.44;
                offsets(6)=0.44;
            elseif strcmp(self.Mesh,'AirTransport')
                offsets(5)=0.40;
                offsets(6)=0.40;
            elseif strcmp(self.Mesh,'Custom')
                offsets(5)=0.20;
                offsets(6)=0.20;
            end


            traceStart=[0,0,offsets(1);0,0,offsets(2);...
            0,0,offsets(3);0,0,offsets(4);...
            0,0,offsets(5);0,0,offsets(6)];
            dotrace=0;
            if self.IsGHSensorEnabled
                dotrace=1;
            end
            showrays=0;
            if self.AreGHRaysVisible
                showrays=1;
            end

            traceEnd=[dotrace,showrays,self.RayLength1;dotrace,showrays,self.RayLength1;...
            dotrace,showrays,self.RayLength1;dotrace,showrays,self.RayLength1;...
            dotrace,0,self.RayLength2;dotrace,0,self.RayLength2];
            self.VehObj.AircraftRayTraceSetup(traceStart,traceEnd);
        end

        function[altitudes,lwow]=stepImpl(self,translation,rotation,lightstates)

            [traceStart,traceEnd,status]=self.VehObj.AircraftRayTraceRead();
            altitudes=zeros(1,4);
            lwow=false;
            if status==0

                altitudes=double(traceStart(1:4,3)-traceEnd(1:4,3))';
                wowAltitudes=double(traceStart(5:6,3)-traceEnd(5:6,3))';

                altitudes(1,altitudes(1,1:4)<0)=-1;

                ongrnd=((wowAltitudes>0)&(wowAltitudes<0.20));
                lwow=any(ongrnd);
            end
            if coder.target('MATLAB')
                if~isempty(self.VehObj)
                    if strcmp(self.LightsConfig,'Configurable lights')
                        self.VehObj.LightModule.setVehicleLightStatesArray(sim3d.vehicle.VehicleLightingModule.AircraftLightCategories,lightstates);
                    elseif strcmp(self.LightsConfig,'Lights off')
                        self.VehObj.LightModule.setVehicleLightStatesArray(sim3d.vehicle.VehicleLightingModule.AircraftLightCategories,zeros(7,1));
                    end
                    self.VehObj.writeTransform(single(translation),single(rotation),single(ones(size(translation))));
                end
            end
        end

        function releaseImpl(self)

            simulationStatus=get_param(bdroot,'SimulationStatus');
            if strcmp(simulationStatus,'terminating')
                if coder.target('MATLAB')
                    if~isempty(self.VehObj)
                        self.VehObj.delete();
                        self.VehObj=[];
                    end
                end
            end
        end

        function loadObjectImpl(self,s,wasInUse)


            self.VehObj=s.VehObj;
            self.VehicleType=s.VehicleType;
            self.ActorColor=s.ActorColor;
            self.Translation=s.Translation;
            self.Rotation=s.Rotation;
            self.Mesh=s.Mesh;
            self.AircraftColor=s.AircraftColor;
            self.ActorTag=s.ActorTag;
            self.LightConfiguration=s.LightConfiguration;
            self.ModelName=s.ModelName;

            loadObjectImpl@Simulation3DActor(self,s,wasInUse);
        end

        function s=saveObjectImpl(self)


            s=saveObjectImpl@Simulation3DActor(self);

            s.VehObj=self.VehObj;
            s.VehicleType=self.VehicleType;
            s.ActorColor=self.ActorColor;
            s.Translation=self.Translation;
            s.Rotation=self.Rotation;
            s.Mesh=self.Mesh;
            s.AircraftColor=self.AircraftColor;
            s.ActorTag=self.ActorTag;
            s.LightConfiguration=self.LightConfiguration;
            s.ModelName=self.ModelName;
        end



        function num=getNumOutputsImpl(~)
            num=2;
        end
        function[sz1,sz2]=getOutputSizeImpl(~)
            sz1=[1,4];
            sz2=[1,1];
        end
        function[fz1,fz2]=isOutputFixedSizeImpl(~)
            fz1=true;
            fz2=true;
        end
        function[dt1,dt2]=getOutputDataTypeImpl(~)
            dt1='double';
            dt2='logical';
        end
        function[cp1,cp2]=isOutputComplexImpl(~)
            cp1=false;
            cp2=false;
        end
        function[pn1,pn2]=getOutputNamesImpl(~)

            pn1='Altitudes';
            pn2='WoW';
        end

        function icon=getIconImpl(~)

            icon={'Aircraft'};
        end
    end

    methods(Access=public)
        function[Translation,Rotation,Scale]=getPosition(self)
            [Translation,Rotation,Scale]=self.VehObj.read();
        end
    end


    methods(Access=private)
        function LightConfiguration=generateLightsConfig(self)









            LightConfiguration={};
            if strcmp(self.LightsConfig,'Automatic lights')
                return;
            end

            if strcmp(self.Mesh,'Airliner')














                LeftLandingLights=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','LLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','MWAirliner_Aircraft_Landing_Lights_Wing_L',...
                'RelativeTransform',[self.AirlinerLeftLandingLightOrientation,self.AirlinerLeftLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                LeftLandingLightMat=struct(...
                'LightType',"MatLight",...
                'Category',"LandingLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_Landing_Light_Wing_L',...
                'ParamName','LightOn',...
                'ParamOn',200,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RightLandingLights=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','RLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','MWAirliner_Aircraft_Landing_Lights_Wing_R',...
                'RelativeTransform',[self.AirlinerRightLandingLightOrientation,self.AirlinerRightLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                RightLandingLightMat=struct(...
                'LightType',"MatLight",...
                'Category',"LandingLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_Landing_Light_Wing_R',...
                'ParamName','LightOn',...
                'ParamOn',200,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TaxiLights=struct(...
                'LightType','Spotlight',...
                'Category',"TaxiLights",...
                'LightName','TL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.TaxiLightIntensity,...
                'SocketName','MWAirliner_Aircraft_Landing_Lights_F',...
                'RelativeTransform',[self.AirlinerTaxiLightOrientation,self.AirlinerTaxiLightLocation],...
                'AttenuationRadius',self.TaxiAttenuationRadius,...
                'InnerConeAngle',self.TaxiLightConeAngle,...
                'OuterConeAngle',self.TaxiLightConeAngle+18,...
                'ReverseState',false);
                TaxiLightsMat=struct(...
                'LightType',"MatLight",...
                'Category',"TaxiLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_Landing_Light_F',...
                'ParamName','LightOn',...
                'ParamOn',100,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RedNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_RedNavigationLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                GreenNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_GreenNavigationLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationGreenColor,...
                'ReverseState',false);
                LeftStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"WingtipStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_NavigationLight_L',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RightStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"WingtipStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_NavigationLight_R',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TailStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"TailStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_NavigationLightFin',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TopRedBeacon=struct(...
                'LightType',"MatLight",...
                'Category',"AnticollisionBeacons",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_RedAntiCollisionLight1',...
                'ParamName','LightOn',...
                'ParamOn',self.BeaconLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                BottomRedBeacon=struct(...
                'LightType',"MatLight",...
                'Category',"AnticollisionBeacons",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_MWAirliner_RedAntiCollisionLight2',...
                'ParamName','LightOn',...
                'ParamOn',self.BeaconLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                LightConfiguration={LeftLandingLights,LeftLandingLightMat,RightLandingLights,...
                RightLandingLightMat,TaxiLights,TaxiLightsMat,RedNavLight,GreenNavLight,...
                LeftStrobeLight,RightStrobeLight,TailStrobeLight,TopRedBeacon,BottomRedBeacon};
            elseif strcmp(self.Mesh,'Sky Hogg')












                LeftLandingLight=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','LLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','SkyHogg_Landing_Light',...
                'RelativeTransform',[self.SkyHoggLeftLandingLightOrientation,self.SkyHoggLeftLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius/2,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                RightLandingLight=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','RLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','SkyHogg_Landing_Light',...
                'RelativeTransform',[self.SkyHoggRightLandingLightOrientation,self.SkyHoggRightLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius/2,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                LandingLightsMat=struct(...
                'LightType',"MatLight",...
                'Category',"LandingLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_SkyHogg_Landing_Lights',...
                'ParamName','LightOn',...
                'ParamOn',100,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RedBeacon=struct(...
                'LightType',"MatLight",...
                'Category',"AnticollisionBeacons",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_SkyHogg_AntiCollisionBeacon',...
                'ParamName','LightOn',...
                'ParamOn',self.BeaconLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                TailStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"TailStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_SkyHogg_TailStrobeLight',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RedNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_SkyHogg_RedNavigationLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                GreenNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','M_SkyHogg_GreenNavigationLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationGreenColor,...
                'ReverseState',false);
                LightConfiguration={LeftLandingLight,RightLandingLight,LandingLightsMat,...
                RedBeacon,TailStrobeLight,RedNavLight,GreenNavLight};
            elseif(strcmp(self.Mesh,'Custom')||...
                strcmp(self.Mesh,'Air transport')||...
                strcmp(self.Mesh,'General aviation'))















                LeftLandingLights=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','LLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','LandingLight_L',...
                'RelativeTransform',[self.CustomLeftLandingLightOrientation,self.CustomLeftLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                LeftLandingLightMat=struct(...
                'LightType',"MatLight",...
                'Category',"LandingLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_LandingLight_L',...
                'ParamName','LightOn',...
                'ParamOn',200,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RightLandingLights=struct(...
                'LightType','Spotlight',...
                'Category',"LandingLights",...
                'LightName','RLL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.LandingLightIntensity,...
                'SocketName','LandingLight_R',...
                'RelativeTransform',[self.CustomRightLandingLightOrientation,self.CustomRightLandingLightLocation],...
                'AttenuationRadius',self.LandingAttenuationRadius,...
                'InnerConeAngle',self.LandingLightConeAngle,...
                'OuterConeAngle',self.LandingLightConeAngle+6,...
                'ReverseState',false);
                RightLandingLightMat=struct(...
                'LightType',"MatLight",...
                'Category',"LandingLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_LandingLight_R',...
                'ParamName','LightOn',...
                'ParamOn',200,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TaxiLights=struct(...
                'LightType','Spotlight',...
                'Category',"TaxiLights",...
                'LightName','TL',...
                'LightColor',self.AviationWhiteColor,...
                'Intensity',self.TaxiLightIntensity,...
                'SocketName','NoseGear_Light',...
                'RelativeTransform',[self.CustomTaxiLightOrientation,self.CustomTaxiLightLocation],...
                'AttenuationRadius',self.TaxiAttenuationRadius,...
                'InnerConeAngle',self.TaxiLightConeAngle,...
                'OuterConeAngle',self.TaxiLightConeAngle+18,...
                'ReverseState',false);
                TaxiLightsMat=struct(...
                'LightType',"MatLight",...
                'Category',"TaxiLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_NoseGear_Light',...
                'ParamName','LightOn',...
                'ParamOn',100,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RedNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_Wing_RedNavLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                GreenNavLight=struct(...
                'LightType',"MatLight",...
                'Category',"NavigationLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_Wing_GreenNavLight',...
                'ParamName','LightOn',...
                'ParamOn',self.NavLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationGreenColor,...
                'ReverseState',false);
                LeftStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"WingtipStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_Wing_StrobeLight_L',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                RightStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"WingtipStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_Wing_StrobeLight_R',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TailStrobeLight=struct(...
                'LightType',"MatLight",...
                'Category',"TailStrobeLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_Tail_StrobeLight',...
                'ParamName','LightOn',...
                'ParamOn',self.StrobeLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                TopRedBeacon=struct(...
                'LightType',"MatLight",...
                'Category',"AnticollisionBeacons",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_BeaconLight1',...
                'ParamName','LightOn',...
                'ParamOn',self.BeaconLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                BottomRedBeacon=struct(...
                'LightType',"MatLight",...
                'Category',"AnticollisionBeacons",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_BeaconLight2',...
                'ParamName','LightOn',...
                'ParamOn',self.BeaconLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationRedColor,...
                'ReverseState',false);
                PositionLight1=struct(...
                'LightType',"MatLight",...
                'Category',"PositionLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_PositionLight1',...
                'ParamName','LightOn',...
                'ParamOn',self.PositionLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                PositionLight2=struct(...
                'LightType',"MatLight",...
                'Category',"PositionLights",...
                'MatPath',self.MatLightPath,...
                'MatSlotName','MS_PositionLight2',...
                'ParamName','LightOn',...
                'ParamOn',self.PositionLightIntensity,...
                'ParamOff',0,...
                'LightColor',self.AviationWhiteColor,...
                'ReverseState',false);
                if strcmp(self.Mesh,'General aviation')
                    LightConfiguration={LeftLandingLights,LeftLandingLightMat,RightLandingLights,...
                    RightLandingLightMat,TaxiLights,TaxiLightsMat,RedNavLight,GreenNavLight,...
                    LeftStrobeLight,RightStrobeLight,TailStrobeLight,TopRedBeacon,...
                    PositionLight1};
                else
                    LightConfiguration={LeftLandingLights,LeftLandingLightMat,RightLandingLights,...
                    RightLandingLightMat,TaxiLights,TaxiLightsMat,RedNavLight,GreenNavLight,...
                    LeftStrobeLight,RightStrobeLight,TailStrobeLight,TopRedBeacon,...
                    BottomRedBeacon,PositionLight1,PositionLight2};
                end
            else
                LightConfiguration={};
            end
        end
    end
end
