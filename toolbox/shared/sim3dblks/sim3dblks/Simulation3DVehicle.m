classdef Simulation3DVehicle<Simulation3DActor&...
Simulation3DHandleMap





    properties
        Translation(5,3)double{mustBeFinite,mustBeReal,mustBeNonmissing}=zeros(5,3);
        Rotation(5,3)double{mustBeFinite,mustBeReal,mustBeNonmissing}=zeros(5,3);
        Scale(5,3)double{mustBeFinite,mustBeReal,mustBeNonmissing}=ones(5,3);
    end

    properties(Nontunable)

        PassVehMesh='Muscle car';

        VehColor='Red';

        ActorTag='SimulinkVehicle1';

        MeshPath='';

        EnableLightControls logical=false;

        LeftHeadlightOrientation(1,2)double{mustBeFinite,mustBeReal,mustBeNonmissing}=[0,0];

        LeftHeadlightLocation(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing}=[50,0,0];

        RightHeadlightOrientation(1,2)double{mustBeFinite,mustBeReal,mustBeNonmissing}=[0,0];

        RightHeadlightLocation(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing}=[50,0,0];

        HeadligtColor(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=[1,1,1];

        TaillightColor(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=[1,0,0];

        BrakelightColor(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=[1,0,0];

        ReverselightColor(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=[1,0.868,0.3234];

        SignallightColor(1,3)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=[1,0.146,0];

        HighBeamIntensity(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=100000;

        LowBeamIntensity(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=60000;

        AttenuationRadius(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=10000;

        HighBeamRadius(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=70;

        LowBeamRadius(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=70;

        BrakelightIntensity(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=500;

        ReverselightIntensity(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=500;

        IndicatorlightIntensity(1,1)double{mustBeFinite,mustBeReal,mustBeNonmissing,mustBeNonnegative}=500;

        MatPath='/MathWorksSimulation/VehicleCommon/Materials/Lights/M_VehicleMatLight.M_VehicleMatLight';
    end

    properties(Hidden,Constant)
        PassVehMeshSet=matlab.system.internal.MessageCatalogSet({'shared_sim3dblks:sim3dblkVehicle:musclecar',...
        'shared_sim3dblks:sim3dblkVehicle:sedan',...
        'shared_sim3dblks:sim3dblkVehicle:sportutilityvehicle',...
        'shared_sim3dblks:sim3dblkVehicle:smallpickuptruck',...
        'shared_sim3dblks:sim3dblkVehicle:hatchback',...
        'shared_sim3dblks:sim3dblkVehicle:boxtruck',...
        'shared_sim3dblks:sim3dblkVehicle:custom'});
        VehColorSet=matlab.system.internal.MessageCatalogSet({'shared_sim3dblks:sim3dblkVehicle:red',...
        'shared_sim3dblks:sim3dblkVehicle:orange',...
        'shared_sim3dblks:sim3dblkVehicle:yellow',...
        'shared_sim3dblks:sim3dblkVehicle:blue',...
        'shared_sim3dblks:sim3dblkVehicle:green',...
        'shared_sim3dblks:sim3dblkVehicle:white',...
        'shared_sim3dblks:sim3dblkVehicle:black',...
        'shared_sim3dblks:sim3dblkVehicle:silver'});
    end

    properties(Access=private)
VehObj
VehicleType
ActorColor
LightConfiguration
        ModelName=[];
    end

    methods(Access=protected)
        function setupImpl(self)
            setupImpl@Simulation3DActor(self);
            self.VehicleType=sim3d.utils.internal.StringMap.fwd(self.PassVehMesh);
            self.ActorColor=lower(self.VehColor);
            self.LightConfiguration={};
            if self.EnableLightControls
                self.LightConfiguration=self.generateLightsConfig();
            end
            self.VehObj=sim3d.auto.PassengerVehicle(self.ActorTag,self.VehicleType,...
            'Color',self.ActorColor,...
            'Translation',self.Translation,...
            'Rotation',self.Rotation,...
            'Scale',self.Scale,...
            'Mesh',self.MeshPath,...
            'LightConfiguration',self.LightConfiguration);
            self.VehObj.setup();
            self.VehObj.reset();
            self.ModelName=['Simulation3DVehicle/',self.ActorTag];
            if self.loadflag
                self.Sim3dSetGetHandle([self.ModelName,'/VehObj'],self.VehObj);
            end
        end
        function stepImpl(self,translation,rotation,scale,LightStates)

            translation(:,3)=-translation(:,3);
            rotation=[fliplr(rotation(:,1:2)),rotation(:,3)];
            if coder.target('MATLAB')
                if~isempty(self.VehObj)
                    if(self.EnableLightControls)
                        self.VehObj.LightModule.setVehicleLightStatesArray(sim3d.vehicle.VehicleLightingModule.PassVehLightCategories,[LightStates;LightStates(1)||LightStates(2)]);
                    end
                    self.VehObj.writeTransform(single(translation),single(rotation),single(scale));
                end
            end
        end
        function releaseImpl(self)
            simulationStatus=get_param(bdroot,'SimulationStatus');
            if strcmp(simulationStatus,'terminating')
                if coder.target('MATLAB')
                    if~isempty(self.VehObj)
                        self.VehObj.delete();
                        self.VehObj=[];
                        if self.loadflag
                            self.Sim3dSetGetHandle([self.ModelName,'/VehObj'],[]);
                        end
                    end
                end
            end
        end
        function resetImpl(~)

        end
        function loadObjectImpl(self,s,wasInUse)
            self.VehicleType=s.VehicleType;
            self.ActorColor=s.ActorColor;
            self.Translation=s.Translation;
            self.Rotation=s.Rotation;
            self.Scale=s.Scale;
            self.PassVehMesh=s.PassVehMesh;
            self.VehColor=s.VehColor;
            self.ActorTag=s.ActorTag;
            self.ModelName=s.ModelName;
            self.LightConfiguration=s.LightConfiguration;
            if self.loadflag
                self.VehObj=self.Sim3dSetGetHandle([self.ModelName,'/VehObj']);
            else
                self.VehObj=s.VehObj;
            end

            loadObjectImpl@Simulation3DActor(self,s,wasInUse);
        end
        function s=saveObjectImpl(self)
            s=saveObjectImpl@Simulation3DActor(self);
            s.VehObj=self.VehObj;
            s.VehicleType=self.VehicleType;
            s.ActorColor=self.ActorColor;
            s.Translation=self.Translation;
            s.Rotation=self.Rotation;
            s.Scale=self.Scale;
            s.PassVehMesh=self.PassVehMesh;
            s.VehColor=self.VehColor;
            s.ActorTag=self.ActorTag;
            s.ModelName=self.ModelName;
            s.LightConfiguration=self.LightConfiguration;
        end
        function icon=getIconImpl(~)
            icon={'Vehicle'};
        end

        function[nrows,ncols]=getInputPortSize(~)

            nrows=5;
            ncols=3;
        end

        function validateInputsImpl(self,translation,rotation,scale,LightStates)
            [nrows,ncols]=getInputPortSize(self);
            translationSize=size(translation);
            rotationSize=size(rotation);
            scaleSize=size(scale);
            lightstatesSize=size(LightStates);
            if(~isequal(translationSize,[nrows,ncols]))
                error(message('shared_sim3dblks:sim3dsharederrAutoIcon:invalidTranslationSize',nrows,ncols));
            end
            if(~isequal(rotationSize,[nrows,ncols]))
                error(message('shared_sim3dblks:sim3dsharederrAutoIcon:invalidRotationSize',nrows,ncols));
            end
            if(~isequal(scaleSize,[nrows,ncols]))
                error(message('shared_sim3dblks:sim3dsharederrAutoIcon:invalidScaleSize',nrows,ncols));
            end
            if(~isequal(lightstatesSize,[6,1]))
                error(message('shared_sim3dblks:sim3dsharederrAutoIcon:invalidLightStatesSize',lightstatesSize(1),lightstatesSize(2)));
            end
        end
    end

    methods(Access=public)
        function[Transformation,Rotation,Scale]=getPosition(self)
            [Transformation,Rotation,Scale]=self.VehObj.readTransform();
        end
    end

    methods(Access=private)
        function LightConfiguration=generateLightsConfig(self)
            LightConfiguration={};
            if(~self.EnableLightControls)
                return;
            end
            self.ApplyCoordinateTransformToLightParams();
            LeftHighBeam=struct(...
            'LightType','Spotlight',...
            'Category',"HighBeams",...
            'LightName','LHB',...
            'LightColor',self.HeadligtColor,...
            'Intensity',self.HighBeamIntensity,...
            'SocketName','Lights_Headlight_Left',...
            'RelativeTransform',[self.LeftHeadlightOrientation,0,self.LeftHeadlightLocation],...
            'AttenuationRadius',self.AttenuationRadius,...
            'InnerConeAngle',self.HighBeamRadius,...
            'OuterConeAngle',self.HighBeamRadius+10,...
            'ReverseState',false);
            RightHighBeam=struct(...
            'LightType','Spotlight',...
            'Category',"HighBeams",...
            'LightName','RHB',...
            'LightColor',self.HeadligtColor,...
            'Intensity',self.HighBeamIntensity,...
            'SocketName','Lights_Headlight_Right',...
            'RelativeTransform',[self.RightHeadlightOrientation,0,self.RightHeadlightLocation],...
            'AttenuationRadius',self.AttenuationRadius,...
            'InnerConeAngle',self.HighBeamRadius,...
            'OuterConeAngle',self.HighBeamRadius+10,...
            'ReverseState',false);
            LeftLowBeam=struct(...
            'LightType','Spotlight',...
            'Category',"LowBeams",...
            'LightName','LLB',...
            'LightColor',self.HeadligtColor,...
            'Intensity',self.LowBeamIntensity,...
            'SocketName','Lights_Headlight_Left',...
            'RelativeTransform',[self.LeftHeadlightOrientation,0,self.LeftHeadlightLocation],...
            'AttenuationRadius',self.AttenuationRadius,...
            'InnerConeAngle',self.LowBeamRadius,...
            'OuterConeAngle',self.LowBeamRadius+10,...
            'ReverseState',false);
            RightLowBeam=struct(...
            'LightType','Spotlight',...
            'Category',"LowBeams",...
            'LightName','RLB',...
            'LightColor',self.HeadligtColor,...
            'Intensity',self.LowBeamIntensity,...
            'SocketName','Lights_Headlight_Right',...
            'RelativeTransform',[self.RightHeadlightOrientation,0,self.RightHeadlightLocation],...
            'AttenuationRadius',self.AttenuationRadius,...
            'InnerConeAngle',self.LowBeamRadius,...
            'OuterConeAngle',self.LowBeamRadius+10,...
            'ReverseState',false);
            HeadlightMat=struct(...
            'LightType',"MatLight",...
            'Category',"MatHeadlights",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_Headlight',...
            'ParamName','LightOn',...
            'ParamOn',5000,...
            'ParamOff',0,...
            'LightColor',self.HeadligtColor,...
            'ReverseState',false);
            TaillightMat=struct(...
            'LightType',"MatLight",...
            'Category',"TailLights",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_TailLight',...
            'ParamName','LightOn',...
            'ParamOn',100,...
            'ParamOff',0,...
            'LightColor',self.TaillightColor,...
            'ReverseState',false,...
            'InitState',true);
            BrakeLight=struct(...
            'LightType',"MatLight",...
            'Category',"BrakeLights",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_Brakelight',...
            'ParamName','LightOn',...
            'ParamOn',self.BrakelightIntensity,...
            'ParamOff',0,...
            'LightColor',self.BrakelightColor,...
            'ReverseState',false);
            ReverseLight=struct(...
            'LightType',"MatLight",...
            'Category',"ReverseLights",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_Reverselight',...
            'ParamName','LightOn',...
            'ParamOn',self.ReverselightIntensity,...
            'ParamOff',0,...
            'LightColor',self.ReverselightColor,...
            'ReverseState',false);
            LeftSignal=struct(...
            'LightType',"MatLight",...
            'Category',"LeftSignals",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_IndicatorlightLeft',...
            'ParamName','LightOn',...
            'ParamOn',self.IndicatorlightIntensity,...
            'ParamOff',0,...
            'LightColor',self.SignallightColor,...
            'ReverseState',false);
            RightSignal=struct(...
            'LightType',"MatLight",...
            'Category',"RightSignals",...
            'MatPath',self.MatPath,...
            'MatSlotName','M_IndicatorlightRight',...
            'ParamName','LightOn',...
            'ParamOn',self.IndicatorlightIntensity,...
            'ParamOff',0,...
            'LightColor',self.SignallightColor,...
            'ReverseState',false);
            LightConfiguration={LeftHighBeam,RightHighBeam,LeftLowBeam,RightLowBeam,HeadlightMat,TaillightMat,BrakeLight,ReverseLight,LeftSignal,RightSignal};
        end

        function ApplyCoordinateTransformToLightParams(self)
            self.LeftHeadlightOrientation=rad2deg(self.LeftHeadlightOrientation);
            self.RightHeadlightOrientation=rad2deg(self.RightHeadlightOrientation);
            self.HighBeamRadius=rad2deg(self.HighBeamRadius);
            self.LowBeamRadius=rad2deg(self.LowBeamRadius);

        end
    end
end