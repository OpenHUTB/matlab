function hList=loop_getLoopObjects(c)






    if c.isSFFilterList
        searchTerms=rptgen_sf.findTerms(c.SFFilterTerms);
    else
        searchTerms={};
    end

    if strcmp(c.Depth,'local')
        depthTerms={'-depth',1};
    else
        depthTerms={};
    end

    adSF=rptgen_sf.appdata_sf;

    [parentID,sfContext]=getContextObject(adSF);

    if isempty(parentID)
        hList=[];
        return;
    end










    if isa(parentID,'Stateflow.Machine')
        charts=find(parentID,'-isa','Stateflow.Chart');
        if isempty(charts)
            hList=[];
            return;
        end
    end

    if strcmpi(sfContext,'object')
        depthTerms={'-depth',0};
    end

    termTypes=listTerminalTypes(adSF);
    typeFilter={};
    for i=1:length(termTypes)
        if get(c,['isReport',termTypes{i}])
            if~isempty(typeFilter)
                typeFilter{end+1}='-or';%#ok<AGROW>
            end

            thisFilter={'-isa',['Stateflow.',termTypes{i}]};
            if c.RemoveRedundant
                switch termTypes{i}



                case{'Transition','Junction','Note','Annotation','Port'}
                    thisFilter{end+1}={{'-not','Description',''},...
                    '-or',...
                    {'-not','Document',''}};%#ok<AGROW>
                otherwise

                end
            end
            typeFilter{end+1}=thisFilter;%#ok<AGROW>
        end
    end


    if c.SkipAutogenerated
        filterTerms={'-function',@isNotAutogenerated};
    else
        filterTerms={};
    end



    filterTerms=[filterTerms,{'-function',@isNotDescendantOfSFDerivedBlock}];

    hList=find(parentID,...
    depthTerms{:},...
    typeFilter,...
    filterTerms{:},...
    searchTerms{:});

    hList=hList(:);


    propsrc=c.loop_getPropSrc;
    [~,sortIdx]=sort(lower(propsrc.getPropValue(hList,'Name',true)));
    hList=hList(sortIdx);


    function tf=isNotAutogenerated(sfID)




        tf=rptgen_sf.isNotAutogenerated(sfID);

        function tf=isNotDescendantOfSFDerivedBlock(sfObj)
            parent=sfObj.up;
            while~isempty(parent)
                if isa(parent,'Stateflow.EMChart')||isa(parent,'Stateflow.StateTransitionTableChart')||isa(parent,'Stateflow.TruthTableChart')
                    break;
                else
                    parent=parent.up;
                end
            end
            tf=isempty(parent);
