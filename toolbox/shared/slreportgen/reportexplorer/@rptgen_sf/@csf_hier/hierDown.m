function[nDown,isAll]=hierDown(this,thisNode)







    isAll=true;
    if isa(thisNode,'Simulink.Root')||isa(thisNode,'Stateflow.Root')
        nDown=find(thisNode,'-isa','Stateflow.Machine');
    elseif isa(thisNode,'Stateflow.Machine')
        nDown=find(thisNode,'-isa','Stateflow.Chart');
        cDown=rptgen_ud.getChildren(thisNode);
        nDown=locGroupChildren(this,[cDown(:);nDown(:)]);
    elseif isa(thisNode,'Stateflow.Object')
        nDown=rptgen_ud.getChildren(thisNode);
        nDown=locGroupChildren(this,nDown);
    else
        nDown=[];
        isAll=false;
    end


    function nDown=locGroupChildren(this,nDown)

        if isempty(nDown)
            return;
        end

        groupTypes=listTerminalTypes(rptgen_sf.appdata_sf);

        if this.SkipAutogenerated

            filterTerms={'-function',@isNotAutogenerated};
        else
            filterTerms={};
        end

        nDownCell={};
        for i=1:length(groupTypes)
            foundTypes=find(nDown,...
            '-depth',0,...
            '-isa',['Stateflow.',groupTypes{i}]);
            if~isempty(foundTypes)
                nDown=setdiff(nDown,foundTypes);
                switch groupTypes{i}
                case{'Transition','Junction','Port'}
                    switch get(this,['Show',groupTypes{i},'s'])
                    case 'all'
                        if~isempty(filterTerms)
                            foundTypes=find(foundTypes,...
                            '-depth',0,...
                            filterTerms{:});
                        end
                    case 'informative'
                        foundTypes=find(foundTypes,'-depth',0,{
                        {'-not','Description',''}
'-or'
                        {'-not','Document',''}
'-or'
                        {'-not','LabelString','?'}
                        },filterTerms{:});
                    case 'nonredundant'
                        foundTypes=find(foundTypes,'-depth',0,{
                        {'-not','Description',''}
'-or'
                        {'-not','Document',''}
                        },filterTerms{:});
                    case 'labeled'
                        foundTypes=find(foundTypes,'-depth',0,...
                        {'-not','LabelString','?'});
                    case 'none'
                        foundTypes=[];
                    end
                case 'Data'
                    if~isempty(filterTerms)
                        foundTypes=find(foundTypes,...
                        '-depth',0,...
                        filterTerms{:});
                    end




                end

                if~isempty(foundTypes)
                    thisCell=createElement(this.RuntimeDocument,'simpara',groupTypes{i},': ');
                    for j=1:length(foundTypes)-1
                        thisCell.appendChild(makeLinkScalar(this.RuntimePropSrc,...
                        foundTypes(j),...
                        '',...
                        'link',...
                        this.RuntimeDocument));

                        thisCell.appendChild(this.RuntimeDocument.createTextNode(', '));
                    end
                    thisCell.appendChild(makeLinkScalar(this.RuntimePropSrc,...
                    foundTypes(end),...
                    '',...
                    'link',...
                    this.RuntimeDocument));

                    nDownCell{end+1}=thisCell;
                end
            end
        end

        dcLength=length(nDownCell);
        if dcLength>0
            for i=1:length(nDown)

                if~(this.SkipAutogenerated&&~rptgen_sf.isNotAutogenerated(nDown(i)))
                    nDownCell{end+1}=nDown(i);
                end
            end
            nDown=nDownCell;
        end


        function tf=isNotAutogenerated(sfID)




            tf=rptgen_sf.isNotAutogenerated(sfID);
