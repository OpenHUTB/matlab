function schema







    pkgUD=findpackage('rptgen_ud');
    pkgSF=findpackage('rptgen_sf');

    h=schema.class(pkgSF,'csf_hier',pkgUD.findclass('cud_obj_hier'));

    p=rptgen.prop(h,'ShowTransitions',{
    'all',getString(message('RptgenSL:rsf_csf_hier:allLabel'))
    'informative',getString(message('RptgenSL:rsf_csf_hier:LabeledOrNonRedundantLabel'))
    'nonredundant',getString(message('RptgenSL:rsf_csf_hier:nonRedundantLabel'))
    'labeled',getString(message('RptgenSL:rsf_csf_hier:LabeledLabel'))
    'none',getString(message('RptgenSL:rsf_csf_hier:noneLabel'))
    },'informative',getString(message('RptgenSL:rsf_csf_hier:showTransitionsLabel')),'SIMULINK_Report_Gen');



    p=rptgen.prop(h,'ShowPorts',{
    'all',getString(message('RptgenSL:rsf_csf_hier:allLabel'))
    'informative',getString(message('RptgenSL:rsf_csf_hier:LabeledOrNonRedundantLabel'))
    'nonredundant',getString(message('RptgenSL:rsf_csf_hier:nonRedundantLabel'))
    'labeled',getString(message('RptgenSL:rsf_csf_hier:LabeledLabel'))
    'none',getString(message('RptgenSL:rsf_csf_hier:noneLabel'))
    },'informative',getString(message('RptgenSL:rsf_csf_hier:showPortsLabel')),'SIMULINK_Report_Gen');

    p=rptgen.prop(h,'ShowJunctions',{
    'all',getString(message('RptgenSL:rsf_csf_hier:allLabel'))
    'nonredundant',getString(message('RptgenSL:rsf_csf_hier:nonRedundantLabel'))
    'none',getString(message('RptgenSL:rsf_csf_hier:noneLabel'))
    },'nonredundant',getString(message('RptgenSL:rsf_csf_hier:showJunctionsLabel')),'SIMULINK_Report_Gen');




    p=rptgen.prop(h,'SkipAutogenerated','bool',true,...
    getString(message('RptgenSL:rsf_csf_hier:skipAutogeneratedChartsLabel')),'SIMULINK_Report_Gen');



    rptgen.makeStaticMethods(h,{
'hierSibling'
    },{
'hierGetPropsrc'
'hierGetStartPoint'
'hierUp'
'hierDown'
'hierLeft'
'hierRight'
    });