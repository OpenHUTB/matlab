function hdltbcode=verilogpackage(this,hdltbcode,tbpkgfid,tbdatafid)


    task_suffix='_task';


    hdltbcode.package_procedure='';
    hdltbcode.package_body='';
    for i=1:length(this.OutportSnk)
        width=this.OutportSnk(i).dataWidth;
        if width>0
            hdltbcode.package_body=[hdltbcode.package_body,...
            '// Function definitions\n',...
            '   function signed [',num2str(width-1),':0] abs;\n',...
            '   input signed [',num2str(width-1),':0] arg;\n',...
'   begin\n'...
            ,'     abs = arg > 0 ? arg : -arg;\n',...
            '   end\n',...
            '   endfunction // function abs\n\n'];
        end

    end
    for m=1:length(this.InportSrc)
        if(isTextIOSupported(this))


            [procedureDecl,procedureBody]=hdlprocedure(this,this.InportSrc(m),'in','#1');
        else
            [procedureDecl,procedureBody]=hdlprocedure(this,this.InportSrc(m),'in','');
        end


        hdltbcode.package_procedure=[hdltbcode.package_procedure,procedureDecl];
        hdltbcode.package_body=[hdltbcode.package_body,procedureBody];
        this.InportSrc(m).procedureName=[this.InportSrc(m).loggingPortName,task_suffix];
    end
    for m=1:length(this.OutportSnk)
        [procedureDecl,procedureBody]=hdlprocedure(this,this.OutportSnk(m),'out','#1 ');
        hdltbcode.package_procedure=[hdltbcode.package_procedure,procedureDecl];
        hdltbcode.package_body=[hdltbcode.package_body,procedureBody];
        this.OutportSnk(m).procedureName=[this.OutportSnk(m).loggingPortName,task_suffix];
    end

    if hdlgetparameter('multifiletestbench')
        hdltbcode_package=[hdltbcode.package_comment,...
        hdltbcode.package_procedure,...
        hdltbcode.package_body,...
        hdltbcode.arch_constants];

        hdltbcode.package_procedure='';
        hdltbcode.package_body='';
        hdltbcode.arch_constants='';
    else
        hdltbcode_package=[hdltbcode.package_comment,...
        hdltbcode.entity_package,...
        hdltbcode.entity_decl,...
        hdltbcode.package_procedure,...
        hdltbcode.package_body,...
        hdltbcode.arch_constants];

        hdltbcode.entity_package='';
        hdltbcode.entity_decl='';
        hdltbcode.package_procedure='';
        hdltbcode.package_body='';
        hdltbcode.arch_constants='';
    end
    fprintf(tbpkgfid,hdltbcode_package);


    this.verilogwriteRefData(tbdatafid);
end



function[procedureDecl,procedureBody]=hdlprocedure(this,Src,SrcType,delay)

    task_suffix='_task';
    cchar=hdlgetparameter('comment_char');

    if Src.datalength>1
        counter_size=ceil(log2(Src.datalength));
        dataType=[' [',num2str(counter_size-1),':0] '];
        addrCond=['        if (addr == ',num2str(Src.datalength-1),')'];
        addrAddOne=['          addr = ',delay,' addr + 1; \n'];
        addrRstValue=('      addr = 0;\n');
        doneCond=['    else if (addr == ',num2str(Src.datalength-1),')\n'];
    else
        dataType=(' ');
        addrCond=('        if (addr == 1) ');
        addrAddOne=['            addr =  ',delay,' 1; \n'];
        addrRstValue=('      addr = 0;\n');

        doneCond=('  else if (rdenb == 1)\n');
    end

    rassertval=sprintf('%d',this.ForceResetValue);
    dtype_space=sprintf(sprintf('%%%ds',length(dataType)),' ');

    if(isTextIOSupported(this)&&...
        (this.clkrate>1)&&strcmp('in',SrcType))
        procedureIF=['  task ',Src.loggingPortName,task_suffix,'; \n',...
        '    input ',dtype_space,' clk;\n',...
        '    input ',dtype_space,' reset;\n',...
        '    input ',dtype_space,' rdenb;\n',...
        '    inout ',dataType,' addr;\n',...
        '    output ',dtype_space,'done;'];


        counter=['    if (reset == ',rassertval,') begin\n',...
        addrRstValue,...
        '    end\n',...
        '    else begin\n',...
        '      if (rdenb == 1) begin\n',...
        addrCond,' begin\n',...
        '          addr = addr; \n',...
        '        end\n',...
        '        else begin\n',...
        addrAddOne,...
        '        end\n',...
        '      end\n',...
        '    end\n'];

    else
        procedureIF=['  task ',Src.loggingPortName,task_suffix,'; \n',...
        '    input ',dtype_space,' clk;\n',...
        '    input ',dtype_space,' reset;\n',...
        '    input ',dtype_space,' rdenb;\n',...
        '    inout ',dataType,' addr;\n',...
        '    output ',dtype_space,'done;'];


        counter=['    if (reset == ',rassertval,') \n',...
        addrRstValue,...
        '    else begin\n',...
        '      if (rdenb == 1) begin\n',...
        addrCond,'\n',...
        '          addr = addr; \n',...
        '        else\n',...
        addrAddOne,...
        '      end\n',...
        '    end\n'];
    end
    done_signal=['    if (reset == ',rassertval,')\n',...
    '      done = 0; \n',...
    doneCond,...
    '      done = 1; \n',...
    '    else\n',...
    '      done = 0; \n'];

    procedureDecl='';

    procedureBody=[procedureIF,'\n',...
    '  begin\n\n',...
    '    ',cchar,' Counter to generate the address\n',...
    counter,'\n',...
    '    ',cchar,' Done Signal generation.\n',...
    done_signal,'\n',...
    '  end\n  endtask ',cchar,' ',Src.loggingPortName,task_suffix,'\n\n'];
end
