function[entitysigs]=createhdlports(this)





    bdt=hdlgetparameter('base_data_type');
    hdlsetparameter('filter_target_language',hdlgetparameter('target_language'));

    fprintf('%s\n',hdlcodegenmsgs(1));

    hdlentitysignalsinit;

    hdln=this.Oscillator;


    outputall=hdlgetallfromsltype(hdln.outputSLtype,'outputport');
    outputvtype=outputall.portvtype;
    outputsltype=outputall.portsltype;


    [~,clk]=hdlnewsignal(hdlgetparameter('clockname'),...
    'filter',-1,0,0,bdt,'boolean');
    hdladdinportsignal(clk);
    hdladdclocksignal(clk);
    hdlsetcurrentclock(clk);
    this.Oscillator.clock=clk;
    [~,clken]=hdlnewsignal(hdlgetparameter('clockenablename'),...
    'filter',-1,0,0,bdt,'boolean');
    hdladdinportsignal(clken);
    hdladdclockenablesignal(clken);
    hdlsetcurrentclockenable(clken);
    this.Oscillator.clockenable=clken;
    [~,reset]=hdlnewsignal(hdlgetparameter('resetname'),...
    'filter',-1,0,0,bdt,'boolean');
    hdladdinportsignal(reset);
    hdladdresetsignal(reset);
    hdlsetcurrentreset(reset);
    this.Oscillator.reset=reset;

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...

    [~,entitysigs.output]=hdlnewsignal('nco_out',...
    'filter',-1,this.isOutputPortComplex,0,outputvtype,outputsltype);
    hdladdoutportsignal(entitysigs.output);









