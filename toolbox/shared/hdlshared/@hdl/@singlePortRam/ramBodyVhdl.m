function str=ramBodyVhdl(this,clk,ce,di,wa,we,do)








    str=[...
    'ARCHITECTURE rtl OF ',this.entityName,' IS\n'...
    ,'\n'...
    ];


    if this.dataIsComplex
        dipt=['std_logic_vector(',num2str(di(1).Width*2-1),' DOWNTO 0)'];
    elseif di.Width>1
        dipt=['std_logic_vector(',num2str(di.Width-1),' DOWNTO 0)'];
    else
        dipt='std_logic';
    end

    str=[str...
    ,'  TYPE ram_type IS ARRAY (',num2str(2^wa.Width-1),' DOWNTO 0) of ',dipt,';\n'...
    ,'\n'...
    ];


    if sum([di.Width])==1
        s1='''';
    else
        s1='"';
    end
    z=[s1,repmat('0',1,sum([di.Width])),s1];

    str=[str...
    ,'  -- Signals\n'...
    ,sprintf('%2s%-38s%s','','SIGNAL ram',[': ram_type := (OTHERS => ',z,');\n'])...
    ,sprintf('%2s%-38s%s','','SIGNAL data_int',[': ',dipt,' := ',z,';\n'])...
    ];




    if wa.Width>1
        swa=strrep(wa.PortType,'std_logic_vector','unsigned');

        str=[str...
        ,sprintf('%2s%-38s%s','','SIGNAL addr_int',[': ',swa,';\n'])...
        ];
    end




    if this.isStdLogicIn
        s2={'unsigned(',')'};
    else
        s2={'',''};
    end

    if wa.Width>1
        s2a=['  addr_int <= ',s2{1},wa.Name,s2{2},';\n'...
        ,'\n'];
    else
        s2a='';
    end
    str=[str...
    ,'\n'...
    ,'BEGIN\n'...
    ,'\n'...
    ,s2a,...
    ];

    if this.hasClkEn==1
        indent=2;
        s3={[blanks(6),'IF ',ce.Name,' = ''1'' THEN\n'],[blanks(6),'END IF;\n']};
    else
        indent=0;
        s3={'',''};
    end


    if(di(1).Width>1)&&~this.isStdLogicIn
        si={'std_logic_vector(',')'};
    else
        si={'',''};
    end


    if(do(1).Width>1)&&~this.isStdLogicOut
        sc=char(regexp(do(1).PortType,'.*(?=\()','match'));
        so={[sc,'('],')'};
    else
        so={'',''};
    end

    if~this.dataIsComplex
        s4=[si{1},di.Name,si{2}];
        s7='';
        s8='';
    else
        s4=[si{1},di(1).Name,si{2},' & ',si{1},di(2).Name,si{2}];
        [s7,s8]=this.getVectorSlice(do(1).Width);
    end

    if this.readNewData==1
        indent2=2;
        sn={[blanks(indent+6),'  data_int <= ',s4,';\n'],...
        [blanks(indent+6),'ELSE\n'],...
        [blanks(indent+6),'END IF;\n']};
    else
        indent2=0;
        sn={'',[blanks(indent+6),'END IF;\n'],''};
    end
    if wa.Width>1
        swe1=[blanks(indent+6),'  ram(to_integer(addr_int)) <= ',s4,';\n'];
        swe2=[blanks(indent+indent2+6),'data_int <= ram(to_integer(addr_int));\n'];
    else
        swe1=[blanks(indent+6),'  IF ',wa.Name,' = ''1'' THEN\n',...
        blanks(indent+6),'    ram(1) <= ',di.Name,';\n',...
        blanks(indent+6),'    ram(0) <= ram(0);\n',...
        blanks(indent+6),'  ELSE\n',...
        blanks(indent+6),'    ram(0) <= ',di.Name,';\n',...
        blanks(indent+6),'    ram(1) <= ram(1);\n',...
        blanks(indent+6),'  END IF;\n'];
        swe2=[blanks(indent+indent2+6),'IF ',wa.Name,' = ''1'' THEN\n',...
        blanks(indent+indent2+6),'  data_int <= ram(1);\n',...
        blanks(indent+indent2+6),'ELSE\n',...
        blanks(indent+indent2+6),'  data_int <= ram(0);\n',...
        blanks(indent+indent2+6),'END IF;\n'];
    end

    procLabel=hdlgetparameter('clock_process_label');
    if hdlgetparameter('clockedge')==0
        clock_str=['    IF ',clk.Name,'''event AND ',clk.Name,' = ''1'' THEN\n'];
    else
        clock_str=['    IF ',clk.Name,'''event AND ',clk.Name,' = ''0'' THEN\n'];
    end

    str=[str...
    ,'  ',this.entityName,procLabel,' : PROCESS (',clk.Name,')\n'...
    ,'  BEGIN\n'...
    ,clock_str,...
    s3{1}...
    ,[blanks(indent+6),'IF ',we.Name,' = ''1'' THEN\n']...
    ,swe1,...
    sn{1}...
    ,sn{2}...
    ,swe2,...
    sn{3}...
    ,s3{2}...
    ,'    END IF;\n'...
    ,'  END PROCESS ',this.entityName,procLabel,';\n'...
    ,'\n'...
    ,'  ',do(1).Name,' <= ',so{1},'data_int',s7,so{2},';\n'...
    ];

    if this.dataIsComplex
        str=[str...
        ,'  ',do(2).Name,' <= ',so{1},'data_int',s8,so{2},';\n'...
        ];
    end

    str=[str...
    ,'\n'...
    ,'END rtl;\n'...
    ,'\n'...
    ];


