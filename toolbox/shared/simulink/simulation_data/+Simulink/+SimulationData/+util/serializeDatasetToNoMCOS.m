function result=serializeDatasetToNoMCOS(...
    buildData,...
    model,...
    ds,...
    aobHierarchy,...
    interpolation,...
    portBusTypes,...
varargin...
    )





    [numExternalInputPorts,rootInports,numInports,...
    enablePort,~,enablePortIdx,...
    triggerPort,~,triggerPortIdx,~,~]=...
    Simulink.SimulationData.util.countRootInportsByType(model);

    if ds.numElements~=numExternalInputPorts
        if strcmpi(get_param(model,'SimulationMode'),'rapid-accelerator')
            DAStudio.error(...
            'Simulink:tools:rapidAccelDatasetExtInputInvalidNumberOfElements',...
model...
            );
        else
            DAStudio.error(...
            'Simulink:Logging:InvInputLoadNameList',...
            numExternalInputPorts,...
            ds.numElements...
            );
        end
    end
    result=cell(1,ds.numElements);

    inputPath=get_param(model,'ExternalInput');

    elementIdx=1;
    while elementIdx<=numExternalInputPorts
        datasetElement=ds.get(elementIdx);
        nodeIdx=1;
        dataPath=sprintf('%s{%d}',inputPath,elementIdx);
        assert(...
        elementIdx<=numInports||...
        elementIdx==enablePortIdx||...
        elementIdx==triggerPortIdx...
        );
        if elementIdx<=numInports
            block=rootInports{elementIdx};
        elseif elementIdx==enablePortIdx
            block=enablePort{1};
        else
            block=triggerPort{1};
        end
        isBusElement=false;
        result{elementIdx}=...
        loc_serialize_dataset_element(...
        buildData,...
        model,...
        interpolation(elementIdx),...
        datasetElement,...
        aobHierarchy{elementIdx},...
        nodeIdx,...
        block,...
        inputPath,...
        dataPath,...
        isBusElement,...
        portBusTypes{elementIdx}...
        );
        elementIdx=elementIdx+1;
    end


    for idx=elementIdx:ds.numElements
        datasetElement=ds.get(idx);
        result{idx}=loc_serialize_dataset_element_partition(...
        buildData,...
        model,...
        datasetElement,...
        ds.getElementNames{idx}...
        );
    end

end



function result=loc_serialize_dataset_element(...
    buildData,...
    model,...
    interpolation,...
    datasetElement,...
    aobHierarchy,...
    nodeIdx,...
    block,...
    inputPath,...
    dataPath,...
    isElementOfBus,...
portBusType...
    )
    blockType=get_param(block,'BlockType');
    if strcmp(blockType,'Inport')
        inportIsFcnCall=strcmpi(get_param(block,'OutputFunctionCall'),'on');
    else
        assert(...
        strcmp(blockType,'EnablePort')||...
        strcmp(blockType,'TriggerPort')...
        );
        inportIsFcnCall=false;
    end
    if inportIsFcnCall
        result=loc_serialize_dataset_element_fcncall(...
        buildData,...
        model,...
        datasetElement,...
block...
        );
    elseif isempty(datasetElement)
        result=[];
    elseif issparse(datasetElement)
        DAStudio.error(...
        'Simulink:SimInput:ExtInputSparseInvalidElementContents',...
model...
        );
    elseif isa(datasetElement,'Simulink.SimulationData.BlockData')
        values=datasetElement.Values;
        if~isa(values,'timeseries')&&~isstruct(values)&&...
            ~isa(values,'matlab.io.datastore.SimulationDatastore')&&...
            ~(isa(values,'timetable'))
            inputMode='external';
            DAStudio.error(...
            'Simulink:SimInput:BlockDataValuesType',...
            inputMode,...
block...
            );
        end
        result=loc_serialize_dataset_element(...
        buildData,...
        model,...
        interpolation,...
        values,...
        aobHierarchy,...
        nodeIdx,...
        block,...
        inputPath,...
        dataPath,...
        isElementOfBus,...
portBusType...
        );
    elseif isstruct(datasetElement)
        result=...
        loc_serialize_struct(...
        buildData,...
        model,...
        interpolation,...
        datasetElement,...
        aobHierarchy,...
        nodeIdx,...
        block,...
        inputPath,...
        dataPath,...
portBusType...
        );
    else
        result=loc_serialize_leaf(...
        model,...
        interpolation,...
        datasetElement,...
        aobHierarchy,...
        nodeIdx,...
        block,...
        inputPath,...
        dataPath,...
isElementOfBus...
        );
    end
end


function result=loc_serialize_struct(...
    buildData,...
    model,...
    interpolation,...
    datasetElement,...
    aobHierarchy,...
    nodeIdx,...
    block,...
    inputPath,...
    dataPath,...
portBusType...
    )







    fields=fieldnames(datasetElement);
    if isempty(fields)
        result=[];
        return
    end
    loc_verify_node_dimensions(...
    aobHierarchy,...
    nodeIdx,...
    datasetElement,...
    block,...
dataPath...
    );
    if isequal(portBusType,'NOT_BUS')
        if~Simulink.SimulationData.utValidSignalOrCompositeData(datasetElement)
            DAStudio.error(...
            'Simulink:SimInput:DatasetExtInputInvalidElementContents',...
model...
            );
        else
            DAStudio.error(...
            'Simulink:SimInput:InportStructDataTypeNotBus',...
            block,...
            get_param(block,'OutDataTypeStr')...
            );
        end
    end
    aobChildren=aobHierarchy(nodeIdx).Children;
    if nodeIdx==1&&isempty(aobChildren)
        DAStudio.error(...
        'Simulink:SimInput:DatasetExtInputInvalidElementContents',...
model...
        );
    end
    aobDimensions=aobHierarchy(nodeIdx).Dimensions;
    dataNodeDimensions=size(datasetElement);
    aobDimensions=loc_scalar_dimension_expansion(...
    aobDimensions,...
dataNodeDimensions...
    );
    nAobDimensions=length(aobDimensions);
    dim=[length(fields),aobDimensions];
    emptyData=cell(dim);
    result=cell2struct(emptyData,fields,1);
    for idx=1:numel(datasetElement)
        sub=loc_ind2sub(size(datasetElement),idx);
        sub=...
        [sub,ones(1,nAobDimensions-ndims(datasetElement))];%#ok<AGROW>
        idxAob=loc_sub2ind(aobDimensions,sub);
        for fieldIdx=1:length(fields)
            field=fields{fieldIdx};
            if isempty(datasetElement(idx).(field))
                continue
            end
            idxString=loc_idx_vector_2_idx_string(sub);
            dataPathChild=[dataPath,idxString,'.',field];
            nameFound=false;
            for childIdx=aobChildren
                childName=aobHierarchy(childIdx).Name;
                if strcmp(field,childName)
                    nameFound=true;
                    break
                end
            end
            if~nameFound
                if~Simulink.SimulationData.utValidSignalOrCompositeData(datasetElement)
                    msl=MSLException([],...
                    message('Simulink:SimInput:DatasetExtInputInvalidElementContents',...
                    model)...
                    );
                    msl.throwAsCaller;
                end
                msl=MSLException([],...
                message('Simulink:SimInput:InportDataHierStructExtraField',...
                block,...
                dataPathChild)...
                );
                msl.throwAsCaller;
            end
            isBusElement=true;
            result(idxAob).(field)=...
            loc_serialize_dataset_element(...
            buildData,...
            model,...
            interpolation,...
            datasetElement(idx).(field),...
            aobHierarchy,...
            childIdx,...
            block,...
            inputPath,...
            dataPathChild,...
            isBusElement,...
portBusType...
            );

        end
    end
end



function result=loc_serialize_leaf(...
    model,...
    interpolation,...
    datasetElement,...
    aobHierarchy,...
    nodeIdx,...
    block,...
    inputPath,...
    dataPath,...
isElementOfBus...
    )
    if isempty(datasetElement)
        result=[];
        return;
    end
    if~isa(datasetElement,'timeseries')&&...
        ~isa(datasetElement,'matlab.io.datastore.SimulationDatastore')&&...
        ~(isa(datasetElement,'timetable'))
        if nodeIdx~=1||...
            ~loc_is_valid_numeric_dataset_element(datasetElement)
            DAStudio.error(...
            'Simulink:SimInput:DatasetExtInputInvalidElementContents',...
model...
            );
        end
    end
    modelComplexity=aobHierarchy(nodeIdx).Complexity;
    maxStrLen=aobHierarchy(nodeIdx).MaxStrLen;
    if isa(datasetElement,'timeseries')
        [result,dataInfo]=loc_serialize_timeseries(...
        model,...
        interpolation,...
        modelComplexity,...
        maxStrLen,...
        datasetElement,...
        block,...
        inputPath,...
dataPath...
        );
    elseif isa(datasetElement,'matlab.io.datastore.SimulationDatastore')
        [result,dataInfo]=loc_serialize_simulation_datastore(...
        model,...
        interpolation,...
        datasetElement,...
        block,...
inputPath...
        );
        if isempty(result)
            return
        end
    elseif isa(datasetElement,'timetable')
        [result,dataInfo]=loc_serialize_timetable(...
        model,...
        interpolation,...
        modelComplexity,...
        maxStrLen,...
        datasetElement,...
        block,...
        inputPath,...
dataPath...
        );
    else
        assert(...
        nodeIdx==1&&...
        loc_is_valid_numeric_dataset_element(datasetElement)...
        );
        [result,dataInfo]=...
        loc_serialize_array(...
        model,...
        interpolation,...
        modelComplexity,...
        datasetElement,...
        block,...
inputPath...
        );
    end
    loc_verify_leaf_dataset_element_vs_aob_hierarchy(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    dataPath,...
    model,...
isElementOfBus...
    );
end



function[result,dataInfo]=loc_serialize_timeseries(...
    model,...
    interpolation,...
    modelComplexity,...
    maxStrLen,...
    ts,...
    block,...
    inputPath,...
dataPath...
    )
    if~isscalar(ts)
        DAStudio.error(...
        'Simulink:SimInput:InportNonScalarTimeseries',...
        model,...
        inputPath,...
block...
        );
    end
    if ts.length==0
        DAStudio.error(...
        'Simulink:SimInput:InportInvalidNumberOfSamplesTimeseries',...
        model,...
        inputPath,...
block...
        );
    end
    time=ts.Time;
    if~isa(time,'double')
        DAStudio.error(...
        'Simulink:SimInput:InportNonDoubleTimeValues',...
        inputPath,...
block...
        );
    end
    nSamples=length(time);

    data=ts.Data;
    if issparse(data)
        DAStudio.error(...
        'Simulink:SimInput:ExtInputSparseInvalidElementContents',...
model...
        );
    end
    if~isnumeric(data)&&...
        ~islogical(data)&&...
        ~isenum(data)&&...
        ~isa(data,'embedded.fi')&&...
        ~isstring(data)&&...
        ~ischar(data)
        inputMode='external';
        DAStudio.error(...
        'Simulink:SimInput:TimeseriesUnsupportedDataType',...
        dataPath,...
        inputMode,...
block...
        );
    end

    if ts.IsTimeFirst...
        &&nSamples>1...
        &&~ischar(data)
        assert(ismatrix(data));
        data=data.';
    end

    elementType='timeseries';
    [result,dataInfo]=...
    loc_serialize_leaf_core(...
    time,...
    data,...
    elementType,...
    model,...
    interpolation,...
    modelComplexity,...
    maxStrLen,...
    block,...
    inputPath,...
    ts.DataInfo.Units...
    );

end



function[result,dataInfo]=loc_serialize_array(...
    model,...
    interpolation,...
    modelComplexity,...
    ar,...
    block,...
inputPath...
    )
    time=ar(:,1);
    data=ar(:,2:end)';
    elementType='array';
    [result,dataInfo]=...
    loc_serialize_leaf_core(...
    time,...
    data,...
    elementType,...
    model,...
    interpolation,...
    modelComplexity,...
    [],...
    block,...
    inputPath,...
''...
    );
end


function[result,dataInfo]=loc_serialize_simulation_datastore(...
    model,...
    interpolation,...
    dst,...
    block,...
inputPath...
    )

    if~isscalar(dst)
        DAStudio.error(...
        'Simulink:SimInput:InportNonScalarSimulationDatastore',...
        model,...
        inputPath,...
block...
        );
    end
    if~isa(dst.SimDatastoreImpl,...
        'matlab.io.datastore.datastoreimpl.MATFileSimDatastoreImpl')
        DAStudio.error(...
        'Simulink:SimInput:InportNonMatFileBackedSimulationDatastore',...
        model,...
        inputPath,...
block...
        );
    end
    dst=dst.getSimImplProps();
    if dst.EmptyStrct_
        result=[];
        dataInfo=[];
        return;
    end
    if dst.NSamples_==0
        DAStudio.error(...
        'Simulink:SimInput:InportInvalidNumberOfSamplesSimulationDatastore',...
        model,...
        inputPath,...
block...
        );
    end
    if interpolation&&(...
        loc_is_fi_type(dst.SignalAttributesData_.ClassName)||...
        loc_is_enum_type(dst.SignalAttributesData_.ClassName))
        DAStudio.error(...
        'Simulink:SimInput:InportCannotInterpFiOrEnum',...
        block,...
inputPath...
        );
    end
    result.LeafMarker=...
    Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
    result.ElementType='simulation_datastore';
    result.SignalMode=0;
    result.SignalName='';

    result.FileName=dst.FileName_;
    result.FileSignature=dst.FileSignature_;
    result.NSamples=dst.NSamples_;

    timeIsDouble=true;
    if dst.IsTimeCompressed_
        result.CompressedTime=dst.CompressedTime_;
        timeIsDouble=isa(result.CompressedTime,'double');
    else
        if isempty(dst.TimeInMemory_)
            result.TimeR2=dst.TimeRecordIdx_;
            if isfield(dst,'TimeAttributes')&&...
                ~strcmp(dst.TimeAttributes.ClassName,'double')
                timeIsDouble=false;
            end
        else
            result.Time=dst.TimeInMemory_;
            timeIsDouble=isa(result.Time,'double');
        end
    end
    if~timeIsDouble
        DAStudio.error(...
        'Simulink:SimInput:InportNonDoubleTimeValues',...
        inputPath,...
block...
        );
    end

    if isempty(dst.DataInMemory_)
        result.DataR2=dst.DataRecordIdx_;
    else

        result.Data=dst.DataInMemory_;
    end

    result.SampleSize=dst.DataSampleSizeInElements_;

    if loc_is_fi_type(dst.SignalAttributesData_.ClassName)
        dataInfo.Datatype='embedded.fi';
        dataInfo.NumericType=...
        numerictype(...
        dst.SignalAttributesData_.FixedPointParameters.isSigned,...
        double(dst.SignalAttributesData_.FixedPointParameters.WordLength),...
        dst.SignalAttributesData_.FixedPointParameters.SlopeAdjustmentFactor,...
        double(dst.SignalAttributesData_.FixedPointParameters.Exponent),...
        dst.SignalAttributesData_.FixedPointParameters.Bias...
        );
        if isfield(dst.SignalAttributesData_,'ResolvedClassName')&&...
            ~isempty(dst.SignalAttributesData_.ResolvedClassName)
            result.ContainerDatatypeName=...
            dst.SignalAttributesData_.ResolvedClassName;
        end
    else
        dataInfo.Datatype=dst.SignalAttributesData_.ClassName;
        if strcmp(dataInfo.Datatype,'boolean')
            dataInfo.Datatype='logical';
        end
        if isempty(dst.SignalAttributesData_.ResolvedClassName)
            result.ContainerDatatypeName=dst.SignalAttributesData_.ClassName;
        else
            result.ContainerDatatypeName=...
            dst.SignalAttributesData_.ResolvedClassName;
        end
    end
    dataInfo.Size=double(dst.SignalAttributesData_.Dimension);
    if iscolumn(dataInfo.Size)&&~isscalar(dataInfo.Size)
        dataInfo.Size=dataInfo.Size.';
    end
    if dst.NSamples_>1
        dataInfo.Size=[dataInfo.Size,dst.NSamples_];
    end
    dataInfo.NSamples=dst.NSamples_;
    dataInfo.Complexity=dst.SignalAttributesData_.Complexity;
    dataInfo.Units='';
end


function[result,dataInfo]=loc_serialize_timetable(...
    model,...
    interpolation,...
    modelComplexity,...
    maxStrLen,...
    tt,...
    block,...
    inputPath,...
dataPath...
    )
    time=tt.Properties.RowTimes;

    if(isa(time,'duration'))
        time=seconds(time);
    else
        DAStudio.error(...
        'Simulink:SimInput:TimetableUnsupportedTimeFormat',...
        dataPath,...
block...
        );
    end


    if~issorted(time)
        DAStudio.error(...
        'Simulink:SimInput:TimetableRILDecreasing',...
        dataPath,...
block...
        );
    end

    nSamples=length(time);
    data=tt.(tt.Properties.VariableNames{1});



    if isequal(nSamples,1)&&numel(data)>1
        dataSize=size(data);
        if numel(dataSize)>2


            data=reshape(data,dataSize(2:end));
        else

            iswide=isstruct(tt.Properties.UserData)&&...
            isfield(tt.Properties.UserData,'AppData')&&...
            isfield(tt.Properties.UserData.AppData,'IsSimulinkWideSignal')&&...
            isequal(tt.Properties.UserData.AppData.IsSimulinkWideSignal,true);
            if~iswide&&~isequal(dataSize(2),1)




                data=reshape(data,[dataSize(1),dataSize(2)]).';
            end
        end

    end



    units='';

    if~isnumeric(data)&&...
        ~islogical(data)&&...
        ~isenum(data)&&...
        ~isa(data,'embedded.fi')&&...
        ~isstring(data)&&...
        ~ischar(data)
        DAStudio.error(...
        'Simulink:SimInput:TimetableUnsupportedDataType',...
        dataPath,...
block...
        );
    end


    if numel(tt.Properties.VariableNames)>1
        DAStudio.error(...
        'Simulink:SimInput:TimetableRILOneVar',...
        dataPath,...
block...
        );
    end


    if issparse(data)
        DAStudio.error(...
        'Simulink:SimInput:ExtInputSparseInvalidElementContents',...
model...
        );
    end

    if nSamples>1&&~ischar(data)
        data_size=size(data);
        data=permute(data,circshift((1:length(data_size)),-1));
    end
    if~isempty(units)
        units=units{1};
    end

    elementType='timetable';
    [result,dataInfo]=...
    loc_serialize_leaf_core(...
    time,...
    data,...
    elementType,...
    model,...
    interpolation,...
    modelComplexity,...
    maxStrLen,...
    block,...
    inputPath,...
units...
    );
end


function[result,dataInfo]=loc_serialize_leaf_core(...
    time,...
    data,...
    elementType,...
    model,...
    interpolation,...
    modelComplexity,...
    maxStrLen,...
    block,...
    inputPath,...
units...
    )%#ok<INUSL>
    nSamples=length(time);
    dataInfo.Datatype=class(data);
    if isa(data,'embedded.fi')
        dataInfo.NumericType=numerictype(data);
    end
    dataInfo.Size=size(data);
    dataInfo.NSamples=nSamples;
    dataInfo.Complexity=~isreal(data)&&~isstring(data);
    dataInfo.Units=units;

    charData='';
    if ischar(data)
        charData=data;
        data=string(data)';
        dataInfo.Datatype='string';
        dataInfo.Size=size(data);
    elseif isstring(data)
        if any(ismissing(data))
            DAStudio.error(...
            'Simulink:SimInput:InportStrMissing',...
            block,...
inputPath...
            );
        end
        charData=char(join(data));
    end

    dataSize=size(data);
    if nSamples>1
        sampleSize=prod(dataSize(1:end-1));
    else
        sampleSize=prod(dataSize);
    end
    data=data(:);
    if~isstring(data)&&~all(isfinite(data))
        DAStudio.error(...
        'Simulink:SimInput:InportDataMustBeFinite',...
        block,...
inputPath...
        );
    end

    if isstring(data)


        startsWithNull=data.startsWith(char(0));
        data(startsWithNull)="";
        data=strtok(data,char(0));

        if interpolation
            DAStudio.error(...
            'Simulink:SimInput:InportStrInterp',...
            block,...
inputPath...
            );
        end

        if any(strlength(data)>maxStrLen)
            DAStudio.error(...
            'Simulink:SimInput:InportStrLenExceedsMax',...
            block,maxStrLen);
        end

        if any(charData(:)>255)
            DAStudio.error(...
            'Simulink:SimInput:InportStrNonAscii',...
            block,inputPath);
        end
        if sampleSize>1
            DAStudio.error(...
            'Simulink:SimInput:InportStrNonScalar',...
            block,...
inputPath...
            );
        end
    end

    if interpolation&&(isenum(data)||isfi(data))
        DAStudio.error(...
        'Simulink:SimInput:InportCannotInterpFiOrEnum',...
        block,...
inputPath...
        );
    end
    if isenum(data)
        assert(isa(data,'int32'));
        data=int32(data);
    end
    fiSampleSizeFactor=1;
    if isfi(data)
        assert(~isempty(data));
        dataFi=data;
        data=simulinkarray(dataFi);
        lengthFi=length(dataFi);
        lengthContainer=length(data);
        assert(mod(lengthContainer,lengthFi)==0);
        fiSampleSizeFactor=lengthContainer/lengthFi;
        sampleSize=sampleSize*fiSampleSizeFactor;
    end
    if isreal(data)&&modelComplexity
        data=complex(data);
    end
    if~isstring(data)&&~isreal(data)
        dataInterlaced=zeros(size(data,1)*2,1,class(data));
        if fiSampleSizeFactor>1
            lengthData=length(data);




            assert(mod(lengthData,fiSampleSizeFactor)==0);
            nElements=length(data)/fiSampleSizeFactor;
            for elementNo=1:nElements
                dataIdx=fiSampleSizeFactor*(elementNo-1);
                dataInterlaced(...
                dataIdx*2+1:dataIdx*2+fiSampleSizeFactor...
                )=...
                real(data(dataIdx+1:dataIdx+fiSampleSizeFactor));
                dataInterlaced(...
                dataIdx*2+fiSampleSizeFactor+1:...
                dataIdx*2+fiSampleSizeFactor*2...
                )=...
                imag(data(dataIdx+1:dataIdx+fiSampleSizeFactor));
            end
        else
            dataInterlaced(1:2:end-1)=real(data);
            dataInterlaced(2:2:end)=imag(data);
        end
        data=dataInterlaced;
        sampleSize=sampleSize*2;
    end

    result.LeafMarker=...
    Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
    result.ElementType=elementType;
    result.SignalMode=0;
    result.SignalName='';
    result.Time=time;
    result.Data=data;
    result.ContainerDatatypeName=class(data);
    result.SampleSize=sampleSize;
    result.MaxFieldLen=maxStrLen;
end



function result=loc_serialize_dataset_element_partition(...
    buildData,...
    model,...
    datasetElement,...
name...
    )
    result=loc_serialize_dataset_element_fcncall(...
    buildData,...
    model,...
    datasetElement,...
''...
    );
    result.SignalName=name;


end


function result=loc_serialize_dataset_element_fcncall(...
    buildData,...
    model,...
    datasetElement,...
block...
    )
    loc_verify_dataset_element_is_fcncall(datasetElement,block);



    if isempty(datasetElement)



        period=-1;
        offset=0;



        if~isempty(block)
            inportPeriodOffset=get_param(block,'SampleTime');
        else
            inportPeriodOffset='';
        end
        if~isempty(inportPeriodOffset)
            po=eval_string_with_workspace_resolution(...
            inportPeriodOffset,...
            model,...
buildData...
            );

            if length(po)>1
                if~isempty(po(1))
                    period=po(1);
                end
                if~isempty(po(2))
                    offset=po(2);
                end
            else
                if~isempty(po(1))
                    period=po(1);
                end
                offset=0;
            end
        end



        if period<=0
            result=[];
            return
        end
















        [Tstart,~]=sl('get_start_stop_times',buildData);






        if Tstart>=offset




            nperiod=ceil((Tstart-offset)/period);



            firstHit=offset+nperiod*period;

        else



            nperiod=floor((offset-Tstart)/period);



            firstHit=offset-nperiod*period;

        end



        result.LeafMarker=...
        Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
        result.SignalMode=1;
        result.SignalName='';
        result.Data=[period,firstHit];
    else
        if~isempty(block)
            sampleTimeParamString=get_param(block,'SampleTime');
            if~strcmp(sampleTimeParamString,'-1')
                DAStudio.error(...
                'Simulink:SimInput:InvalidTsForFcnCallInportWithSpecifiedTs',...
                block,...
sampleTimeParamString...
                );
            end
        end
        [time,nHits]=loc_convert_fcncall_data(datasetElement);
        result.LeafMarker=...
        Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
        result.SignalMode=2;
        result.SignalName='';
        result.Time=time;
        result.Data=nHits;
    end
end




function bRet=loc_is_valid_numeric_dataset_element(el)
    bRet=...
    ismatrix(el)&&...
    isa(el,'double')&&...
    isreal(el)&&...
    size(el,1)>0&&...
    size(el,2)>1&&...
    all(diff(el(:,1))>=0);
end



function ind=loc_sub2ind(siz,sub)
    nDims=length(siz);
    width=loc_sub_ind_width(siz);
    ind=1;
    for idx=1:nDims
        ind=ind+(sub(idx)-1)*width(idx);
    end
end



function sub=loc_ind2sub(siz,ind)
    nDims=length(siz);
    width=loc_sub_ind_width(siz);
    sub=zeros(1,nDims);
    for idx=nDims:-1:1
        dimSub=floor((ind-1)/width(idx));
        sub(idx)=dimSub+1;
        ind=ind-dimSub*width(idx);
    end
end



function width=loc_sub_ind_width(siz)
    nDims=length(siz);
    width=ones(1,nDims);
    for idx=2:nDims
        width(idx)=width(idx-1)*siz(idx-1);
    end
end


function loc_verify_dataset_element_is_fcncall(datasetElement,block)
    if~isempty(datasetElement)&&...
        (...
        ~isa(datasetElement,'double')||...
        ~isreal(datasetElement)||...
        ~iscolumn(datasetElement)||...
        any(diff(datasetElement)<0)...
        )
        DAStudio.error(...
        'Simulink:SimInput:FcnCallInportDataTypeMismatch',...
block...
        );
    end
end



function[time,nHits]=loc_convert_fcncall_data(datasetElement)
    assert(...
    ~isempty(datasetElement)&&...
    isa(datasetElement,'double')&&...
    iscolumn(datasetElement)&&...
    all(diff(datasetElement)>=0)...
    );
    time=datasetElement(1);
    nHits=1;
    for idx=2:length(datasetElement)
        if datasetElement(idx)==datasetElement(idx-1)
            nHits(end)=nHits(end)+1;
        else
            time=[time;datasetElement(idx)];%#ok<AGROW>
            nHits=[nHits;1];%#ok<AGROW>
        end
    end
end



function loc_verify_leaf_dataset_element_vs_aob_hierarchy(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    dataPath,...
    model,...
isElementOfBus...
    )
    loc_verify_node_is_leaf(aobHierarchy,nodeIdx,block,dataPath);
    loc_verify_leaf_datatype(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
dataPath...
    );
    loc_verify_leaf_dimensions(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    dataPath,...
isElementOfBus...
    );
    loc_verify_leaf_complexity(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo.Complexity,...
    block,...
    dataPath,...
isElementOfBus...
    );
    loc_verify_leaf_unit(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    model,...
isElementOfBus...
    );
end

function loc_verify_leaf_unit(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    model,...
isElementOfBus...
    )
    if isequal(dataInfo.Units,'')
        return;
    end

    hasUnitsToLoad=~isempty(isprop(dataInfo.Units,'Name'));
    try
        if hasUnitsToLoad
            unitId=Simulink.UnitUtils.registerUnit(model,dataInfo.Units.Name);
        end
    catch
        DAStudio.error(...
        'SimulinkTypes:Unit:InvalidUnitExpression',...
        dataInfo.Units.Name);
    end

    try
        if hasUnitsToLoad
            modelUnitId=Simulink.UnitUtils.registerUnit(...
            model,aobHierarchy(nodeIdx).Units);
        end
    catch
        DAStudio.error(...
        'SimulinkTypes:Unit:InvalidUnitExpression',...
        aobHierarchy(nodeIdx).Units);
    end

    if hasUnitsToLoad&&...
        ~Simulink.UnitUtils.areUnitsEquivalent(model,unitId,...
        modelUnitId)
        Simulink.UnitUtils.reportUnitMismatchWithLoadedData(...
        model,get_param(block,'Handle'),aobHierarchy(nodeIdx).Units,...
        dataInfo.Units.Name,isElementOfBus);
    end
end




function loc_verify_leaf_datatype(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
dataPath...
    )
    modelDatatype=aobHierarchy(nodeIdx).DatatypeName;
    if strcmp(modelDatatype,'boolean')
        modelDatatype='logical';
    end
    if strcmp(dataInfo.Datatype,'embedded.fi')
        datatype=dataInfo.NumericType;
        try
            modelDatatype=numerictype(modelDatatype);
        catch e %#ok<NASGU>
            loc_report_leaf_datatype_error(...
            aobHierarchy,...
            nodeIdx,...
            datatype,...
            block,...
dataPath...
            );
        end
        modelDatatype.DataTypeMode=datatype.DataTypeMode;
        if~isequal(modelDatatype,datatype)
            loc_report_leaf_datatype_error(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo.Datatype,...
            block,...
dataPath...
            );
        end
    else
        datatype=dataInfo.Datatype;
        if~strcmp(modelDatatype,datatype)
            loc_report_leaf_datatype_error(...
            aobHierarchy,...
            nodeIdx,...
            datatype,...
            block,...
dataPath...
            );
        end
    end
end



function loc_report_leaf_datatype_error(...
    aobHierarchy,...
    nodeIdx,...
    datatype,...
    block,...
dataPath...
    )
    if nodeIdx==1
        exc=MSLException([],...
        message('Simulink:SimInput:InportDataTypeMismatch',...
        block,...
        datatype,...
        aobHierarchy(nodeIdx).DatatypeName,...
        aobHierarchy(nodeIdx).DatatypeName...
        ));
        throw(exc);
    else
        exc=MSLException([],...
        message('Simulink:SimInput:InportBusStructDataTypeMismatch',...
        'external',...
        block,...
        dataPath,...
        datatype,...
        aobHierarchy(nodeIdx).DatatypeName...
        ));
        throw(exc);
    end
end







function modelNodeDimensions=loc_scalar_dimension_expansion(...
    modelNodeDimensions,...
dataNodeDimensions...
    )
    if length(modelNodeDimensions)<2&&length(dataNodeDimensions)==2
        if dataNodeDimensions(1)==1
            modelNodeDimensions=[1,modelNodeDimensions];
        elseif dataNodeDimensions(2)==1
            modelNodeDimensions=[modelNodeDimensions,1];
        end
    end
end




function dimsString=loc_dims_vector_2_dims_string(dimsVector)
    dimsString='[';
    for idx=1:length(dimsVector)-1
        dimsString=sprintf('%s%dx',dimsString,dimsVector(idx));
    end
    dimsString=sprintf('%s%d]',dimsString,dimsVector(end));
end




function loc_verify_leaf_dimensions(...
    aobHierarchy,...
    nodeIdx,...
    dataInfo,...
    block,...
    dataPath,...
isElementOfBus...
    )
    dataDimensions=dataInfo.Size;
    nSamples=dataInfo.NSamples;
    if nSamples>1
        dataDimensions(end)=[];
    end
    modelDimensions=aobHierarchy(nodeIdx).Dimensions;
    modelDimensionsOrig=modelDimensions;
    dataDimensionsOrig=dataDimensions;





    if isscalar(dataDimensionsOrig)&&length(modelDimensionsOrig)==2
        if modelDimensionsOrig(1)==1
            dataDimensions=[1,dataDimensionsOrig];
        elseif modelDimensionsOrig(2)==1
            dataDimensions=[dataDimensionsOrig,1];
        end
    elseif isscalar(modelDimensionsOrig)&&length(dataDimensionsOrig)==2
        if dataDimensionsOrig(1)==1
            modelDimensions=[1,modelDimensionsOrig];
        elseif dataDimensionsOrig(2)==1
            modelDimensions=[modelDimensionsOrig,1];
        end
    end

    if length(modelDimensions)<length(dataDimensions)
        modelDimensions=...
        [...
        modelDimensions,...
        ones(1,length(dataDimensions)-length(modelDimensions))...
        ];
    end
    if length(dataDimensions)<length(modelDimensions)
        dataDimensions=...
        [...
        dataDimensions,...
        ones(1,length(modelDimensions)-length(dataDimensions))...
        ];
    end
    if any(dataDimensions~=modelDimensions)
        dataDimensionsString=...
        loc_dims_vector_2_dims_string(dataDimensionsOrig);
        modelDimensionsString=...
        loc_dims_vector_2_dims_string(modelDimensionsOrig);
        if isElementOfBus
            msl=MSLException([],...
            message('Simulink:SimInput:InportBusStructDimsMismatch',...
            'external',...
            block,...
            dataPath,...
            dataDimensionsString,...
modelDimensionsString...
            ));
        else
            msl=MSLException([],...
            message('Simulink:SimInput:InportPortDimsMismatch',...
            block,...
            dataDimensionsString,...
modelDimensionsString...
            ));
        end
        msl.throwAsCaller;
    end
end



function loc_verify_leaf_complexity(...
    aobHierarchy,...
    nodeIdx,...
    complexity,...
    block,...
    dataPath,...
isElementOfBus...
    )
    if aobHierarchy(nodeIdx).Complexity==false&&complexity
        if isElementOfBus
            msl=MSLException([],...
            message('Simulink:SimInput:InportBusStructComplexityMismatch',...
            'external',...
            block,...
dataPath...
            ));
        else
            msl=MSLException([],...
            message('Simulink:SimInput:InportComplexityMismatch',...
block...
            ));
        end
        msl.throwAsCaller;
    end
end



function loc_verify_node_is_leaf(...
    aobHierarchy,...
    nodeIdx,...
    block,...
dataPath...
    )
    if~isempty(aobHierarchy(nodeIdx).Children)
        if nodeIdx==1
            msl=MSLException([],...
            message('Simulink:SimInput:InportDataNonBusDataForBus',...
            block,...
            dataPath)...
            );
            msl.throwAsCaller;
        else
            msl=MSLException([],...
            message('Simulink:SimInput:InportDataHierStructLeafForBus',...
            block,...
            dataPath)...
            );
            msl.throwAsCaller;
        end
    end
end



function loc_verify_node_dimensions(...
    aobHierarchy,...
    nodeIdx,...
    datasetElement,...
    block,...
dataPath...
    )
    dataNodeDimensions=size(datasetElement);
    modelNodeDimensions=aobHierarchy(nodeIdx).Dimensions;
    modelNodeDimensions=loc_scalar_dimension_expansion(...
    modelNodeDimensions,...
dataNodeDimensions...
    );
    if length(modelNodeDimensions)<2&&length(dataNodeDimensions)==2
        if dataNodeDimensions(1)==1
            modelNodeDimensions=[1,modelNodeDimensions];
        elseif dataNodeDimensions(2)==1
            modelNodeDimensions=[modelNodeDimensions,1];
        end
    end
    if length(dataNodeDimensions)>length(modelNodeDimensions)||...
        any(...
        dataNodeDimensions>...
        modelNodeDimensions(1:length(dataNodeDimensions))...
        )
        dataNodeDimensionsString=...
        loc_dims_vector_2_dims_string(dataNodeDimensions);
        modelNodeDimensionsString=...
        loc_dims_vector_2_dims_string(modelNodeDimensions);
        if nodeIdx==1
            msl=MSLException([],...
            message('Simulink:SimInput:InportPortDimsMismatchAOB',...
            block,...
            dataNodeDimensionsString,...
            modelNodeDimensionsString,...
dataPath...
            ));
            msl.throwAsCaller
        else
            msl=MSLException([],...
            message('Simulink:SimInput:InportPortDimsMismatchAOBForHier',...
            block,...
            dataNodeDimensionsString,...
            modelNodeDimensionsString,...
            dataPath,...
            aobHierarchy(nodeIdx).DatatypeName...
            ));
            msl.throwAsCaller;
        end
    end
end


function idxString=loc_idx_vector_2_idx_string(idxVector)
    idxString='(';
    for idx=1:length(idxVector)-1
        idxString=sprintf('%s%d, ',idxString,idxVector(idx));
    end
    idxString=sprintf('%s%d)',idxString,idxVector(end));
end

function builtin=loc_is_built_in_type(type)
    builtin=strcmp(type,'double')||...
    strcmp(type,'single')||...
    strcmp(type,'boolean')||...
    strcmp(type,'logical')||...
    strcmp(type,'int8')||...
    strcmp(type,'uint8')||...
    strcmp(type,'int16')||...
    strcmp(type,'uint16')||...
    strcmp(type,'int32')||...
    strcmp(type,'uint32')||...
    strcmp(type,'int64')||...
    strcmp(type,'uint64');
end
function fi=loc_is_fi_type(type)
    fi=strcmp(type,'fixed-point')||...
    strcmp(type,'scaled-double')||...
    strcmp(type,'date-time');
end
function enum=loc_is_enum_type(type)
    enum=~loc_is_fi_type(type)&&...
    ~loc_is_built_in_type(type)&&...
    ~strcmp(type,'string');
end



