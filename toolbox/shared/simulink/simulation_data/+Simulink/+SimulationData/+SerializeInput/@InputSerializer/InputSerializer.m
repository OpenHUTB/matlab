classdef(Abstract)InputSerializer




    properties(Access=protected)
buildData
model
aobHierarchy
interpolation
portBusTypes
msgPortIdxs
currBlock
isForConsistencyChecks
rootInportsInfo
ds
slFeatures
    end

    methods(Abstract)
        throwError(this,errMsg,isExtInpError,varargin)
    end

    methods(Access=protected)

        function throwErrorForInvalidElementContents(this)

            this.throwError(...
            true,...
'Simulink:SimInput:LoadingInvalidElementContents'...
            );
        end






        function[serializedElement,diagStruct]=...
            serialize_element_with_check(...
            this,...
            interpolation,...
            element,...
            aobHierarchy,...
            nodeIdx,...
            block,...
            inputPath,...
            dataPath,...
            isElementOfBus,...
            portBusType,...
            elementIdx,...
diagStruct...
            )



            if~this.isForConsistencyChecks
                serializedElement=serialize_element(...
                this,...
                interpolation,...
                element,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
                isElementOfBus,...
portBusType...
                );
                return;
            end

            serializedElement=[];
            exc=[];
            try
                serializedElement=serialize_element(...
                this,...
                interpolation,...
                element,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
                isElementOfBus,...
portBusType...
                );
            catch e
                exc=e;
            end

            if~isempty(exc)


                serializedElement{elementIdx}=[];
                diagStruct.Status=e.message;
                if~isfield(diagStruct,'Diagnostics')
                    diagStruct.Diagnostics={block,e.cause{1}};
                else
                    diagStruct.Diagnostics=[diagStruct.Diagnostics;...
                    {block,e.cause{1}}];
                end
            else


                if isempty(diagStruct)
                    diagStruct.Status='No Errors';
                end
                if~isfield(diagStruct,'Diagnostics')
                    diagStruct.Diagnostics={block,'No Errors'};
                else
                    diagStruct.Diagnostics=[diagStruct.Diagnostics;...
                    {block,'No Errors'}];
                end
            end
        end



        function result=serialize_element(...
            this,...
            interpolation,...
            element,...
            aobHierarchy,...
            nodeIdx,...
            block,...
            inputPath,...
            dataPath,...
            isElementOfBus,...
portBusType...
            )




            this.currBlock=block;
            blockType=get_param(block,'BlockType');
            if strcmp(blockType,'Inport')
                inportIsFcnCall=strcmpi(get_param(block,'OutputFunctionCall'),'on');
            else
                assert(...
                strcmp(blockType,'EnablePort')||...
                strcmp(blockType,'TriggerPort')||...
                strcmp(blockType,'FlexibleSource')||...
                strcmp(blockType,'FromWorkspace')...
                );
                inportIsFcnCall=false;
            end
            if inportIsFcnCall
                result=this.serialize_dataset_element_fcncall(...
                element,...
block...
                );
            elseif isempty(element)
                result=[];
            elseif issparse(element)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingSparseMatrix',...
dataPath...
                );
            elseif isstruct(element)&&isfield(element,'liveData')
                result.LeafMarker=...
                Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;

                result.ElementType='live_data';
                result.SignalMode=0;

                result.ContainerDatatypeName='double';
                result.SampleSize=1;
                result.MaxFieldLen=0;
                result.domain=element.domain;
                result.topic=element.topic;

            elseif isa(element,'timetable')&&isElementOfBus&&...
                ~isempty(aobHierarchy(nodeIdx).Children)
                if isequal(this.slFeatures.slLoadMultiColTimetable,0)
                    this.throwErrorForInvalidElementContents;
                end

                [result,numCols]=this.serialize_multicolumn_timetable_bus(...
                interpolation,...
                element,...
                1,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
portBusType...
                );
                if numCols<size(element,2)
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingMultiColumnTimetableLeafMismatch',...
                    dataPath,...
block...
                    );
                end
            elseif isa(element,'Simulink.SimulationData.BlockData')
                if~isscalar(element)
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingNonScalarBlockData',...
dataPath...
                    );
                end
                values=element.Values;
                if~isa(values,'timeseries')&&~isstruct(values)&&...
                    ~isa(values,'matlab.io.datastore.SimulationDatastore')&&...
                    ~(isa(values,'timetable'))
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingBlockDataValuesType',...
dataPath...
                    );
                end
                dataPath=[dataPath,'.Values'];
                result=this.serialize_element(...
                interpolation,...
                values,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
                isElementOfBus,...
portBusType...
                );
            elseif isstruct(element)&&~isfield(element,'signals')
                result=...
                this.serialize_bus_struct(...
                interpolation,...
                element,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
portBusType...
                );
            else
                result=this.serialize_leaf(...
                interpolation,...
                element,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
                dataPath,...
isElementOfBus...
                );
            end
        end

        function serializedStruct=serialize_bus_struct(...
            this,...
            interpolation,...
            busElement,...
            aobHierarchy,...
            nodeIdx,...
            block,...
            inputPath,...
            dataPath,...
portBusType...
            )







            fields=fieldnames(busElement);
            if isempty(fields)
                serializedStruct=[];
                return
            end

            this.loc_verify_node_dimensions(...
            aobHierarchy,...
            nodeIdx,...
            busElement,...
dataPath...
            );

            if isequal(portBusType,'NOT_BUS')
                if~Simulink.SimulationData.utValidSignalOrCompositeData(busElement)
                    this.throwErrorForInvalidElementContents;
                else
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingStructDataTypeNotBus',...
                    get_param(block,'OutDataTypeStr')...
                    );
                end
            end
            aobChildren=aobHierarchy(nodeIdx).Children;
            if nodeIdx==1&&isempty(aobChildren)
                this.throwErrorForInvalidElementContents;
            end
            aobDimensions=aobHierarchy(nodeIdx).Dimensions;
            dataNodeDimensions=size(busElement);
            aobDimensions=this.scalar_dimension_expansion(...
            aobDimensions,...
dataNodeDimensions...
            );
            nAobDimensions=length(aobDimensions);
            dim=[length(fields),aobDimensions];
            emptyData=cell(dim);
            serializedStruct=cell2struct(emptyData,fields,1);
            for idx=1:numel(busElement)
                sub=this.loc_ind2sub(size(busElement),idx);
                sub=...
                [sub,ones(1,nAobDimensions-ndims(busElement))];%#ok<AGROW>
                idxAob=this.loc_sub2ind(aobDimensions,sub);
                for fieldIdx=1:length(fields)
                    field=fields{fieldIdx};
                    idxString=this.loc_idx_vector_2_idx_string(sub);
                    dataPathChild=[dataPath,idxString,'.',field];
                    nameFound=false;
                    for childIdx=aobChildren
                        childName=aobHierarchy(childIdx).Name;
                        if strcmp(field,childName)
                            nameFound=true;
                            break
                        end
                    end
                    if~nameFound
                        if~Simulink.SimulationData.utValidSignalOrCompositeData(busElement)
                            this.throwErrorForInvalidElementContents;
                        end
                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingDataHierStructExtraField',...
dataPathChild...
                        );
                    end
                    if isempty(busElement(idx).(field))
                        continue
                    end
                    isBusElement=true;
                    serializedStruct(idxAob).(field)=...
                    this.serialize_element(...
                    interpolation,...
                    busElement(idx).(field),...
                    aobHierarchy,...
                    childIdx,...
                    block,...
                    inputPath,...
                    dataPathChild,...
                    isBusElement,...
portBusType...
                    );

                end
            end
        end


        function[result,dataInfo]=serialize_logged_struct(...
            this,...
            interpolation,...
            st,...
            aobHierarchy,...
            nodeIdx,...
            block,...
            inputPath,...
dataPath...
            )
            if~isfield(st.signals(nodeIdx),'values')
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingStructEmptyUnsupportedDataType',...
                [inputPath,'.signals(',num2str(nodeIdx),')']...
                );
            end
            time=st.time(:);
            tc=class(time);
            if~isequal('double',tc)
                dataPath=sprintf('%s.time',inputPath);
                this.throwError(...
                true,...
                'Simulink:SimInput:InportNonDoubleTimeValuesStruct',...
                dataPath);
            end

            dataSize=size(st.signals(nodeIdx).values);
            if isempty(time)

                if~isequal(get_param(block,'interpolate'),'off')
                    this.throwError(...
                    true,...
'Simulink:SimInput:LoadingDiscCannotInterp'...
                    );
                end


                blkStepSize=get_param(block,'CompiledSampleTime');
                if~(blkStepSize>0)
                    this.throwError(...
                    true,...
'Simulink:SimInput:LoadingDiscSampleTime'...
                    );
                end

                mdlStartTime=get_param(this.model,'StartTime');

                if isfield(st.signals,'dimensions')&&isequal(st.signals.dimensions,dataSize)

                    dataSize=1;
                elseif numel(dataSize)>2


                    dataSize=dataSize(end);
                else

                    dataSize=dataSize(1);
                end
                time=blkStepSize(1)*(0:dataSize-1)';
                time=time+str2double(mdlStartTime);
            end


            if issparse(st.signals(nodeIdx).values)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingSparseMatrix',...
                [inputPath,'.signals(',num2str(nodeIdx),')']...
                );
            end


            if isempty(st.signals(nodeIdx).values)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingStructEmptyUnsupportedDataType',...
                [inputPath,'.signals(',num2str(nodeIdx),')']...
                );
            end

            data=st.signals(nodeIdx).values;

            if~isnumeric(data)&&...
                ~islogical(data)&&...
                ~isenum(data)&&...
                ~isa(data,'embedded.fi')&&...
                ~isstring(data)&&...
                ~ischar(data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingStructUnsupportedDataType',...
dataPath...
                );
            end

            if numel(size(data))>2&&...
                ~isfield(st.signals(nodeIdx),'dimensions')
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingUnsupportedDimensions',...
                dataPath);
            end
            if isfield(st.signals(nodeIdx),'dimensions')&&...
                (numel(st.signals(nodeIdx).dimensions)>1)

                stDims=size(st.signals(nodeIdx).values);
                if isequal(numel(time),1)&&...
                    ~isequal(numel(stDims),...
                    numel(st.signals(nodeIdx).dimensions))

                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingDifferentNumTSteps');
                end
                if numel(time)>1&&~isequal(numel(time),stDims(end))

                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingDifferentNumTSteps');
                end
                data=st.signals(nodeIdx).values;
            else

                if~isequal(dataSize(1),numel(time))
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingDifferentNumRows',...
                    dataPath);
                end

                if~isfield(st.signals(nodeIdx),'dimensions')&&...
                    isequal(numel(dataSize),2)
                    isSpecifiedAsRowVecOnPort=...
                    isequal(numel(aobHierarchy.Dimensions),2)&&...
                    isequal(aobHierarchy.Dimensions(1),1)&&...
                    ~isequal(aobHierarchy.Dimensions(2),1);
                    if isSpecifiedAsRowVecOnPort



                        dataDimensionsString=this.dims_vector_2_dims_string(dataSize(2));
                        modelDimensionsString=this.dims_vector_2_dims_string(aobHierarchy.Dimensions);
                        this.throwError(...
                        false,...
                        'Simulink:SimInput:LoadingPortDimsMismatch',...
                        dataDimensionsString,...
modelDimensionsString...
                        );
                    end
                end

                data=st.signals(nodeIdx).values.';
            end


            if isfield(st.signals(nodeIdx),'dimensions')

                if~isequal(st.signals(nodeIdx).dimensions,...
                    aobHierarchy.Dimensions)||...
                    any(mod(st.signals(nodeIdx).dimensions,1)~=0)
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingUnsupportedDimensions',...
                    dataPath);
                end
            end




            varDimsInfo=[];
            if isfield(st.signals(nodeIdx),'valueDimensions')
                valDims=st.signals(nodeIdx).valueDimensions;
                varDimsInfo.ValueDimensionsSampleSize=int32(size(valDims,2));
                varDimsInfo.ValueDimensions=valDims;
                varDimsInfo.compiledPortDims=int32(aobHierarchy(1).Dimensions);
                varDimsInfo.numCompiledPortDims=...
                numel(varDimsInfo.compiledPortDims);
                varDimsInfo.BlkNameForWarning=block;
            end


            modelComplexity=aobHierarchy(1).Complexity;

            elementType='struct';
            [result,dataInfo]=...
            this.serialize_leaf_core(...
            time,...
            data,...
            elementType,...
            interpolation,...
            modelComplexity,...
            [],...
            dataPath,...
            '',...
            [],...
varDimsInfo...
            );
        end

        function result=serialize_leaf(...
            this,...
            interpolation,...
            element,...
            aobHierarchy,...
            nodeIdx,...
            block,...
            inputPath,...
            dataPath,...
isElementOfBus...
            )
            if isempty(element)
                result=[];
                return;
            end

            this.checkForValidLeaf(element,dataPath,nodeIdx,isElementOfBus);

            modelComplexity=aobHierarchy(nodeIdx).Complexity;
            maxStrLen=aobHierarchy(nodeIdx).MaxStrLen;
            if isa(element,'timeseries')
                [result,dataInfo]=this.serialize_timeseries(...
                interpolation,...
                modelComplexity,...
                maxStrLen,...
                element,...
                inputPath,...
dataPath...
                );
            elseif isa(element,'matlab.io.datastore.SimulationDatastore')
                if isequal(element.ImplType,'SDIRepo')
                    [result,dataInfo]=this.serialize_SDI_datastore(...
element...
                    );
                else
                    [result,dataInfo]=this.serialize_simulation_datastore(...
                    interpolation,...
                    element,...
dataPath...
                    );
                end

                if isempty(result)
                    return
                end
            elseif isa(element,'matlab.io.datastore.MDFDatastore')
                [result,dataInfo]=this.serialize_mdf_datastore(...
element...
                );
            elseif isa(element,'matlab.io.datastore.ConcolicDatastore')
                [result,dataInfo]=this.serialize_concolic_datastore(...
element...
                );
            elseif isa(element,'matlab.io.datastore.sdidatastore')
                [result,dataInfo]=this.serialize_SDI_datastore(...
element...
                );
            elseif isa(element,'timetable')
                [result,dataInfo]=this.serialize_timetable(...
                interpolation,...
                modelComplexity,...
                maxStrLen,...
                element,...
                inputPath,...
dataPath...
                );
            elseif isfield(element,'time')&&...
                isfield(element,'signals')
                [result,dataInfo]=...
                this.serialize_logged_struct(...
                interpolation,...
                element,...
                aobHierarchy,...
                nodeIdx,...
                block,...
                inputPath,...
dataPath...
                );
            else
                assert(...
                nodeIdx==1&&...
                this.is_valid_numeric_dataset_element(element)...
                );
                [result,dataInfo]=...
                this.serialize_array(...
                aobHierarchy,...
                interpolation,...
                modelComplexity,...
                element,...
inputPath...
                );
            end
            this.verify_leaf_dataset_element_vs_aob_hierarchy(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            block,...
            dataPath,...
isElementOfBus...
            );
        end

        function[result,dataInfo]=serialize_timeseries(...
            this,...
            interpolation,...
            modelComplexity,...
            maxStrLen,...
            ts,...
            inputPath,...
dataPath...
            )
            if~isscalar(ts)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingNonScalarTimeseries',...
dataPath...
                );
            end
            if ts.length==0||isempty(ts.Data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingInvalidNumberOfSamplesTimeseries',...
dataPath...
                );
            end
            time=ts.Time;
            if~isa(time,'double')
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingNonDoubleTimeValues',...
dataPath...
                );
            end
            nSamples=length(time);

            data=ts.Data;
            if issparse(data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingSparseMatrix',...
dataPath...
                );
            end
            if~isnumeric(data)&&...
                ~islogical(data)&&...
                ~isenum(data)&&...
                ~isa(data,'embedded.fi')&&...
                ~isstring(data)&&...
                ~ischar(data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingVariableUnsupportedDataType',...
dataPath...
                );
            end

            if ts.IsTimeFirst...
                &&nSamples>1...
                &&~ischar(data)
                assert(ismatrix(data));
                data=data.';
            end

            elementType='timeseries';
            [result,dataInfo]=...
            this.serialize_leaf_core(...
            time,...
            data,...
            elementType,...
            interpolation,...
            modelComplexity,...
            maxStrLen,...
            inputPath,...
            ts.DataInfo.Units,...
            []...
            );

        end

        function[result,dataInfo]=serialize_array(...
            this,...
            aobHierarchy,...
            interpolation,...
            modelComplexity,...
            ar,...
inputPath...
            )
            time=ar(:,1);
            data=ar(:,2:end)';
            elementType='array';

            if~isreal(ar)
                this.throwErrorForInvalidElementContents;
            end


            bdims=aobHierarchy.Dimensions;
            if numel(bdims)>1&&~isequal(prod(bdims),1)
                this.throwError(...
                true,...
'Simulink:SimInput:LoadingInportInvalidMatrixData'...
                );
            end

            [result,dataInfo]=...
            this.serialize_leaf_core(...
            time,...
            data,...
            elementType,...
            interpolation,...
            modelComplexity,...
            [],...
            inputPath,...
            '',...
            []...
            );
        end

        function[result,dataInfo]=serialize_mdf_datastore(this,dst)


            result.LeafMarker=...
            Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
            result.ElementType='mdf_datastore';
            result.SignalMode=0;




            ReadSize=2000;



            mdfObjectData=mdfDatastore(dst.Files{1});
            mdfObjectData.SelectedChannelGroupNumber=...
            dst.SelectedChannelGroupNumber;
            mdfObjectData.SelectedChannelNames=...
            dst.SelectedChannelNames;
            mdfObjectData.SelectedChannelGroupNumber=...
            dst.SelectedChannelGroupNumber;
            result.mdfWrapperData=...
            matlab.io.datastore.MdfDatastoreWrapper(mdfObjectData,false);
            result.mdfWrapperData.ReadSize=ReadSize;


            mdfObjectTime=mdfDatastore(dst.Files{1});
            mdfObjectTime.SelectedChannelGroupNumber=...
            dst.SelectedChannelGroupNumber;
            mdfObjectTime.SelectedChannelNames=...
            dst.SelectedChannelNames{end};
            mdfObjectTime.SelectedChannelGroupNumber=...
            dst.SelectedChannelGroupNumber;
            result.mdfWrapperTime=...
            matlab.io.datastore.MdfDatastoreWrapper(mdfObjectTime,true);
            result.mdfWrapperTime.ReadSize=ReadSize;


            result.mdfWrapperTime.ReadSize=result.mdfWrapperData.ReadSize;

            dataInfo=this.getDataInfoFromPreview(mdfObjectTime.preview);
        end

        function[result,dataInfo]=serialize_concolic_datastore(~,dst)


            result.LeafMarker=...
            Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
            result.ElementType='tt_datastore';
            result.SignalMode=0;





            ttObjectData=dst;
            result.ttWrapperData=...
            matlab.io.datastore.TTDatastoreWrapper(ttObjectData,false);


            ttObjectTime=matlab.io.datastore.ConcolicTimeWrapper(dst);
            result.ttWrapperTime=...
            matlab.io.datastore.TTDatastoreWrapper(ttObjectTime,true);

            dataInfo.Datatype='double';
            dataInfo.Size=1;
            dataInfo.NSamples=0;
            dataInfo.Complexity=false;
            dataInfo.Units='';
        end

        function[result,dataInfo]=serialize_simulation_datastore(...
            this,...
            interpolation,...
            dst,...
dataPath...
            )

            if~isscalar(dst)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingNonScalarSimulationDatastore',...
dataPath...
                );
            end
            if~isa(dst.SimDatastoreImpl,...
                'matlab.io.datastore.datastoreimpl.MATFileSimDatastoreImpl')
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingNonMatFileBackedSimulationDatastore',...
dataPath...
                );
            end
            dstProps=dst.getSimImplProps();
            if dstProps.EmptyStrct_
                result=[];
                dataInfo=[];
                return;
            end
            if dstProps.NSamples_==0
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingInvalidNumberOfSamplesSimulationDatastore',...
dataPath...
                );
            end

            turnOffInterp=false;
            if interpolation&&(...
                this.loc_is_fi_type(dstProps.SignalAttributesData_.ClassName)||...
                this.loc_is_half_type(dstProps.SignalAttributesData_.ClassName)||...
                this.loc_is_enum_type(dstProps.SignalAttributesData_.ClassName))&&...
                ~isa(this,'Simulink.SimulationData.SerializeInput.FromWksSerializer')&&...
                isequal(get_param(this.currBlock,'IsBusElementPort'),'on')
                if isequal(this.slFeatures.busElPortAutoInterp,0)



                    this.throwError(...
                    false,...
'Simulink:SimInput:BusElementPortNonSupportedInterpData'...
                    );
                else



                    turnOffInterp=true;
                end
            elseif interpolation&&this.loc_is_enum_type(dstProps.SignalAttributesData_.ClassName)

                this.throwError(...
                false,...
'Simulink:SimInput:LoadingCannotInterpFiOrEnum'...
                );
            elseif interpolation&&this.loc_is_fi_type(dstProps.SignalAttributesData_.ClassName)&&...
                this.slFeatures.rootInportInterpolation<2

                this.throwError(...
                false,...
'Simulink:SimInput:LoadingCannotInterpFiOrEnum'...
                );
            end

            result.LeafMarker=...
            Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
            result.ElementType='simulation_datastore';
            result.SignalMode=0;

            result.FileName=dstProps.FileName_;
            result.FileSignature=dstProps.FileSignature_;
            result.NSamples=dstProps.NSamples_;
            result.turnOffInterp=turnOffInterp;

            timeIsDouble=true;
            if dstProps.IsTimeCompressed_
                result.CompressedTime=dstProps.CompressedTime_;
                timeIsDouble=isa(result.CompressedTime,'double');
            else
                if isempty(dstProps.TimeInMemory_)
                    result.TimeR2=dstProps.TimeRecordIdx_;
                    if isfield(dstProps,'TimeAttributes')&&...
                        ~strcmp(dstProps.TimeAttributes.ClassName,'double')
                        timeIsDouble=false;
                    end
                else
                    result.Time=dstProps.TimeInMemory_;
                    timeIsDouble=isa(result.Time,'double');
                end
            end
            if~timeIsDouble
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingNonDoubleTimeValues',...
dataPath...
                );
            end

            if isempty(dstProps.DataInMemory_)
                result.DataR2=dstProps.DataRecordIdx_;
            else

                result.Data=dstProps.DataInMemory_;
            end

            result.SampleSize=dstProps.DataSampleSizeInElements_;

            isfi=this.loc_is_fi_type(dstProps.SignalAttributesData_.ClassName);
            result.FiDataTypeProps=[];
            if isfi
                dataInfo.Datatype='embedded.fi';
                dataInfo.NumericType=...
                numerictype(...
                dstProps.SignalAttributesData_.FixedPointParameters.isSigned,...
                double(dstProps.SignalAttributesData_.FixedPointParameters.WordLength),...
                dstProps.SignalAttributesData_.FixedPointParameters.SlopeAdjustmentFactor,...
                double(dstProps.SignalAttributesData_.FixedPointParameters.Exponent),...
                dstProps.SignalAttributesData_.FixedPointParameters.Bias...
                );
                FiDataTypeProps.isSigned=dstProps.SignalAttributesData_.FixedPointParameters.isSigned;
                FiDataTypeProps.WordLength=dstProps.SignalAttributesData_.FixedPointParameters.WordLength;
                FiDataTypeProps.SlopeAdjustmentFactor=dstProps.SignalAttributesData_.FixedPointParameters.SlopeAdjustmentFactor;
                FiDataTypeProps.Exponent=dstProps.SignalAttributesData_.FixedPointParameters.Exponent;
                FiDataTypeProps.Bias=dstProps.SignalAttributesData_.FixedPointParameters.Bias;
                if isfield(dstProps.SignalAttributesData_,'ResolvedClassName')&&...
                    ~isempty(dstProps.SignalAttributesData_.ResolvedClassName)
                    if isequal(dstProps.SignalAttributesData_.ResolvedClassName,'double')
                        result.ContainerDatatypeName='scaled-double';
                    else
                        result.ContainerDatatypeName='fixed-point';
                    end
                end
                result.FiDataTypeProps=FiDataTypeProps;
            else
                dataInfo.Datatype=dstProps.SignalAttributesData_.ClassName;
                if strcmp(dataInfo.Datatype,'boolean')
                    dataInfo.Datatype='logical';
                end
                if strcmp(dataInfo.Datatype,'string')
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingSimDatastoreStr',...
dataPath...
                    );
                end
                if isempty(dstProps.SignalAttributesData_.ResolvedClassName)
                    result.ContainerDatatypeName=dstProps.SignalAttributesData_.ClassName;
                else
                    result.ContainerDatatypeName=...
                    dstProps.SignalAttributesData_.ResolvedClassName;
                end
            end
            dataInfo.Size=double(dstProps.SignalAttributesData_.Dimension);
            if iscolumn(dataInfo.Size)&&~isscalar(dataInfo.Size)
                dataInfo.Size=dataInfo.Size.';
            end
            if dstProps.NSamples_>1
                dataInfo.Size=[dataInfo.Size,dstProps.NSamples_];
            end
            dataInfo.NSamples=dstProps.NSamples_;
            dataInfo.Complexity=dstProps.SignalAttributesData_.Complexity;
            result.isRealDataForComplexPort=false;
            blockType=get_param(this.currBlock,'BlockType');
            if isequal(dstProps.SignalAttributesData_.Complexity,false)&&...
                ~isequal(blockType,'FlexibleSource')&&...
                ~isequal(blockType,'FromWorkspace')&&...
                isequal(get_param(this.currBlock,'signaltype'),'complex')




                result.isRealDataForComplexPort=true;
                result.SampleSize=2*result.SampleSize;




                prev=dst.preview();
                oneSampleComplex=complex(prev{1,1});
                if isfi
                    oneSampleComplex=simulinkarray(oneSampleComplex);
                    result.groundVal=imag(oneSampleComplex);
                else
                    result.groundVal=imag(oneSampleComplex);
                end
            end
            dataInfo.Units='';
        end

        function[result,dataInfo]=serialize_SDI_datastore(this,dst)


            result.LeafMarker=...
            Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
            result.ElementType='tt_datastore';
            result.SignalMode=0;



            ttObjectData=copy(dst);
            result.ttWrapperData=...
            matlab.io.datastore.TTDatastoreWrapper(ttObjectData,false);



            ttObjectTime=copy(dst);
            result.ttWrapperTime=...
            matlab.io.datastore.TTDatastoreWrapper(ttObjectTime,true);


            result.ttWrapperTime.ReadSize=result.ttWrapperData.ReadSize;


            dataInfo=this.getDataInfoFromPreview(ttObjectTime.preview);
        end

        function[result,dataInfo]=serialize_timetable(...
            this,...
            interpolation,...
            modelComplexity,...
            maxStrLen,...
            tt,...
            inputPath,...
dataPath...
            )
            time=tt.Properties.RowTimes;
            if(isa(time,'duration'))
                time=seconds(time);
            else
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingTimetableUnsupportedTimeFormat',...
dataPath...
                );
            end





            discreteProps=[];
            if isequal(this.slFeatures.loadRegularTimetable,1)&&...
                isregular(tt)&&isequal(interpolation,0)
                blockSampleTime=get_param(this.currBlock,'CompiledSampleTime');


                if blockSampleTime(1)>0

                    discreteProps.SampleRate=tt.Properties.SampleRate;
                end
            end


            if~issorted(time)||~all(isfinite(time))
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingTimeDecreasing',...
dataPath...
                );
            end

            nSamples=length(time);
            data=tt.(tt.Properties.VariableNames{1});



            if isequal(nSamples,1)&&numel(data)>1
                dataSize=size(data);
                if numel(dataSize)>2


                    data=reshape(data,dataSize(2:end));
                else

                    iswide=isstruct(tt.Properties.UserData)&&...
                    isfield(tt.Properties.UserData,'AppData')&&...
                    isfield(tt.Properties.UserData.AppData,'IsSimulinkWideSignal')&&...
                    isequal(tt.Properties.UserData.AppData.IsSimulinkWideSignal,true);
                    if~iswide&&~isequal(dataSize(2),1)




                        data=reshape(data,[dataSize(1),dataSize(2)]).';
                    end
                end

            end



            units='';

            if~isnumeric(data)&&...
                ~islogical(data)&&...
                ~isenum(data)&&...
                ~isa(data,'embedded.fi')&&...
                ~isstring(data)&&...
                ~ischar(data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingVariableUnsupportedDataType',...
dataPath...
                );
            end


            if numel(tt.Properties.VariableNames)>1
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingTimetableRILOneVar',...
dataPath...
                );
            end


            if issparse(data)
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingSparseMatrix',...
dataPath...
                );
            end

            if nSamples>1&&~ischar(data)
                data_size=size(data);
                data=permute(data,circshift((1:length(data_size)),-1));
            end
            if~isempty(units)
                units=units{1};
            end

            elementType='timetable';
            [result,dataInfo]=...
            this.serialize_leaf_core(...
            time,...
            data,...
            elementType,...
            interpolation,...
            modelComplexity,...
            maxStrLen,...
            inputPath,...
            units,...
discreteProps...
            );
        end

        function[result,dataInfo]=serialize_leaf_core(...
            this,...
            time,...
            data,...
            elementType,...
            interpolation,...
            modelComplexity,...
            maxStrLen,...
            inputPath,...
            units,...
            discreteProps,...
varargin...
            )
            nSamples=length(time);
            dataInfo.Datatype=class(data);
            if isa(data,'embedded.fi')
                dataInfo.NumericType=numerictype(data);
            end
            dataInfo.Size=size(data);
            dataInfo.NSamples=nSamples;
            dataInfo.Complexity=~isreal(data)&&~isstring(data);
            dataInfo.Units=units;
            dataInfo.InputPath=inputPath;
            dataInfo.MaxStrLen=maxStrLen;

            charData='';
            if ischar(data)
                charData=data;
                data=string(data)';
                dataInfo.Datatype='string';
                dataInfo.Size=size(data);
                dataInfo.ContainsMissing=false;
            elseif isstring(data)
                dataInfo.ContainsMissing=any(ismissing(data));
                if~dataInfo.ContainsMissing
                    charData=char(join(data));
                end
            end

            dataSize=size(data);
            if nSamples>1
                sampleSize=prod(dataSize(1:end-1));
            else
                sampleSize=prod(dataSize);
            end

            varDimsInfo=[];
            isVarDim=false;
            if nargin>10&&~isempty(varargin{1})
                isVarDim=true;
                varDimsInfo=varargin{1};
            end
            dataInfo.varDimsInfo=varDimsInfo;

            if isVarDim

                for idx=1:varDimsInfo.numCompiledPortDims
                    idxs=varDimsInfo.ValueDimensions(:,idx)>...
                    varDimsInfo.compiledPortDims(idx);
                    if any(idxs)


                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingInvalidValueDimensions',...
                        inputPath,...
                        varDimsInfo.compiledPortDims(idx)...
                        );
                    end
                    idxs=varDimsInfo.ValueDimensions(:,idx)<0;
                    if any(idxs)

                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingInvalidValueDimensions',...
                        inputPath,...
                        varDimsInfo.compiledPortDims(idx)...
                        );
                    end
                end

                valdimssize=size(varDimsInfo.ValueDimensions);


                if~isequal(nSamples,valdimssize(1))
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingDifferentNumTSteps');
                end



                if~isequal(valdimssize(2),numel(dataSize)-1)
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingVarDimsNumDimsMismatch');
                end

                newdata=[];
                for idx=1:dataSize(end)
                    str='data(';
                    for jdx=1:valdimssize(2)
                        str=[str,'(1:',num2str(varDimsInfo.ValueDimensions(idx,jdx)),'),'];%#ok<AGROW>
                    end
                    str=[str,[num2str(idx),')']];%#ok<AGROW>
                    a=eval(str);
                    newdata=[newdata;a(:)];%#ok<AGROW>
                end
                isBool=islogical(data);
                data=newdata;
                if(isBool)


                    data=logical(data);
                end
                varDimsInfo.ValueDimensions=varDimsInfo.ValueDimensions';
                varDimsInfo.ValueDimensions=int32(varDimsInfo.ValueDimensions(:));
            else
                data=data(:);
            end

            if~isstring(data)&&~all(isfinite(data))
                this.throwError(...
                true,...
                'Simulink:SimInput:LoadingDataMustBeFinite',...
inputPath...
                );
            end

            className=[];

            if isstring(data)


                startsWithNull=data.startsWith(char(0));
                data(startsWithNull)="";
                data=strtok(data,char(0));

                dataInfo.StrLength=strlength(data);
                dataInfo.ContainsNonAscii=charData(:)>255;
                dataInfo.SampleSize=sampleSize;






                className=class(data);
                data=cellstr(data);
            end

            turnOffInterp=this.validateInterpSettings(data,interpolation,inputPath);

            if isenum(data)
                if isa(data,'int8')
                    data=int8(data);
                elseif isa(data,'uint8')
                    data=uint8(data);
                elseif isa(data,'int16')
                    data=int16(data);
                elseif isa(data,'uint16')
                    data=uint16(data);
                elseif isa(data,'int32')
                    data=int32(data);
                elseif isa(data,'uint32')
                    data=uint32(data);
                elseif isa(data,'int64')
                    data=int64(data);
                elseif isa(data,'uint64')
                    data=uint64(data);
                elseif isa(data,'single')
                    data=single(data);
                elseif isa(data,'half')
                    data=half(data);
                elseif isa(data,'double')
                    data=double(data);
                elseif isa(data,'logical')
                    data=logical(data);
                else
                    assert(false,'not a built-in or logical enum')
                end
            end

            if isempty(className)
                className=class(data);
            end
            fiSampleSizeFactor=1;
            fiDataTypeProps=[];
            if isfi(data)
                assert(~isempty(data));
                dataFi=data;
                data=simulinkarray(dataFi);
                lengthFi=length(dataFi);
                lengthContainer=length(data);
                assert(mod(lengthContainer,lengthFi)==0);
                fiSampleSizeFactor=lengthContainer/lengthFi;
                fiDataTypeProps.isSigned=dataFi.Signed;
                fiDataTypeProps.WordLength=uint32(dataFi.WordLength);
                fiDataTypeProps.SlopeAdjustmentFactor=dataFi.SlopeAdjustmentFactor;
                fiDataTypeProps.Exponent=dataFi.FixedExponent;
                fiDataTypeProps.Bias=dataFi.Bias;
                if~dataFi.isdouble&&~dataFi.issingle&&~dataFi.ishalf&&~dataFi.isboolean
                    if dataFi.isscaleddouble
                        className='scaled-double';
                    else
                        className='fixed-point';
                    end
                else
                    className=class(data);
                end

            end

            if this.loc_is_half_type(class(data))
                data=data.storedInteger;
            end

            if isVarDim
                if~isreal(data)
                    varDimsInfo.isVardimsComplex=true;
                else
                    varDimsInfo.isVardimsComplex=false;
                end
            end
            if isreal(data)&&modelComplexity
                data=complex(data);
            end
            if~iscellstr(data)&&~isreal(data)%#ok<ISCLSTR>
                dataInterlaced=zeros(size(data,1)*2,1,class(data));
                if fiSampleSizeFactor>1
                    lengthData=length(data);




                    assert(mod(lengthData,fiSampleSizeFactor)==0);
                    nElements=length(data)/fiSampleSizeFactor;
                    for elementNo=1:nElements
                        dataIdx=fiSampleSizeFactor*(elementNo-1);
                        dataInterlaced(...
                        dataIdx*2+1:dataIdx*2+fiSampleSizeFactor...
                        )=...
                        real(data(dataIdx+1:dataIdx+fiSampleSizeFactor));
                        dataInterlaced(...
                        dataIdx*2+fiSampleSizeFactor+1:...
                        dataIdx*2+fiSampleSizeFactor*2...
                        )=...
                        imag(data(dataIdx+1:dataIdx+fiSampleSizeFactor));
                    end
                else
                    dataInterlaced(1:2:end-1)=real(data);
                    dataInterlaced(2:2:end)=imag(data);
                end
                data=dataInterlaced;
                sampleSize=sampleSize*2;
            end

            result.LeafMarker=...
            Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
            result.ElementType=elementType;
            result.SignalMode=0;
            result.Time=time;
            result.Data=data;
            result.ContainerDatatypeName=className;
            result.FiDataTypeProps=fiDataTypeProps;
            result.SampleSize=sampleSize;
            result.MaxFieldLen=maxStrLen;
            result.VarDimsInfo=varDimsInfo;
            result.turnOffInterp=turnOffInterp;
            result.DiscreteProps=discreteProps;
        end

        function result=serialize_dataset_element_fcncall(...
            this,...
            datasetElement,...
block...
            )
            this.verify_dataset_element_is_fcncall(datasetElement);



            if isempty(datasetElement)



                period=-1;
                offset=0;



                inportPeriodOffset=get_param(block,'SampleTime');
                if~isempty(inportPeriodOffset)
                    po=eval_string_with_workspace_resolution(...
                    inportPeriodOffset,...
                    this.model,...
                    this.buildData...
                    );

                    if length(po)>1
                        if~isempty(po(1))
                            period=po(1);
                        end
                        if~isempty(po(2))
                            offset=po(2);
                        end
                    else
                        if~isempty(po(1))
                            period=po(1);
                        end
                        offset=0;
                    end
                end



                if period<=0

                    inportPeriodOffset=get_param(block,'CompiledSampleTime');
                    period=inportPeriodOffset(1);
                    if period<=0
                        result=[];
                        return
                    else
                        offset=inportPeriodOffset(2);
                    end
                end
















                [Tstart,~]=sl('get_start_stop_times',this.buildData);






                if Tstart>=offset




                    nperiod=ceil((Tstart-offset)/period);



                    firstHit=offset+nperiod*period;

                else



                    nperiod=floor((offset-Tstart)/period);



                    firstHit=offset-nperiod*period;

                end



                result.LeafMarker=...
                Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
                result.SignalMode=1;
                result.Data=[period,firstHit];
            else


                if~isempty(block)
                    bRate=str2num(get_param(block,'SampleTime'));%#ok<ST2NM>
                    if~isequal(bRate,-1)
                        if isequal(numel(bRate),2)
                            intMults=mod(datasetElement-bRate(2),bRate(1));
                            if any(intMults)
                                intMults=find(intMults);
                                this.throwError(...
                                true,...
                                'Simulink:SimInput:LoadingInvalidFcnCallTime',...
                                num2str(datasetElement(intMults(1))),...
                                num2str(bRate(2)),...
                                num2str(bRate(1))...
                                );
                            end
                        else
                            intMults=mod(datasetElement,bRate);
                            if any(intMults)
                                intMults=find(intMults);
                                this.throwError(...
                                true,...
                                'Simulink:SimInput:LoadingInvalidFcnCallNoOffsetTime',...
                                num2str(datasetElement(intMults(1))),...
                                num2str(bRate)...
                                );
                            end
                        end
                    end



                    bRate=get_param(this.model,'FixedStep');
                    bRate=str2double(bRate);
                    intMults=mod(datasetElement,bRate);
                    if any(intMults>128*eps())
                        intMultIdxs=find(intMults);
                        intMults(intMultIdxs)=bRate-intMults(intMultIdxs);
                        if any(intMults>128*eps())
                            intMults=find(intMults);
                            this.throwError(...
                            true,...
                            'Simulink:SimInput:LoadingInvalidFcnCallTimeBaseRate',...
                            num2str(datasetElement(intMults(1))),...
                            num2str(bRate)...
                            );
                        end
                    end



                    dst=get_param(block,'PortConnectivity');


                    tPort=find_system(dst.DstBlock,...
                    'MatchFilter',@Simulink.match.internal.filterOutInactiveVariantSubsystemChoices,...
                    'BlockType','TriggerPort');
                    if isequal(get_param(tPort,'SampleTimeType'),'periodic')
                        sampleTimeParamString=get_param(block,'SampleTime');
                        if~strcmp(sampleTimeParamString,'-1')


                            this.throwError(...
                            true,...
                            'Simulink:SimInput:LoadingInvalidTsForFcnCallInportWithSpecifiedTs',...
sampleTimeParamString...
                            );
                        end
                    end
                end

                [time,nHits]=this.convert_fcncall_data(datasetElement);
                result.LeafMarker=...
                Simulink.SimulationData.Storage.DatasetStorage.LeafMarkerValue;
                result.SignalMode=2;
                result.Time=time;
                result.Data=nHits;
            end
        end

        function bRet=is_valid_numeric_dataset_element(~,el)
            bRet=...
            ismatrix(el)&&...
            isa(el,'double')&&...
            size(el,1)>0&&...
            size(el,2)>1&&...
            all(diff(el(:,1))>=0);
        end

        function ind=loc_sub2ind(this,siz,sub)
            nDims=length(siz);
            width=this.loc_sub_ind_width(siz);
            ind=1;
            for idx=1:nDims
                ind=ind+(sub(idx)-1)*width(idx);
            end
        end

        function sub=loc_ind2sub(this,siz,ind)
            nDims=length(siz);
            width=this.loc_sub_ind_width(siz);
            sub=zeros(1,nDims);
            for idx=nDims:-1:1
                dimSub=floor((ind-1)/width(idx));
                sub(idx)=dimSub+1;
                ind=ind-dimSub*width(idx);
            end
        end

        function width=loc_sub_ind_width(~,siz)
            nDims=length(siz);
            width=ones(1,nDims);
            for idx=2:nDims
                width(idx)=width(idx-1)*siz(idx-1);
            end
        end

        function verify_dataset_element_is_fcncall(this,datasetElement)
            if~isempty(datasetElement)&&...
                (...
                ~isa(datasetElement,'double')||...
                ~isreal(datasetElement)||...
                ~iscolumn(datasetElement)||...
                any(diff(datasetElement)<0)...
                )
                this.throwError(...
                false,...
'Simulink:SimInput:LoadingFcnCallInportDataTypeMismatch'...
                );
            end
        end

        function[time,nHits]=convert_fcncall_data(~,element)
            assert(...
            ~isempty(element)&&...
            isa(element,'double')&&...
            iscolumn(element)&&...
            all(diff(element)>=0)...
            );
            time=element(1);
            nHits=1;
            for idx=2:length(element)
                if element(idx)-element(idx-1)<eps
                    nHits(end)=nHits(end)+1;
                else
                    time=[time;element(idx)];%#ok<AGROW>
                    nHits=[nHits;1];%#ok<AGROW>
                end
            end
        end

        function verify_leaf_dataset_element_vs_aob_hierarchy(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            block,...
            dataPath,...
isElementOfBus...
            )
            this.verify_node_is_leaf(aobHierarchy,nodeIdx,dataPath);
            this.verify_leaf_datatype(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
dataPath...
            );
            this.verify_leaf_string_data(...
            dataInfo,...
            dataPath,...
isElementOfBus...
            );
            this.verify_leaf_dimensions(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            dataPath,...
isElementOfBus...
            );
            this.verify_leaf_complexity(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo.Complexity,...
            dataPath,...
isElementOfBus...
            );
            this.verify_leaf_unit(...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            block,...
            this.model,...
isElementOfBus...
            );
            this.verify_leaf_vardims(...
            dataInfo,...
            block,...
isElementOfBus...
            );
        end

        function verify_leaf_unit(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            block,...
            model,...
isElementOfBus...
            )
            if isequal(dataInfo.Units,'')
                return;
            end

            hasUnitsToLoad=~isempty(isprop(dataInfo.Units,'Name'))&&...
            ~ischar(dataInfo.Units);
            try
                if hasUnitsToLoad
                    unitId=Simulink.UnitUtils.registerUnit(model,dataInfo.Units.Name);
                end
            catch
                this.throwError(...
                true,...
                'SimulinkTypes:Unit:InvalidUnitExpression',...
                dataInfo.Units.Name);
            end

            try
                if hasUnitsToLoad
                    modelUnitId=Simulink.UnitUtils.registerUnit(...
                    model,aobHierarchy(nodeIdx).Units);
                end
            catch
                this.throwError(...
                true,...
                'SimulinkTypes:Unit:InvalidUnitExpression',...
                aobHierarchy(nodeIdx).Units);
            end

            if hasUnitsToLoad&&...
                ~Simulink.UnitUtils.areUnitsEquivalent(model,unitId,...
                modelUnitId)
                Simulink.UnitUtils.reportUnitMismatchWithLoadedData(...
                model,get_param(block,'Handle'),aobHierarchy(nodeIdx).Units,...
                dataInfo.Units.Name,isElementOfBus);
            end
        end

        function verify_leaf_datatype(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
dataPath...
            )
            modelDatatype=aobHierarchy(nodeIdx).DatatypeName;
            if strcmp(modelDatatype,'boolean')
                modelDatatype='logical';
            end
            if strcmp(dataInfo.Datatype,'embedded.fi')
                datatype=dataInfo.NumericType;
                try

                    modelDatatype=numerictype(modelDatatype);
                catch
                    this.report_leaf_datatype_error(...
                    aobHierarchy,...
                    nodeIdx,...
                    dataInfo.Datatype,...
dataPath...
                    );
                end
                if datatype.isdouble&&~modelDatatype.isdouble||...
                    modelDatatype.isdouble&&~datatype.isdouble||...
                    datatype.issingle&&~modelDatatype.issingle||...
                    modelDatatype.issingle&&~datatype.issingle||...
                    datatype.ishalf&&~modelDatatype.ishalf||...
                    modelDatatype.ishalf&&~datatype.ishalf||...
                    datatype.isboolean&&~modelDatatype.isboolean||...
                    modelDatatype.isboolean&&~datatype.isboolean



                    this.report_leaf_datatype_error(...
                    aobHierarchy,...
                    nodeIdx,...
                    dataInfo.Datatype,...
dataPath...
                    );
                end
                modelDatatype.DataTypeMode=datatype.DataTypeMode;
                if~isequal(modelDatatype,datatype)
                    this.report_leaf_datatype_error(...
                    aobHierarchy,...
                    nodeIdx,...
                    dataInfo.Datatype,...
dataPath...
                    );
                end
            elseif(strcmp(dataInfo.Datatype,'int64')||strcmp(dataInfo.Datatype,'uint64')&&...
                strcmp(modelDatatype,'int64')||strcmp(modelDatatype,'uint64'))&&...
                slfeature('UseMatlabNameForInt64')<1




                this.report_leaf_64_bit_datatype_error(...
                aobHierarchy,...
                nodeIdx,...
                dataInfo.Datatype,...
dataPath...
                );

            else
                datatype=dataInfo.Datatype;
                if~strcmp(modelDatatype,datatype)
                    this.report_leaf_datatype_error(...
                    aobHierarchy,...
                    nodeIdx,...
                    datatype,...
dataPath...
                    );
                end
            end
        end

        function report_leaf_datatype_error(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            datatype,...
dataPath...
            )
            if nodeIdx==1
                this.throwError(...
                false,...
                'Simulink:SimInput:LoadingDataTypeMismatch',...
                this.currBlock,...
                datatype,...
                aobHierarchy(nodeIdx).DatatypeName,...
                aobHierarchy(nodeIdx).DatatypeName...
                );
            else
                this.throwError(...
                false,...
                'Simulink:SimInput:LoadingBusStructDataTypeMismatch',...
                dataPath,...
                datatype,...
                aobHierarchy(nodeIdx).DatatypeName...
                );
            end
        end

        function report_leaf_64_bit_datatype_error(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            datatype,...
dataPath...
            )
            if nodeIdx==1
                this.throwError(...
                false,...
                'Simulink:SimInput:Loading64BitDataTypeMismatch',...
                datatype,...
                aobHierarchy(nodeIdx).DatatypeName...
                );
            else
                this.throwError(...
                false,...
                'Simulink:SimInput:LoadingBusStruct64BitDataTypeMismatch',...
                dataPath,...
                datatype,...
                aobHierarchy(nodeIdx).DatatypeName...
                );
            end
        end

        function modelNodeDimensions=scalar_dimension_expansion(...
            ~,...
            modelNodeDimensions,...
dataNodeDimensions...
            )
            if length(modelNodeDimensions)<2&&length(dataNodeDimensions)==2
                if dataNodeDimensions(1)==1
                    modelNodeDimensions=[1,modelNodeDimensions];
                elseif dataNodeDimensions(2)==1
                    modelNodeDimensions=[modelNodeDimensions,1];
                end
            end
        end

        function dimsString=dims_vector_2_dims_string(~,dimsVector)
            dimsString='[';
            for idx=1:length(dimsVector)-1
                dimsString=sprintf('%s%dx',dimsString,dimsVector(idx));
            end
            dimsString=sprintf('%s%d]',dimsString,dimsVector(end));
        end

        function verify_leaf_dimensions(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            dataInfo,...
            dataPath,...
isElementOfBus...
            )
            dataDimensions=dataInfo.Size;
            nSamples=dataInfo.NSamples;
            if nSamples>1
                dataDimensions(end)=[];
            end
            modelDimensions=aobHierarchy(nodeIdx).Dimensions;
            modelDimensionsOrig=modelDimensions;
            dataDimensionsOrig=dataDimensions;





            if isscalar(dataDimensionsOrig)&&length(modelDimensionsOrig)==2
                if modelDimensionsOrig(1)==1
                    dataDimensions=[1,dataDimensionsOrig];
                elseif modelDimensionsOrig(2)==1
                    dataDimensions=[dataDimensionsOrig,1];
                end
            elseif isscalar(modelDimensionsOrig)&&length(dataDimensionsOrig)==2
                if dataDimensionsOrig(1)==1
                    modelDimensions=[1,modelDimensionsOrig];
                elseif dataDimensionsOrig(2)==1
                    modelDimensions=[modelDimensionsOrig,1];
                end
            end

            if length(modelDimensions)<length(dataDimensions)
                modelDimensions=...
                [...
                modelDimensions,...
                ones(1,length(dataDimensions)-length(modelDimensions))...
                ];
            end
            if length(dataDimensions)<length(modelDimensions)
                dataDimensions=...
                [...
                dataDimensions,...
                ones(1,length(modelDimensions)-length(dataDimensions))...
                ];
            end
            if all(dataDimensions>0)&&any(dataDimensions~=modelDimensions)
                dataDimensionsString=...
                this.dims_vector_2_dims_string(dataDimensionsOrig);
                this.dims_vector_2_dims_string(dataDimensionsOrig);
                modelDimensionsString=...
                this.dims_vector_2_dims_string(modelDimensionsOrig);
                if isElementOfBus
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingBusStructDimsMismatch',...
                    dataPath,...
                    dataDimensionsString,...
modelDimensionsString...
                    );
                else
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingPortDimsMismatch',...
                    dataDimensionsString,...
modelDimensionsString...
                    );
                end
            end
        end

        function verify_leaf_complexity(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            complexity,...
            dataPath,...
isElementOfBus...
            )
            if aobHierarchy(nodeIdx).Complexity==false&&complexity
                if isElementOfBus
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingBusStructComplexityMismatch',...
dataPath...
                    );
                else
                    this.throwError(...
                    false,...
'Simulink:SimInput:LoadingComplexityMismatch'...
                    );
                end
            end
        end

        function verify_node_is_leaf(...
            this,...
            aobHierarchy,...
            nodeIdx,...
dataPath...
            )
            if~isempty(aobHierarchy(nodeIdx).Children)
                if nodeIdx==1
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingDataNonBusDataForBus',...
dataPath...
                    );
                else
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingDataHierStructLeafForBus',...
dataPath...
                    );
                end
            end
        end

        function loc_verify_node_dimensions(...
            this,...
            aobHierarchy,...
            nodeIdx,...
            datasetElement,...
dataPath...
            )
            dataNodeDimensions=size(datasetElement);
            modelNodeDimensions=aobHierarchy(nodeIdx).Dimensions;
            modelNodeDimensions=this.scalar_dimension_expansion(...
            modelNodeDimensions,...
dataNodeDimensions...
            );
            if length(modelNodeDimensions)<2&&length(dataNodeDimensions)==2
                if dataNodeDimensions(1)==1
                    modelNodeDimensions=[1,modelNodeDimensions];
                elseif dataNodeDimensions(2)==1
                    modelNodeDimensions=[modelNodeDimensions,1];
                end
            end
            if length(dataNodeDimensions)>length(modelNodeDimensions)||...
                any(...
                dataNodeDimensions>...
                modelNodeDimensions(1:length(dataNodeDimensions))...
                )
                dataNodeDimensionsString=...
                this.dims_vector_2_dims_string(dataNodeDimensions);
                modelNodeDimensionsString=...
                this.dims_vector_2_dims_string(modelNodeDimensions);
                if nodeIdx==1
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingPortDimsMismatchAOB',...
                    dataNodeDimensionsString,...
                    modelNodeDimensionsString,...
dataPath...
                    );
                else
                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingPortDimsMismatchAOBForHier',...
                    dataNodeDimensionsString,...
                    modelNodeDimensionsString,...
                    dataPath,...
                    aobHierarchy(nodeIdx).DatatypeName...
                    );
                end
            end
        end

        function verify_leaf_vardims(...
            this,...
            dataInfo,...
            block,...
isElementOfBus...
            )

            blockType=get_param(block,'BlockType');
            if~strcmp(blockType,'EnablePort')&&...
                ~strcmp(blockType,'TriggerPort')&&...
                ~strcmp(blockType,'FlexibleSource')&&...
                ~strcmp(blockType,'FromWorkspace')
                isBlkVarDim=isequal(get_param(block,'varSizeSig'),'Yes')&&...
                ~isElementOfBus;
                if isBlkVarDim&&...
                    isfield(dataInfo,'varDimsInfo')&&...
                    isempty(dataInfo.varDimsInfo)


                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingVardimOnBlkButNotData');
                end

                if~isBlkVarDim&&...
                    isfield(dataInfo,'varDimsInfo')&&...
                    ~isempty(dataInfo.varDimsInfo)


                    this.throwError(...
                    false,...
                    'Simulink:SimInput:LoadingVardimOnDataButNotBlk');
                end
            end
        end

        function verify_leaf_string_data(...
            this,...
            dataInfo,...
            dataPath,...
isElementOfBus...
            )
            if~isequal(dataInfo.Datatype,'string')
                return
            end
            if any(dataInfo.ContainsMissing)
                if isElementOfBus
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingInportStrMissingBus',...
dataPath...
                    );
                else
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingInportStrMissing',...
                    dataInfo.InputPath...
                    );
                end
            end

            if isequal(dataInfo.MaxStrLen,0)





                absMaxStrLen=32766;
                if any(dataInfo.StrLength>absMaxStrLen)
                    if isElementOfBus
                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingStrLenExceedsAbsoluteMaxBus',...
                        dataPath,absMaxStrLen);
                    else
                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingStrLenExceedsAbsoluteMax',...
                        dataInfo.InputPath,absMaxStrLen);
                    end
                end
            else
                if any(dataInfo.StrLength>dataInfo.MaxStrLen)
                    if isElementOfBus
                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingStrLenExceedsMaxBus',...
                        dataPath,dataInfo.MaxStrLen);
                    else
                        this.throwError(...
                        true,...
                        'Simulink:SimInput:LoadingStrLenExceedsMax',...
                        dataInfo.InputPath,dataInfo.MaxStrLen);
                    end
                end
            end

            if any(dataInfo.ContainsNonAscii)
                if isElementOfBus
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingStrNonAsciiBus',...
                    dataPath);
                else
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingStrNonAscii',...
                    dataInfo.InputPath);
                end
            end

            if dataInfo.SampleSize>1
                if isElementOfBus
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingStrNonScalarBus',...
dataPath...
                    );
                else
                    this.throwError(...
                    true,...
                    'Simulink:SimInput:LoadingStrNonScalar',...
                    dataInfo.InputPath...
                    );
                end
            end
        end

        function idxString=loc_idx_vector_2_idx_string(~,idxVector)
            idxString='(';
            for idx=1:length(idxVector)-1
                idxString=sprintf('%s%d, ',idxString,idxVector(idx));
            end
            idxString=sprintf('%s%d)',idxString,idxVector(end));
        end

        function builtin=loc_is_built_in_type(~,type)
            builtin=strcmp(type,'double')||...
            strcmp(type,'single')||...
            strcmp(type,'boolean')||...
            strcmp(type,'logical')||...
            strcmp(type,'int8')||...
            strcmp(type,'uint8')||...
            strcmp(type,'int16')||...
            strcmp(type,'uint16')||...
            strcmp(type,'int32')||...
            strcmp(type,'uint32')||...
            strcmp(type,'int64')||...
            strcmp(type,'uint64');
        end

        function fi=loc_is_fi_type(~,type)
            fi=strcmp(type,'fixed-point')||...
            strcmp(type,'scaled-double')||...
            strcmp(type,'date-time');
        end

        function half=loc_is_half_type(~,type)
            half=strcmp(type,'half');
        end

        function enum=loc_is_enum_type(this,type)
            enum=~this.loc_is_fi_type(type)&&...
            ~this.loc_is_built_in_type(type)&&...
            ~strcmp(type,'string')&&...
            ~this.loc_is_half_type(type);
        end

        function dataInfo=getDataInfoFromPreview(~,prev)
            sampleVal=prev{1,1};
            dataInfo.Datatype=class(sampleVal);
            if isa(sampleVal,'embedded.fi')
                dataInfo.NumericType=numerictype(sampleVal);
            end
            dataInfo.Size=size(sampleVal);
            dataInfo.NSamples=0;
            dataInfo.Complexity=~isreal(sampleVal)&&~isstring(sampleVal);
            dataInfo.Units='';
        end
        function verify_message_inport_data(this,rootInports)




            for idx=1:numel(this.msgPortIdxs)
                if this.msgPortIdxs(idx)
                    if~isempty(this.ds{idx})
                        this.currBlock=rootInports{idx};
                        this.throwError(...
                        false,...
                        'Simulink:SimInput:MessageInportNotEmpty',...
                        rootInports{idx});
                    end
                end
            end
        end
    end



    methods(Access=protected)
        [result,colIdx]=serialize_multicolumn_timetable(...
        this,...
        interpolation,...
        values,...
        colIdx,...
        aobHierarchy,...
        nodeIdx,...
        block,...
        inputPath,...
        dataPath,...
        isElementOfBus,...
portBusType...
        )

        st=cacheSlFeatures(this);
        ds=expandDatasetForBusElPorts(...
        this,rootInports,numTriggerEnable,rootInportInfo);
        numPreCompInputPorts=countNumPreCompInputPorts(this,rootInports);
        checkForValidLeaf(this,element,dataPath,nodeIdx,isElementOfBus);
        turnOffInterp=validateInterpSettings(this,data,interpolation,inputPath);
    end
end





