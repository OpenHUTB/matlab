classdef(Sealed)RtInpNonDatasetSerializer<Simulink.SimulationData.SerializeInput.InputSerializer




    properties(Access=private)


diagStruct
    end

    methods(Access=public)
        function this=RtInpNonDatasetSerializer(...
            buildData,...
            model,...
            ds,...
            aobHierarchy,...
            interpolation,...
            portBusTypes,...
            msgPortIdxs,...
            isForConsistencyChecks,...
            rootInportsInfo)
            this.buildData=buildData;
            this.model=model;
            this.ds=ds;
            this.aobHierarchy=aobHierarchy;
            this.interpolation=interpolation;
            this.portBusTypes=portBusTypes;
            this.msgPortIdxs=msgPortIdxs;
            this.isForConsistencyChecks=isForConsistencyChecks;
            this.rootInportsInfo=rootInportsInfo;
            this.diagStruct=[];


            this.slFeatures=this.cacheSlFeatures();
        end

        function[serializedDataset,diagStruct]=serializeDataset(this)
            if(isempty(this.rootInportsInfo))
                [numExternalInputPorts,rootInports,numInports,...
                enablePort,~,enablePortIdx,...
                triggerPort,~,triggerPortIdx,...
                ~,containsBusElPorts]=...
                Simulink.SimulationData.util.countRootInportsByType(this.model);
            else
                numExternalInputPorts=this.rootInportsInfo.numExternalInputPorts;
                rootInports=this.rootInportsInfo.rootInports;
                numInports=this.rootInportsInfo.numInports;
                enablePort=this.rootInportsInfo.enablePort;
                enablePortIdx=this.rootInportsInfo.enablePortIdx;
                triggerPort=this.rootInportsInfo.triggerPort;
                triggerPortIdx=this.rootInportsInfo.triggerPortIdx;
                containsBusElPorts=this.rootInportsInfo.containsBusElPorts;
            end



            if isequal(numExternalInputPorts,0)
                DAStudio.error(...
'Simulink:Logging:UTNoInputs'...
                );
            end

            if containsBusElPorts&&this.slFeatures.rootBusElementPortLoading
                this.ds=this.expandDatasetForBusElPorts(...
                rootInports,...
                numel(enablePort)+numel(triggerPort),...
                this.rootInportsInfo);
            end



            this.verify_message_inport_data(rootInports);

            diagStruct=[];
            if ismatrix(this.ds{1})&&...
                isa(this.ds{1},'double')&&...
                isequal(this.ds.numElements,1)&&...
                numExternalInputPorts>1&&...
                ~containsBusElPorts






                allExtInpWidths=0;
                for idx=1:numExternalInputPorts
                    if isequal(numel(this.aobHierarchy{idx}(1).Dimensions),1)

                        portWidth=this.aobHierarchy{idx}(1).Dimensions;
                    else


                        portWidth=this.aobHierarchy{idx}(1).Dimensions(2);
                    end
                    allExtInpWidths=allExtInpWidths+portWidth;
                end


                extInpArrayWidthMinusTimeColumn=size(this.ds{1},2)-1;
                if(extInpArrayWidthMinusTimeColumn~=allExtInpWidths)
                    DAStudio.error(...
                    'Simulink:Logging:UTInvDim',...
                    extInpArrayWidthMinusTimeColumn,...
allExtInpWidths...
                    );
                end
                serializedDataset=cell(1,numExternalInputPorts);
                inputPath=get_param(this.model,'ExternalInput');

                dataColIdx=2;
                for elementIdx=1:numExternalInputPorts
                    datasetElement=this.ds{1};



                    dataWidth=this.aobHierarchy{elementIdx}.Dimensions;
                    datasetElement=[datasetElement(:,1),...
                    datasetElement(:,dataColIdx:(dataColIdx+dataWidth-1))];
                    dataColIdx=dataColIdx+dataWidth;

                    nodeIdx=1;
                    dataPath=sprintf('%s{%d}',inputPath,elementIdx);
                    assert(...
                    elementIdx<=numInports||...
                    elementIdx==enablePortIdx||...
                    elementIdx==triggerPortIdx...
                    );
                    if elementIdx<=numInports
                        block=rootInports{elementIdx};
                    elseif elementIdx==enablePortIdx
                        block=enablePort{1};
                    else
                        block=triggerPort{1};
                    end
                    isBusElement=false;
                    [serializedDataset{elementIdx},diagStruct]=...
                    this.serialize_element_with_check(...
                    this.interpolation(elementIdx),...
                    datasetElement,...
                    this.aobHierarchy{elementIdx},...
                    nodeIdx,...
                    block,...
                    inputPath,...
                    dataPath,...
                    isBusElement,...
                    this.portBusTypes{elementIdx},...
                    elementIdx,...
diagStruct...
                    );
                end
            elseif isstruct(this.ds{1})&&...
                this.ds.numElements==1&&...
                isfield(this.ds{1},'signals')&&...
                (~isscalar(this.ds{1}.signals)||numExternalInputPorts>1)&&...
                ~containsBusElPorts







                sigs=this.ds{1}.signals;
                inputPath=get_param(this.model,'ExternalInput');
                if(numel(sigs)~=numExternalInputPorts)
                    DAStudio.error(...
                    'Simulink:SimInput:LoadingInvNumSignalsInStructFormat',...
inputPath...
                    );
                end

                datasetElement.time=this.ds{1}.time;
                serializedDataset=cell(1,numExternalInputPorts);

                for elementIdx=1:numExternalInputPorts
                    datasetElement.signals=sigs(elementIdx);
                    nodeIdx=1;
                    dataPath=sprintf('%s.signals(%d)',inputPath,elementIdx);
                    assert(...
                    elementIdx<=numInports||...
                    elementIdx==enablePortIdx||...
                    elementIdx==triggerPortIdx...
                    );
                    if elementIdx<=numInports
                        block=rootInports{elementIdx};
                    elseif elementIdx==enablePortIdx
                        block=enablePort{1};
                    else
                        block=triggerPort{1};
                    end
                    isBusElement=false;
                    [serializedDataset{elementIdx},diagStruct]=...
                    this.serialize_element_with_check(...
                    this.interpolation(elementIdx),...
                    datasetElement,...
                    this.aobHierarchy{elementIdx},...
                    nodeIdx,...
                    block,...
                    inputPath,...
                    dataPath,...
                    isBusElement,...
                    this.portBusTypes{elementIdx},...
                    elementIdx,...
diagStruct...
                    );
                end
            elseif istimetable(this.ds{1})&&...
                size(this.ds{1},2)>1&&...
                numExternalInputPorts~=1



                if isequal(this.slFeatures.slLoadMultiColTimetable,0)


                    this.currBlock=rootInports{1};
                    this.throwErrorForInvalidElementContents;
                end

                if this.ds.numElements>1



                    DAStudio.error(...
'Simulink:SimInput:LoadingMultiColumnTimetableVarsMismatch'...
                    );
                end

                if(size(this.ds{1},2)~=numExternalInputPorts)

                    DAStudio.error(...
                    'Simulink:SimInput:LoadingMultiColumnTimetablePortMismatch',...
                    get_param(this.model,'ExternalInput'),...
numExternalInputPorts...
                    );
                end
                serializedDataset=cell(1,numExternalInputPorts);
                inputPath=get_param(this.model,'ExternalInput');

                for elementIdx=1:numExternalInputPorts
                    datasetElement=this.ds{1};


                    datasetElement=datasetElement(:,elementIdx);

                    nodeIdx=1;
                    dataPath=sprintf('%s(:,%d)',inputPath,elementIdx);
                    [serializedDataset{elementIdx},diagStruct]=...
                    this.serialize_element_with_check(...
                    this.interpolation(elementIdx),...
                    datasetElement,...
                    this.aobHierarchy{elementIdx},...
                    nodeIdx,...
                    rootInports{elementIdx},...
                    inputPath,...
                    dataPath,...
                    false,...
                    this.portBusTypes{elementIdx},...
                    elementIdx,...
diagStruct...
                    );
                end
            else


                if(this.ds.numElements~=numExternalInputPorts)
                    DAStudio.error(...
                    'Simulink:Logging:InvInputLoadNameList',...
                    numExternalInputPorts,...
                    this.ds.numElements...
                    );
                end

                serializedDataset=cell(1,numExternalInputPorts);
                for elementIdx=1:numExternalInputPorts
                    datasetElement=this.ds.get(elementIdx);
                    nodeIdx=1;
                    dataPath=this.ds{elementIdx}.Name;
                    assert(...
                    elementIdx<=numInports||...
                    elementIdx==enablePortIdx||...
                    elementIdx==triggerPortIdx...
                    );
                    if elementIdx<=numInports
                        block=rootInports{elementIdx};
                    elseif elementIdx==enablePortIdx
                        block=enablePort{1};
                    else
                        block=triggerPort{1};
                    end
                    isBusElement=~isequal(this.portBusTypes{elementIdx},'NOT_BUS');














                    variantCondition=get_param(block,'CompiledLocalCGVCE');
                    if strcmp(variantCondition,'false')
                        continue;
                    end

                    [serializedDataset{elementIdx},diagStruct]=...
                    this.serialize_element_with_check(...
                    this.interpolation(elementIdx),...
                    datasetElement,...
                    this.aobHierarchy{elementIdx},...
                    nodeIdx,...
                    block,...
                    dataPath,...
                    dataPath,...
                    isBusElement,...
                    this.portBusTypes{elementIdx},...
                    elementIdx,...
diagStruct...
                    );
                end
            end
        end

        function throwError(this,isExtInpErr,errMsg,varargin)
            if this.isForConsistencyChecks



                if isExtInpErr
                    mappingException=MSLException(...
                    'ConsistencyCheck:ExtInpError',...
                    'External Input Error');
                else
                    mappingException=MSLException(...
                    'ConsistencyCheck:ExtInpError',...
                    'Root Inport Mapping Error');
                end
                rtInpException=MSLException(message(errMsg,varargin{:}));
                mappingException=mappingException.addCause(rtInpException);
                throwAsCaller(mappingException);
            else


                msgID='Simulink:SimInput:NonDatasetRootInportError';
                msg=message(msgID,this.currBlock,this.model);
                rtInpException=MSLException(msg);

                causeObj=message(errMsg,varargin{:});
                causeException=MSLException(causeObj);

                rtInpException=addCause(rtInpException,causeException);
                throwAsCaller(rtInpException);
            end
        end
    end
end


