


classdef(Hidden=true)fmi2WrapperWriter<coder.internal.fmuexport.CodeWriter
    properties(Access=private)
ModelInfoUtils
FMUType
DoLogFcnCalls
    end

    methods(Access=public)
        function this=fmi2WrapperWriter(modelInfoUtils,fileName)
            this=this@coder.internal.fmuexport.CodeWriter(fileName);
            this.ModelInfoUtils=modelInfoUtils;
            this.FMUType='CS';
            if(strcmp(this.ModelInfoUtils.BuildOpts.sysTargetFile,'fmu2me.tlc'))
                this.FMUType='ME';
            end


            this.DoLogFcnCalls=false;
            this.writeFunctions;
        end
    end


    methods(Access=private)
        function writeFunctions(this)
            content=[
            this.writeDefinesIncludes;
            this.writeGlobalFunctionData;
            this.writeSyncToBuffer;
            this.writeSyncFromBuffer;
            this.writeLogOutputStr;
            this.writeRestoreOutputStr;
            this.writeLocationStr;
            this.writeLocalUtilFunctions;
            this.writeUtilFunctions;
            this.writeSetDebugLogging;
            this.writeInstantiate;
            this.writeFreeInstance;
            this.writeSetupExperiment;
            this.writeEnterInitializationMode;
            this.writeExitInitializationMode;
            this.writeTerminate;
            this.writeReset;
            this.writeGetRealSetReal;
            this.writeGetIntegerSetInteger;
            this.writeGetBooleanSetBoolean;
            this.writeGetStringSetString;
            this.writeGetSetFMUstateFunctions;
            this.writeGetDirectionalDerivative;
            this.writeGetSetInputOutputDerivatives;
            this.writeCancelStep;
            this.writeDoStep;
            this.writeGetStatusFunctions;
            this.writeModelExhangeFunctions;
            ];
            cellfun(@(aLine)this.writeString(aLine),content);
        end

        function str=writeModelTerminateStr(this)
            if this.ModelInfoUtils.IsReusable
                str='MODEL_TERMINATE(modelData->S)';
            else
                str='MODEL_TERMINATE()';
            end
        end

        function str=writeModelInitializeStr(this)
            if this.ModelInfoUtils.IsReusable
                str='MODEL_INITIALIZE(modelData->S)';
            else
                str='MODEL_INITIALIZE()';
            end
        end

        function str=writeModelStepStr(this)%#ok
            str='rtOneStep(modelData->S)';
        end

        function str=writeLogOutput(this)%#ok
            str='fmu_LogOutput()';
        end

        function str=writeRestoreOutput(this)%#ok
            str='fmu_RestoreOutput()';
        end

        function content=WriteFcnForLogFcnCalls(this,content)
            if(this.DoLogFcnCalls)
                content=[content;
                'void LogFunctionCall(FMUModelData* modelData, const char *function_name) {';
                '    if (modelData->loggingOn) {';
                '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                '           fmi2OK, "info", "function call: %s", function_name);';
                '    }';
                '}';
                ];
            end
        end

        function content=LogFcnCalls(this,content,str,DoCastOrVoid)
            if(this.DoLogFcnCalls)
                if(DoCastOrVoid)
                    content=[content;
                    '    FMUModelData *modelData = (FMUModelData *)c;';
                    ];
                end
                content=[content;
                ['    LogFunctionCall(modelData, "',str,'");'];
                ];
            elseif(DoCastOrVoid)
                content=[content;
                '    (void)c;';
                ];
            end
        end

        function content=writeDefinesIncludes(this)
            name=this.ModelInfoUtils.CodeInfo.Name;
            content={
            '/*';
            [' * Copyright ',num2str(year(date)),' The MathWorks, Inc.'];
            ' *';
            [' * File    : ',this.FileName];
            ' *';
            ' * Abstract:';
            ' *      FMI target wrapper generated by Simulink.';
            ' *';
            ' */';
            '';
            '/*==================*';
            ' * Required defines *';
            ' *==================*/';
            '';
            '#ifndef MODEL';
            '# error Must specify a model name.  Define MODEL=name.';
            '#else';
            '/* create generic macros that work with any model */';
            '# define EXPAND_CONCAT(name1,name2) name1 ## name2';
            '# define CONCAT(name1,name2) EXPAND_CONCAT(name1,name2)';
            '# define MODEL_INITIALIZE CONCAT(MODEL,_initialize)';
            };
            if this.ModelInfoUtils.IsCombineOutputUpdate
                content=[content;
                '# define MODEL_STEP       CONCAT(MODEL,_step)';
                ];
            else
                content=[content;
                '# define MODEL_OUTPUT     CONCAT(MODEL,_output)';
                '# define MODEL_UPDATE     CONCAT(MODEL,_update)';
                ];
            end
            content=[content;
            '# define MODEL_TERMINATE  CONCAT(MODEL,_terminate)';
            ];
            if this.ModelInfoUtils.IsReusable
                content=[content;
                '# define RT_MDL_TYPE      CONCAT(MODEL,_M_TYPE)';];
            else
                content=[content;
                ['# define RT_MDL_TYPE      ',this.ModelInfoUtils.getModelTypeName()];];
            end
            content=[content;
            '#endif';
            '';
            '#define QUOTE1(name) #name';
            '#define QUOTE(name) QUOTE1(name)    /* need to expand name    */';
            '#ifndef FMI2_FUNCTION_PREFIX';
            ['#define FMI2_FUNCTION_PREFIX ',this.ModelInfoUtils.RTWInfo.Name,'_'];
            '#endif';
            '';
            '/*==========*';
            ' * Includes *';
            ' *==========*/';
            '#include <math.h>';
            '#include <time.h>';
            '#include <stdio.h>   /* optional for printf */';
            '#include <string.h>  /* optional for strcmp */';
            '#include "rtmodel.h" /* optional for automated builds */';
            ];
            if(strcmp(get_param(name,'MatFileLogging'),'on'))
                content=[content;
                '#include "rt_logging.h"';
                ];
            end
            content=[content;
            ['#include "',name,'.h"'];
            ['#include "',name,'_private.h"'];
            '#include "fmi2Functions.h"';
            '#include "RTWCG_FMU_util.h"';
            ''];
        end

        function content=writeGlobalFunctionData(this)
            content={
            '/*====================*';
            ' * External functions *';
            ' *====================*/';
            };

            fcnList=[];
            if this.ModelInfoUtils.IsReusable
                fcnList=[fcnList;
                struct('FcnName',{'extern RT_MDL_TYPE *MODEL'},...
                'NeedReusableFlag',{0},'NeedTIDFlag',{0});
                ];
            end
            fcnList=[fcnList;
            struct('FcnName',{'extern void MODEL_INITIALIZE';'extern void MODEL_TERMINATE'},...
            'NeedReusableFlag',{1;1},'NeedTIDFlag',{0;0});
            ];
            if this.ModelInfoUtils.IsCombineOutputUpdate
                fcnList=[fcnList;
                struct('FcnName',{'extern void MODEL_STEP'},...
                'NeedReusableFlag',{1},'NeedTIDFlag',{1});
                ];
            else
                fcnList=[fcnList;
                struct('FcnName',{'extern void MODEL_OUTPUT';'extern void MODEL_UPDATE'},...
                'NeedReusableFlag',{1;1},'NeedTIDFlag',{1;1});
                ];
            end


            for fcn=fcnList'
                fcnArg={};
                if fcn.NeedReusableFlag
                    if this.ModelInfoUtils.IsReusable
                        fcnArg=strcat(fcnArg,'RT_MDL_TYPE *S,');
                    end
                end
                if fcn.NeedTIDFlag
                    if strcmp(this.ModelInfoUtils.BuildOpts.solverMode,'MultiTasking')
                        fcnArg=strcat(fcnArg,'int_T tid,');
                    end
                end

                content=[content;%#ok
                [fcn.FcnName,'(',strjoin(fcnArg,', '),');'];
                ];
            end

            content=[content;
            '';
            '/*==================================*';
            ' * Global data local to this module *';
            ' *==================================*/';
            'const char *RT_MEMORY_ALLOCATION_ERROR = "memory allocation error"; ';
            '';
            'typedef struct {';
            '    /* Model data */';
            '    RT_MDL_TYPE *S;';
            '    fmi2EventInfo eventInfo;';
            '';
            '    /* FMU data*/';
            '    fmi2String instanceName;';
            '    fmi2Type type;';
            '    fmi2String GUID;';
            '    fmi2String resourceLocation;';
            '    const fmi2CallbackFunctions *functions;';
            '    fmi2Boolean visible;';
            '    fmi2Boolean loggingOn;';
            '    fmi2Real time;';
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    fmi2Boolean isDirty;';
                ];
            end
            if this.ModelInfoUtils.hasNestedFMUs
                content=[content;
                '    fmi2Boolean parameterUpdated;';
                ];
            end
            content=[content;
            '';
            '    /* Variable Indices */';
            '    real_T **rList;';
            '    real_T *rBuffer;';
            '    int32_T **iList;';
            '    int32_T *iBuffer;';
            '    boolean_T **bList;';
            '    char **sList;';
            '    int32_T *sSize;';
            '';
            '    /* Output Buffers */';
            '    real_T *rOutput;';
            '    int32_T *iOutput;';
            '    boolean_T *bOutput;';
            '    char **sOutput;';
            '} FMUModelData;';
''
            'FMUModelData *_instance = NULL;';
            ];
        end

        function content=writeSyncToBuffer(this)
            content={
            'void fmu_syncToBuffer() {';
            '    FMUModelData *modelData = (FMUModelData *)_instance;';
            };

            for i=1:length(this.ModelInfoUtils.TypeTable.RealWithDTConv)
                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.RealWithDTConv(i));
                content=[content;
                ['modelData->rBuffer[',num2str(i-1),'] = (real_T)(',var.c_name,');'];
                ];
            end
            for i=1:length(this.ModelInfoUtils.TypeTable.IntegerWithDTConv)
                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.IntegerWithDTConv(i));
                content=[content;
                ['modelData->iBuffer[',num2str(i-1),'] = (int32_T)(',var.c_name,');'];
                ];
            end

            content=[content;
            '}';
            ];
        end

        function content=writeSyncFromBuffer(this)
            content={
            'void fmu_syncFromBuffer() {';
            '    FMUModelData *modelData = (FMUModelData *)_instance;';
            };

            for i=1:length(this.ModelInfoUtils.TypeTable.RealWithDTConv)

                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.RealWithDTConv(i));
                orig_dt=var.orig_dt;
                orig_cdt=this.convertToCTypes(orig_dt);
                content=[content;
                [var.c_name,' = (',orig_cdt,')modelData->rBuffer[',num2str(i-1),'];'];
                ];
            end
            for i=1:length(this.ModelInfoUtils.TypeTable.IntegerWithDTConv)

                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.IntegerWithDTConv(i));
                orig_dt=var.orig_dt;
                orig_cdt=this.convertToCTypes(orig_dt);
                content=[content;
                [var.c_name,' = (',orig_cdt,')modelData->iBuffer[',num2str(i-1),'];'];
                ];
            end

            content=[content;
            '}';
            ];
        end

        function content=writeLogOutputStr(this)
            content={
            'void fmu_LogOutput() {';
            '    FMUModelData *modelData = (FMUModelData *)_instance;';
            };

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Real)
                content=[content;
                ['modelData->rOutput[',num2str(i-1),'] = *(modelData->rList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Real(i)-1),']);'];
                ];
            end


            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Integer)
                content=[content;
                ['modelData->iOutput[',num2str(i-1),'] = *(modelData->iList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Integer(i)-1),']);'];
                ];
            end

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Boolean)
                content=[content;
                ['modelData->bOutput[',num2str(i-1),'] = *(modelData->bList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Boolean(i)-1),']);'];
                ];
            end

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.String)
                content=[content;
                ['    strncpy(modelData->sOutput[',num2str(i-1),'], modelData->sList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.String(i)-1),'], modelData->sSize[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.String(i)-1),']);'];
                ];
            end

            content=[content;
            '}';
            ];
        end

        function content=writeRestoreOutputStr(this)
            content={
            'void fmu_RestoreOutput() {';
            '    FMUModelData *modelData = (FMUModelData *)_instance;';
            };

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Real)
                content=[content;
                ['*(modelData->rList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Real(i)-1),']) = modelData->rOutput[',num2str(i-1),'];'];
                ];
            end

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Integer)
                content=[content;
                ['*(modelData->iList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Integer(i)-1),']) = modelData->iOutput[',num2str(i-1),'];'];
                ];
            end

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.Boolean)
                content=[content;
                ['*(modelData->bList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.Boolean(i)-1),']) = modelData->bOutput[',num2str(i-1),'];'];
                ];
            end

            for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.String)
                content=[content;
                ['    strncpy(modelData->sList[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.String(i)-1),'], modelData->sOutput[',num2str(i-1),'], modelData->sSize[',num2str(this.ModelInfoUtils.TypeOutputTableIdx.String(i)-1),']);'];
                ];
            end

            content=[content;
            '}';
            ];
        end

        function content=writeLocationStr(this)%#ok
            content={
            'const char* fmu_resourceLocation() {';
            '    FMUModelData *modelData = (FMUModelData *)_instance;';
'    return (const char *)modelData->resourceLocation;'
'}'
''
'const void* fmu_callback() {'
'    FMUModelData *modelData = (FMUModelData *)_instance;'
'    return (const void *)modelData->functions;'
'}'
''
'fmi2Boolean fmu_fmuVisible() {'
'    FMUModelData *modelData = (FMUModelData *)_instance;'
'    return modelData->visible;'
'}'
''
'fmi2Boolean fmu_fmuLogging() {'
'    FMUModelData *modelData = (FMUModelData *)_instance;'
'    return modelData->loggingOn;'
'}'
''
'fmi2String fmu_instanceName() {'
'    FMUModelData *modelData = (FMUModelData *)_instance;'
'    return modelData->instanceName;'
'}'
''
            };
            if this.ModelInfoUtils.hasNestedFMUs
                content=[content;
                'fmi2Boolean fmu_parameterUpdated() {';
                '    FMUModelData *modelData = (FMUModelData *)_instance;';
                '    return modelData->parameterUpdated;';
                '}';
                'void fmu_clearParameterUpdated() {';
                '    FMUModelData *modelData = (FMUModelData *)_instance;';
                '    modelData->parameterUpdated = fmi2False;';
                '    return;';
                '}';
                ];
            end
        end

        function content=writeLocalUtilFunctions(this)
            content={
            '/*====================*';
            ' *  Static functions  *';
            ' *====================*/';
            'static void rtOneStep(RT_MDL_TYPE *S) {';
            };

            if strcmp(this.FMUType,'CS')
                if this.ModelInfoUtils.IsCombineOutputUpdate
                    fcnList={'MODEL_STEP'};
                else
                    fcnList={'MODEL_OUTPUT','MODEL_UPDATE'};
                end

                argList={};
                if this.ModelInfoUtils.IsReusable
                    argList=[argList,{'S'}];
                end

                if strcmp(this.ModelInfoUtils.BuildOpts.solverMode,'MultiTasking')

                    if isfield(this.ModelInfoUtils.BuildOpts,'tid01eq')&&strcmp(this.ModelInfoUtils.BuildOpts.tid01eq,'1')
                        startingTID=2;
                    else
                        startingTID=1;
                    end

                    content=[content;
                    ['    boolean_T eventFlags[',num2str(this.ModelInfoUtils.RTWInfo.NumSynchronousSampleTimes),'];'];
                    '    int_T i;';
                    ['    for (i = ',num2str(startingTID),'; i < ',num2str(this.ModelInfoUtils.RTWInfo.NumSynchronousSampleTimes),'; i++) {'];
                    '        eventFlags[i] = rtmStepTask(S, i);';
                    '        if (++rtmTaskCounter(S, i) == rtmCounterLimit(S, i)) {';
                    '            rtmTaskCounter(S, i) = 0;';
                    '        }';
                    '    }';
                    ];


                    argList=[argList,{'0'}];

                    if this.ModelInfoUtils.IsCombineOutputUpdate


                        content=[content;
                        ['    ',fcnList{1},'(',strjoin(argList,', '),');']
                        ];
                    else

                        content=[content;
                        ['    ',fcnList{1},'(',strjoin(argList,', '),');']
                        ];





                        content=[content;
                        ['    ',this.writeLogOutput,';'];
                        ];


                        content=[content;
                        ['    ',fcnList{2},'(',strjoin(argList,', '),');']
                        ];
                    end
                    argList(end)=[];




                    content=[content;
                    ['    ',this.writeRestoreOutput,';'];
                    ];

                    content=[content;
                    ['    for (i = ',num2str(startingTID),'; i < ',num2str(this.ModelInfoUtils.RTWInfo.NumSynchronousSampleTimes),'; i++) {'];
                    '        if (eventFlags[i]) {';
                    ];


                    argList=[argList,{'i'}];
                    for fcn=fcnList
                        content=[content;
                        ['    ',fcn{1},'(',strjoin(argList,', '),');']
                        ];
                    end

                    content=[content;
                    '        }';
                    '    }';
                    ];
                else


                    if isempty(argList)
                        content=[content;
                        '    (void)S;';
                        ];
                    end

                    if this.ModelInfoUtils.IsCombineOutputUpdate


                        content=[content;
                        ['    ',fcnList{1},'(',strjoin(argList,', '),');']
                        ];
                    else

                        content=[content;
                        ['    ',fcnList{1},'(',strjoin(argList,', '),');']
                        ];





                        content=[content;
                        ['    ',this.writeLogOutput,';'];
                        ];


                        content=[content;
                        ['    ',fcnList{2},'(',strjoin(argList,', '),');']
                        ];
                    end




                    content=[content;
                    ['    ',this.writeRestoreOutput,';'];
                    ];
                end
            else


                content=[content;
                '    (void)S;';
                ['    ',this.ModelInfoUtils.CodeInfo.Name,'_output();'];
                ];
                if(this.DoesModelHasDerivative)
                    content=[content;
                    ['    ',this.ModelInfoUtils.CodeInfo.Name,'_derivatives();'];
                    ];
                end
            end

            content=[content;
            '}';
            ];

            content=this.WriteFcnForLogFcnCalls(content);
        end

        function content=writeUtilFunctions(this)%#ok
            content={
            '/*===============*';
            ' * FMI functions *';
            ' *===============*/';
            '';
            'const char* fmi2GetTypesPlatform() {';

            '    static char str[] = {''d'',''e'',''f'',''a'',''u'',''l'',''t'',''\0''};';
            '    return str;';
            '}';
            '';
            'const char* fmi2GetVersion() {';

            '    static char str[] = {''2'',''.'',''0'',''\0''};';
            '    return str;';
            '}';
            ''};
        end

        function content=writeSetDebugLogging(this)
            content={
            'fmi2Status fmi2SetDebugLogging(fmi2Component c, fmi2Boolean loggingOn, size_t nCategories, const fmi2String categories[]) {  ';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2SetDebugLogging',false);
            content=[content;
            {
            '    (void)nCategories;';
            '    (void)categories;';
            '';
            '    modelData->loggingOn = loggingOn;';
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeInstantiate(this)
            guid=this.ModelInfoUtils.GUID;
            content={
            'fmi2Component fmi2Instantiate(fmi2String instanceName, fmi2Type fmuType, fmi2String fmuGUID,';
            '                            fmi2String fmuResourceLocation, const fmi2CallbackFunctions *functions,';
            '                            fmi2Boolean visible, fmi2Boolean loggingOn) {';
            '';
            '    FMUModelData *modelData = NULL;';
            '    const char_T *errmsg = NULL;';
            '';
            };



            rtwOptionsStr=get_param(this.ModelInfoUtils.RTWInfo.Name,'rtwoptions');
            removeExpirationDate=true;
            if(~removeExpirationDate)
                expDate=datetime('now')+calmonths(1);
                expire_msg=['The Co-Simulation FMU expired on ',datestr(expDate),'. For an update on Simulink Compiler, contact The MathWorks.'];
                content=[content;
                '    time_t currentDate = time(NULL); ';
                '    struct tm currentDateStruct = *localtime(&currentDate); ';
                '    ';
                ['    if (currentDateStruct.tm_year + 1900 > ',num2str(expDate.Year),' || (currentDateStruct.tm_year + 1900 == ',num2str(expDate.Year),' &&'];
                ['       (currentDateStruct.tm_mon + 1 > ',num2str(expDate.Month),' || (currentDateStruct.tm_mon + 1 == ',num2str(expDate.Month),' &&'];
                ['       (currentDateStruct.tm_mday > ',num2str(expDate.Day),' || (currentDateStruct.tm_mday ==',num2str(expDate.Day),' &&'];
                ['       (currentDateStruct.tm_hour > ',num2str(expDate.Hour),' || (currentDateStruct.tm_hour == ',num2str(expDate.Hour),' &&'];
                ['       (currentDateStruct.tm_min > ',num2str(expDate.Minute),' || (currentDateStruct.tm_min == ',num2str(expDate.Minute),' &&'];
                ['       currentDateStruct.tm_sec > ',num2str(expDate.Second),')))))))))) {'];
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                ['                "fmi2Instantiate: ',expire_msg,'");'];

                '        return NULL;';
                '    }';
                '';
                ];
            end

            content=[content;
            '    if (!functions->logger) {';
            '        return NULL;';




            '    } else if (!instanceName || strlen(instanceName) == 0) {';
            '        functions->logger(functions->componentEnvironment, "?", fmi2Error, "error",';
            '                "fmi2Instantiate: Missing instance name.");';
            '        return NULL;';
            '    } else if (!fmuGUID || strlen(fmuGUID) == 0) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "fmi2Instantiate: Missing GUID.");';
            '        return NULL;';
            ['    } else if (strcmp(fmuGUID, "{',guid,'}")) {'];
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            ['                "fmi2Instantiate: Wrong GUID %s. Expected %s.", fmuGUID, "{',guid,'}");'];
            '        return NULL;';
            '    }';
            '    _instance = modelData = (FMUModelData*)calloc(1, sizeof(FMUModelData));';
            '    if (!modelData) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "fmi2Instantiate: Memory allocation error.");';
            '        return NULL;';
            '    }';
            ];
            if this.ModelInfoUtils.IsReusable
                content=[
                content;
                '    modelData->S = MODEL(); /* using malloc here */';
                ];
            else
                content=[
                content;
                ['    modelData->S = ',this.ModelInfoUtils.getModelVariableName(),';'];
                ];
            end
            content=[content;
            '    if (modelData->S == NULL) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "Memory allocation error during model registration");';
            '        return NULL;';
            '    }';
            '    errmsg = (const char_T *) (rtmGetErrorStatus(modelData->S));';
            '    if (errmsg != NULL) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "Error during model registration: %s\n", errmsg);';
            ['        ',this.writeModelTerminateStr(),';'];
            '        return NULL;';
            '    }';
            ];

            content=[content;
            '    modelData->eventInfo.newDiscreteStatesNeeded = fmi2False;';
            '    modelData->eventInfo.terminateSimulation = fmi2False;';
            '    modelData->eventInfo.nominalsOfContinuousStatesChanged = fmi2False;';
            '    modelData->eventInfo.valuesOfContinuousStatesChanged = fmi2False;';
            '    modelData->eventInfo.nextEventTimeDefined = fmi2False;';
            '    modelData->eventInfo.nextEventTime = 0;';
            '    ';
            '    modelData->instanceName = (fmi2String)calloc(strlen(instanceName)+1, sizeof(fmi2Char*));';
            '    if (!modelData->instanceName) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "fmi2Instantiate: Memory allocation error.");';
            '        return NULL;';
            '    }';
            '    strcpy((char *)modelData->instanceName, (char *)instanceName);';
            '    modelData->type = fmuType;';
            '    modelData->GUID = (fmi2String)calloc(strlen(fmuGUID)+1, sizeof(fmi2Char*));';
            '    if (!modelData->GUID) {';
            '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                "fmi2Instantiate: Memory allocation error.");';
            '        return NULL;';
            '    }';
            '    strcpy((char *)modelData->GUID, (char *)fmuGUID);';
            '    if (fmuResourceLocation) {';
            '        modelData->resourceLocation = uriToLocal(fmuResourceLocation);';
            '        if (!modelData->resourceLocation) {';
            '            functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                    "fmi2Instantiate: Memory allocation error.");';
            '            return NULL;';
            '        }';
            '        else if (strlen(modelData->resourceLocation) == 0) {';
            '            functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
            '                    "fmi2Instantiate: uriToLocal cannot handle fmuResourceLocation.");';
            '            return NULL;';
            '        }';
            '    } else {';
            '        modelData->resourceLocation = fmuResourceLocation;';
            '    }';
            '    modelData->functions = functions;';
            '    modelData->visible = visible;';
            '    modelData->loggingOn = loggingOn;';
            ];
            if this.ModelInfoUtils.hasNestedFMUs
                content=[content;
                '    modelData->parameterUpdated = fmi2False;';
                ];
            end
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            '    modelData->time = 0.0;';
            ];
            content=this.LogFcnCalls(content,'fmi2Instantiate',false);
            content=[content;
''
            ];






            content=[content;
            '    /* initialize variables */';
            '';
            '    if (rtmGetStopRequested(modelData->S)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                fmi2Error, "error", "stop requested in fmi2Instantiate");';
            '        return NULL;';
            '    }';
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                ['    rtmSetTPtr(',this.ModelInfoUtils.getModelVariableName(),', &modelData->time);'];
                ];
            end

            if~isempty(this.ModelInfoUtils.TypeTable.Real)
                content=[content;
                ['    modelData->rList = (real_T**)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.Real)),', sizeof(real_T*));'];
                '    if (!modelData->rList) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];


                if~isempty(this.ModelInfoUtils.TypeTable.RealWithDTConv)
                    content=[content;
                    ['    modelData->rBuffer = (real_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.RealWithDTConv)),', sizeof(real_T));'];
                    '    if (!modelData->rBuffer) {';
                    '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                    '                "fmi2Instantiate: Memory allocation error.");';
                    '        return NULL;';
                    '    }';
                    ];
                end
            end
            if~isempty(this.ModelInfoUtils.TypeTable.Integer)
                content=[content;
                ['    modelData->iList = (int32_T**)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.Integer)),', sizeof(int32_T*));'];
                '    if (!modelData->iList) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];


                if~isempty(this.ModelInfoUtils.TypeTable.IntegerWithDTConv)
                    content=[content;
                    ['    modelData->iBuffer = (int32_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.IntegerWithDTConv)),', sizeof(int32_T));'];
                    '    if (!modelData->iBuffer) {';
                    '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                    '                "fmi2Instantiate: Memory allocation error.");';
                    '        return NULL;';
                    '    }';
                    ];
                end
            end
            if~isempty(this.ModelInfoUtils.TypeTable.Boolean)
                content=[content;
                ['    modelData->bList = (boolean_T**)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.Boolean)),', sizeof(boolean_T*));'];
                '    if (!modelData->bList) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeTable.String)
                content=[content;
                ['    modelData->sList = (char**)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.String)),', sizeof(char*));'];
                '    if (!modelData->sList) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
                content=[content;
                ['    modelData->sSize = (int32_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeTable.String)),', sizeof(int32_T));'];
                '    if (!modelData->sSize) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
            end

            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Real)
                content=[content;
                ['    modelData->rOutput = (real_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeOutputTableIdx.Real)),', sizeof(real_T));'];
                '    if (!modelData->rOutput) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Integer)
                content=[content;
                ['    modelData->iOutput = (int32_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeOutputTableIdx.Integer)),', sizeof(int32_T));'];
                '    if (!modelData->iOutput) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Boolean)
                content=[content;
                ['    modelData->bOutput = (boolean_T*)calloc(',num2str(length(this.ModelInfoUtils.TypeOutputTableIdx.Boolean)),', sizeof(boolean_T));'];
                '    if (!modelData->bOutput) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.String)
                content=[content;
                ['    modelData->sOutput = (char**)calloc(',num2str(length(this.ModelInfoUtils.TypeOutputTableIdx.String)),', sizeof(char*));'];
                '    if (!modelData->sOutput) {';
                '        functions->logger(functions->componentEnvironment, instanceName, fmi2Error, "error",';
                '                "fmi2Instantiate: Memory allocation error.");';
                '        return NULL;';
                '    }';
                ];
                for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.String)
                    strOutId=this.ModelInfoUtils.TypeOutputTableIdx.String(i);
                    content=[content;
                    '    modelData->sOutput[',num2str(i-1),'] = (char*)calloc(',num2str(this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.String(strOutId)).dimensions),',sizeof(char));';
                    ];
                end
            end

            if(strcmp(this.FMUType,'ME'))
                content=[
                content;
                ['   {',this.writeModelInitializeStr(),';}'];
                ];
            end

            if(strcmp(this.FMUType,'ME'))
                if(this.DoesModelHasDerivative)
                    content=[content;
                    ['    ',this.ModelInfoUtils.getModelVariableName,'->derivs = (real_T*)calloc(1,sizeof(',this.ModelInfoUtils.getStateDerivativesStructName,'));'];
                    ];
                end
            end

            content=[content;
            this.linkVariableIndices;
            '';
            ];

            content=[content;
            {
            '';
            '    return modelData;';
            '}';
            '';
            };
            ];

        end

        function content=linkVariableIndices(this)
            contentR=cell(length(this.ModelInfoUtils.TypeTable.Real),1);
            is_time_found=false;
            rBuffer_counter=0;
            for i=1:length(this.ModelInfoUtils.TypeTable.Real)
                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.Real(i));
                if(strcmp(this.FMUType,'ME')&&strcmp(var.xml_name,'time'))
                    is_time_found=true;
                    contentR{i}=['    modelData->rList[',num2str(i-1),'] = rtmGetTPtr(',this.ModelInfoUtils.getModelVariableName(),');'];
                elseif var.doDataConversion


                    contentR{i}=['    modelData->rList[',num2str(i-1),'] = &(modelData->rBuffer[',num2str(rBuffer_counter),']);'];
                    rBuffer_counter=rBuffer_counter+1;
                else
                    contentR{i}=['    modelData->rList[',num2str(i-1),'] = &(',var.c_name,');'];
                end
            end
            if(strcmp(this.FMUType,'ME'))
                assert(is_time_found==true,'Cannot find a defined time variable.');
            end

            contentI=cell(length(this.ModelInfoUtils.TypeTable.Integer),1);
            iBuffer_counter=0;
            for i=1:length(this.ModelInfoUtils.TypeTable.Integer)
                var=this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.Integer(i));
                if var.doDataConversion
                    contentI{i}=['    modelData->iList[',num2str(i-1),'] = &(modelData->iBuffer[',num2str(iBuffer_counter),']);'];
                    iBuffer_counter=iBuffer_counter+1;
                else
                    contentI{i}=['    modelData->iList[',num2str(i-1),'] = &(',this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.Integer(i)).c_name,');'];
                end
            end
            contentSync='fmu_syncToBuffer();';

            contentB=cell(length(this.ModelInfoUtils.TypeTable.Boolean),1);
            for i=1:length(this.ModelInfoUtils.TypeTable.Boolean)
                contentB{i}=['    modelData->bList[',num2str(i-1),'] = &(',this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.Boolean(i)).c_name,');'];
            end

            contentS=cell(length(this.ModelInfoUtils.TypeTable.String),1);
            for i=1:length(this.ModelInfoUtils.TypeTable.String)
                contentS{i}=['    modelData->sList[',num2str(i-1),'] = ',this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.String(i)).c_name,';'];
            end

            contentSSize=cell(length(this.ModelInfoUtils.TypeTable.String),1);
            for i=1:length(this.ModelInfoUtils.TypeTable.String)
                contentSSize{i}=['    modelData->sSize[',num2str(i-1),'] = ',num2str(this.ModelInfoUtils.ModelVariableList(this.ModelInfoUtils.TypeTable.String(i)).dimensions),';'];
            end

            content=[contentR;contentI;contentSync;contentB;contentS;contentSSize];
        end

        function content=writeFreeInstance(this)
            content={
            'void fmi2FreeInstance(fmi2Component c) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2FreeInstance',false);
            content=[content;
            {
            '    const char_T *errStatus = NULL;';
            '    ';
            '    if (!modelData) return;';
            '    errStatus = (const char_T *) (rtmGetErrorStatus(modelData->S));';
            '    ';
            '    if (errStatus != NULL && strcmp(errStatus, "Simulation finished")) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, ';
            '                modelData->instanceName, fmi2Error, "error", "%s", errStatus);';
            '';
            ['        ',this.writeModelTerminateStr(),';'];
            '        return;';
            '    }    ';
            ['    ',this.writeModelTerminateStr(),';'];
            '    ';
            '    free((void*)modelData->instanceName);';
            '    free((void*)modelData->GUID);';
            '    free((void*)modelData->resourceLocation);';
            };
            ];
            if~isempty(this.ModelInfoUtils.TypeTable.Real)
                content=[content;
                '    free((void*)modelData->rList);';
                ];
                if~isempty(this.ModelInfoUtils.TypeTable.RealWithDTConv)
                    content=[content;
                    '    free((void*)modelData->rBuffer);';
                    ];
                end
            end
            if~isempty(this.ModelInfoUtils.TypeTable.Integer)
                content=[content;
                '    free((void*)modelData->iList);';
                ];
                if~isempty(this.ModelInfoUtils.TypeTable.IntegerWithDTConv)
                    content=[content;
                    '    free((void*)modelData->iBuffer);';
                    ];
                end
            end
            if~isempty(this.ModelInfoUtils.TypeTable.Boolean)
                content=[content;
                '    free((void*)modelData->bList);';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeTable.String)
                content=[content;
                '    free((void*)modelData->sList);';
                '    free((void*)modelData->sSize);';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Real)
                content=[content;
                '    free((void*)modelData->rOutput);';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Integer)
                content=[content;
                '    free((void*)modelData->iOutput);';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.Boolean)
                content=[content;
                '    free((void*)modelData->bOutput);';
                ];
            end
            if~isempty(this.ModelInfoUtils.TypeOutputTableIdx.String)
                for i=1:length(this.ModelInfoUtils.TypeOutputTableIdx.String)
                    content=[content;'    free((void*)modelData->sOutput[',num2str(i-1),']);';];
                end
                content=[content;
                '    free((void*)modelData->sOutput);';
                ];
            end
            content=[content;
            {
            '    free((void*)modelData);';
            '}';
            '';
            };
            ];

        end

        function content=writeSetupExperiment(this)
            content={
            'fmi2Status fmi2SetupExperiment(fmi2Component c, fmi2Boolean toleranceDefined, fmi2Real tolerance,';
            '                            fmi2Real startTime, fmi2Boolean stopTimeDefined, fmi2Real stopTime) {';
            '';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2SetupExperiment',false);
            content=[content;
            {
            '    (void)toleranceDefined;';
            '    (void)tolerance;';
            '    (void)stopTimeDefined;';
            '    (void)stopTime;';
            '';
'    if (fabs(startTime) > 1.0E-7) {'
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                fmi2Error, "error", "start time is not zero.");';
            '        return fmi2Error;';
            '    }';
            '';
            '    modelData->time = startTime;';
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeEnterInitializationMode(this)
            content={
            'fmi2Status fmi2EnterInitializationMode(fmi2Component c) {';
            };

            if(strcmp(this.FMUType,'CS'))
                content=[
                content;
                '   FMUModelData *modelData = (FMUModelData *)c;';
                ['   {',this.writeModelInitializeStr(),';}'];
                ];
            end

            content=this.LogFcnCalls(content,'fmi2EnterInitializationMode',true);
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeExitInitializationMode(this)


            content={
            'fmi2Status fmi2ExitInitializationMode(fmi2Component c) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2ExitInitializationMode',false);
            content=[content;
            {
            '';
            '    /* call step after setting input variables*/';
            ['    ',this.writeModelStepStr(),';'];
            '    if (rtmGetStopRequested(modelData->S)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                fmi2Error, "error", "stop requested in fmi2ExitInitializationMode");';
            '        return fmi2Error;';
            '    }';
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeTerminate(this)
            content={
            'fmi2Status fmi2Terminate(fmi2Component c) {';
            };
            content=this.LogFcnCalls(content,'fmi2Terminate',true);
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeReset(this)
            content={
            'fmi2Status fmi2Reset(fmi2Component c) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2Reset',false);
            content=[content;
            {
            '    const char_T *errmsg = (const char_T *) (rtmGetErrorStatus(modelData->S));';
            '    /* Reset model data */';
            '    if (errmsg != NULL && strcmp(errmsg, "Simulation finished")) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, ';
            '                modelData->instanceName, fmi2Error, "error", "%s", errmsg);';
            '';
            ['        ',this.writeModelTerminateStr(),';'];
            '        return fmi2Error;';
            '    }    ';
            ['    ',this.writeModelTerminateStr(),';'];
            '    ';
            };
            ];
            if this.ModelInfoUtils.IsReusable
                content=[content;
                '    modelData->S = MODEL(); /* using malloc here */';
                ];
            else
                content=[content;
                ['    modelData->S = ',this.ModelInfoUtils.getModelVariableName(),';'];
                ];
            end
            content=[content;
            '    if (modelData->S == NULL) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, ';
            '               modelData->instanceName, fmi2Error, "error",';
            '               "Memory allocation error during model registration");';
            '        return fmi2Error;';
            '    }';
            '    errmsg = (const char_T *) (rtmGetErrorStatus(modelData->S));';
            '    if (errmsg != NULL) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, ';
            '                modelData->instanceName, fmi2Error, "error",';
            '                "Error during model registration: %s\n", errmsg);';
            ['        ',this.writeModelTerminateStr(),';'];
            '        return fmi2Error;';
            '    }';
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            '    modelData->eventInfo.newDiscreteStatesNeeded = fmi2False;';
            '    modelData->eventInfo.terminateSimulation = fmi2False;';
            '    modelData->eventInfo.nominalsOfContinuousStatesChanged = fmi2False;';
            '    modelData->eventInfo.valuesOfContinuousStatesChanged = fmi2False;';
            '    modelData->eventInfo.nextEventTimeDefined = fmi2False;';
            '    modelData->eventInfo.nextEventTime = 0;';
            '';
            ];





            content=[content;
            this.linkVariableIndices;
            '';
            '    if (rtmGetStopRequested(modelData->S)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                fmi2Error, "error", "stop requested in fmi2Reset");';
            '        return fmi2Error;';
'    }'
            '    return fmi2OK;';
            '}';
            {''};
            ];
        end

        function content=writeGetRealSetReal(this)
            content={
            'fmi2Status fmi2GetReal (fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2GetReal',false);
            content=[content;
            {
            '    size_t i;';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Real),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '    }';
            }
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (modelData->isDirty == fmi2True) {';
                ['        ',this.writeModelStepStr(),';'];
                '        modelData->isDirty = fmi2False;';
                '    }';
                ];

            end
            content=[content;
            {
            '    for (i = 0; i < nvr; i++) {';
            '        value[i] = (fmi2Real)(*modelData->rList[vr[i]]);';
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "getReal vr:%d, value:%lf", vr[i], value[i]);';
            '        }';
            '    }';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SetReal (fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SetReal',false);
            content=[content;
            {
            '    size_t i;';
            '    fmi2Boolean is_diff_value = fmi2False;';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Real),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '        if (*modelData->rList[vr[i]] != (real_T)(value[i])) {';
            '            is_diff_value = fmi2True;';
            '            *modelData->rList[vr[i]] = (real_T)(value[i]);';
            '        }';
            };
            ];





            if this.ModelInfoUtils.hasNestedFMUs&&length(this.ModelInfoUtils.TypeTable.Real)>this.ModelInfoUtils.TypeParamStartTableVr.Real
                content=[content;
                {




                ['       if (is_diff_value && !modelData->parameterUpdated && vr[i] >= ',num2str(this.ModelInfoUtils.TypeParamStartTableVr.Real,'%.1f'),') {'];
                '           modelData->parameterUpdated = fmi2True; ';
                '       }';
                }
                ];
            end
            content=[content;
            {
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "setReal vr:%d, value:%lf", vr[i], value[i]);';
            '        }';
            '    }';
            };
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (is_diff_value) modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetIntegerSetInteger(this)
            content={
            'fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2GetInteger',false);
            content=[content;
            {
            '    size_t i;    ';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    fmu_syncToBuffer();';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Integer),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '    }';
            }
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (modelData->isDirty == fmi2True) {';
                ['        ',this.writeModelStepStr(),';'];
                '        modelData->isDirty = fmi2False;';
                '    }';
                ];
            end
            content=[content;
            {
            '    for (i = 0; i < nvr; i++) {';
            '        value[i] = (fmi2Integer)(*modelData->iList[vr[i]]);';
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "getInteger vr:%d, value:%d", vr[i], value[i]);';
            '        }';
            '    }';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Integer value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SetInteger',false);
            content=[content;
            {
            '    size_t i;    ';
            '    fmi2Boolean is_diff_value = fmi2False;';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Integer),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '        if (*modelData->iList[vr[i]] != (int32_T)(value[i])) {';
            '            is_diff_value = fmi2True;';
            '            *modelData->iList[vr[i]] = (int32_T)(value[i]);';
            '        }';
            };
            ];
            if this.ModelInfoUtils.hasNestedFMUs&&length(this.ModelInfoUtils.TypeTable.Integer)>this.ModelInfoUtils.TypeParamStartTableVr.Integer
                content=[content;
                {
                ['       if (is_diff_value && !modelData->parameterUpdated && vr[i] >= ',num2str(this.ModelInfoUtils.TypeParamStartTableVr.Integer,'%.1f'),') {'];
                '           modelData->parameterUpdated = fmi2True; ';
                '       }';
                }
                ];
            end
            content=[content;
            {
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "setInteger vr:%d, value:%d", vr[i], value[i]);';
            '        }';
            '    }';
            };
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (is_diff_value) modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            {
            '    fmu_syncFromBuffer();';
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetBooleanSetBoolean(this)
            content={
            'fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2GetBoolean',false);
            content=[content;
            {
            '    size_t i;    ';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Boolean),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '    }';
            }
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (modelData->isDirty == fmi2True) {';
                ['        ',this.writeModelStepStr(),';'];
                '        modelData->isDirty = fmi2False;';
                '    }';
                ];
            end
            content=[content;
            {
            '    for (i = 0; i < nvr; i++) {';
            '        value[i] = (*modelData->bList[vr[i]] == false)?fmi2False:fmi2True;';
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "getBoolean vr:%d, value:%u", vr[i], value[i]);';
            '        }';
            '    }';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Boolean value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SetBoolean',false);
            content=[content;
            {
            '    size_t i;    ';
            '    fmi2Boolean is_diff_value = fmi2False;';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.Boolean),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '        if (*modelData->bList[vr[i]] != ((value[i]==fmi2False)?false:true)) {';
            '            is_diff_value = fmi2True;';
            '            *modelData->bList[vr[i]] = (value[i]==fmi2False)?false:true;';
            '        }';
            };
            ];
            if this.ModelInfoUtils.hasNestedFMUs&&length(this.ModelInfoUtils.TypeTable.Boolean)>this.ModelInfoUtils.TypeParamStartTableVr.Boolean
                content=[content;
                {
                ['       if (is_diff_value && !modelData->parameterUpdated && vr[i] >= ',num2str(this.ModelInfoUtils.TypeParamStartTableVr.Boolean,'%.1f'),') {'];
                '           modelData->parameterUpdated = fmi2True; ';
                '       }';
                }
                ];
            end
            content=[content;
            {
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "setBoolean vr:%d, value:%u", vr[i], value[i]);';
            '        }';
            '    }';
            };
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (is_diff_value) modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetStringSetString(this)
            content={
            'fmi2Status fmi2GetString (fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2String value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            content=this.LogFcnCalls(content,'fmi2GetString',false);
            content=[content;
            {
            '    size_t i;    ';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['        if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.String),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '    }';
            }
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (modelData->isDirty == fmi2True) {';
                ['        ',this.writeModelStepStr(),';'];
                '        modelData->isDirty = fmi2False;';
                '    }';
                ];
            end
            content=[content;
            {
            '    for (i = 0; i < nvr; i++) {';
            '        value[i] = modelData->sList[vr[i]];';
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "getString vr:%d, value:%s", vr[i], value[i]);';
            '        }';
            '    }';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SetString (fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2String value[]) {';
            '    FMUModelData *modelData = (FMUModelData *)c;';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SetString',false);
            content=[content;
            {
            '    size_t i;    ';
            '    fmi2Boolean is_diff_value = fmi2False;';
            '    size_t size;';
            '    if (nvr != 0 && (!value || !vr)) {';
            '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "invalid memory access");';
            '        return fmi2Error;';
            '    }';
            '    for (i = 0; i < nvr; i++) {';
            ['       if (vr[i] >= ',num2str(length(this.ModelInfoUtils.TypeTable.String),'%.1f'),') {'];
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '                    fmi2Error, "error", "valueReference out of range");';
            '            return fmi2Error;';
            '        }';
            '        if (strcmp(modelData->sList[vr[i]], value[i]) != 0) {';
            '            is_diff_value = fmi2True;';
            '            size = strlen(value[i]) < (modelData->sSize[vr[i]] - 1) ? strlen(value[i]) : (modelData->sSize[vr[i]] - 1);';
            '            strncpy(modelData->sList[vr[i]], value[i], size);';
            '            *((char*)modelData->sList[vr[i]]+size) = ''\x00'';';
            '        }';
            };
            ];
            if this.ModelInfoUtils.hasNestedFMUs&&length(this.ModelInfoUtils.TypeTable.String)>this.ModelInfoUtils.TypeParamStartTableVr.String
                content=[content;
                {
                ['       if (is_diff_value && !modelData->parameterUpdated && vr[i] >= ',num2str(this.ModelInfoUtils.TypeParamStartTableVr.String,'%.1f'),') {'];
                '           modelData->parameterUpdated = fmi2True; ';
                '       }';
                }
                ];
            end
            content=[content;
            {
            '        if (modelData->loggingOn) {';
            '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
            '               fmi2OK, "info", "setString vr:%d, value:%s", vr[i], value[i]);';
            '        }';
            '    }';
            };
            ];
            if(strcmp(this.FMUType,'ME'))
                content=[content;
                '    if (is_diff_value) modelData->isDirty = fmi2True;';
                ];
            end
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetSetFMUstateFunctions(this)
            content={
            'fmi2Status fmi2GetFMUstate (fmi2Component c, fmi2FMUstate* FMUstate) {';
            };
            content=this.LogFcnCalls(content,'fmi2GetFMUstate',true);
            content=[content;
            {
'    (void)FMUstate;'
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SetFMUstate (fmi2Component c, fmi2FMUstate FMUstate) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SetFMUstate',true);
            content=[content;
            {
'    (void)FMUstate;'
            '    return fmi2OK;';
            '}';
            '';
'fmi2Status fmi2FreeFMUstate(fmi2Component c, fmi2FMUstate* FMUstate) {'
            };
            ];
            content=this.LogFcnCalls(content,'fmi2FreeFMUstate',true);
            content=[content;
            {
'    (void)FMUstate;'
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SerializedFMUstateSize(fmi2Component c, fmi2FMUstate FMUstate, size_t *size) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SerializedFMUstateSize',true);
            content=[content;
            {
'    (void)FMUstate;'
'    (void)size;'
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2SerializeFMUstate (fmi2Component c, fmi2FMUstate FMUstate, fmi2Byte serializedState[], size_t size) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2SerializeFMUstate',true);
            content=[content;
            {
'    (void)FMUstate;'
'    (void)serializedState;'
'    (void)size;'
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2DeSerializeFMUstate (fmi2Component c, const fmi2Byte serializedState[], size_t size,';
            '                                    fmi2FMUstate* FMUstate) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2DeSerializeFMUstate',true);
            content=[content;
            {
'    (void)serializedState;'
'    (void)size;'
'    (void)FMUstate;'
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetDirectionalDerivative(this)
            content={
            'fmi2Status fmi2GetDirectionalDerivative(fmi2Component c, const fmi2ValueReference vUnknown_ref[], size_t nUnknown,';
            '                                        const fmi2ValueReference vKnown_ref[] , size_t nKnown,';
            '                                        const fmi2Real dvKnown[], fmi2Real dvUnknown[]) {';
            };
            content=this.LogFcnCalls(content,'fmi2GetDirectionalDerivative',true);
            content=[content;
            {
'    (void)vUnknown_ref;'
'    (void)nUnknown;'
'    (void)vKnown_ref;'
'    (void)nKnown;'
'    (void)dvKnown;'
'    (void)dvUnknown;'
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeGetSetInputOutputDerivatives(this)
            content={
            '/* ---------------------------------------------------------------------------';
            ' * Functions for FMI for Co-Simulation';
            ' * ---------------------------------------------------------------------------';
            ' */';
            '';
            '/* Simulating the slave */';
            'fmi2Status fmi2SetRealInputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,';
            '                                     const fmi2Integer order[], const fmi2Real value[]) {';
            };
            content=this.LogFcnCalls(content,'fmi2SetRealInputDerivatives',true);
            content=[content;
            {
            '    (void)vr;';
            '    (void)nvr;';
            '    (void)order;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetRealOutputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,';
            '                                      const fmi2Integer order[], fmi2Real value[]) {';
            };
            ];
            if(strcmp(this.FMUType,'CS'))
                content=[content;
                '    size_t i;';
                ];

                this.LogFcnCalls(content,'fmi2GetRealOutputDerivatives',true);

                content=[content;
                '    (void)c;';
                '    (void)vr;';
                '    (void)order;';
                '    for (i = 0; i < nvr; i++) value[i] = 0;';
                '    return fmi2OK;';
                ];
            else
                content=this.LogFcnCalls(content,'fmi2GetRealOutputDerivatives',true);
                content=[content;
                '    (void)c;';
                '    (void)vr;';
                '    (void)nvr;';
                '    (void)order;';
                '    (void)value;';
                '    return fmi2OK;';
                ];
            end
            content=[content;
            {
            '}';
            '';
            }
            ];
        end

        function content=writeCancelStep(this)
            content={
            'fmi2Status fmi2CancelStep(fmi2Component c) {';
            };
            content=this.LogFcnCalls(content,'fmi2CancelStep',true);
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeDoStep(this)
            content={
            'fmi2Status fmi2DoStep(fmi2Component c, fmi2Real currentCommunicationPoint,';
            '                    fmi2Real communicationStepSize, fmi2Boolean noSetFMUStatePriorToCurrentPoint) {';
            };
            if(strcmp(this.FMUType,'CS'))
                stepSize=sprintf('%.16g',this.ModelInfoUtils.RTWInfo.FundamentalStepSize);
                content=[content;
                {
                '    FMUModelData *modelData = (FMUModelData *)c;';
                };
                ];
                content=this.LogFcnCalls(content,'fmi2DoStep',false);
                content=[content;
                {
                '    int steps = 0;';
                '    int i;';
                '    fmi2Status returnStatus = fmi2OK;';
                '    ';
                '    (void)noSetFMUStatePriorToCurrentPoint;';
                ['    steps = (int)(communicationStepSize / (double)',stepSize,' + 0.5);    '];
                '    if (modelData->loggingOn) {';
                '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                ['            fmi2OK, "info", "CommunicationStepSize=%.16g, LocalSolverStepSize=%.16g", communicationStepSize, (double)',stepSize,');'];
                '    }';
                ['    if (communicationStepSize < 0 || fabs(communicationStepSize - steps * (double)',stepSize,') > 1.0E-6 * (double)',stepSize,') {'];
                '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                ['                    fmi2Error, "error", "Stepsize must be non-negative and divisible by %.16g", (double)',stepSize,');'];
                '        returnStatus = fmi2Error;';
                ['    } else if (fabs(modelData->time - currentCommunicationPoint) > 1.0E-6 * (double)',stepSize,') {'];
                '        modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                '                    fmi2Error, "error", "CurrentCommunicationPoint is not equal to FMU time");';
                '        returnStatus = fmi2Error;';
                '    } else {';
                '        modelData->time = currentCommunicationPoint;';
                '        if (modelData->loggingOn) {';
                '            modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                '                fmi2OK, "info", "Local solver will do %d steps from t = %.16g.", steps, currentCommunicationPoint);';
                '        }';
                '        for (i = 0; i < steps; i++) {';
                '            if (rtmGetStopRequested(modelData->S)) {';
                '                modelData->functions->logger(modelData->functions->componentEnvironment, modelData->instanceName, ';
                '                        fmi2Error, "error", "stop requested in fmi2DoStep");';
                '                returnStatus = fmi2Error;';
                '                break;';
                '            }';
                ['            ',this.writeModelStepStr(),';'];
                '        }';





                '        modelData->time += communicationStepSize;';
                '    }';
                '    ';
                '    if (modelData->functions->stepFinished) {';
'        modelData->functions->stepFinished(modelData->functions->componentEnvironment, returnStatus);'
                '    }';
                '    return returnStatus;';
                };
                ];
            else
                content=this.LogFcnCalls(content,'fmi2DoStep',true);
                content=[content;
                '    (void)currentCommunicationPoint;';
                '    (void)communicationStepSize;';
                '    (void)noSetFMUStatePriorToCurrentPoint;';
                '    return fmi2OK;';
                ];
            end
            content=[content;
            {
            '}';
            '';
            }
            ];
        end

        function content=writeGetStatusFunctions(this)
            content={
            'fmi2Status fmi2GetStatus(fmi2Component c, const fmi2StatusKind s, fmi2Status *value) {';
            };
            content=this.LogFcnCalls(content,'fmi2GetStatus',true);
            content=[content;
            {
            '    (void)s;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetRealStatus(fmi2Component c, const fmi2StatusKind s, fmi2Real *value) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2GetRealStatus',true);
            content=[content;
            {
            '    (void)s;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetIntegerStatus(fmi2Component c, const fmi2StatusKind s, fmi2Integer *value) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2GetIntegerStatus',true);
            content=[content;
            {
            '    (void)s;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetBooleanStatus(fmi2Component c, const fmi2StatusKind s, fmi2Boolean *value) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2GetBooleanStatus',true);
            content=[content;
            {
            '    (void)s;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetStringStatus(fmi2Component c, const fmi2StatusKind s, fmi2String *value) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2GetStringStatus',true);
            content=[content;
            {
            '    (void)s;';
            '    (void)value;';
            '    return fmi2OK;';
            '}';
            '';
            };
            ];
        end

        function content=writeModelExhangeFunctions(this)
            content={
            '/* ---------------------------------------------------------------------------';
            ' * Functions for FMI for Model Exchange';
            ' * ---------------------------------------------------------------------------';
            ' */';
            '';
            'fmi2Status fmi2CompletedIntegratorStep(fmi2Component c, fmi2Boolean noSetFMUStatePriorToCurrentPoint, fmi2Boolean* enterEventMode, fmi2Boolean* terminateSimulation) {';
            };
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2CompletedIntegratorStep',true);
                content=[content;
                '    (void)noSetFMUStatePriorToCurrentPoint;';
                '    (void)enterEventMode;';
                '    (void)terminateSimulation;';
                '    return fmi2OK;';
                ];
            else
                content=this.LogFcnCalls(content,'fmi2CompletedIntegratorStep',true);
                content=[content;
                '    (void)noSetFMUStatePriorToCurrentPoint;';
                '    *enterEventMode = fmi2True;';
                '    *terminateSimulation = fmi2False;';
                '    return fmi2OK;';
                ];
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2EnterContinuousTimeMode(fmi2Component c) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2EnterContinuousTimeMode',true);
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2EnterEventMode(fmi2Component c) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2EnterEventMode',true);
            content=[content;
            {
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetContinuousStates(fmi2Component c, fmi2Real x[], size_t nx) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2GetContinuousStates',true);
                content=[content;
                '    (void)x;';
                '    (void)nx;';
                '    return fmi2OK;';
                ];
            else
                cont_states_idx=[];
                for i=1:numel(this.ModelInfoUtils.ModelVariableList)
                    if(this.ModelInfoUtils.ModelVariableList(i).is_cont_state)
                        cont_states_idx(end+1)=i-1;%#ok
                    end
                end
                if isempty(cont_states_idx)
                    content=this.LogFcnCalls(content,'fmi2GetContinuousStates',true);
                    content=[content;
                    '    (void)x;';
                    '    (void)nx;';
                    '    return fmi2OK;';
                    ];
                else
                    content=[content;
                    ['    fmi2ValueReference vr[',num2str(numel(cont_states_idx)),'] = {',strjoin(arrayfun(@(x)num2str(x),cont_states_idx,'UniformOutput',false),','),'};'];
                    ];
                    content=this.LogFcnCalls(content,'fmi2GetContinuousStates',true);
                    content=[content;
                    '    return fmi2GetReal(c,vr,nx,x);';
                    ];
                end
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2GetDerivatives(fmi2Component c, fmi2Real derivatives[], size_t nx) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2GetDerivatives',true);
                content=[content;
                '    (void)derivatives;';
                '    (void)nx;';
                '    return fmi2OK;';
                ];
            else
                der_idx=[];
                for i=1:numel(this.ModelInfoUtils.ModelVariableList)
                    if(this.ModelInfoUtils.ModelVariableList(i).is_derivative)
                        der_idx(end+1)=i-1;%#ok
                    end
                end
                if isempty(der_idx)
                    content=this.LogFcnCalls(content,'fmi2GetDerivatives',true);
                    content=[content;
                    '    (void)derivatives;';
                    '    (void)nx;';
                    '    return fmi2OK;';
                    ];
                else
                    content=[content;
                    ['    fmi2ValueReference vr[',num2str(numel(der_idx)),'] = {',strjoin(arrayfun(@(x)num2str(x),der_idx,'UniformOutput',false),','),'};'];
                    ];
                    content=this.LogFcnCalls(content,'fmi2GetDerivatives',true);
                    content=[content;
                    '    return fmi2GetReal(c,vr,nx,derivatives);';
                    ];
                end
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2GetEventIndicators(fmi2Component c, fmi2Real eventIndicators[], size_t ni) {';
            };
            ];
            content=this.LogFcnCalls(content,'fmi2GetEventIndicators',true);
            content=[content;
            {
            '    (void)eventIndicators;';
            '    (void)ni;';
            '    return fmi2OK;';
            '}';
            '';
            'fmi2Status fmi2GetNominalsOfContinuousStates(fmi2Component c, fmi2Real x_nominal[], size_t nx) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2GetNominalsOfContinuousStates',true);
                content=[content;
                '    (void)x_nominal;';
                '    (void)nx;';
                '    return fmi2OK;';
                ];
            else
                content=[content;
                '    int i;';
                ];
                content=this.LogFcnCalls(content,'fmi2GetNominalsOfContinuousStates',true);
                content=[content;
                '    for (i = 0; i < nx; i++) x_nominal[i] = 1.0;';
                '    return fmi2OK;';
                ];
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2NewDiscreteStates(fmi2Component c, fmi2EventInfo* fmi2eventInfo) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2NewDiscreteStates',true);
                content=[content;
                '    (void)fmi2eventInfo;';
                '    return fmi2OK;';
                ];
            else
                content=[content;
                '    FMUModelData *modelData = (FMUModelData *)c;';
                ];
                content=this.LogFcnCalls(content,'fmi2NewDiscreteStates',false);
                content=[content;
                '    /* Default modelData->eventInfo values */';
                '    modelData->eventInfo.newDiscreteStatesNeeded = fmi2False;';
                '    modelData->eventInfo.terminateSimulation = fmi2False;';
                '    modelData->eventInfo.nominalsOfContinuousStatesChanged = fmi2False;';
                '    modelData->eventInfo.valuesOfContinuousStatesChanged = fmi2False;';
                '    modelData->eventInfo.nextEventTimeDefined = fmi2False;';
                '    modelData->eventInfo.nextEventTime = 0;';
                '';
                '    /* Copy modelData->eventInfo into fmi2eventInfo */';
                '    fmi2eventInfo->newDiscreteStatesNeeded = modelData->eventInfo.newDiscreteStatesNeeded;';
                '    fmi2eventInfo->terminateSimulation = modelData->eventInfo.terminateSimulation;';
                '    fmi2eventInfo->nominalsOfContinuousStatesChanged = modelData->eventInfo.nominalsOfContinuousStatesChanged;';
                '    fmi2eventInfo->valuesOfContinuousStatesChanged = modelData->eventInfo.valuesOfContinuousStatesChanged;';
                '    fmi2eventInfo->nextEventTimeDefined = modelData->eventInfo.nextEventTimeDefined;';
                '    fmi2eventInfo->nextEventTime = modelData->eventInfo.nextEventTime;';
                '    /**/';
                ['    ',this.writeModelStepStr(),';'];
                ['    ',this.ModelInfoUtils.CodeInfo.Name,'_update();'];
                '    modelData->isDirty = fmi2False;';
                '    /**/';
                '    return fmi2OK;';
                ];
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2SetContinuousStates(fmi2Component c, const fmi2Real x[], size_t nx) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2SetContinuousStates',true);
                content=[content;
                '    (void)x;';
                '    (void)nx;';
                '    return fmi2OK;';
                ];
            else
                cont_states_idx=[];
                for i=1:numel(this.ModelInfoUtils.ModelVariableList)
                    if(this.ModelInfoUtils.ModelVariableList(i).is_cont_state)
                        cont_states_idx(end+1)=i-1;%#ok
                    end
                end
                if isempty(cont_states_idx)
                    content=this.LogFcnCalls(content,'fmi2SetContinuousStates',true);
                    content=[content;
                    '    (void)x;';
                    '    (void)nx;';
                    '    return fmi2OK;';
                    ];
                else
                    content=[content;
                    ['    fmi2ValueReference vr[',num2str(numel(cont_states_idx)),'] = {',strjoin(arrayfun(@(x)num2str(x),cont_states_idx,'UniformOutput',false),','),'};'];
                    ];
                    content=this.LogFcnCalls(content,'fmi2SetContinuousStates',true);
                    content=[content;
                    '    return fmi2SetReal(c,vr,nx,x);';
                    ];
                end
            end
            content=[content;
            {
            '}';
            '';
            'fmi2Status fmi2SetTime(fmi2Component c, fmi2Real time) {';
            }
            ];
            if(strcmp(this.FMUType,'CS'))
                content=this.LogFcnCalls(content,'fmi2SetTime',true);
                content=[content;
                '    (void)time;';
                '    return fmi2OK;';
                ];
            else
                time_idx=-1;
                real_count=0;
                for i=1:numel(this.ModelInfoUtils.ModelVariableList)
                    if(strcmpi(this.ModelInfoUtils.ModelVariableList(i).dt,'real'))
                        real_count=real_count+1;
                    end
                    if(strcmpi(this.ModelInfoUtils.ModelVariableList(i).xml_name,'time'))
                        time_idx=real_count-1;
                    end
                end
                assert(time_idx~=-1,'Cannot find a defined time variable.');
                content=[content;
                ['    fmi2ValueReference vr[1] = {',num2str(time_idx),'};'];
                '    fmi2Real x = time;';
                ];
                content=this.LogFcnCalls(content,'fmi2SetTime',true);
                content=[content;
                '    return fmi2SetReal(c,vr,1,&x);';
                ];
            end
            content=[content;
            '}';
            '';
            ];
        end

        function val=DoesModelHasDerivative(this)
            mvl=this.ModelInfoUtils.ModelVariableList;
            for i=1:numel(mvl)
                if(mvl(i).is_derivative)
                    val=true;
                    return;
                end
            end
            val=false;
            return;
        end

        function dt=convertToCTypes(this,datatype)
            switch datatype
            case 'int8'
                dt='int8_T';
            case 'uint8'
                dt='uint8_T';
            case 'int16'
                dt='int16_T';
            case 'uint16'
                dt='uint16_T';
            case 'uint32'
                dt='uint32_T';
            case 'int64'
                dt='int64_T';
            case 'uint64'
                dt='uint64_T';
            case{'single','half'}
                dt='float';
            otherwise
                error('Orignal Datatype not recognized while generating code.')
            end
        end
    end
end
