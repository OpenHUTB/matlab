function str=toScopeSpecificationString(blk)








    import dsp.webscopes.style.*;
    dispParamsStr=displayParamsToSpecString(blk);
    scopeParamsStr=scopeParamsToSpecString(blk);
    scalingParamsStr=scalingParamsToSpecString(blk);
    measParamsStr=measurementsParamsToSpecString(blk);

    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);
    figureColor=[0.16,0.16,0.16];
    if isfield(graphicalSettingsStruct,'Style')
        styleSettingsStruct=graphicalSettingsStruct.Style;
        if~isempty(styleSettingsStruct)

            if isfield(styleSettingsStruct,'BackgroundColor')
                figureColor=styleSettingsStruct.BackgroundColor.';
            end
        end
    end
    openAtMdlStart=bool2str(utils.onOffToLogical(get_param(blk,'OpenAtSimulationStart')));

    position=get_param(blk,'WindowPosition');
    if isempty(position)
        position='[]';
    end
    str=...
    ['spbscopes.SpectrumAnalyzerBlockCfg(''CurrentConfiguration'', extmgr.ConfigurationSet('...
    ,'extmgr.Configuration(''Core'',''General UI'',true,''FigureColor'',[',num2str(figureColor),']),'...
    ,'extmgr.Configuration(''Visuals'',''Spectrum'',true,'...
    ,'''SerializedDisplays'',',dispParamsStr,','...
...
    ,scopeParamsStr,'),'...
...
    ,scalingParamsStr,','...
...
    ,measParamsStr,'),'...
    ,'''Position'',',position,','...
    ,'''VisibleAtModelOpen'',''',get_param(blk,'Visible'),''','...
    ,'''OpenAtMdlStart'',',openAtMdlStart,')'];
end

function dispParamsStr=displayParamsToSpecString(blk)

    yLim=str2num(get_param(blk,'YLimits'));%#ok<ST2NM>

    showGrid=bool2str(utils.onOffToLogical(get_param(blk,'ShowGrid')));
    styleParamsStr=styleParamsToSpecString(blk);
    dispParamsStr=['{struct('...
...
    ,'''Title'',''',get_param(blk,'Title'),''','...
    ,'''YLabel'',''',get_param(blk,'YLabel'),''','...
    ,'''MinYLim'',''',num2str(yLim(1)),''','...
    ,'''MaxYLim'',''',num2str(yLim(2)),''','...
    ,'''XGrid'', ',showGrid,','...
    ,'''YGrid'', ',showGrid,','...
    ,'''LegendVisibility'',''',get_param(blk,'ShowLegend'),''','...
...
    ,styleParamsStr...
    ,'''ShowContent'',true,'...
    ,'''Placement'',1)}'];
end

function scopeParamsStr=scopeParamsToSpecString(blk)

    channelNames=strrep(get_param(blk,'ChannelNames'),'''','"');

    channelNames=jsondecode(channelNames).';
    if isempty(channelNames)

        channelNames={''};
    end
    channelNamesStr=[];
    for idx=1:numel(channelNames)
        delim=''',''';
        if(idx==numel(channelNames))
            delim=[];
        end
        channelNamesStr=[channelNamesStr,'',channelNames{idx},'',delim];%#ok<AGROW>
    end
    channelNamesStr=['{''',channelNamesStr,'''}'];
    twoSidedSpectrum=bool2str(utils.onOffToLogical(get_param(blk,'PlotAsTwoSidedSpectrum')));
    normalTrace=bool2str(utils.onOffToLogical(get_param(blk,'PlotNormalTrace')));
    maxHold=bool2str(utils.onOffToLogical(get_param(blk,'PlotMaxHoldTrace')));
    minHold=bool2str(utils.onOffToLogical(get_param(blk,'PlotMinHoldTrace')));
    scopeParamsStr=[
...
    '''InputDomain'',''',get_param(blk,'InputDomain'),''','...
    ,'''SpectrumType'',''',get_param(blk,'SpectrumType'),''','...
    ,'''ViewType'',''',get_param(blk,'ViewType'),''','...
    ,'''SampleRateSource'',''',get_param(blk,'SampleRateSource'),''','...
    ,'''SampleRate'',''',get_param(blk,'SampleRate'),''','...
    ,'''Method'',''',get_param(blk,'Method'),''','...
    ,'''TwoSidedSpectrum'',',twoSidedSpectrum,','...
    ,'''FrequencyScale'',''',get_param(blk,'FrequencyScale'),''','...
    ,'''PlotType'',''',get_param(blk,'PlotType'),''','...
...
    ,'''RBWSource'',''',get_param(blk,'RBWSource'),''','...
    ,'''RBW'',''',get_param(blk,'RBW'),''','...
    ,'''FrequencyVectorSource'',''',get_param(blk,'FrequencyVectorSource'),''','...
    ,'''FrequencyVector'',''',get_param(blk,'FrequencyVector'),''','...
    ,'''FrequencySpan'',''',get_param(blk,'FrequencySpan'),''','...
    ,'''Span'',''',get_param(blk,'Span'),''','...
    ,'''CenterFrequency'',''',get_param(blk,'CenterFrequency'),''','...
    ,'''StartFrequency'',''',get_param(blk,'StartFrequency'),''','...
    ,'''StopFrequency'',''',get_param(blk,'StopFrequency'),''','...
    ,'''Window'',''',get_param(blk,'Window'),''','...
    ,'''CustomWindow'',''',get_param(blk,'CustomWindow'),''','...
    ,'''SidelobeAttenuation'',''',get_param(blk,'SidelobeAttenuation'),''','...
    ,'''OverlapPercent'',''',get_param(blk,'OverlapPercent'),''','...
    ,'''AveragingMethod'',''Exponential'','...
    ,'''ForgettingFactor'',''',get_param(blk,'ForgettingFactor'),''','...
    ,'''InputUnits'',''',get_param(blk,'InputUnits'),''','...
    ,'''PowerUnits'',''',get_param(blk,'SpectrumUnits'),''','...
    ,'''FullScaleSource'',''',get_param(blk,'FullScaleSource'),''','...
    ,'''FullScale'',''',get_param(blk,'FullScale'),''','...
    ,'''ReferenceLoad'',''',get_param(blk,'ReferenceLoad'),''','...
    ,'''FrequencyOffset'',''',get_param(blk,'FrequencyOffset'),''','...
...
    ,'''SpectrogramChannel'',''',get_param(blk,'SpectrogramChannel'),''','...
    ,'''TimeResolutionSource'',''',get_param(blk,'TimeResolutionSource'),''','...
    ,'''TimeResolution'',''',get_param(blk,'TimeResolution'),''','...
    ,'''TimeSpanSource'',''',get_param(blk,'TimeSpanSource'),''','...
    ,'''TimeSpan'',''',get_param(blk,'TimeSpan'),''','...
...
    ,'''MeasurementChannel'',''',get_param(blk,'MeasurementChannel'),''','...
    ,getCursorsStructStr(blk),','...
    ,getPeakFinderStructStr(blk),','...
    ,getSpectralMaskStructStr(blk),','...
...
    ,'''NormalTrace'',',normalTrace,','...
    ,'''MaxHoldTrace'',',maxHold,','...
    ,'''MinHoldTrace'',',minHold,','...
    ,'''AxesLayout'',''',get_param(blk,'AxesLayout'),''','...
    ,'''DefaultMarker'',''none'','...
    ,'''UserDefinedChannelNames'',',channelNamesStr,','...
    ,'''MaximizeAxes'',''',get_param(blk,'MaximizeAxes'),''''
    ];
end

function scalingParamsStr=scalingParamsToSpecString(blk)

    onceAtStop='false';
    axesScaling=get_param(blk,'AxesScaling');
    if strcmpi(axesScaling,'OnceAtStop')
        onceAtStop='true';
    end

    scalingParamsStr=[
'extmgr.Configuration(''Tools'',''Plot Navigation'',true,'...
    ,'''OnceAtStop'',',onceAtStop,','...
    ,'''AutoscaleMode'',''',axesScaling,''','...
    ,'''UpdatesBeforeAutoscale'',''',get_param(blk,'AxesScalingNumUpdates'),''')'
    ];
end

function measParamsStr=measurementsParamsToSpecString(blk)
    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);
    measParamsStr=[
'extmgr.Configuration(''Tools'',''Measurements'',true,'...
    ,'''Measurements'',struct(''traceselector'',struct(''Line'','...
    ,num2str(get_param(blk,'MeasurementChannel')),')'];

    if~isempty(graphicalSettingsStruct)
        delim=',';

        if isfield(graphicalSettingsStruct,'Cursors')
            measParamsStr=[measParamsStr,delim,...
            '''tcursors'',struct()'];
        end

        if isfield(graphicalSettingsStruct,'Peaks')
            measParamsStr=[measParamsStr,delim...
            ,'''peaks'',struct()'];
        end
    end
    measParamsStr=[measParamsStr,'))'];
end

function styleParamsStr=styleParamsToSpecString(blk)
    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);
    styleParamsStr=[];
    if isfield(graphicalSettingsStruct,'Style')
        styleSettingsStruct=graphicalSettingsStruct.Style;
        if~isempty(styleSettingsStruct)

            numLines=1;
            if isfield(styleSettingsStruct,'LineStyle')
                numLines=numel(styleSettingsStruct.LineStyle);
            end

            axesColor=styleSettingsStruct.AxesColor.';

            axesTickColor=styleSettingsStruct.LabelsColor.';
            styleParamsStr=[styleParamsStr,...
            '''AxesColor'',[',num2str(axesColor),'],'...
            ,'''AxesTickColor'',[',num2str(axesTickColor),'],'...
            ,'''NumLines'',',num2str(numLines),','];

            lineParamsStr=[];
            delim=[];
            colorOrder=utils.getColorOrder([0,0,0]);
            for lIdx=1:numLines

                color=colorOrder(lIdx,:);
                if isfield(styleSettingsStruct,'LineColor')
                    color=styleSettingsStruct.LineColor(lIdx,:);
                end

                style='-';
                if isfield(styleSettingsStruct,'LineStyle')
                    style=styleSettingsStruct.LineStyle{lIdx};
                end

                width=1.5;
                if isfield(styleSettingsStruct,'LineWidth')
                    width=styleSettingsStruct.LineWidth(lIdx);
                end

                marker='o';
                if isfield(styleSettingsStruct,'Marker')
                    marker=styleSettingsStruct.Marker{lIdx};
                end
                lineParamsStr=[lineParamsStr,delim...
                ,'struct(''Color'',[',num2str(color),'],'...
                ,'''LineStyle'',''',style,''','...
                ,'''LineWidth'',',num2str(width),','...
                ,'''Marker'',''',marker,''')'...
                ];%#ok<AGROW>
                delim=',';
            end
            styleParamsStr=[styleParamsStr...
            ,'''LinePropertiesCache'',{{',lineParamsStr,'}},'];
        end
    end
end

function dataCursorsStr=getCursorsStructStr(blk)
    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);
    if isfield(graphicalSettingsStruct,'Cursors')
        cursors=graphicalSettingsStruct.Cursors;

        lockSpacing=bool2str(cursors.LockSpacing);

        snapToData=bool2str(cursors.SnapToData);
        dataCursorsStr=[
        '''CursorMeasurementsProperties'',struct(''XLocation'',[',num2str(cursors.XLocation.'),'],'...
        ,'''LockSpacing'',',lockSpacing,','...
        ,'''SnapToData'',',snapToData,')'];
    else
        dataCursorsStr='''CursorMeasurementsProperties'',struct()';
    end
end

function peakFinderStr=getPeakFinderStructStr(blk)
    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);
    if isfield(graphicalSettingsStruct,'PeakFinder')
        peaks=graphicalSettingsStruct.PeakFinder;
        peakFinderStr=[
        '''PeakFinderProperties'',struct(''Threshold'',',num2str(peaks.Threshold),','...
        ,'''NumPeaks'',',num2str(peaks.NumPeaks),','...
        ,'''MinPeakDistance'',',num2str(peaks.MinDistance),','...
        ,'''MinPeakHeight'',',num2str(peaks.MinHeight),')'];
    else
        peakFinderStr='''PeakFinderProperties'',struct()';
    end
end

function spectralMaskStr=getSpectralMaskStructStr(blk)
    graphicalSettingsStruct=Simulink.scopes.SpectrumAnalyzerUtils.getGraphicalSettings(blk);

    if isfield(graphicalSettingsStruct,'SpectralMask')
        spectralMask=graphicalSettingsStruct.SpectralMask;
        enabledMasks=spectralMask.EnabledMasks;
        if strcmpi(enabledMasks,'upper-and-lower')
            enabledMasks='Upper and lower';
        end
        spectralMaskStr=[
        '''SpectralMaskProperties'',struct(''EnabledMasks'',''',enabledMasks,''','...
        ,'''UpperMask'',',num2str(spectralMask.UpperMask),','...
        ,'''LowerMask'',',num2str(spectralMask.LowerMask),','...
        ,'''ReferenceLevel'',''',spectralMask.ReferenceLevel,''','...
        ,'''CustomReferenceLevel'',',num2str(spectralMask.CustomReferenceLevel),','...
        ,'''SelectedChannel'',',num2str(spectralMask.SelectedChannel),','...
        ,'''MaskFrequencyOffset'',',num2str(spectralMask.MaskFrequencyOffset),')'];
    else
        spectralMaskStr='''SpectralMaskProperties'',struct()';
    end
end

function boolStr=bool2str(boolValue)
    boolStr='false';
    if boolValue
        boolStr='true';
    end
end