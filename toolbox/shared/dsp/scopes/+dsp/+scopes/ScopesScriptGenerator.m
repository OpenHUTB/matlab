classdef ScopesScriptGenerator<handle





    properties

        CodeBuffer;


        DefaultScopeObject;


        GenerateScriptClickedListener;

        ScopeVarName='specScope';

ScopeObject

ScopeSpecObject
    end

    methods
        function setup(obj,scopeObj,scopeSpecObj)
            obj.ScopeObject=scopeObj;
            obj.ScopeSpecObject=scopeSpecObj;
            obj.GenerateScriptClickedListener=event.listener(obj.ScopeSpecObject,...
            'GenerateScriptClicked',@(~,~)generateScript(obj));
        end

        function varargout=generateScript(obj)




            obj.CodeBuffer=StringWriter();
            if nargout<1


                addHeader(obj);
            end

            try
                addConstructor(obj);
            catch ME
                if strcmpi(ME.identifier,'Spcuilib:uiservices:EvaluateUndefinedVariable')
                    error(ME.message);
                end
            end

            addMeasurement(obj,obj.ScopeObject.SpectralMask);

            addMeasurement(obj,obj.ScopeObject.PeakFinder);

            addMeasurement(obj,obj.ScopeObject.CursorMeasurements);

            addMeasurement(obj,obj.ScopeObject.ChannelMeasurements);

            addMeasurement(obj,obj.ScopeObject.DistortionMeasurements);
            str=obj.CodeBuffer;
            if nargout>0
                varargout{1}=str;
            else
                dsp.util.sendToEditor(string(str),true);
            end
        end
    end

    methods(Access=protected)
        function addHeader(obj)

            str=obj.CodeBuffer;
            t=datetime('now','TimeZone','local','Format','d-MMM-y HH:mm:ss Z');
            str.addcr('%% Creation Code for ''%s''.','dsp.SpectrumAnalyzer');
            str.addcr('%% Generated by Spectrum Analyzer on %s.\n',string(t));
        end

        function addConstructor(obj)

            str=obj.CodeBuffer;
            if isempty(obj.DefaultScopeObject)


                defaultobj=eval(class(obj.ScopeObject));
                obj.DefaultScopeObject=defaultobj;
            else

                defaultobj=obj.DefaultScopeObject;
            end


            currPos=obj.ScopeObject.Position;
            defaultPos=defaultobj.Position;
            if(isequal(round(currPos),round(defaultPos)))||...
                strcmp(obj.ScopeObject.getFramework.Parent.WindowStyle,'docked')
                defaultobj.Position=currPos;
            end
            defaultStruct=get(defaultobj);
            ctorExp=matlab.system.internal.toExpression(obj.ScopeObject,...
            'Defaults',defaultStruct,'IncludeHidden',false);

            ctorExp=strrep(ctorExp,[', ...',newline,'''SpectralMask'',dsp.scopes.SpectralMaskSpecification'],'');
            ctorExp=strrep(ctorExp,['''SpectralMask'',dsp.scopes.SpectralMaskSpecification, ...',newline],'');
            ctorExp=strrep(ctorExp,'''SpectralMask'',dsp.scopes.SpectralMaskSpecification','');

            varName=getVariableName(obj);
            str.addcr('%s = %s;',varName,ctorExp);
        end

        function addMeasurement(obj,measurer)

            if isprop(measurer,'Enable')
                if~measurer.Enable
                    return;
                end
            end
            str=obj.CodeBuffer;


            varName=getVariableName(obj);

            [flag,props,vals]=getMeasurementsChangedProps(measurer);

            if flag



                measureName=getMeasurementName(measurer);

                measurerObjectName=getMeasurementObjectName(measurer);
                str.addcr('%% %s Configuration',measureName);
                for idx=1:numel(props)
                    str.addcr('%s.%s.%s = %s;',varName,measurerObjectName,props{idx},vals{idx});
                end
            end
        end

        function varName=getVariableName(obj)
            varName=obj.ScopeVarName;
        end
    end
end