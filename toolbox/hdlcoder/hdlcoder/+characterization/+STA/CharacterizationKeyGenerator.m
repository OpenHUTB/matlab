classdef CharacterizationKeyGenerator<handle




    properties
        m_compToParamMap;
        m_paramToIntMap;
        m_matFileNameGenerator;
    end

    methods

        function self=CharacterizationKeyGenerator()
            self.m_matFileNameGenerator=characterization.STA.MatFileNameGenerator();
            self.init();
            self.buildMap();

        end

        function init(self)



            self.m_paramToIntMap={...

            {'bitrotate_comp',{}},...
...
            {'bitreduce_comp',{}},...
...
            {'mul_comp',{{'DSPStyle','DSPStyle','int',{'none',0,'on',1,'off',2}}}},...
...
            {'add_comp',{}},...
...
            {'abs_comp',{}},...
...
            {'switch_comp',{{'Criteria','CompareStr','string',{'u2 > Threshold','>','u2 >= Threshold','>=','u2 ~= 0','~='}}}},...
...
            {'unitdelay_comp',{}},...
...
            {'unitdelayenabled_comp',{}},...
...
            {'unitdelayresettable_comp',{}},...
...
            {'recip_comp',{{'NumberOfIterations','IterNum','int','string2num'}}},...
...
            {'recipsqrtnewton_comp',{{'Iterations','IterNum','int','string2num'}}},...
...
            {'recipsqrtnewtonsinglerate_comp',{{'Iterations','IterNum','int','string2num'}}},...
...
            {'relop_comp',{{'Operator','OpName','string','identical'}}},...
...
            {'bitwiseop_comp',{{'NumInputPorts','NumInputPorts','int','string2num'},...
...
            {'Operator','OpName','string','identical'}}},...
...
            {'bitshift_comp',{{'mode','OpName','string',{'Shift Left Logical','sll','Shift Right Logical','srl','Shift Right Arithmetic','sra'}}}},...
...
            {'hdlcounter_comp',{{'CountType','CountType','string','identical'},...
            {'CountResetPort','ResetPort','boolean','onoff2bool'},...
            {'CountLoadPort','LoadPort','boolean','onoff2bool'},...
            {'CountEnbPort','EnablePort','boolean','onoff2bool'},...
            {'CountDirPort','DirectionPort','boolean','onoff2bool'}}},...
...
            {'logic_comp',{{'Operator','OpName','string','tolower'}}},...
...
            {'ratetransition_comp',{}},...
...
            {'saturation_comp',{}},...
...
            {'multiportswitch_comp',{}},...
...
            {'serializer_comp',{{'validIn','ValidInPort','boolean','onoff2bool'},...
            {'validOut','ValidOutPort','boolean','onoff2bool'},...
            {'startOut','StartOutPort','boolean','onoff2bool'}}},...
...
            {'deserializer_comp',{{'validIn','ValidInPort','boolean','onoff2bool'},...
            {'validOut','ValidOutPort','boolean','onoff2bool'},...
            {'startIn','StartInPort','boolean','onoff2bool'}}},...
...
            {'lookuptable_comp',{{'NumberOfTableDimensions','dimension','int','string2num'}}},...
...
            {'datatypeconvert_comp',{{'RndMeth','RoundMethod','string','tolower'},...
            {'SaturateOnIntegerOverflow','SaturateOnIntegerOverflowPort','boolean','onoff2bool'}}},...
...
            {'tappeddelay_comp',{}},...
...
            {'sqrtNewton_comp',{{'Iterations','IterNum','int','string2num'}}},...
...
            {'sqrtNewtonSingleRate_comp',{{'Iterations','IterNum','int','string2num'}}},...
...
            {'reciprocalrsqrtbasednewton_comp',{}},...
...
            {'sqrtnewtonsinglerate_comp',{}},...
...
            {'sqrtfunction_comp',{{'LatencyStrategy','LatencyStrategy','int',{'zero',0,'max',1}}}},...
...
            {'cordic_comp',{{'Operator','fName','int',{'sin',0,'cos',1,'atan2',2,'sincos',3,'cos + jsin',4}},...
            {'LatencyStrategy','LatencyStrategy','int',{'zero',0,'max',1}}}},...
...
            {'signum_comp',{{'ZeroCross','ZeroCross','boolean','onoff2bool'}}},...
...
            {'unaryminus_comp',{{'saturateOnIntegerOverflow','sat','boolean','onoff2bool'}}},...
...
            {'backlash_comp',{}},...
...
            {'nfp_add_comp',{{'LatencyStrategy','NFPLatency','int',{'MAX','1','MIN','2','ZERO','3','CUSTOM','4'}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_mul_comp',{{'Inputs','InputSigns','string',{'**','**'}},...
            {'LatencyStrategy','NFPLatency','int',{'MAX','1','MIN','2','ZERO','3','CUSTOM','4'}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}},...
            {'MantissaMultiplyStrategy','NFPMantMul','int',{'FullMultiplier',1,'PartMultiplierPartAddShift',2,'NoMultiplierFullAddShift',3}},...
            {'PartAddShiftMultiplierSize','PartAddShiftMultiplierSize','int',{'18x24',1,'18x18',2,'17x17',3}}}},...
...
            {'nfp_div_comp',{{'Inputs','InputSigns','string',{'*/','*/'}},...
            {'LatencyStrategy','NFPLatency','int',{'MAX','1','MIN','2','ZERO','3','CUSTOM','4'}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}},...
            {'DivisionAlgorithm','NFPRadix','int',{'Radix-2',2,'Radix-4',4}}}},...
...
            {'nfp_conv_fi2fl_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_conv_fl2fi_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_conv_fl2fl_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_relop_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_hdlrecip_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_floor_comp',{{'Operator','OperatorMode','string',{'floor','floor'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_ceil_comp',{{'Operator','OperatorMode','string',{'ceil','ceil'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_round_comp',{{'Operator','OperatorMode','string',{'round','round'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_fix_comp',{{'Operator','OperatorMode','string',{'fix','fix'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0}}},...
...
            {'nfp_sqrt_comp',{{'Operator','FunctionName','string',{'sqrt','sqrt'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'CustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_rsqrt_comp',{{'Operator','FunctionName','string',{'rSqrt','rSqrt'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'CustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_exp_comp',{{'Operator','FunctionName','string',{'exp','exp'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_log_comp',{{'Operator','FunctionName','string',{'log','log'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_pow10_comp',{{'Operator','FunctionName','string',{'10^u','10^u'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_log10_comp',{{'Operator','FunctionName','string',{'log10','log10'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_recip_comp',{{'Operator','FunctionName','string',{'reciprocal','reciprocal'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}},...
            {'DivisionAlgorithm','NFPRadix','int',{'Radix-2',2,'Radix-4',4}}}},...
...
            {'nfp_mod_comp',{{'Operator','FunctionName','string',{'mod','mod'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}},...
            {'CheckResetToZero','NFPModRemCheckResetToZero','int',{'on',1,'off',0}},...
            {'MaxIterations','NFPModRemMaxIterations','int',{'32',32,'64',64,'128',128}}}},...
...
            {'nfp_rem_comp',{{'Operator','FunctionName','string',{'rem','rem'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}},...
            {'CheckResetToZero','NFPModRemCheckResetToZero','int',{'on',1,'off',0}},...
            {'MaxIterations','NFPModRemMaxIterations','int',{'32',32,'64',64,'128',128}}}},...
...
            {'nfp_pow_comp',{{'Operator','FunctionName','string',{'pow','pow'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
            {'nfp_hypot_comp',{{'Operator','FunctionName','string',{'hypot','hypot'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_sin_comp',{{'Operator','FunctionName','string',{'sin','sin'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}},...
            {'MultiplyStrategy','NFPMantMul','int',{'FullMultiplier',1,'PartMultiplierPartAddShift',2}},...
            {'InputRangeReduction','NFPArgReduction','int',{'on',1,'off',0}}}},...
...
            {'nfp_cos_comp',{{'Operator','FunctionName','string',{'cos','cos'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}},...
            {'MultiplyStrategy','NFPMantMul','int',{'FullMultiplier',1,'PartMultiplierPartAddShift',2}},...
            {'InputRangeReduction','NFPArgReduction','int',{'on',1,'off',0}}}},...
...
            {'nfp_tan_comp',{{'Operator','FunctionName','string',{'tan','tan'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}},...
            {'InputRangeReduction','NFPArgReduction','int',{'on',1,'off',0}}}},...
...
            {'nfp_asin_comp',{{'Operator','FunctionName','string',{'asin','asin'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_acos_comp',{{'Operator','FunctionName','string',{'acos','acos'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_sinh_comp',{{'Operator','FunctionName','string',{'sinh','sinh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_cosh_comp',{{'Operator','FunctionName','string',{'cosh','cosh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_tanh_comp',{{'Operator','FunctionName','string',{'tanh','tanh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_atan_comp',{{'Operator','FunctionName','string',{'atan','atan'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}}}},...
...
            {'nfp_asinh_comp',{{'Operator','FunctionName','string',{'asinh','asinh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}}}},...
...
            {'nfp_acosh_comp',{{'Operator','FunctionName','string',{'acosh','acosh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}}}},...
...
            {'nfp_atanh_comp',{{'Operator','FunctionName','string',{'atanh','atanh'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}}}},...
...
            {'nfp_atan2_comp',{{'Operator','FunctionName','string',{'atan2','atan2'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3}},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_sincos_comp',{{'Operator','FunctionName','string',{'sincos','sincos'}},...
            {'LatencyStrategy','NFPLatency','int',{'Max',1,'Zero',3}},...
            {'MultiplyStrategy','NFPMantMul','int',{'FullMultiplier',1,'PartMultiplierPartAddShift',2}},...
            {'InputRangeReduction','NFPArgReduction','int',{'on',1,'off',0}}}},...
...
            {'nfp_gain_pow2_comp',{{'LatencyStrategy','NFPLatency','int',{'Max',1,'Min',2,'Zero',3,'Custom',4}},...
            {'NFPCustomLatency','NFPCustomLatency','int',0},...
            {'Latency','Latency','int',0},...
            {'HandleDenormals','NFPDenormals','int',{'on',1,'off',2}}}},...
...
            {'nfp_cast_comp',{}},...
...
            {'nfp_abs_comp',{}},...
...
            {'nfp_signum_comp',{}},...
...
            {'nfp_uminus_comp',{}},...
...
            {'dummy',{}}...
            };
        end

        function buildMap(self)
            self.m_compToParamMap=containers.Map('KeyType','char','ValueType','any');

            for compIndex=1:numel(self.m_paramToIntMap)

                entry=self.m_paramToIntMap{compIndex};
                compName=entry{1};

                if self.m_compToParamMap.isKey(compName)
                    error(['Multiple mapping entries for comp : ',compName]);
                end



                cmap=containers.Map('KeyType','char','ValueType','any');
                self.m_compToParamMap(compName)=cmap;

                for paramIndex=1:numel(entry{2})

                    paramEntry=entry{2}{paramIndex};
                    paramName=paramEntry{1};

                    if cmap.isKey(paramName)
                        error(['Multiple mapping entries for comp : ',compName,':',paramName]);
                    end


                    if ischar(paramEntry{4})
                        cmap(paramName)={paramEntry{4},paramEntry{2},paramEntry{3}};
                        continue;
                    end

                    if isnumeric(paramEntry{4})
                        cmap(paramName)={paramEntry{4},paramEntry{2},paramEntry{3}};
                        continue;
                    end

                    keyType=self.getType(paramEntry{4}{1});
                    pmap=containers.Map('KeyType',keyType,'ValueType','any');
                    cmap(paramName)={pmap,paramEntry{2},paramEntry{3}};


                    for vIndex=1:2:numel(paramEntry{4})
                        pmap(paramEntry{4}{vIndex})=paramEntry{4}{vIndex+1};
                    end
                end
            end

        end

        function typeName=getType(~,var)
            typeName=class(var);
        end

        function paramSpec=getParamSpec(self,compName,paramKey)

            paramSpec={};
            cmap=self.m_compToParamMap(compName);

            for paramIndex=1:numel(paramKey)
                paramName=paramKey{paramIndex};
                entry=cmap(paramName);
                paramSpec{end+1}={entry{2},entry{3}};
            end

        end

        function key=getKey(self,modelInfo)

            key={modelInfo.component};
            cmap=self.m_compToParamMap(modelInfo.component);
            isPartMultiplier=false;

            paramPVPairs=modelInfo.currentParamSettings;
            for paramIndex=1:2:numel(paramPVPairs)
                paramName=paramPVPairs{paramIndex};
                paramValue=paramPVPairs{paramIndex+1};


                if strcmp(paramName,'MantissaMultiplyStrategy')&&...
                    strcmp(paramValue,'PartMultiplierPartAddShift')
                    isPartMultiplier=true;
                end

                entry=cmap(paramName);
                pmap=entry{1};

                if strcmp(modelInfo.dataType,'nfpdt')
                    if strcmp(modelInfo.invalidHDLParams,paramName)


                        if ischar(pmap)
                            val='dummy';
                        else
                            val=-1;
                        end
                    elseif strcmp(paramName,'PartAddShiftMultiplierSize')&&~isPartMultiplier
                        val=0;
                    else
                        if ischar(pmap)
                            val=self.(pmap)(modelInfo.implementation,paramName,paramValue);
                        elseif pmap==0
                            val=paramValue;
                        else
                            val=pmap(paramValue);
                        end
                    end
                else


                    if ischar(pmap)
                        val=self.(pmap)(modelInfo.implementation,paramName,paramValue);
                    else
                        val=pmap(paramValue);
                    end
                end

                key{end+1}=val;
            end
        end

        function key=string2num(~,~,~,paramValue)
            key=str2double(paramValue);
        end

        function key=tolower(~,~,~,paramValue)
            key=lower(paramValue);
        end

        function key=identical(~,~,~,paramValue)
            key=paramValue;
        end

        function key=onoff2bool(~,~,~,paramValue)
            key=0;
            isOn=strfind(paramValue,'on');
            if~isempty(isOn)
                key=1;
            end
        end
    end

end
