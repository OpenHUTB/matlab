function generateDutInfoReport(this,bom_content_file,title,model,p,tcgInventory,JavaScriptBody)%#ok<INUSD,INUSL>





    w=hdlhtml.reportingWizard(bom_content_file,title);

    w.addCollapsibleJS();

    w.setHeader(DAStudio.message('hdlcoder:report:code_interface_report_title',model));

    ntks=p.Networks();%#ok<NASGU>
    [total_pin_count,io_data]=slhdlcoder.HDLTraceabilityDriver.calcIOPinsForDut(p);%#ok<ASGLU>





    function generatePort(port_data)
        function out_str=bold(msg_key)
            out_str=['<b>',message(['hdlcoder:report:',msg_key]).getString(),'</b>'];
        end
        numRows=length(port_data)+1;
        itr=1;
        info_table_in=w.createTable(numRows,3);
        info_table_in.createEntry(itr,1,bold('Port_Name'),'left');
        info_table_in.createEntry(itr,2,bold('Datatype'),'center');
        info_table_in.createEntry(itr,3,bold('Bits'),'center');
        for itr=2:numRows
            port=port_data(itr-1);

            if~strcmpi(port.Kind,'data')
                port_handle=-1;
            else
                port_handle=port.SimulinkHandle;
            end
            port_path=port.Name;
            parts=strsplit(port_path,'/');
            if(port_handle==-1)
                info_table_in.createEntry(itr,1,parts{end},'left');
            else
                try
                    if(port.isTestpoint)

                        info_table_in.createEntry(itr,1,hdlhtml.reportingWizard.generateSystemLinkForSignal(parts{end},port_handle),'left');
                    else
                        port_path=getfullname(port_handle);
                        info_table_in.createEntry(itr,1,hdlhtml.reportingWizard.generateSystemLink(port_path,port_handle),'left');
                    end
                catch mEx %#ok<NASGU>

                    info_table_in.createEntry(itr,1,port_path,'left');
                end
            end
            if(port.isarray)
                info_table_in.createEntry(itr,2,port.datatype,'center');
                info_table_in.createEntry(itr,3,num2str(port.bitlength*port.numberofelements),'center');
            else
                info_table_in.createEntry(itr,2,port.datatype,'center');
                info_table_in.createEntry(itr,3,num2str(port.bitlength),'center');
            end

        end
        w.commitTable(info_table_in);
    end

    inport_section=w.createSection(DAStudio.message('hdlcoder:report:input_ports'),3);
    w.commitSection(inport_section);
    generatePort(io_data.inputs);

    outport_section=w.createSection(DAStudio.message('hdlcoder:report:output_ports'),3);
    w.commitSection(outport_section);
    generatePort(io_data.outputs);

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...

    w.dumpHTML();
end




