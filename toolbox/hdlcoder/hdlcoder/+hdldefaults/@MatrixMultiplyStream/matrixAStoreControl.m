function hAStoreN=matrixAStoreControl(~,hTopN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(2).Type;
    hAColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize))+1,0);
    hsubColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.dotProductSize))+1,0);
    hindexCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize/blockInfo.dotProductSize))+1,0);
    if(blockInfo.aColumnSize~=blockInfo.dotProductSize)
        hsubColCounterType2=hsubColCounterT;
    else
        hsubColCounterType2=hAColCounterT;
    end
    aCol=blockInfo.aColumnSize;
    indexMaxValue=ceil(blockInfo.aColumnSize/blockInfo.dotProductSize);




    modulus=mod(blockInfo.aColumnSize,blockInfo.dotProductSize);
    lastSubcolumn=ceil(blockInfo.aColumnSize/indexMaxValue);

    temp=ceil(((indexMaxValue*blockInfo.dotProductSize)-blockInfo.aColumnSize));
    if(temp<=indexMaxValue)
        lastElement=indexMaxValue-temp;
    else
        lastElement=indexMaxValue-((lastSubcolumn*indexMaxValue)-blockInfo.aColumnSize);
    end

    hAStoreN=pirelab.createNewNetwork(...
    'Name','matrixAStoreControl',...
    'InportNames',{'aValidIn','aDataIn','cRowDone'},...
    'InportTypes',[hInSigs(1).Type,hInSigs(2).Type,hBoolT],...
    'InportRates',[slRate,slRate,slRate],...
    'OutportNames',{'aReady','aDataOut','aValidOut','aSubcolumnCount','indexCount','indexEn'},...
    'OutportTypes',[hBoolT,inputDataT,hBoolT,hsubColCounterType2,hindexCounterT,hBoolT]);
    hAStoreN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hAStoreN.PirOutputSignals)
        hAStoreN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    pirelab.instantiateNetwork(hTopN,hAStoreN,hInSigs,hOutSigs,...
    [hAStoreN.Name,'_inst']);


    aValidS=hAStoreN.PirInputSignals(1);
    aDataS=hAStoreN.PirInputSignals(2);
    cRowDoneS=hAStoreN.PirInputSignals(3);
    aReadyS=hAStoreN.PirOutputSignals(1);
    aDataOutS=hAStoreN.PirOutputSignals(2);
    aValidOutS=hAStoreN.PirOutputSignals(3);
    aSubColCountS=hAStoreN.PirOutputSignals(4);
    aIndexCountS=hAStoreN.PirOutputSignals(5);
    indexEnS=hAStoreN.PirOutputSignals(6);

    dpSizeS=l_addSignal(hAStoreN,'dpSizeS',hAColCounterT,slRate);
    AcolS=l_addSignal(hAStoreN,'aCol',hAColCounterT,slRate);
    indexS=l_addSignal(hAStoreN,'indexMaxValue',hsubColCounterT,slRate);
    aDataValidWireS=l_addSignal(hAStoreN,'aValidWire',hBoolT,slRate);
    colCounterS=l_addSignal(hAStoreN,'colCounterOut',hAColCounterT,slRate);
    colCountCompareS=l_addSignal(hAStoreN,'colcompareOut',hBoolT,slRate);
    compareflagS=l_addSignal(hAStoreN,'compareFlagOut',hBoolT,slRate);
    logicalOneS=l_addSignal(hAStoreN,'Constant1Out',hBoolT,slRate);
    logicalZeroS=l_addSignal(hAStoreN,'ConstantOut',hBoolT,slRate);
    switchS=l_addSignal(hAStoreN,'switchOut',hBoolT,slRate);
    switch1S=l_addSignal(hAStoreN,'switch1Out',hBoolT,slRate);
    switch2S=l_addSignal(hAStoreN,'switch2Out',hBoolT,slRate);
    switch3S=l_addSignal(hAStoreN,'switch3Out',hBoolT,slRate);
    switch1DelayS=l_addSignal(hAStoreN,'switch1OutDelay',hBoolT,slRate);
    negSwitch1DelayS=l_addSignal(hAStoreN,'notSwitch1OutDelay',hBoolT,slRate);

    pirelab.getConstComp(hAStoreN,...
    dpSizeS,...
    blockInfo.dotProductSize,...
    'dotProductSize');

    pirelab.getConstComp(hAStoreN,...
    AcolS,...
    aCol,...
    'ColumnSize');

    pirelab.getConstComp(hAStoreN,...
    indexS,...
    indexMaxValue,...
    'indexMaxValue');

    pirelab.getLogicComp(hAStoreN,...
    [aValidS,aReadyS],...
    aDataValidWireS,...
    'and','aDataValidWire');


    if(aCol~=1)
        pirelab.getCounterComp(hAStoreN,...
        aDataValidWireS,...
        colCounterS,...
        'Count limited',1,1,aCol,0,0,1,0,'colCounter',1);
    else
        constant4S=l_addSignal(hAStoreN,'constant4Out',hAColCounterT,slRate);
        pirelab.getConstComp(hAStoreN,...
        constant4S,...
        1,...
        'Constant4','on',0,'','','');
        pirelab.getWireComp(hAStoreN,...
        constant4S,...
        colCounterS,...
        'colCounter');
    end

    pirelab.getCompareToValueComp(hAStoreN,...
    colCounterS,...
    colCountCompareS,...
    '==',aCol,...
    'compareCol',0);

    pirelab.getIntDelayComp(hAStoreN,...
    aDataValidWireS,...
    aValidOutS,...
    1,'dataValid',...
    false,...
    0,0,[],0,0);

    pirelab.getLogicComp(hAStoreN,...
    [colCountCompareS,aDataValidWireS],...
    compareflagS,...
    'and','compareFlag');

    pirelab.getConstComp(hAStoreN,...
    logicalOneS,...
    1,...
    'Constant1','on',0,'','','');

    pirelab.getConstComp(hAStoreN,...
    logicalZeroS,...
    0,...
    'Constant','on',0,'','','');

    pirelab.getSwitchComp(hAStoreN,...
    [logicalOneS,switch1DelayS],...
    switchS,...
    compareflagS,'Switch',...
    '~=',0,'Floor','Wrap');

    pirelab.getSwitchComp(hAStoreN,...
    [logicalZeroS,switchS],...
    switch1S,...
    cRowDoneS,'Switch1',...
    '~=',0,'Floor','Wrap');

    pirelab.getIntDelayComp(hAStoreN,...
    switch1S,...
    switch1DelayS,...
    1,'switch1Delay',...
    false,...
    0,0,[],0,0);

    pirelab.getSwitchComp(hAStoreN,...
    [logicalOneS,aReadyS],...
    switch2S,...
    cRowDoneS,'Switch2',...
    '~=',0,'Floor','Wrap');

    pirelab.getSwitchComp(hAStoreN,...
    [logicalZeroS,switch2S],...
    switch3S,...
    switch1S,'Switch3',...
    '~=',0,'Floor','Wrap');
    if(blockInfo.aColumnSize~=1)
        pirelab.getIntDelayComp(hAStoreN,...
        switch3S,...
        aReadyS,...
        1,'Switch3OutDelay',...
        true,...
        0,0,[],0,0);
    else



        Delay1ivS=l_addSignal(hAStoreN,'Delay1ivS',hBoolT,slRate);
        Delay1delOutS=l_addSignal(hAStoreN,'Delay1delOut',hBoolT,slRate);
        Delay1toDelS=l_addSignal(hAStoreN,'Delay1toDel',hBoolT,slRate);
        pirelab.getConstComp(hAStoreN,...
        Delay1ivS,...
        false,...
        'Initial_Val','on',0,'','','');

        pirelab.getSwitchComp(hAStoreN,...
        [Delay1ivS,switch3S],...
        Delay1toDelS,...
        aValidOutS,'reset_in',...
        '~=',0,'Floor','Wrap');

        pirelab.getIntDelayComp(hAStoreN,...
        Delay1toDelS,...
        Delay1delOutS,...
        1,'Delay1_lowered',...
        true,...
        0,0,[],0,0);

        pirelab.getSwitchComp(hAStoreN,...
        [Delay1ivS,Delay1delOutS],...
        aReadyS,...
        aValidOutS,'reset_out',...
        '~=',0,'Floor','Wrap');


    end

    pirelab.getRelOpComp(hAStoreN,...
    [dpSizeS,AcolS],...
    indexEnS,...
    '~=',0,sprintf('Relational\nOperator'));


    pirelab.getIntDelayComp(hAStoreN,...
    aDataS,...
    aDataOutS,...
    1,'DataDelay',...
    false,...
    0,0,[],0,0);

    pirelab.getLogicComp(hAStoreN,...
    switch1DelayS,...
    negSwitch1DelayS,...
    'not',sprintf('Logical\nOperator1'));

    if(blockInfo.aColumnSize==blockInfo.dotProductSize)
        pirelab.getConstComp(hAStoreN,...
        aIndexCountS,...
        1,...
        'Constant1');

        pirelab.getWireComp(hAStoreN,...
        colCounterS,...
        aSubColCountS,...
        'subcolCount');

    else
        indexCountEnS=l_addSignal(hAStoreN,'indexCountEnOut',hBoolT,slRate);
        compareIndexS=l_addSignal(hAStoreN,'compareIndexOut',hBoolT,slRate);
        aSubColCountEnS=l_addSignal(hAStoreN,'aSubColCountEnOut',hBoolT,slRate);
        aTempSubColCountS=l_addSignal(hAStoreN,'aTempSubColCountOut',hsubColCounterT,slRate);
        if(modulus~=0)
            compareIndex2S=l_addSignal(hAStoreN,'compareIndex2',hBoolT,slRate);
            compareIndex3S=l_addSignal(hAStoreN,'compareIndex3',hBoolT,slRate);
            subColoumnCountReset=l_addSignal(hAStoreN,'subColoumnCountReset',hBoolT,slRate);
            logicalAnd1=l_addSignal(hAStoreN,'logicalAnd1',hBoolT,slRate);
        end
        pirelab.getLogicComp(hAStoreN,...
        [aDataValidWireS,negSwitch1DelayS],...
        indexCountEnS,...
        'and','indexCountEn');


        if(modulus~=0)
            pirelab.getCounterComp(hAStoreN,...
            [subColoumnCountReset,indexCountEnS],...
            aIndexCountS,...
            'Count limited',1,1,indexMaxValue,1,0,1,0,'indexCounter',1);
        else
            pirelab.getCounterComp(hAStoreN,...
            [aSubColCountEnS,indexCountEnS],...
            aIndexCountS,...
            'Count limited',1,1,indexMaxValue,1,0,1,0,'indexCounter',1);
        end
        pirelab.getCompareToValueComp(hAStoreN,...
        aIndexCountS,...
        compareIndexS,...
        '==',indexMaxValue,...
        'compareIndex',0);

        if(modulus~=0)
            if(lastElement~=0)
                pirelab.getCompareToValueComp(hAStoreN,...
                aIndexCountS,...
                compareIndex2S,...
                '==',lastElement,...
                'compareIndex2',0);
            else

                pirelab.getCompareToValueComp(hAStoreN,...
                aIndexCountS,...
                compareIndex2S,...
                '==',indexMaxValue,...
                'compareIndex',0);
            end
            pirelab.getLogicComp(hAStoreN,...
            [compareIndex2S,aValidS,negSwitch1DelayS],...
            logicalAnd1,...
            'and','logicalAnd1');
            pirelab.getCompareToValueComp(hAStoreN,...
            aTempSubColCountS,...
            compareIndex3S,...
            '==',lastSubcolumn,...
            'compareIndex3',0);

            pirelab.getLogicComp(hAStoreN,...
            [logicalAnd1,compareIndex3S],...
            subColoumnCountReset,...
            'and','logicalAnd2');

        end
        pirelab.getLogicComp(hAStoreN,...
        [compareIndexS,negSwitch1DelayS,aValidS],...
        aSubColCountEnS,...
        'and',sprintf('Logical\nOperator2'));

        if(blockInfo.dotProductSize~=1)
            if(modulus~=0)
                pirelab.getCounterComp(hAStoreN,...
                [subColoumnCountReset,aSubColCountEnS],...
                aTempSubColCountS,...
                'Count limited',1,1,blockInfo.dotProductSize,1,0,1,0,'subcolumnCounter',1);
            else
                pirelab.getCounterComp(hAStoreN,...
                aSubColCountEnS,...
                aTempSubColCountS,...
                'Count limited',1,1,blockInfo.dotProductSize,0,0,1,0,'subcolumnCounter',1);

            end
        else
            pirelab.getConstComp(hAStoreN,...
            aTempSubColCountS,...
            1,...
            'Constant3');
        end
        pirelab.getWireComp(hAStoreN,...
        aTempSubColCountS,...
        aSubColCountS,...
        'subcolCount');
    end
end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end



