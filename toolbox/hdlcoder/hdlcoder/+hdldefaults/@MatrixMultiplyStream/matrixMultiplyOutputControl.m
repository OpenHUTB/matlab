function hCOutN=matrixMultiplyOutputControl(~,hTopN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(3).Type;
    Ccol=blockInfo.bColumnSize;
    Crow=blockInfo.aRowSize;
    hCRowCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aRowSize))+1,0);
    hCColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.bColumnSize))+1,0);

    hCOutN=pirelab.createNewNetwork(...
    'Name','matrixMultiplyOutputControl',...
    'InportNames',{'cReady','validIn','Data'},...
    'InportTypes',[hBoolT,hBoolT,inputDataT],...
    'InportRates',slRate*ones(1,3),...
    'OutportNames',{'cData','cValid','cRowDoneEdge','cMatrixDone'},...
    'OutportTypes',[inputDataT,hBoolT,hBoolT,hBoolT]);
    hCOutN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hCOutN.PirOutputSignals)
        hCOutN.PirOutputSignals(ii).SimulinkRate=slRate;
    end


    cReadyS=hCOutN.PirInputSignals(1);
    validInS=hCOutN.PirInputSignals(2);
    DataS=hCOutN.PirInputSignals(3);
    cDataS=hCOutN.PirOutputSignals(1);
    cValidS=hCOutN.PirOutputSignals(2);
    cRowDoneEdgeS=hCOutN.PirOutputSignals(3);
    cMatrixDoneS=hCOutN.PirOutputSignals(4);

    pirelab.instantiateNetwork(hTopN,hCOutN,hInSigs,hOutSigs,...
    [hCOutN.Name,'_inst']);

    compareToConstantZeroS=l_addSignal(hCOutN,'compareToConstantZeroS',hBoolT,slRate);
    compareToConstantOneS=l_addSignal(hCOutN,'compareToConstantOneS',hBoolT,slRate);
    constantS=l_addSignal(hCOutN,'constantS',hBoolT,slRate);
    constant1S=l_addSignal(hCOutN,'constant1S',hBoolT,slRate);
    delay1S=l_addSignal(hCOutN,'delay1S',hBoolT,slRate);
    cColumnCountS=l_addSignal(hCOutN,'cColumnCountS',hCColCounterT,slRate);
    cMatrixDoneEnb=l_addSignal(hCOutN,'cMatrixDoneEnb',hBoolT,slRate);
    cMatrixDoneFlag=l_addSignal(hCOutN,'cMatrixDoneFlag',hBoolT,slRate);
    cRowCountS=l_addSignal(hCOutN,'cRowCountS',hCRowCounterT,slRate);
    cRowDoneDelayOneS1=l_addSignal(hCOutN,'cRowDoneDelayOneS1',hBoolT,slRate);
    cRowDoneDelayTwoS=l_addSignal(hCOutN,'cRowDoneDelayTwoS',hBoolT,slRate);
    columnCountEnbS=l_addSignal(hCOutN,'columnCountEnbS',hBoolT,slRate);
    compareColumnCountS=l_addSignal(hCOutN,'compareColumnCountS',hBoolT,slRate);
    compareToRowS=l_addSignal(hCOutN,'compareToRowS',hBoolT,slRate);
    rowCountEnbS=l_addSignal(hCOutN,'rowCountEnbS',hBoolT,slRate);
    cRowDoneDelayOneS=l_addSignal(hCOutN,'cRowDoneDelayOneS',hBoolT,slRate);
    cRowDoneDelayOne_Initial_ValS=l_addSignal(hCOutN,'cRowDoneDelayOne_Initial_Val_out',hBoolT,slRate);
    cRowDoneDelayOne_ctrl_const_out_S=l_addSignal(hCOutN,'cRowDoneDelayOne_ctrl_const_out',hBoolT,slRate);
    cRowDoneDelayOne_ctrl_delay_out_S=l_addSignal(hCOutN,'cRowDoneDelayOne_ctrl_delay_out',hBoolT,slRate);

    pirelab.getConstComp(hCOutN,...
    constantS,...
    1,...
    'Constant','on',0,'','','');

    pirelab.getConstComp(hCOutN,...
    constant1S,...
    0,...
    'Constant1','on',1,'','','');

    pirelab.getIntDelayComp(hCOutN,...
    cMatrixDoneEnb,...
    cMatrixDoneS,...
    1,'Delay',...
    false,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hCOutN,...
    rowCountEnbS,...
    delay1S,...
    1,'Delay1',...
    false,...
    0,0,[],0,0);


    if(Ccol~=1)
        pirelab.getCounterComp(hCOutN,...
        columnCountEnbS,...
        cColumnCountS,...
        'Count limited',1,1,Ccol,0,0,1,0,'cColumnCount',1);
    else
        constant3S=l_addSignal(hCOutN,'constant3Out',hCColCounterT,slRate);
        pirelab.getConstComp(hCOutN,...
        constant3S,...
        1,...
        'Constant3','on',0,'','','');
        pirelab.getWireComp(hCOutN,...
        constant3S,...
        cColumnCountS,...
        'cColumnCount');
    end


    if(Crow~=1)
        pirelab.getCounterComp(hCOutN,...
        rowCountEnbS,...
        cRowCountS,...
        'Count limited',1,1,Crow,0,0,1,0,'cRowCount',1);
    else
        constant4S=l_addSignal(hCOutN,'constant4Out',hCRowCounterT,slRate);
        pirelab.getConstComp(hCOutN,...
        constant4S,...
        1,...
        'Constant3','on',0,'','','');
        pirelab.getWireComp(hCOutN,...
        constant4S,...
        cRowCountS,...
        'cRowCount');
    end
    pirelab.getIntDelayComp(hCOutN,...
    delay1S,...
    cRowDoneDelayOneS,...
    1,'cRowDoneDelayOne',...
    double(0),...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hCOutN,...
    cRowDoneDelayOneS1,...
    cRowDoneDelayTwoS,...
    1,'cRowDoneDelayTwo',...
    false,...
    0,0,[],0,0);

    pirelab.getConstComp(hCOutN,...
    cRowDoneDelayOne_Initial_ValS,...
    true,...
    'cRowDoneDelayOne_Initial_Val','on',0,'','','');

    pirelab.getConstComp(hCOutN,...
    cRowDoneDelayOne_ctrl_const_out_S,...
    1,...
    'cRowDoneDelayOne_ctrl_const');

    pirelab.getIntDelayComp(hCOutN,...
    cRowDoneDelayOne_ctrl_const_out_S,...
    cRowDoneDelayOne_ctrl_delay_out_S,...
    1,'cRowDoneDelayOne_ctrl_delay',...
    double(0),...
    0,0,[],0,0);

    pirelab.getSwitchComp(hCOutN,...
    [cRowDoneDelayOneS,cRowDoneDelayOne_Initial_ValS],...
    cRowDoneDelayOneS1,...
    cRowDoneDelayOne_ctrl_delay_out_S,'cRowDoneDelayOne_switch',...
    '~=',0,'Floor','Wrap');

    pirelab.getCompareToValueComp(hCOutN,...
    cRowDoneDelayTwoS,...
    compareToConstantZeroS,...
    '==',0,...
    sprintf('Compare\nTo Constant'),1);

    pirelab.getCompareToValueComp(hCOutN,...
    cRowDoneDelayOneS1,...
    compareToConstantOneS,...
    '==',1,...
    sprintf('Compare\nTo Constant1'),0);

    pirelab.getLogicComp(hCOutN,...
    [compareToConstantZeroS,compareToConstantOneS],...
    cRowDoneEdgeS,...
    'and',sprintf('Logical\nOperator'));

    pirelab.getSwitchComp(hCOutN,...
    [constantS,constant1S],...
    cMatrixDoneEnb,...
    cMatrixDoneFlag,'cMatrixDoneEnb',...
    '~=',0,'Floor','Wrap');

    pirelab.getLogicComp(hCOutN,...
    [compareToRowS,rowCountEnbS],...
    cMatrixDoneFlag,...
    'and','cMatrixDoneFlag');

    pirelab.getLogicComp(hCOutN,...
    [cReadyS,validInS],...
    columnCountEnbS,...
    'and','columnCountEnb');

    pirelab.getCompareToValueComp(hCOutN,...
    cColumnCountS,...
    compareColumnCountS,...
    '==',Ccol,...
    'compareColumnCount',0);

    pirelab.getCompareToValueComp(hCOutN,...
    cRowCountS,...
    compareToRowS,...
    '==',Crow,...
    'compareToRow',0);

    pirelab.getLogicComp(hCOutN,...
    [compareColumnCountS,columnCountEnbS],...
    rowCountEnbS,...
    'and','rowCountEnb');

    pirelab.getWireComp(hCOutN,...
    DataS,...
    cDataS,...
    'cData');

    pirelab.getWireComp(hCOutN,...
    validInS,...
    cValidS,...
    'cValid');


end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end
