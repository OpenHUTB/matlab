function hAsubCtlN=matrixASubColumnControl(~,hAMemCtlN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(1).Type;

    hAColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize))+1,0);
    hsubColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.dotProductSize))+1,0);
    hindexCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize/blockInfo.dotProductSize))+1,0);
    indexMaxValue=ceil(blockInfo.aColumnSize/blockInfo.dotProductSize);
    modulus=mod(blockInfo.aColumnSize,blockInfo.dotProductSize);
    lastSubcolumn=ceil(blockInfo.aColumnSize/indexMaxValue);
    temp=ceil(((indexMaxValue*blockInfo.dotProductSize)-blockInfo.aColumnSize));
    if(temp<=indexMaxValue)
        lastElement=indexMaxValue-temp;
    else
        lastElement=indexMaxValue-((lastSubcolumn*indexMaxValue)-blockInfo.aColumnSize);
    end
    if(blockInfo.aColumnSize~=blockInfo.dotProductSize)
        hsubColCounterType2=hsubColCounterT;
    else
        hsubColCounterType2=hAColCounterT;
    end

    hAsubCtlN=pirelab.createNewNetwork(...
    'Name','matrixASubColumnControl',...
    'InportNames',{'aData','aValid','aSubColCount','aIndexCount'},...
    'InportTypes',[inputDataT,hBoolT,hsubColCounterType2,hindexCounterT],...
    'InportRates',slRate*ones(1,4),...
    'OutportNames',{'aSubColWrData','aSubColWrAddr','aSubColWrEn','aSubColCountReg','aRowStoreDone'},...
    'OutportTypes',[inputDataT,hindexCounterT,hBoolT,hsubColCounterType2,hBoolT]);
    hAsubCtlN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hAsubCtlN.PirOutputSignals)
        hAsubCtlN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    pirelab.instantiateNetwork(hAMemCtlN,hAsubCtlN,hInSigs,hOutSigs,...
    [hAsubCtlN.Name,'_inst']);

    aDataS=hAsubCtlN.PirInputSignals(1);
    aValidS=hAsubCtlN.PirInputSignals(2);
    aSubColCountS=hAsubCtlN.PirInputSignals(3);
    aIndexCountS=hAsubCtlN.PirInputSignals(4);
    aSubColWrDataS=hAsubCtlN.PirOutputSignals(1);
    aSubColWrAddrS=hAsubCtlN.PirOutputSignals(2);
    aSubColWrEnS=hAsubCtlN.PirOutputSignals(3);
    aSubColCountRegS=hAsubCtlN.PirOutputSignals(4);
    aRowStoreDoneS=hAsubCtlN.PirOutputSignals(5);

    isEqtodpSize=l_addSignal(hAsubCtlN,'isEqtodpSize',hBoolT,slRate);
    isIndexCountEqtoItrFlag=l_addSignal(hAsubCtlN,'isIndexCountEqtoItrFlag',hBoolT,slRate);
    constantS=l_addSignal(hAsubCtlN,'constantS',hindexCounterT,slRate);
    delayS=l_addSignal(hAsubCtlN,'aIndexCountDelay',hindexCounterT,slRate);
    subtractS=l_addSignal(hAsubCtlN,'aSubColWrAddrTemp',hindexCounterT,slRate);

    pirelab.getConstComp(hAsubCtlN,...
    constantS,...
    1,...
    'Constant','on',0,'','','');

    pirelab.getIntDelayComp(hAsubCtlN,...
    aDataS,...
    aSubColWrDataS,...
    1,'Delay',...
    single(0),...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hAsubCtlN,...
    aValidS,...
    aSubColWrEnS,...
    1,'Delay1',...
    false,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hAsubCtlN,...
    aSubColCountS,...
    aSubColCountRegS,...
    2,'Delay2',...
    0,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hAsubCtlN,...
    aIndexCountS,...
    delayS,...
    2,'Delay3',...
    0,...
    0,0,[],0,0);
    if(modulus==0)
        pirelab.getCompareToValueComp(hAsubCtlN,...
        aSubColCountRegS,...
        isEqtodpSize,...
        '==',blockInfo.dotProductSize,...
        sprintf('Compare\nTo Constant'),0);
    else
        pirelab.getCompareToValueComp(hAsubCtlN,...
        aSubColCountRegS,...
        isEqtodpSize,...
        '==',lastSubcolumn,...
        sprintf('Compare\nTo Constant'),0);

    end

    if(blockInfo.aColumnSize==blockInfo.dotProductSize)
        pirelab.getCompareToValueComp(hAsubCtlN,...
        subtractS,...
        isIndexCountEqtoItrFlag,...
        '==',0,...
        sprintf('Compare\nTo Constant1'),1);
    else
        if(modulus==0)
            pirelab.getCompareToValueComp(hAsubCtlN,...
            subtractS,...
            isIndexCountEqtoItrFlag,...
            '==',ceil(blockInfo.aColumnSize/blockInfo.dotProductSize)-1,...
            sprintf('Compare\nTo Constant1'),1);
        elseif(lastElement~=0)
            pirelab.getCompareToValueComp(hAsubCtlN,...
            subtractS,...
            isIndexCountEqtoItrFlag,...
            '==',lastElement-1,...
            sprintf('Compare\nTo Constant1'),1);
        else
            pirelab.getCompareToValueComp(hAsubCtlN,...
            subtractS,...
            isIndexCountEqtoItrFlag,...
            '==',ceil(blockInfo.aColumnSize/blockInfo.dotProductSize)-1,...
            sprintf('Compare\nTo Constant1'),1);

        end


    end

    pirelab.getDTCComp(hAsubCtlN,...
    subtractS,...
    aSubColWrAddrS,...
    'Floor','Wrap','RWV','Data Type Conversion');

    pirelab.getLogicComp(hAsubCtlN,...
    [isIndexCountEqtoItrFlag,isEqtodpSize,aSubColWrEnS],...
    aRowStoreDoneS,...
    'and',sprintf('Logical\nOperator'));

    pirelab.getAddComp(hAsubCtlN,...
    [delayS,constantS],...
    subtractS,...
    'Floor','Wrap','Subtract',hindexCounterT,'+-');

end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


