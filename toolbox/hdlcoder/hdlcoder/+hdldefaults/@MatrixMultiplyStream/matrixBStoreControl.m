function hBStoreN=matrixBStoreControl(~,hTopN,hInSigs,hOutSigs,slRate,blockInfo)


    bRow=blockInfo.aColumnSize;
    bCol=blockInfo.bColumnSize;

    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(2).Type;
    hbRowCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize))+1,0);
    hbColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.bColumnSize))+1,0);

    hBStoreN=pirelab.createNewNetwork(...
    'Name','matrixBStoreControl',...
    'InportNames',{'bValidIn','bDataIn','cRowDone','cMatrixDone'},...
    'InportTypes',[hBoolT,inputDataT,hBoolT,hBoolT],...
    'InportRates',[slRate,slRate,slRate,slRate],...
    'OutportNames',{'bDataOut','bValidOut','bColumnCount',...
    'bRowCount','bReady'},...
    'OutportTypes',[inputDataT,hBoolT,hbColCounterT,hbRowCounterT,hBoolT]);
    hBStoreN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hBStoreN.PirOutputSignals)
        hBStoreN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    pirelab.instantiateNetwork(hTopN,hBStoreN,hInSigs,hOutSigs,...
    [hBStoreN.Name,'_inst']);



    bValidS=hBStoreN.PirInputSignals(1);
    bDataS=hBStoreN.PirInputSignals(2);
    cRowDoneS=hBStoreN.PirInputSignals(3);
    cMatrixDoneS=hBStoreN.PirInputSignals(4);
    bDataOutS=hBStoreN.PirOutputSignals(1);
    bValidOutS=hBStoreN.PirOutputSignals(2);
    bColumnCountS=hBStoreN.PirOutputSignals(3);
    bRowCountS=hBStoreN.PirOutputSignals(4);
    bReadyS=hBStoreN.PirOutputSignals(5);

    bRowCountFlagS=l_addSignal(hBStoreN,'bRowCountFlagS',hBoolT,slRate);
    constant1S=l_addSignal(hBStoreN,'constant1Out',hBoolT,slRate);
    constant2S=l_addSignal(hBStoreN,'constant2Out',hBoolT,slRate);
    logicalOperatorS=l_addSignal(hBStoreN,'logicalOperatorS',hBoolT,slRate);
    logicalOperator1S=l_addSignal(hBStoreN,'logicalOperator1S',hBoolT,slRate);
    switchS=l_addSignal(hBStoreN,'switchS',hBoolT,slRate);
    switch1S=l_addSignal(hBStoreN,'switch1S',hBoolT,slRate);
    switch2S=l_addSignal(hBStoreN,'switch2S',hBoolT,slRate);
    switch3S=l_addSignal(hBStoreN,'switch3S',hBoolT,slRate);
    delayS=l_addSignal(hBStoreN,'delayS',hBoolT,slRate);
    compareColFlagS=l_addSignal(hBStoreN,'compareColumnsOut',hBoolT,slRate);
    compareRowFlagS=l_addSignal(hBStoreN,'compareRowsOut',hBoolT,slRate);
    negcMatrixDoneS=l_addSignal(hBStoreN,'notcMatrixDoneOut',hBoolT,slRate);
    rowCountEnbS=l_addSignal(hBStoreN,'rowCountEnbOut',hBoolT,slRate);
    pirelab.getConstComp(hBStoreN,...
    constant1S,...
    1,...
    'Constant1','on',0,'','','');

    pirelab.getConstComp(hBStoreN,...
    constant2S,...
    0,...
    'Constant2','on',1,'','','');

    pirelab.getIntDelayComp(hBStoreN,...
    logicalOperator1S,...
    bValidOutS,...
    1,'dataValid',...
    false,...
    0,0,[],0,0);


    pirelab.getIntDelayComp(hBStoreN,...
    switch2S,...
    delayS,...
    1,'delay',...
    false,...
    0,0,[],0,0);


    pirelab.getIntDelayComp(hBStoreN,...
    switchS,...
    bReadyS,...
    1,'delay1',...
    true,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hBStoreN,...
    bDataS,...
    bDataOutS,...
    1,'delay2',...
    single(0),...
    0,0,[],0,0);

    pirelab.getLogicComp(hBStoreN,...
    [logicalOperator1S,bReadyS],...
    logicalOperatorS,...
    'and',sprintf('Logical\nOperator'));

    pirelab.getLogicComp(hBStoreN,...
    [bValidS,bReadyS],...
    logicalOperator1S,...
    'and',sprintf('Logical\nOperator1'));

    pirelab.getSwitchComp(hBStoreN,...
    [constant2S,switch1S],...
    switchS,...
    switch2S,'Switch',...
    '~=',0,'Floor','Wrap');

    pirelab.getSwitchComp(hBStoreN,...
    [constant1S,bReadyS],...
    switch1S,...
    cRowDoneS,'Switch1',...
    '~=',0,'Floor','Wrap');

    pirelab.getSwitchComp(hBStoreN,...
    [constant1S,switch3S],...
    switch2S,...
    bRowCountFlagS,'Switch2',...
    '~=',0,'Floor','Wrap');

    pirelab.getSwitchComp(hBStoreN,...
    [constant2S,delayS],...
    switch3S,...
    cMatrixDoneS,'Switch3',...
    '~=',0,'Floor','Wrap');


    if(bCol~=1)
        pirelab.getCounterComp(hBStoreN,...
        [cMatrixDoneS,logicalOperatorS],...
        bColumnCountS,...
        'Count limited',1,1,bCol,1,0,1,0,'ColCounter',1);
    else
        constant3S=l_addSignal(hBStoreN,'constant3Out',hbColCounterT,slRate);
        pirelab.getConstComp(hBStoreN,...
        constant3S,...
        1,...
        'Constant3','on',0,'','','');
        pirelab.getWireComp(hBStoreN,...
        constant3S,...
        bColumnCountS,...
        'ColCounter');

    end


    if(bRow~=1)
        pirelab.getCounterComp(hBStoreN,...
        [cMatrixDoneS,rowCountEnbS],...
        bRowCountS,...
        'Count limited',1,1,bRow,1,0,1,0,'browCounter',1);
    else
        constant4S=l_addSignal(hBStoreN,'constant4Out',hbRowCounterT,slRate);
        pirelab.getConstComp(hBStoreN,...
        constant4S,...
        1,...
        'Constant4','on',0,'','','');
        pirelab.getWireComp(hBStoreN,...
        constant4S,...
        bRowCountS,...
        'browCounter');

    end
    pirelab.getCompareToValueComp(hBStoreN,...
    bColumnCountS,...
    compareColFlagS,...
    '==',bCol,...
    'CompareToTotalColumns',0);

    pirelab.getCompareToValueComp(hBStoreN,...
    bRowCountS,...
    compareRowFlagS,...
    '==',bRow,...
    'CompareToTotalRows',0);

    pirelab.getLogicComp(hBStoreN,...
    [compareRowFlagS,rowCountEnbS,negcMatrixDoneS],...
    bRowCountFlagS,...
    'and',sprintf('Logical\nOperator3'));

    pirelab.getLogicComp(hBStoreN,...
    cMatrixDoneS,...
    negcMatrixDoneS,...
    'not',sprintf('Logical\nOperator2'));

    pirelab.getLogicComp(hBStoreN,...
    [compareColFlagS,logicalOperatorS],...
    rowCountEnbS,...
    'and','rowCountEnb');

end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


