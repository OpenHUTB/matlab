function haccumN=accumulator(~,hProcN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(2).Type;
    hindexCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize/blockInfo.dotProductSize))+1,0);
    iter=ceil(blockInfo.aColumnSize/blockInfo.dotProductSize);


    haccumN=pirelab.createNewNetwork(...
    'Name','accumulator',...
    'InportNames',{'validIn','dataIn'},...
    'InportTypes',[hBoolT,inputDataT],...
    'InportRates',slRate*ones(1,2),...
    'OutportNames',{'validOut','dataOut'},...
    'OutportTypes',[hBoolT,inputDataT]);
    haccumN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(haccumN.PirOutputSignals)
        haccumN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    pirelab.instantiateNetwork(hProcN,haccumN,hInSigs,hOutSigs,...
    [haccumN.Name,'_inst']);


    validInS=haccumN.PirInputSignals(1);
    dataInS=haccumN.PirInputSignals(2);
    validOutS=haccumN.PirOutputSignals(1);
    dataOutS=haccumN.PirOutputSignals(2);


    accumData=l_addSignal(haccumN,'accumData',inputDataT,slRate);
    compareToConstantS=l_addSignal(haccumN,'compareToConstantS',hBoolT,slRate);
    constantS=l_addSignal(haccumN,'constant',inputDataT,slRate);
    constant1S=l_addSignal(haccumN,'constant1',hBoolT,slRate);
    constant2S=l_addSignal(haccumN,'constant2',hBoolT,slRate);
    constant3S=l_addSignal(haccumN,'constant3',inputDataT,slRate);
    accumDataDelay=l_addSignal(haccumN,'accumDataDelay',inputDataT,slRate);
    validIndelay2=l_addSignal(haccumN,'validIndelay2',hBoolT,slRate);
    logicalOperatorS=l_addSignal(haccumN,'logicalOperatorS',hBoolT,slRate);
    switchS=l_addSignal(haccumN,'switchS',inputDataT,slRate);
    switch1S=l_addSignal(haccumN,'switch1S',inputDataT,slRate);
    switch2S=l_addSignal(haccumN,'switch2S',hBoolT,slRate);
    switch5S=l_addSignal(haccumN,'switch5',inputDataT,slRate);
    accumDataDelay2=l_addSignal(haccumN,'accumDataDelay2',inputDataT,slRate);
    switchDelay=l_addSignal(haccumN,'switchDelay',inputDataT,slRate);
    counter=l_addSignal(haccumN,'counter',hindexCounterT,slRate);
    validIndelay1=l_addSignal(haccumN,'validIndelay1',hBoolT,slRate);
    validIndelay3=l_addSignal(haccumN,'validIndelay3',hBoolT,slRate);


    pirelab.getConstComp(haccumN,...
    constantS,...
    single(0),...
    'Constant','on',1,'','','');


    pirelab.getConstComp(haccumN,...
    constant1S,...
    1,...
    'Constant1','on',0,'','','');


    pirelab.getConstComp(haccumN,...
    constant2S,...
    0,...
    'Constant2','on',1,'','','');


    pirelab.getConstComp(haccumN,...
    constant3S,...
    single(0),...
    'Constant3','on',1,'','','');


    pirelab.getIntDelayComp(haccumN,...
    switch1S,...
    dataOutS,...
    1,'Delay',...
    single(0),...
    0,0,[],0,0);

    hC=pirelab.getAddComp(haccumN,...
    [switchDelay,switch5S],...
    accumData,...
    'Floor','Wrap','Add1',inputDataT,'++');
    pirelab.getIntDelayComp(haccumN,...
    accumData,...
    accumDataDelay,...
    resolveLatencyForIPType(hC,'ADDSUB'),'Delay4',...
    single(0),...
    0,0,[],0,0);

    pirelab.getIntDelayComp(haccumN,...
    validIndelay1,...
    validIndelay2,...
    resolveLatencyForIPType(hC,'ADDSUB'),'Delay5',...
    false,...
    0,0,[],0,0);


    pirelab.getIntDelayComp(haccumN,...
    accumDataDelay,...
    accumDataDelay2,...
    1,'accumulatorDelay',...
    single(0),...
    0,0,[],0,0);


    pirelab.getIntDelayComp(haccumN,...
    switchS,...
    switchDelay,...
    1,'switchDelay',...
    single(0),...
    0,0,[],0,0);


    pirelab.getIntDelayComp(haccumN,...
    switch2S,...
    validOutS,...
    1,'switchTwoDelay',...
    false,...
    0,0,[],0,0);


    pirelab.getCounterComp(haccumN,...
    validIndelay3,...
    counter,...
    'Count limited',1,1,iter,0,0,1,0,'validCounter',1);


    pirelab.getIntDelayComp(haccumN,...
    validInS,...
    validIndelay1,...
    1,'validDelaySecond',...
    false,...
    0,0,[],0,0);


    pirelab.getIntDelayComp(haccumN,...
    validIndelay2,...
    validIndelay3,...
    1,'validDelayThird',...
    false,...
    0,0,[],0,0);

    pirelab.getCompareToValueComp(haccumN,...
    counter,...
    compareToConstantS,...
    '==',iter,...
    sprintf('Compare\nTo Constant'),0);


    pirelab.getLogicComp(haccumN,...
    [validIndelay3,compareToConstantS],...
    logicalOperatorS,...
    'and',sprintf('Logical\nOperator'));


    pirelab.getSwitchComp(haccumN,...
    [dataInS,constant3S],...
    switchS,...
    validInS,'Switch',...
    '~=',0,'Floor','Wrap');


    pirelab.getSwitchComp(haccumN,...
    [accumDataDelay2,dataOutS],...
    switch1S,...
    logicalOperatorS,'Switch1',...
    '~=',0,'Floor','Wrap');


    pirelab.getSwitchComp(haccumN,...
    [constant1S,constant2S],...
    switch2S,...
    logicalOperatorS,'Switch2',...
    '~=',0,'Floor','Wrap');


    pirelab.getSwitchComp(haccumN,...
    [constantS,accumDataDelay2],...
    switch5S,...
    logicalOperatorS,'Switch5',...
    '~=',0,'Floor','Wrap');

end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end
function componentLatency=resolveLatencyForIPType(hC,targetIPType)

    hDriver=hdlcurrentdriver;
    p=pir(hC.Owner.getCtxName);
    targetCompDataType='SINGLE';
    targetDriver=hDriver.getTargetCodeGenDriver(p);
    if isempty(targetDriver)||~strcmpi(class(targetDriver),'targetcodegen.nfpdriver')
        componentLatency=-1;
        return;
    end
    componentLatency=targetDriver.getDefaultLatency(targetIPType,targetCompDataType,[]);
end

