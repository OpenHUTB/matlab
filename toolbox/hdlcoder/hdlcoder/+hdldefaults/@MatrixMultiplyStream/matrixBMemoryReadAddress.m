function hBmemRdN=matrixBMemoryReadAddress(~,hRACtlN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    iter=ceil(blockInfo.aColumnSize/blockInfo.dotProductSize);
    hindexCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize/blockInfo.dotProductSize))+1,0);
    hbColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.bColumnSize))+1,0);
    bCol=blockInfo.bColumnSize;

    hBmemRdN=pirelab.createNewNetwork(...
    'Name','matrixBMemoryReadAddress',...
    'InportNames',{'inputValid','indexEn','aRdAddr'},...
    'InportTypes',[hBoolT,hBoolT,hindexCounterT],...
    'InportRates',slRate*ones(1,3),...
    'OutportNames',{'bRdAddr','bRdAddrValid'},...
    'OutportTypes',[hbColCounterT,hBoolT]);
    hBmemRdN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hBmemRdN.PirOutputSignals)
        hBmemRdN.PirOutputSignals(ii).SimulinkRate=slRate;
    end


    pirelab.instantiateNetwork(hRACtlN,hBmemRdN,hInSigs,hOutSigs,...
    [hBmemRdN.Name,'_inst']);

    inputValidS=hBmemRdN.PirInputSignals(1);
    indexEnbS=hBmemRdN.PirInputSignals(2);
    aRdAddrS=hBmemRdN.PirInputSignals(3);
    bRdAddrS=hBmemRdN.PirOutputSignals(1);
    bRdAddrValidS=hBmemRdN.PirOutputSignals(2);

    compareToConstantS=l_addSignal(hBmemRdN,'compareToConstantS',hBoolT,slRate);
    logicalOperatorS=l_addSignal(hBmemRdN,'logicalOperatorS',hBoolT,slRate);
    if(blockInfo.bColumnSize~=1)
        pirelab.getCounterComp(hBmemRdN,...
        bRdAddrValidS,...
        bRdAddrS,...
        'Count limited',0,1,bCol-1,0,0,1,0,'bMemoryAddrCount',0);
    else
        constant3S=l_addSignal(hBmemRdN,'constant3Out',hbColCounterT,slRate);
        pirelab.getConstComp(hBmemRdN,...
        constant3S,...
        0,...
        'Constant3','on',0,'','','');
        pirelab.getWireComp(hBmemRdN,...
        constant3S,...
        bRdAddrS,...
        'bMemoryAddrCount');
    end

    pirelab.getCompareToValueComp(hBmemRdN,...
    aRdAddrS,...
    compareToConstantS,...
    '==',iter-1,...
    sprintf('Compare\nTo Constant'),0);

    pirelab.getLogicComp(hBmemRdN,...
    [compareToConstantS,inputValidS],...
    logicalOperatorS,...
    'and',sprintf('Logical\nOperator'));

    pirelab.getSwitchComp(hBmemRdN,...
    [logicalOperatorS,inputValidS],...
    bRdAddrValidS,...
    indexEnbS,'Switch',...
    '~=',0,'Floor','Wrap');

end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


