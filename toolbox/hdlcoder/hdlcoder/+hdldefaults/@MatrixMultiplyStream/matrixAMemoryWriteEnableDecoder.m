function hAWrDN=matrixAMemoryWriteEnableDecoder(~,hAMemCtlN,hInSigs,hOutSigs,slRate,blockInfo)



    hBoolT=pir_boolean_t;
    inputDataT=hInSigs(1).Type;
    hAColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize))+1,0);
    hsubColCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.dotProductSize))+1,0);
    hindexCounterT=pir_fixpt_t(false,ceil(log2(blockInfo.aColumnSize/blockInfo.dotProductSize))+1,0);
    if(blockInfo.aColumnSize~=blockInfo.dotProductSize)
        hsubColCounterType2=hsubColCounterT;
    else
        hsubColCounterType2=hAColCounterT;
    end
    if(blockInfo.dotProductSize~=1)
        hdpSizeArrayT=hAMemCtlN.getType('Array','BaseType',inputDataT,'Dimensions',blockInfo.dotProductSize);
        hArrayBoolT=hAMemCtlN.getType('Array','BaseType',hBoolT,'Dimensions',blockInfo.dotProductSize);
        hArraySubColT=hAMemCtlN.getType('Array','BaseType',hindexCounterT,'Dimensions',blockInfo.dotProductSize);
    else
        hdpSizeArrayT=hInSigs(1).Type;
        hArrayBoolT=hInSigs(3).Type;
        hArraySubColT=hInSigs(2).Type;
    end
    hAWrDN=pirelab.createNewNetwork(...
    'Name','matrixAMemoryWriteEnableDecoder',...
    'InportNames',{'aSubColWrData','aSubColWrAddr','aSubColWrEn','aSubColCount'},...
    'InportTypes',[inputDataT,hindexCounterT,hBoolT,hsubColCounterType2],...
    'InportRates',slRate*ones(1,4),...
    'OutportNames',{'wrEn','wrAddr','wrData'},...
    'OutportTypes',[hArrayBoolT,hArraySubColT,hdpSizeArrayT]);
    hAWrDN.setTargetCompReplacementCandidate(true);
    for ii=1:numel(hAWrDN.PirOutputSignals)
        hAWrDN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    pirelab.instantiateNetwork(hAMemCtlN,hAWrDN,hInSigs,hOutSigs,...
    [hAWrDN.Name,'_inst']);

    aSubColWrDataS=hAWrDN.PirInputSignals(1);
    aSubColWrAddrS=hAWrDN.PirInputSignals(2);
    aSubColWrEnS=hAWrDN.PirInputSignals(3);
    aSubColCountS=hAWrDN.PirInputSignals(4);
    wrEnS=hAWrDN.PirOutputSignals(1);
    wrAddrS=hAWrDN.PirOutputSignals(2);
    wrDataS=hAWrDN.PirOutputSignals(3);

    constantS=l_addSignal(hAWrDN,'logicalZeroFlagS',hBoolT,slRate);
    wrEnTempS=hdlhandles(1,blockInfo.dotProductSize);
    wrAddrTempS=hdlhandles(1,blockInfo.dotProductSize);
    wrDataTempS=hdlhandles(1,blockInfo.dotProductSize);
    compareToConstantS=hdlhandles(1,blockInfo.dotProductSize);

    pirelab.getConstComp(hAWrDN,...
    constantS,...
    0,...
    'Constant','on',1,'','','');

    for i=1:blockInfo.dotProductSize
        suffix=['_',int2str(i-1)];
        wrEnTempS(i)=l_addSignal(hAWrDN,['wrEnTemp',suffix],hBoolT,slRate);
        wrAddrTempS(i)=l_addSignal(hAWrDN,['wrAddrTempS',suffix],hsubColCounterT,slRate);
        wrDataTempS(i)=l_addSignal(hAWrDN,['wrDataTempS',suffix],inputDataT,slRate);
        compareToConstantS(i)=l_addSignal(hAWrDN,['compareToConstant',suffix],hBoolT,slRate);
        pirelab.getCompareToValueComp(hAWrDN,...
        aSubColCountS,...
        compareToConstantS(i),...
        '==',i,...
        ['compareToConstant',suffix],0);

        pirelab.getSwitchComp(hAWrDN,...
        [aSubColWrEnS,constantS],...
        wrEnTempS(i),...
        compareToConstantS(i),['switch',suffix],...
        '~=',0,'Floor','Wrap');

        pirelab.getWireComp(hAWrDN,...
        aSubColWrAddrS,...
        wrAddrTempS(i),...
        'wire');
        pirelab.getWireComp(hAWrDN,...
        aSubColWrDataS,...
        wrDataTempS(i),...
        'wire');

    end
    if(blockInfo.dotProductSize~=1)
        pirelab.getMuxComp(hAWrDN,...
        wrDataTempS(1:end),...
        wrDataS,...
        'Data');

        pirelab.getMuxComp(hAWrDN,...
        wrAddrTempS(1:end),...
        wrAddrS,...
        'Address');

        pirelab.getMuxComp(hAWrDN,...
        wrEnTempS(1:end),...
        wrEnS,...
        'WrEnable');
    else

        pirelab.getWireComp(hAWrDN,...
        wrDataTempS,...
        wrDataS,...
        'wire');

        pirelab.getWireComp(hAWrDN,...
        wrAddrTempS,...
        wrAddrS,...
        'wire');

        pirelab.getWireComp(hAWrDN,...
        wrEnTempS,...
        wrEnS,...
        'wire');

    end

end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


