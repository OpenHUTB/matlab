function hdlcode=emitRamWrapper(this,hC)





    hdlcode=hdlcodeinit;
    hdlbody=[];

    userData=hC.HDLUserData;
    ramIsComplex=userData.ramIsComplex;

    if ramIsComplex
        index=1;
    else
        index=0;
    end

    din=hC.PirInputSignals(1);
    waddr=hC.PirInputSignals(2+index);
    we=hC.PirInputSignals(3+index);
    raddr=hC.PirInputSignals(4+index);
    wdout_ram=hC.PirInputSignals(5+index);
    rdout_ram=hC.PirInputSignals(6+index*2);

    din_ram=hC.PirOutputSignals(1);
    waddr_ram=hC.PirOutputSignals(2+index);
    we_ram=hC.PirOutputSignals(3+index);
    raddr_ram=hC.PirOutputSignals(4+index);
    wdout=hC.PirOutputSignals(5+index);
    rdout=hC.PirOutputSignals(6+index*2);


    hS=this.findSignalWithValidRate(hC.Owner,hC,[din,din_ram]);
    blockRate=this.getSignalOverClock(hS);
    context=this.beginClockBundleContext(hC.Owner,hC,hS,1,1,0);



    [clk,clken0,reset]=hdlgetclockbundle(hC.Owner,hC,hS,1,1,0);






    hdlbody=[hdlbody,hdlsignalassignment(din,din_ram)];
    hdlbody=[hdlbody,hdlsignalassignment(waddr,waddr_ram)];
    hdlbody=[hdlbody,hdlbitop([we,clken0],we_ram,'AND')];
    hdlbody=[hdlbody,hdlsignalassignment(raddr,raddr_ram)];






    [boolvtype,boolsltype]=hdlgettypesfromsizes(1,0,0);
    [clken3_name,clken3]=hdlnewsignal('ce_reg','block',...
    -1,0,0,boolvtype,boolsltype);
    obj=hdl.intdelay('hasClockEnable',false,...
    'inputs',clken0,...
    'outputs',clken3,...
    'processName',hdluniqueprocessname('ceReg'),...
    'nDelays',1);
    hcode=obj.emit;
    hdlbody=[hdlbody,hcode.arch_body_blocks];



    wdoutvtype=hdlsignalvtype(wdout);
    wdoutsltype=hdlsignalsltype(wdout);
    [wdout_1_name,wdout_1]=hdlnewsignal('wdout_1','block',...
    -1,hdlsignaliscomplex(wdout),0,wdoutvtype,wdoutsltype);



    [wdout_1_reg_name,wdout_1_reg]=hdlnewsignal('wdout_1_reg','block',...
    -1,hdlsignaliscomplex(wdout),0,wdoutvtype,wdoutsltype);

    obj=hdl.intdelay('hasClockEnable',false,...
    'inputs',wdout_1,...
    'outputs',wdout_1_reg,...
    'processName',hdluniqueprocessname('wdout_1_Reg'),...
    'nDelays',1);
    hcode=obj.emit;
    hdlbody=[hdlbody,hcode.arch_body_blocks];





    wdout_1_mux=hdlmux([wdout_1_reg,wdout_ram],wdout_1,clken3,{'=='},0,'when-else');
    hdlbody=[hdlbody,wdout_1_mux];





    rdoutvtype=hdlsignalvtype(rdout);
    rdoutsltype=hdlsignalsltype(rdout);
    [rdout_1_name,rdout_1]=hdlnewsignal('rdout_1','block',...
    -1,hdlsignaliscomplex(rdout),0,rdoutvtype,rdoutsltype);

    [rdout_1_reg_name,rdout_1_reg]=hdlnewsignal('rdout_1_reg','block',...
    -1,hdlsignaliscomplex(rdout),0,rdoutvtype,rdoutsltype);
    obj=hdl.intdelay('hasClockEnable',false,...
    'inputs',rdout_1,...
    'outputs',rdout_1_reg,...
    'nDelays',1);
    hcode=obj.emit;
    hdlbody=[hdlbody,hcode.arch_body_blocks];


    rdout_1_mux=hdlmux([rdout_1_reg,rdout_ram],rdout_1,clken3,{'=='},0,'when-else');
    hdlbody=[hdlbody,rdout_1_mux];



    hdlbody=[hdlbody,hdlsignalassignment(wdout_1,wdout)];
    hdlbody=[hdlbody,hdlsignalassignment(rdout_1,rdout)];


...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...



    this.endClockBundleContext(context);
    hdlcode.arch_body_blocks=[hdlcode.arch_body_blocks,hdlbody];



...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...



