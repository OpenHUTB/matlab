function hdlcode=emit(this,hC)






    scalarIC=0;

    processName=hdllegalname(hC.Name);
    processName=[processName,hdlgetparameter('clock_process_label')];

    userData=this.getHDLUserData(hC);

    hS=this.findSignalWithValidRate(hC.Owner,hC,...
    [hC.SLOutputPorts(1).Signal,...
    hC.SLInputPorts(1).Signal]);
    context=this.beginClockBundleContext(hC.Owner,hC,hS,1,1,0);

    if(userData.Latency==1)
        obj=hdl.unitdelay('clock',hdlgetcurrentclock,...
        'clockenable',hdlgetcurrentclockenable,...
        'reset',hdlgetcurrentreset,...
        'inputs',hC.SLInputPorts(1).Signal,...
        'outputs',hC.SLOutputPorts(1).Signal,...
        'processName',processName,...
        'resetvalues',scalarIC);
    else
        obj=hdl.intdelay('clock',hdlgetcurrentclock,...
        'clockenable',hdlgetcurrentclockenable,...
        'reset',hdlgetcurrentreset,...
        'inputs',hC.SLInputPorts(1).Signal,...
        'outputs',hC.SLOutputPorts(1).Signal,...
        'processName',processName,...
        'resetvalues',scalarIC,...
        'nDelays',userData.Latency);
    end

    hdlcode=obj.emit;

    this.endClockBundleContext(context);




