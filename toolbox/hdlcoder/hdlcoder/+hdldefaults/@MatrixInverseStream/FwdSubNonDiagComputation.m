

function FwdSubNonDiagComputation(this,hN,FwdNonDiagCompInSigs,FwdNonDiagCompOutSigs,...
    hBoolT,hCounterT,hInputDataT,slRate,blockInfo)


    hFwdNonDiagCompN=pirelab.createNewNetwork(...
    'Name','FwdSubNonDiagComputation',...
    'InportNames',{'nonDiagValidIn','rowCount','colCount','rdData','rowProcDone'},...
    'InportTypes',[hBoolT,hCounterT,hCounterT,...
    pirelab.createPirArrayType(hInputDataT,[blockInfo.RowSize+1,0]),...
    hBoolT],...
    'InportRates',slRate*ones(1,5),...
    'OutportNames',{'nonDiagOutValid','nonDiagOutData'},...
    'OutportTypes',[hBoolT,hInputDataT]);

    hFwdNonDiagCompN.setTargetCompReplacementCandidate(true);


    for ii=1:numel(hFwdNonDiagCompN.PirOutputSignals)
        hFwdNonDiagCompN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    hFwdNonDiagCompNinSigs=hFwdNonDiagCompN.PirInputSignals;
    hFwdNonDiagCompNoutSigs=hFwdNonDiagCompN.PirOutputSignals;



    if blockInfo.RowSize>2
        dataMacSelS=l_addSignal(hFwdNonDiagCompN,'dataMacSel',...
        pirelab.createPirArrayType(hInputDataT,[blockInfo.RowSize-1,0]),...
        slRate);
    else
        dataMacSelS=l_addSignal(hFwdNonDiagCompN,'dataMacSel',...
        hInputDataT,...
        slRate);
    end


    if blockInfo.RowSize>2
        pipelineData1S=l_addSignal(hFwdNonDiagCompN,'pipelineData1',...
        pirelab.createPirArrayType(hInputDataT,[blockInfo.RowSize-1,0]),...
        slRate);
    else
        pipelineData1S=l_addSignal(hFwdNonDiagCompN,'pipelineData1',...
        hInputDataT,...
        slRate);
    end

    pipelineData2S=l_addSignal(hFwdNonDiagCompN,'pipelineData2',...
    hInputDataT,...
    slRate);

    reciprocalDataS=l_addSignal(hFwdNonDiagCompN,'reciprocalData',hInputDataT,slRate);

    rdDataFwdSplitS=hFwdNonDiagCompNinSigs(4).split;
    rdDataFwdSplitSigS=rdDataFwdSplitS.PirOutputSignals;

    pirelab.getWireComp(hFwdNonDiagCompN,rdDataFwdSplitS.PirOutputSignals(end),...
    reciprocalDataS,'reciprocalData');

    if blockInfo.RowSize>1
        pirelab.getMuxComp(hFwdNonDiagCompN,...
        rdDataFwdSplitSigS(1:end-2),...
        pipelineData1S,...
        'mux');
    else
        pirelab.getMuxComp(hFwdNonDiagCompN,...
        rdDataFwdSplitSigS(1:end-1),...
        pipelineData1S,...
        'mux');
    end


    if blockInfo.RowSize>1
        pirelab.getMuxComp(hFwdNonDiagCompN,...
        rdDataFwdSplitSigS(2:end-1),...
        dataMacSelS,...
        'mux');
    else
        pirelab.getMuxComp(hFwdNonDiagCompN,...
        rdDataFwdSplitSigS(1:end-1),...
        dataMacSelS,...
        'mux');
    end



    MacDataSelInSigs=[hFwdNonDiagCompNinSigs(2),dataMacSelS];
    MacDataSelOutSigs=pipelineData2S;

    this.ParallelMACDataSelector(hFwdNonDiagCompN,MacDataSelInSigs,MacDataSelOutSigs,...
    hCounterT,hInputDataT,slRate,blockInfo);


    FwdMacInSigs=[reciprocalDataS,pipelineData1S,pipelineData2S,...
    hFwdNonDiagCompNinSigs(1),hFwdNonDiagCompNinSigs(5),hFwdNonDiagCompNinSigs(2),...
    hFwdNonDiagCompNinSigs(3)];

    FwdMacOutSigs=[hFwdNonDiagCompNoutSigs(2),hFwdNonDiagCompNoutSigs(1)];

    this.FwdParallelMAC(hFwdNonDiagCompN,FwdMacInSigs,FwdMacOutSigs,...
    hBoolT,hInputDataT,slRate,blockInfo);


    pirelab.instantiateNetwork(hN,hFwdNonDiagCompN,FwdNonDiagCompInSigs,...
    FwdNonDiagCompOutSigs,[hFwdNonDiagCompN.Name,'_inst']);

end


function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


