
function multiplyDivideInpTwoSelector(~,hN,multiplyDivideInpTwoSelInSigs,multiplyDivideInpTwoSelOutSigs,...
    hCounterT,hInputDataT,hBoolT,slRate,blockInfo)





    hmulDivInpTwoN=pirelab.createNewNetwork(...
    'Name','multiplyDivideInpTwoSelector',...
    'InportNames',{'reciprocalValidOutReg','diagValidCount','readDataReg','diagOutStoredData','nonDiagValidInReg',...
    'nonDiagValidInCount','diagOutStoredDataEyeMem'},...
    'InportTypes',[hBoolT,hCounterT,multiplyDivideInpTwoSelInSigs(3).Type,multiplyDivideInpTwoSelInSigs(4).Type,...
    hBoolT,hCounterT,multiplyDivideInpTwoSelInSigs(7).Type],...
    'InportRates',slRate*ones(1,7),...
    'OutportNames',{'multiplyDivideInpTwo','multiplyDivideInpTwoEyeMem'},...
    'OutportTypes',[hInputDataT,hInputDataT]);

    hmulDivInpTwoN.setTargetCompReplacementCandidate(true);

    for ii=1:numel(hmulDivInpTwoN.PirOutputSignals)
        hmulDivInpTwoN.PirOutputSignals(ii).SimulinkRate=slRate;
    end

    hmulDivInpTwoNinSigs=hmulDivInpTwoN.PirInputSignals;
    hmulDivInpTwoNoutSigs=hmulDivInpTwoN.PirOutputSignals;


    reciprocalValidOutReg=hmulDivInpTwoNinSigs(1);
    diagValidCount=hmulDivInpTwoNinSigs(2);
    readDataReg=hmulDivInpTwoNinSigs(3);
    diagOutStoredData=hmulDivInpTwoNinSigs(4);
    nonDiagValidInReg=hmulDivInpTwoNinSigs(5);
    nonDiagValidInCount=hmulDivInpTwoNinSigs(6);
    diagOutStoredDataEyeMem=hmulDivInpTwoNinSigs(7);

    multiplyDivideInpTwo=hmulDivInpTwoNoutSigs(1);
    multiplyDivideInpTwoEyeMem=hmulDivInpTwoNoutSigs(2);



    pirTyp3=readDataReg(1).Type.BaseType;

    pirTyp4=pir_unsigned_t(8);

    if blockInfo.MatrixSize==1
        hArrayT=pirTyp3;
    else
        hArrayT=pirelab.createPirArrayType(pirTyp3,[blockInfo.MatrixSize,0]);
    end


    Constant1_out1_s7=l_addSignal(hmulDivInpTwoN,'Constant1_out1',pirTyp3,slRate);
    Constant2_out1_s8=l_addSignal(hmulDivInpTwoN,'Constant2_out1',pirTyp3,slRate);
    DataTypeConversion_out1_s9=l_addSignal(hmulDivInpTwoN,'Data Type Conversion_out1',pirTyp4,slRate);
    DataTypeConversion1_out1_s10=l_addSignal(hmulDivInpTwoN,'Data Type Conversion1_out1',pirTyp4,slRate);
    Selector_out1_s11=l_addSignal(hmulDivInpTwoN,'Selector_out1',pirTyp3,slRate);
    Selector1_out1_s12=l_addSignal(hmulDivInpTwoN,'Selector1_out1',pirTyp3,slRate);
    Selector2_out1_s13=l_addSignal(hmulDivInpTwoN,'Selector2_out1',pirTyp3,slRate);
    Selector3_out1_s14=l_addSignal(hmulDivInpTwoN,'Selector3_out1',pirTyp3,slRate);
    Selector4_out1_s15=l_addSignal(hmulDivInpTwoN,'Selector4_out1',hArrayT,slRate);
    Selector5_out1_s16=l_addSignal(hmulDivInpTwoN,'Selector5_out1',hArrayT,slRate);
    Switch2_out1_s18=l_addSignal(hmulDivInpTwoN,'Switch2_out1',pirTyp3,slRate);
    Switch4_out1_s20=l_addSignal(hmulDivInpTwoN,'Switch4_out1',pirTyp3,slRate);


    pirelab.getConstComp(hmulDivInpTwoN,...
    Constant1_out1_s7,...
    0,...
    'Constant1','on',1,'','','');




    pirelab.getConstComp(hmulDivInpTwoN,...
    Constant2_out1_s8,...
    0,...
    'Constant2','on',1,'','','');




    pirelab.getDTCComp(hmulDivInpTwoN,...
    diagValidCount,...
    DataTypeConversion_out1_s9,...
    'Floor','Wrap','RWV','Data Type Conversion');




    pirelab.getDTCComp(hmulDivInpTwoN,...
    nonDiagValidInCount,...
    DataTypeConversion1_out1_s10,...
    'Floor','Wrap','RWV','Data Type Conversion1');




    if blockInfo.MatrixSize==1
        pirelab.getWireComp(hmulDivInpTwoN,Selector4_out1_s15,Selector_out1_s11,'SelectorOut1');
        pirelab.getWireComp(hmulDivInpTwoN,diagOutStoredData,Selector1_out1_s12,'SelectorOut1');
        pirelab.getWireComp(hmulDivInpTwoN,Selector5_out1_s16,Selector2_out1_s13,'SelectorOut1');
        pirelab.getWireComp(hmulDivInpTwoN,diagOutStoredDataEyeMem,Selector3_out1_s14,'SelectorOut1');
    else
        pirelab.getSelectorComp(hmulDivInpTwoN,...
        [Selector4_out1_s15,DataTypeConversion_out1_s9],...
        Selector_out1_s11,...
        'One-based',{'Index vector (port)'},...
        {1:3},...
        {'1'},'1',...
        'Selector');




        pirelab.getSelectorComp(hmulDivInpTwoN,...
        [diagOutStoredData,DataTypeConversion1_out1_s10],...
        Selector1_out1_s12,...
        'One-based',{'Starting index (port)'},...
        {1:3},...
        {'1'},'1',...
        'Selector1');




        pirelab.getSelectorComp(hmulDivInpTwoN,...
        [Selector5_out1_s16,DataTypeConversion_out1_s9],...
        Selector2_out1_s13,...
        'One-based',{'Index vector (port)'},...
        {1:3},...
        {'1'},'1',...
        'Selector2');




        pirelab.getSelectorComp(hmulDivInpTwoN,...
        [diagOutStoredDataEyeMem,DataTypeConversion1_out1_s10],...
        Selector3_out1_s14,...
        'One-based',{'Starting index (port)'},...
        {1:3},...
        {'1'},'1',...
        'Selector3');
    end



    pirelab.getSelectorComp(hmulDivInpTwoN,...
    readDataReg,...
    Selector4_out1_s15,...
    'One-based',{'Index vector (dialog)'},...
    {1:blockInfo.MatrixSize},...
    {'1'},'1',...
    'Selector4');




    pirelab.getSelectorComp(hmulDivInpTwoN,...
    readDataReg,...
    Selector5_out1_s16,...
    'One-based',{'Index vector (dialog)'},...
    {blockInfo.MatrixSize+1:blockInfo.MatrixSize*2},...
    {'1'},'1',...
    'Selector5');



    pirelab.getSwitchComp(hmulDivInpTwoN,...
    [Selector_out1_s11,Switch2_out1_s18],...
    multiplyDivideInpTwo,...
    reciprocalValidOutReg,'Switch1',...
    '~=',0,'Floor','Wrap');



    pirelab.getSwitchComp(hmulDivInpTwoN,...
    [Selector1_out1_s12,Constant1_out1_s7],...
    Switch2_out1_s18,...
    nonDiagValidInReg,'Switch2',...
    '~=',0,'Floor','Wrap');



    pirelab.getSwitchComp(hmulDivInpTwoN,...
    [Selector2_out1_s13,Switch4_out1_s20],...
    multiplyDivideInpTwoEyeMem,...
    reciprocalValidOutReg,'Switch3',...
    '~=',0,'Floor','Wrap');



    pirelab.getSwitchComp(hmulDivInpTwoN,...
    [Selector3_out1_s14,Constant2_out1_s8],...
    Switch4_out1_s20,...
    nonDiagValidInReg,'Switch4',...
    '~=',0,'Floor','Wrap');





    pirelab.instantiateNetwork(hN,hmulDivInpTwoN,multiplyDivideInpTwoSelInSigs,...
    multiplyDivideInpTwoSelOutSigs,[hmulDivInpTwoN.Name,'_inst']);


end


function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end


