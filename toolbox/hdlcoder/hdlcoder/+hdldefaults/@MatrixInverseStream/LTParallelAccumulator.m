
function LTParallelAccumulator(~,hN,LTParallelAccumInSigs,LTParallelAccumOutSigs,...
    hBoolT,hInputDataT,slRate,blockInfo)


    hLTParallelAccumN=pirelab.createNewNetwork(...
    'Name','LTParallelAccumulator',...
    'InportNames',{'rowDone','readData','nonDiagData','nonDiagValidIn'},...
    'InportTypes',[hBoolT,LTParallelAccumInSigs(2).Type,hInputDataT,hBoolT],...
    'InportRates',slRate*ones(1,4),...
    'OutportNames',{'accumOut'},...
    'OutportTypes',LTParallelAccumOutSigs(1).Type);

    hLTParallelAccumN.setTargetCompReplacementCandidate(true);


    for ii=1:numel(hLTParallelAccumN.PirOutputSignals)
        hLTParallelAccumN.PirOutputSignals(ii).SimulinkRate=slRate;
    end


    hLTParallelAccumNinSigs=hLTParallelAccumN.PirInputSignals;
    hLTParallelAccumNoutSigs=hLTParallelAccumN.PirOutputSignals;


    Constant_out1_s6=l_addSignal(hLTParallelAccumN,'Constant_out1',hInputDataT,slRate);
    Delay12_out1_s7=l_addSignal(hLTParallelAccumN,'Delay12_out1',hBoolT,slRate);
    Delay13_out1_s8=l_addSignal(hLTParallelAccumN,'Delay13_out1',hBoolT,slRate);
    Delay14_out1_s9=l_addSignal(hLTParallelAccumN,'Delay14_out1',hBoolT,slRate);

    if blockInfo.RowSize>3
        rdDataMacS=hLTParallelAccumNinSigs(2).split;
        rdDataMacOutS=rdDataMacS.PirOutputSignals;
    else
        rdDataMacS=hLTParallelAccumNinSigs(2);
        rdDataMacOutS=rdDataMacS;
    end
    pirelab.getConstComp(hLTParallelAccumN,...
    Constant_out1_s6,...
    single(0),...
    'Constant','on',1,'','','');

    if blockInfo.RowSize>2
        Delay5Out=hdlhandles(blockInfo.RowSize-2,1);
        DelayS=hdlhandles(blockInfo.RowSize-2,1);
        Delay1S=hdlhandles(blockInfo.RowSize-2,1);
        ProductS=hdlhandles(blockInfo.RowSize-2,1);
        Delay2S=hdlhandles(blockInfo.RowSize-2,1);
        SwitchS=hdlhandles(blockInfo.RowSize-2,1);
        Delay3S=hdlhandles(blockInfo.RowSize-2,1);
        AddS=hdlhandles(blockInfo.RowSize-2,1);
        Delay4S=hdlhandles(blockInfo.RowSize-2,1);
        Switch1S=hdlhandles(blockInfo.RowSize-2,1);
        Switch2S=hdlhandles(blockInfo.RowSize-2,1);
        Delay5S=hdlhandles(blockInfo.RowSize-2,1);
    end

    if blockInfo.RowSize>2
        iterEndVal=blockInfo.RowSize-2;
    else
        iterEndVal=1;
    end

    for itr=1:iterEndVal
        suffix=['_',int2str(itr)];

        DelayS(itr)=l_addSignal(hLTParallelAccumN,['Delay',suffix],hInputDataT,slRate);
        Delay1S(itr)=l_addSignal(hLTParallelAccumN,['Delay1',suffix],hInputDataT,slRate);
        ProductS(itr)=l_addSignal(hLTParallelAccumN,['Product',suffix],hInputDataT,slRate);
        Delay2S(itr)=l_addSignal(hLTParallelAccumN,['Delay2',suffix],hInputDataT,slRate);
        SwitchS(itr)=l_addSignal(hLTParallelAccumN,['Switch',suffix],hInputDataT,slRate);
        Delay3S(itr)=l_addSignal(hLTParallelAccumN,['Delay3',suffix],hInputDataT,slRate);
        AddS(itr)=l_addSignal(hLTParallelAccumN,['Add',suffix],hInputDataT,slRate);
        Delay4S(itr)=l_addSignal(hLTParallelAccumN,['Delay4',suffix],hInputDataT,slRate);
        Switch1S(itr)=l_addSignal(hLTParallelAccumN,['Switch1',suffix],hInputDataT,slRate);
        Switch2S(itr)=l_addSignal(hLTParallelAccumN,['Switch2',suffix],hInputDataT,slRate);
        Delay5S(itr)=l_addSignal(hLTParallelAccumN,['Delay5',suffix],hInputDataT,slRate);

        hMultC=pirelab.getMulComp(hLTParallelAccumN,...
        [hLTParallelAccumNinSigs(3),Delay1S(itr)],...
        ProductS(itr),...
        'Floor','Wrap',['Product',suffix],'**','',-1,0);

        hAddC=pirelab.getAddComp(hLTParallelAccumN,...
        [Delay3S(itr),Delay5S(itr)],...
        AddS(itr),...
        'Floor','Wrap',['Add',suffix],hInputDataT,'++');

        pirelab.getIntDelayComp(hLTParallelAccumN,...
        rdDataMacOutS(itr),...
        DelayS(itr),...
        4,['Delay',suffix],...
        single(0),...
        0,0,[],0,0);

        pirelab.getIntDelayComp(hLTParallelAccumN,...
        DelayS(itr),...
        Delay1S(itr),...
        2*(resolveLatencyForIPType(hAddC,'ADDSUB')+resolveLatencyForIPType(hMultC,'MUL')),...
        ['Delay1',suffix],...
        single(0),...
        0,0,[],0,0);


        pirelab.getIntDelayComp(hLTParallelAccumN,...
        ProductS(itr),...
        Delay2S(itr),...
        resolveLatencyForIPType(hMultC,'MUL'),['Delay2',suffix],...
        single(0),...
        0,0,[],0,0);

        pirelab.getSwitchComp(hLTParallelAccumN,...
        [Delay2S(itr),Constant_out1_s6],...
        SwitchS(itr),...
        Delay12_out1_s7,['Switch',suffix],...
        '~=',0,'Floor','Wrap');

        pirelab.getIntDelayComp(hLTParallelAccumN,...
        SwitchS(itr),...
        Delay3S(itr),...
        1,['Delay3',suffix],...
        single(0),...
        0,0,[],0,0);

        pirelab.getIntDelayComp(hLTParallelAccumN,...
        AddS(itr),...
        Delay4S(itr),...
        resolveLatencyForIPType(hAddC,'ADDSUB'),['Delay4',suffix],...
        single(0),...
        0,0,[],0,0);

        pirelab.getSwitchComp(hLTParallelAccumN,...
        [Delay4S(itr),Delay5S(itr)],...
        Switch1S(itr),...
        Delay14_out1_s9,['Switch1',suffix],...
        '~=',0,'Floor','Wrap');

        pirelab.getSwitchComp(hLTParallelAccumN,...
        [Constant_out1_s6,Switch1S(itr)],...
        Switch2S(itr),...
        hLTParallelAccumNinSigs(1),['Switch2',suffix],...
        '~=',0,'Floor','Wrap');

        pirelab.getIntDelayComp(hLTParallelAccumN,...
        Switch2S(itr),...
        Delay5S(itr),...
        1,['Delay5',suffix],...
        single(0),...
        0,0,[],0,0);
        Delay5Out(itr)=Delay5S(itr);
    end

    pirelab.getIntDelayComp(hLTParallelAccumN,...
    hLTParallelAccumNinSigs(4),...
    Delay12_out1_s7,...
    resolveLatencyForIPType(hMultC,'MUL'),'Delay12',...
    false,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hLTParallelAccumN,...
    Delay12_out1_s7,...
    Delay13_out1_s8,...
    1,'Delay13',...
    false,...
    0,0,[],0,0);

    pirelab.getIntDelayComp(hLTParallelAccumN,...
    Delay13_out1_s8,...
    Delay14_out1_s9,...
    resolveLatencyForIPType(hAddC,'ADDSUB'),'Delay14',...
    false,...
    0,0,[],0,0);

    pirelab.getMuxComp(hLTParallelAccumN,...
    Delay5Out(1:end),...
    hLTParallelAccumNoutSigs(1),...
    'concatenate');

    pirelab.instantiateNetwork(hN,hLTParallelAccumN,LTParallelAccumInSigs,...
    LTParallelAccumOutSigs,[hLTParallelAccumN.Name,'_inst']);



end

function hS=l_addSignal(hN,sigName,pirTyp,simulinkRate)
    hS=hN.addSignal;
    hS.Name=sigName;
    hS.Type=pirTyp;
    hS.SimulinkHandle=-1;
    hS.SimulinkRate=simulinkRate;
end

function latency=resolveLatencyForIPType(hC,targetIPType)

    hDriver=hdlcurrentdriver;

    p=pir(hC.Owner.getCtxName);
    targetCompDataType='SINGLE';
    targetDriver=hDriver.getTargetCodeGenDriver(p);
    if isempty(targetDriver)||~strcmpi(class(targetDriver),'targetcodegen.nfpdriver')
        latency=-1;
        return;
    end

    latency=targetDriver.getDefaultLatency(targetIPType,targetCompDataType,hC);
end

