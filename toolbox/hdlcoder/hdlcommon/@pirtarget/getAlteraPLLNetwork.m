function hClockNet=getAlteraPLLNetwork(topNet,pirInstance,networkName,fpgaFamily,isDiff,dcmFXMul,dcmFXDiv,dcmClkInPeriod)




    switch fpgaFamily
    case 'Arria II GX'
        clockWidth=7;
    case{'Stratix III','Stratix IV','Stratix V'};
        clockWidth=10;
    otherwise
        clockWidth=5;
    end

    ufix1Type=pir_ufixpt_t(1,0);
    ufix2Type=pir_ufixpt_t(2,0);
    ufixClockType=pir_ufixpt_t(clockWidth,0);


    if isDiff
        hClockNet=pirelab.createNewNetwork(...
        'PirInstance',pirInstance,...
        'Network',topNet,...
        'Name',networkName,...
        'InportNames',{'inclk_p','inclk_n','areset'},...
        'InportTypes',[ufix1Type,ufix1Type,ufix1Type],...
        'OutportNames',{'clk','sysreset'},...
        'OutportTypes',[ufix1Type,ufix1Type]);

        inclk_p=hClockNet.PirInputSignals(1);
        inclk_n=hClockNet.PirInputSignals(2);
        areset=hClockNet.PirInputSignals(3);
        inclk=hClockNet.addSignal(ufix1Type,'inclk');
        l_getAltiobufInComp(hClockNet,[inclk_p,inclk_n],inclk);

    else
        hClockNet=pirelab.createNewNetwork(...
        'PirInstance',pirInstance,...
        'Network',topNet,...
        'Name',networkName,...
        'InportNames',{'inclk','areset'},...
        'InportTypes',[ufix1Type,ufix1Type],...
        'OutportNames',{'clk','sysreset'},...
        'OutportTypes',[ufix1Type,ufix1Type]);

        inclk=hClockNet.PirInputSignals(1);
        areset=hClockNet.PirInputSignals(2);
    end


    clk=hClockNet.PirOutputSignals(1);
    sysreset=hClockNet.PirOutputSignals(2);

    const_0=hClockNet.addSignal(ufix1Type,'const_0');
    locked=hClockNet.addSignal(ufix1Type,'locked');
    pirelab.getConstComp(hClockNet,const_0,0);


    hClockNet.addCustomLibraryPackage('altera_mf','altera_mf_components');



    inclk_tmp=hClockNet.addSignal(ufix2Type,'inclk_tmp');
    clk_tmp=hClockNet.addSignal(ufixClockType,'clk_tmp');

    pirelab.getBitConcatComp(hClockNet,[const_0,inclk],inclk_tmp,'inclk');
    pirelab.getBitSliceComp(hClockNet,clk_tmp,clk,0,0,'clk');


    hInSignals=[inclk_tmp,areset];
    hOutSignals=[clk_tmp,locked];
    l_getAltpllComp(hClockNet,hInSignals,hOutSignals,...
    dcmFXMul,dcmFXDiv,dcmClkInPeriod,clockWidth);


    pirelab.getBitwiseOpComp(hClockNet,locked,sysreset,'NOT');


    function hC=l_getAltpllComp(hN,hInSignals,hOutSignals,...
        dcmFXMul,dcmFXDiv,dcmClkInPeriod,clockWidth)

        dcmName='altpll';

        genericListStr=sprintf(...
        ['{{''clk0_multiply_by'', ''%d''}, ',...
        '{''clk0_divide_by'', ''%d''}, ',...
        '{''inclk0_input_frequency'', ''%d''}, ',...
        '{''width_clock'', ''%d''}, ',...
        '{''operation_mode'', ''%s'', ''string''}}'],...
        dcmFXMul,dcmFXDiv,dcmClkInPeriod,clockWidth,'"NORMAL"');

        hC=pirelab.getInstantiationComp(...
        'Network',hN,...
        'Name',dcmName,...
        'InportNames',{'INCLK','ARESET'},...
        'OutportNames',{'CLK','LOCKED'},...
        'InportSignals',hInSignals,...
        'OutportSignals',hOutSignals,...
        'AddClockPort','off',...
        'AddClockEnablePort','off',...
        'AddResetPort','off',...
        'InlineConfigurations','off',...
        'GenericList',genericListStr...
        );

        function hC=l_getAltiobufInComp(hN,hInSignals,hOutSignals)

            dcmName='altiobuf_in';

            genericListStr=['{{''use_differential_mode'', ''"TRUE"'', ''string''}, ',...
            '{''number_of_channels'', ''1''}, ',...
            '{''enable_bus_hold'', ''"FALSE"'', ''string''}}'];

            hC=pirelab.getInstantiationComp(...
            'Network',hN,...
            'Name',dcmName,...
            'InportNames',{'datain','datain_b'},...
            'OutportNames',{'dataout'},...
            'InportSignals',hInSignals,...
            'OutportSignals',hOutSignals,...
            'AddClockPort','off',...
            'AddClockEnablePort','off',...
            'AddResetPort','off',...
            'InlineConfigurations','off',...
            'GenericList',genericListStr...
            );
