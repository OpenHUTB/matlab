function utilInductorLogic(voltagePortName,currentPortName,JOutName,subsystemName,nlInductorValues,hdlAlgorithmDataType)



    Rs=nlInductorValues.Rs;
    current_data=nlInductorValues.current_data;
    magnetic_flux_data=nlInductorValues.magnetic_flux_data;
    Nw=nlInductorValues.Nw;
    Ts=nlInductorValues.Ts;

    TsStr=strcat(hdlAlgorithmDataType,'(',num2str(Ts,17),')');
    RsStr=strcat(hdlAlgorithmDataType,'(',num2str(Rs,17),')');
    [xData,yData]=getEvenSpacing(current_data,magnetic_flux_data);
    xTableStr=strcat(hdlAlgorithmDataType,'([',num2str(xData(1:end-1),17),'])');
    yTable=diff(yData)./diff(xData)*Nw;
    yTableStr=strcat(hdlAlgorithmDataType,'([',num2str(yTable,17),'])');

    hRsConst=add_block('simulink/Sources/Constant',strcat(subsystemName,'/Constant'),...
    'MakeNameUnique','on',...
    'Value',RsStr,...
    'SampleTime','-1',...
    'Position',[-120,-250,-70,-210]);

    hTsConst=add_block('simulink/Sources/Constant',strcat(subsystemName,'/Constant'),...
    'MakeNameUnique','on',...
    'Value',TsStr,...
    'SampleTime','-1',...
    'Position',[60,-83,115,-37]);

    hDataConvertIn=add_block('simulink/Signal Attributes/Data Type Conversion',strcat(subsystemName,'/In'),...
    'OutDataTypeStr','fixdt(1,32,16)',...
    'Position',[270,33,345,67]);

    hDataConvertOut=add_block('simulink/Signal Attributes/Data Type Conversion',strcat(subsystemName,'/Out'),...
    'OutDataTypeStr','Inherit: Inherit via back propagation',...
    'Position',[135,-17,210,17]);

    hLookupTable=add_block('simulink/Lookup Tables/1-D Lookup Table',strcat(subsystemName,'/L'),...
    'MakeNameUnique','on',...
    'Table',yTableStr,...
    'NumberOfTableDimensions','1',...
    'BreakpointsSpecification','Explicit values',...
    'IndexSearchMethod','Evenly spaced points',...
    'ExtrapMethod','Clip',...
    'DiagnosticForOutOfRangeInput','None',...
    'BreakpointsForDimension1',xTableStr,...
    'InputSameDT','on',...
    'InterpMethod','Flat',...
    'FractionDataTypeStr','Inherit: Inherit via internal rule',...
    'RndMeth','Simplest',...
    'SampleTime','-1',...
    'Position',[60,-15,115,15]);
    Simulink.suppressDiagnostic(hLookupTable,'SimulinkFixedPoint:util:fxpParameterPrecisionLoss');

    hDivide_V_Rs=add_block('simulink/Math Operations/Divide',strcat(subsystemName,'/Divide'),...
    'MakeNameUnique','on',...
    'Inputs','*/',...
    'SampleTime','-1',...
    'Position',[110,-253,165,-222]);

    hDivide_V_LI_Ts=add_block('simulink/Math Operations/Divide',strcat(subsystemName,'/Divide1'),...
    'MakeNameUnique','on',...
    'Inputs','**/',...
    'SampleTime','-1',...
    'Position',[185,-88,240,-32]);



    Simulink.suppressDiagnostic(hDivide_V_LI_Ts,'Simulink:blocks:DivideByZero');

    hAdd=add_block('simulink/Math Operations/Add',strcat(subsystemName,'/Add'),...
    'MakeNameUnique','on',...
    'Inputs','+--',...
    'SampleTime','-1',...
    'Position',[495,-205,550,-175]);


    lineList={...
    currentPortName,strcat(get_param(hDataConvertIn,'Name'),'/1');...
    strcat(get_param(hDataConvertIn,'Name'),'/1'),strcat(get_param(hLookupTable,'Name'),'/1');...
    strcat(get_param(hLookupTable,'Name'),'/1'),strcat(get_param(hDataConvertOut,'Name'),'/1');...
    currentPortName,strcat(get_param(hAdd,'Name'),'/3');...
    voltagePortName,strcat(get_param(hDivide_V_Rs,'Name'),'/1');...
    voltagePortName,strcat(get_param(hDivide_V_LI_Ts,'Name'),'/1');...
    strcat(get_param(hRsConst,'Name'),'/1'),strcat(get_param(hDivide_V_Rs,'Name'),'/2');...
    strcat(get_param(hTsConst,'Name'),'/1'),strcat(get_param(hDivide_V_LI_Ts,'Name'),'/2');...
    strcat(get_param(hDataConvertOut,'Name'),'/1'),strcat(get_param(hDivide_V_LI_Ts,'Name'),'/3');...
    strcat(get_param(hDivide_V_Rs,'Name'),'/1'),strcat(get_param(hAdd,'Name'),'/1');...
    strcat(get_param(hDivide_V_LI_Ts,'Name'),'/1'),strcat(get_param(hAdd,'Name'),'/2');...
    strcat(get_param(hAdd,'Name'),'/1'),JOutName};...

    add_line(subsystemName,lineList(:,1),lineList(:,2),'AutoRouting','smart')
end

function[evenX,evenY]=getEvenSpacing(x,y)
    evenX=x(1):min(diff(x)):x(end);
    evenY=interp1(x,y,evenX);
    evenX=round(evenX,8);
end














