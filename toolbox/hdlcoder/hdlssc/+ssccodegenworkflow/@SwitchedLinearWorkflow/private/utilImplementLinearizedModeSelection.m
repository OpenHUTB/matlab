function utilImplementLinearizedModeSelection(hlinearModeSel,hlinearModeSelIn1,hlinearModeSelStateIn2,...
    hlinearModeSelJOut1,linearizationInfo,hdlAlgorithmDataType)




    linearModeSel=getfullname(hlinearModeSel);








    set_param(hlinearModeSelIn1,'Position',[-70,-207,-40,-193]);
    set_param(hlinearModeSelStateIn2,'Position',[-155,98,-125,112]);
    set_param(hlinearModeSelJOut1,'Position',[603,113,633,127]);

    lineList=cell(0,2);








    numSwitchElements=size(linearizationInfo.newSwitchMap,1)+size(linearizationInfo.newDiodeMap,1)+size(linearizationInfo.newIGBTMap,1)+size(linearizationInfo.newInductorMap,1);
    if~isempty(linearizationInfo.newSwitchMap)
        numOrigStates=linearizationInfo.newSwitchMap(1,1)-1;

    elseif~isempty(linearizationInfo.newDiodeMap)
        numOrigStates=linearizationInfo.newDiodeMap(1,1)-1;


    elseif~isempty(linearizationInfo.newIGBTMap)
        numOrigStates=linearizationInfo.newIGBTMap(1,1)-1;
    else
        numOrigStates=linearizationInfo.newInductorMap(1,1)-1;
    end
    hinputDemux=[];
    if linearizationInfo.NumInputs>0
        hinputDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(linearModeSel,'/Demux'),...
        'MakeNameUnique','on',...
        'Outputs',int2str(linearizationInfo.NumInputs),...
        'Position',[0,-50*(linearizationInfo.NumInputs),5,0]);
        lineListAdditions={strcat(get_param(hlinearModeSelIn1,'name'),'/1'),strcat(get_param(hinputDemux,'name'),'/1')};
        lineList=[lineList;lineListAdditions];

    else
        hinTerm=add_block('hdlsllib/Sinks/Terminator',strcat(linearModeSel,'/In Terminator'),...
        'MakeNameUnique','on',...
        'Position',[25,0,55,20]);
        lineListAdditions={strcat(get_param(hlinearModeSelIn1,'name'),'/1'),strcat(get_param(hinTerm,'name'),'/1')};
        lineList=[lineList;lineListAdditions];
    end


    if numOrigStates>0
        hstateDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(linearModeSel,'/Demux'),...
        'MakeNameUnique','on',...
        'Outputs',strcat('[',int2str(numOrigStates),',',...
        repmat(' 2,',1,numSwitchElements-1),' 2]'),...
        'Position',[-91,0,-86,100*(numSwitchElements+1)]);


        hTerm=add_block('hdlsllib/Sinks/Terminator',strcat(linearModeSel,'/In Terminator'),...
        'MakeNameUnique','on',...
        'Position',[25,0,55,20]);
        lineListAdditions={...
        strcat(get_param(hstateDemux,'name'),'/1'),strcat(get_param(hTerm,'name'),'/1');...
        strcat(get_param(hlinearModeSelStateIn2,'name'),'/1'),strcat(get_param(hstateDemux,'name'),'/1')};
        sscStates=1;
    else
        hstateDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(linearModeSel,'/Demux'),...
        'MakeNameUnique','on',...
        'Outputs',strcat('[',...
        repmat(' 2,',1,numSwitchElements-1),' 2]'),...
        'Position',[-91,0,-86,100*(numSwitchElements+1)]);
        lineListAdditions={...
        strcat(get_param(hlinearModeSelStateIn2,'name'),'/1'),strcat(get_param(hstateDemux,'name'),'/1')};
        sscStates=0;
    end


    lineList=[lineList;lineListAdditions];



    eleInputList=[];
    if~isempty(linearizationInfo.switchValues)
        eleInputList=[eleInputList,linearizationInfo.switchValues.inputNum];
    end

    if~isempty(linearizationInfo.IGBTValues)
        eleInputList=[eleInputList,linearizationInfo.IGBTValues.inputNum];
    end

    for ii=setdiff(1:linearizationInfo.NumInputs,eleInputList)
        hTerm=add_block('hdlsllib/Sinks/Terminator',strcat(linearModeSel,'/In Terminator'),...
        'MakeNameUnique','on',...
        'Position',[25,50*ii-50*(linearizationInfo.NumInputs),55,50*ii+20-50*(linearizationInfo.NumInputs)]);

        lineList=[lineList;...
        {strcat(get_param(hinputDemux,'name'),'/',int2str(ii)),strcat(get_param(hTerm,'name'),'/1')}];%#okgrow

    end



    if numSwitchElements>1
        hvectorCat=add_block('hdlsllib/Signal Routing/Vector Concatenate',strcat(linearModeSel,'/Vector Concatenate'),...
        'MakeNameUnique','on',...
        'NumInputs',int2str(numSwitchElements),...
        'Position',[530,0,535,100*numSwitchElements]);
    else


        hvectorCat=hlinearModeSelJOut1;
    end


    switchElementNumber=1;
    if~isempty(linearizationInfo.newSwitchMap)
        for ii=1:size(linearizationInfo.newSwitchMap,1)

            hforEachSwitch=utilAddSubsystem(linearModeSel,'Switch',[260,switchElementNumber*100+25,375,switchElementNumber*100+75],'white');
            forEachSwitch=getfullname(hforEachSwitch);
            hforEachSwitchXIn1=add_block('hdlsllib/Sources/In1',strcat(forEachSwitch,'/State'),...
            'MakeNameUnique','on',...
            'Position',[-181,-242,-151,-228]);
            hforEachSwitchUIn2=add_block('hdlsllib/Sources/In1',strcat(forEachSwitch,'/In1'),...
            'MakeNameUnique','on',...
            'Position',[-101,-302,-71,-288]);
            hforEachSwitchJOut1=add_block('hdlsllib/Sinks/Out1',strcat(forEachSwitch,'/J out'),...
            'MakeNameUnique','on',...
            'Position',[164,-177,194,-163]);



            hDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(forEachSwitch,'/Demux'),...
            'MakeNameUnique','on',...
            'Position',[-91,-273,-86,-202]);
            utilSwitchLogic(strcat(get_param(hDemux,'name'),'/1'),...
            strcat(get_param(hDemux,'name'),'/2'),...
            strcat(get_param(hforEachSwitchUIn2,'name'),'/1'),...
            strcat(get_param(hforEachSwitchJOut1,'name'),'/1'),...
            forEachSwitch,linearizationInfo.switchValues(ii),hdlAlgorithmDataType)

            add_line(forEachSwitch,strcat(get_param(hforEachSwitchXIn1,'name'),'/1'),strcat(get_param(hDemux,'name'),'/1'),...
            'AutoRouting','on')





            lineListAdditions={...
            strcat(get_param(hforEachSwitch,'name'),'/1'),strcat(get_param(hvectorCat,'name'),'/',int2str(switchElementNumber));...
            strcat(get_param(hstateDemux,'name'),'/',int2str(switchElementNumber+sscStates)),...
            strcat(get_param(hforEachSwitch,'name'),'/1');...
            strcat(get_param(hinputDemux,'name'),'/',int2str(linearizationInfo.switchValues(ii).inputNum)),...
            strcat(get_param(hforEachSwitch,'name'),'/2')};
            lineList=[lineList;lineListAdditions];%#okgrow
            switchElementNumber=switchElementNumber+1;
        end
    end



    if~isempty(linearizationInfo.diodeMap)
        for ii=1:size(linearizationInfo.diodeMap,1)

            hSDelayDiodeBlk=add_block('hdlsllib/Discrete/Delay',strcat(linearModeSel,'/S Diode Delay'),...
            'MakeNameUnique','on',...
            'DelayLength','1',...
            'Position',[413,switchElementNumber*100+70,443,switchElementNumber*100+100]);
            hforEachDiode=utilAddSubsystem(linearModeSel,'Diode',[260,switchElementNumber*100+25,375,switchElementNumber*100+75],'white');
            forEachDiode=getfullname(hforEachDiode);
            hforEachDiodeXIn1=add_block('hdlsllib/Sources/In1',strcat(forEachDiode,'/State'),...
            'MakeNameUnique','on',...
            'Position',[-220,-147,-190,-133]);
            hforEachDiodeSIn2=add_block('hdlsllib/Sources/In1',strcat(forEachDiode,'/S'),...
            'MakeNameUnique','on',...
            'Position',[-103,-97,-73,-83]);
            hforEachDiodeJOut1=add_block('hdlsllib/Sinks/Out1',strcat(forEachDiode,'/J out'),...
            'MakeNameUnique','on',...
            'Position',[412,-222,442,-208]);
            hforEachDiodeSOut2=add_block('hdlsllib/Sinks/Out1',strcat(forEachDiode,'/S out'),...
            'MakeNameUnique','on',...
            'Position',[322,-117,352,-103]);


            hDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(forEachDiode,'/Demux'),...
            'MakeNameUnique','on',...
            'Position',[-125,-178,-120,-107]);
            utilDiodeLogic(strcat(get_param(hDemux,'name'),'/1'),...
            strcat(get_param(hDemux,'name'),'/2'),...
            strcat(get_param(hforEachDiodeSIn2,'name'),'/1'),...
            strcat(get_param(hforEachDiodeJOut1,'name'),'/1'),...
            strcat(get_param(hforEachDiodeSOut2,'name'),'/1'),...
            forEachDiode,linearizationInfo.diodeValues(ii),hdlAlgorithmDataType)


            add_line(forEachDiode,strcat(get_param(hforEachDiodeXIn1,'name'),'/1'),strcat(get_param(hDemux,'name'),'/1'),...
            'AutoRouting','on')



            lineListAdditions={...
            strcat(get_param(hforEachDiode,'name'),'/2'),strcat(get_param(hSDelayDiodeBlk,'name'),'/1');...
            strcat(get_param(hSDelayDiodeBlk,'name'),'/1'),strcat(get_param(hforEachDiode,'name'),'/2');...
            strcat(get_param(hstateDemux,'name'),'/',int2str(switchElementNumber+sscStates)),...
            strcat(get_param(hforEachDiode,'name'),'/1');...
            strcat(get_param(hforEachDiode,'name'),'/1'),strcat(get_param(hvectorCat,'name'),'/',int2str(switchElementNumber))};
            lineList=[lineList;lineListAdditions];%#okgrow
            switchElementNumber=switchElementNumber+1;

        end
    end


    if~isempty(linearizationInfo.IGBTMap)
        for ii=1:size(linearizationInfo.IGBTMap,1)
            hSDelayIGBTBlk=add_block('hdlsllib/Discrete/Delay',strcat(linearModeSel,'/S IGBT Delay'),...
            'MakeNameUnique','on',...
            'DelayLength','1',...
            'Position',[413,switchElementNumber*100+70,443,switchElementNumber*100+100]);

            hforEachIGBT=utilAddSubsystem(linearModeSel,'IGBT',[260,switchElementNumber*100+25,375,switchElementNumber*100+75],'white');
            forEachIGBT=getfullname(hforEachIGBT);
            hforEachIGBTUIn1=add_block('hdlsllib/Sources/In1',strcat(forEachIGBT,'/In1'),...
            'MakeNameUnique','on',...
            'Position',[140,-162,170,-148]);
            hforEachIGBTXIn2=add_block('hdlsllib/Sources/In1',strcat(forEachIGBT,'/State'),...
            'MakeNameUnique','on',...
            'Position',[-220,-147,-190,-133]);
            hforEachIGBTSIn3=add_block('hdlsllib/Sources/In1',strcat(forEachIGBT,'/S'),...
            'MakeNameUnique','on',...
            'Position',[-110,-92,-80,-78]);
            hforEachIGBTJOut1=add_block('hdlsllib/Sinks/Out1',strcat(forEachIGBT,'/J out'),...
            'MakeNameUnique','on',...
            'Position',[355,-302,385,-288]);
            hforEachIGBTSOut2=add_block('hdlsllib/Sinks/Out1',strcat(forEachIGBT,'/S out'),...
            'MakeNameUnique','on',...
            'Position',[385,-192,415,-178]);

            hDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(forEachIGBT,'/Demux'),...
            'MakeNameUnique','on',...
            'Position',[-125,-178,-120,-107]);

            utilDiodeLogic(strcat(get_param(hDemux,'name'),'/1'),...
            strcat(get_param(hDemux,'name'),'/2'),...
            strcat(get_param(hforEachIGBTSIn3,'name'),'/1'),...
            strcat(get_param(hforEachIGBTJOut1,'name'),'/1'),...
            strcat(get_param(hforEachIGBTSOut2,'name'),'/1'),...
            forEachIGBT,linearizationInfo.IGBTValues(ii),...
            hdlAlgorithmDataType,...
            strcat(get_param(hforEachIGBTUIn1,'name'),'/1'))


            add_line(forEachIGBT,strcat(get_param(hforEachIGBTXIn2,'name'),'/1'),strcat(get_param(hDemux,'name'),'/1'),...
            'AutoRouting','smart')

            lineListAdditions={...
            strcat(get_param(hforEachIGBT,'name'),'/2'),strcat(get_param(hSDelayIGBTBlk,'name'),'/1');...
            strcat(get_param(hSDelayIGBTBlk,'name'),'/1'),strcat(get_param(hforEachIGBT,'name'),'/3');...
            strcat(get_param(hstateDemux,'name'),'/',int2str(switchElementNumber+sscStates)),...
            strcat(get_param(hforEachIGBT,'name'),'/2');...
            strcat(get_param(hforEachIGBT,'name'),'/1'),strcat(get_param(hvectorCat,'name'),'/',int2str(switchElementNumber));...
            strcat(get_param(hinputDemux,'name'),'/',int2str(linearizationInfo.IGBTValues(ii).inputNum)),...
            strcat(get_param(hforEachIGBT,'name'),'/1')};

            lineList=[lineList;lineListAdditions];%#okgrow
            switchElementNumber=switchElementNumber+1;
        end
    end


    if~isempty(linearizationInfo.nlInductorMap)
        for ii=1:size(linearizationInfo.nlInductorMap,1)
            hforEachInductor=utilAddSubsystem(linearModeSel,'Nonlinear Inductor',[260,switchElementNumber*100+25,375,switchElementNumber*100+75],'white');
            forEachInductor=getfullname(hforEachInductor);
            hforEachInductorXIn1=add_block('hdlsllib/Sources/In1',strcat(forEachInductor,'/State'),...
            'MakeNameUnique','on',...
            'Position',[-220,-147,-190,-133]);
            hforEachInductorJOut1=add_block('hdlsllib/Sinks/Out1',strcat(forEachInductor,'/J out'),...
            'MakeNameUnique','on',...
            'Position',[412,-222,442,-208]);
            hDemux=add_block('hdlsllib/Signal Routing/Demux',strcat(forEachInductor,'/Demux'),...
            'MakeNameUnique','on',...
            'Position',[-125,-178,-120,-107]);
            utilInductorLogic(strcat(get_param(hDemux,'name'),'/1'),...
            strcat(get_param(hDemux,'name'),'/2'),...
            strcat(get_param(hforEachInductorJOut1,'name'),'/1'),...
            forEachInductor,linearizationInfo.nlInductorValues(ii),hdlAlgorithmDataType)


            add_line(forEachInductor,strcat(get_param(hforEachInductorXIn1,'name'),'/1'),strcat(get_param(hDemux,'name'),'/1'),...
            'AutoRouting','on')



            lineListAdditions={...
            strcat(get_param(hstateDemux,'name'),'/',int2str(switchElementNumber+sscStates)),...
            strcat(get_param(hforEachInductor,'name'),'/1');...
            strcat(get_param(hforEachInductor,'name'),'/1'),strcat(get_param(hvectorCat,'name'),'/',int2str(switchElementNumber))};
            lineList=[lineList;lineListAdditions];%#okgrow
            switchElementNumber=switchElementNumber+1;

        end
    end

    if numSwitchElements>1

        lineListAdditions={...
        strcat(get_param(hvectorCat,'name'),'/1'),strcat(get_param(hlinearModeSelJOut1,'name'),'/1')};
        lineList=[lineList;lineListAdditions];
    end

    add_line(linearModeSel,lineList(:,1),lineList(:,2),'AutoRouting','smart')


end


