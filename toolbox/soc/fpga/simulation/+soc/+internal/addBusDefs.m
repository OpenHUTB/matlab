function addBusDefs(busDefKind)




    validatestring(busDefKind,{'CreateClassAsBus','CreateBusInBase','RegisterBus'});








    feval(['l_',busDefKind],...
    'MemChDD1BusObj','Bus for memory channel debug level 1',...
    {'bufAddress','double',1,'',...
    'bufAvail','double',1,'',...
    'bufTransfersCompleted','double',1,'',...
    'icFIFOEntries','double',1,'',...
    'icFIFODroppedCount','double',1,'',...
    'burstAddress','double',1,'',...
    'burstTransfersCompleted','double',1,''...
    });
    feval(['l_',busDefKind],...
    'MemChDD2BusObj','Bus for memory channel debug level 2',...
    {'NEW_TRANSACTION_EVENT','Enum: DDEvent2',1,'',...
    'accessID','double',1,'',...
    'accessSize','double',1,'',...
    'REGION_BUFFER_EVENT','Enum: DDEvent2',1,'',...
    'bufReqID','double',1,'',...
    'bufGntCurrentBuf','double',1,'',...
    'bufRelCurrentBuf','double',1,'',...
    'bufAddress','double',1,'',...
    'bufAvail','double',1,'',...
    'bufTransfersCompleted','double',1,'',...
    'INFLOW_QUEUE_EVENT','Enum: DDEvent2',1,'',...
    'inflowQueueCount','double',1,'',...
    'inflowDroppedCount','double',1,'',...
    'IC_DATAPATH_EVENT','Enum: DDEvent2',1,'',...
    'icFIFOEntries','double',1,'',...
    'icFIFODroppedCount','double',1,'',...
    'icReqID','double',1,'',...
    'icAddress','double',1,'',...
    'icTransfersCompleted','double',1,'',...
    'BURST_EXECUTION_EVENT','Enum: DDEvent2',1,'',...
    'burstReqID','double',1,'',...
    'burstAddress','double',1,'',...
    'burstTransfersCompleted','double',1,'',...
    'SW_INTERFACE_EVENT','Enum: DDEvent2',1,'',...
    'newFrameReady','double',1,'',...
    'contFrameReady','double',1,'',...
    'validFrame','double',1,'',...
    'buffersAvailable','double',1,'',...
    'continueTransfers','double',1,''...
    });
    feval(['l_',busDefKind],...
    'MemCtrlDD2BusObj','Bus for memory controller debug and diagnostics data',...
    {'BURST_EXECUTION_EVENT','Enum: DDEvent2',1,'',...
    'masterID','double',1,'',...
    'reqID','double',1,'',...
    'size','double',1,'',...
    'address','double',1,'',...
...
...
    'burstTransfersCompleted','double',1,'',...
    'bytesTransferred','double',1,''...
    });









    MAX_BURST_SIZE=hsb.blkcb2.cbutils('GetSystemConstant','MAX_BURST_SIZE');

    feval(['l_',busDefKind],...
    'WriteAccessBusObj','Bus for writeToMem entity data',...
    {'accessID','double',1,'',...
    'addr','double',1,'',...
    'size','double',1,'',...
    'wdata','uint8',MAX_BURST_SIZE,'',...
    'bufferAction','Enum: BufferAction',1,'',...
    'timingMode','Enum: TimingMode',1,''...
    });

    feval(['l_',busDefKind],...
    'ReadAccessBusObj','Bus for readFromMem entity data',...
    {'accessID','double',1,'',...
    'addr','double',1,'',...
    'size','double',1,'',...
    'rdata','uint8',MAX_BURST_SIZE,'',...
    'bufferAction','Enum: BufferAction',1,'',...
    'timingMode','Enum: TimingMode',1,''...
    });

    feval(['l_',busDefKind],...
    'BufferRequest2BusObj','Bus for Buffer Request entity data',...
    {'masterID','double',1,'',...
    'reqID','double',1,'',...
    'reqKind','Enum: MasterKindEnum',1,'',...
    'buffID','double',1,'',...
    'buffAddr','double',1,'',...
    'state','Enum: DDEvent2',1,''...
    });

    feval(['l_',busDefKind],...
    'BurstRequest2BusObj','Bus for Burst Request entity data',...
    {'masterID','double',1,'',...
    'reqID','double',1,'',...
    'reqKind','Enum: MasterKindEnum',1,'',...
    'port','double',1,'',...
    'size','double',1,'',...
    'addr','double',1,'',...
    'state','Enum: DDEvent2',1,''});








    feval(['l_',busDefKind],...
    'StreamM2SBusObj','Bus for streaming master to slave control signals',...
    {'valid','boolean',1,'',...
    'tlast','boolean',1,''});
    feval(['l_',busDefKind],...
    'StreamS2MBusObj','Bus for streaming slave to master control signals',...
    {'ready','boolean',1,''});




    feval(['l_',busDefKind],...
    'StreamVideoS2MBusObj','Bus for streaming video slave to master control signals',...
    {'ready','boolean',1,''});


    feval(['l_',busDefKind],...
    'StreamVideoFsyncS2MBusObj','Bus for streaming video slave to master control signals with frame synchronization',...
    {'ready','boolean',1,'',...
    'fsync','boolean',1,''});


    feval(['l_',busDefKind],...
    'WriteControlM2SBusObj','Bus for Write Master control signals to slave',...
    {'wr_addr','uint32',1,'',...
    'wr_len','uint32',1,'',...
    'wr_valid','boolean',1,''});
    feval(['l_',busDefKind],...
    'WriteControlS2MBusObj','Bus for Write Master control signals from slave',...
    {'wr_ready','boolean',1,'',...
    'wr_bvalid','boolean',1,'',...
    'wr_complete','boolean',1,''});
    feval(['l_',busDefKind],...
    'ReadControlM2SBusObj','Bus for Read Master control signals to slave',...
    {'rd_addr','uint32',1,'',...
    'rd_len','uint32',1,'',...
    'rd_avalid','boolean',1,'',...
    'rd_dready','boolean',1,''});
    feval(['l_',busDefKind],...
    'ReadControlS2MBusObj','Bus for Read Master control signals from slave',...
    {'rd_aready','boolean',1,'',...
    'rd_dvalid','boolean',1,''});



    feval(['l_',busDefKind],...
    'StreamSWWriterM2SBusObj','Bus for streaming software writer master to slave control signals',...
    {'valid','boolean',1,''});

    feval(['l_',busDefKind],...
    'StreamSWWriterS2MBusObj','Bus for streaming software writer slave to master control signals',...
    {'ready','boolean',1,''});



    feval(['l_',busDefKind],...
    'StreamSWReaderM2SBusObj','Bus for streaming software reader master to slave control signals',...
    {'valid','boolean',1,'',...
    'FrameReady','boolean',1,''});

    feval(['l_',busDefKind],...
    'StreamSWReaderS2MBusObj','Bus for streaming software reader slave to master control signals',...
    {'FrameDone','boolean',1,''});

    feval(['l_',busDefKind],...
    'pixelcontrol','Bus for pixel control',...
    {'hStart','boolean',1,'',...
    'hEnd','boolean',1,'',...
    'vStart','boolean',1,'',...
    'vEnd','boolean',1,'',...
    'valid','boolean',1,''});


...
...
...
...
...
...
...
end

function l_CreateBusInBase(name,description,sigs)%#ok<DEFNU>
    bus=l_inMemDefinition(name,description,sigs);
    assignin('base',name,bus);
end

function bus=l_RegisterBus(name,description,sigs)%#ok<DEFNU>
    bus=l_inMemDefinition(name,description,sigs);
    Simulink.Bus.register(name,bus,true);
end

function bus=l_inMemDefinition(~,description,sigs)
    bus=Simulink.Bus;
    bus.Description=description;

    for ii=1:4:numel(sigs)-1
        be=Simulink.BusElement;
        be.Name=sigs{ii};
        be.DataType=sigs{ii+1};
        be.Dimensions=sigs{ii+2};
        be.Description=sigs{ii+3};
        bus.Elements(end+1)=be;
    end
end

function l_CreateClassAsBus(name,description,sigs)%#ok<DEFNU>

    propsec=cell([1,numel(sigs)/4]);
    elematt=cell([1,numel(sigs)/4]);
    jj=0;
    for ii=1:4:numel(sigs)-1
        jj=jj+1;
        [n,dt,dim,desc]=sigs{ii:ii+3};

        if strcmp(dt,'boolean'),dtdecl=[dt,'(false)'];
        elseif strncmp(dt,'Enum: ',6),dtdecl=[dt(7:end),'(0)'];
        elseif strncmp(dt,'fixdt',5),dtdecl=['fi(0, ',dt,')'];
        else,dtdecl=[dt,'(0)'];
        end

        if isequal(dim,1)
            dim='';
        else
            dim=['(',mat2str(dim),',1)'];
        end

        propsec{jj}=sprintf('%s %s = %s;',n,dim,dtdecl);
        elematt{jj}=sprintf('elemAttr.%s.Description = ''%s'';',n,desc);
    end
    filetext={...
    sprintf('classdef %s\n\tproperties\n',name),...
    sprintf('\t\t%s\n',propsec{:}),...
    sprintf('\tend\n\tmethods (Static)\n'),...
    sprintf('\t\tfunction [busAttr, elemAttr] = configAsSimulinkBus()\n'),...
    sprintf('\t\t\tbusAttr.Description = ''%s'';\n',description),...
    sprintf('\t\t\t%s\n',elematt{:}),...
    sprintf('\t\tend\n\tend\nend\n')};

    fh=fopen([name,'.m'],'w+');
    fprintf(fh,'%s',filetext{:});
    fclose(fh);
end



...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
