function addMask2(blkH,insertAt,dialogToAdd)


























    switch insertAt
    case 'new'
        top=Simulink.Mask.create(blkH);
        ins=top;
    otherwise
        top=Simulink.Mask.get(blkH);
        ins=top.getDialogControl(insertAt);
    end

    feval(dialogToAdd,top,ins);

end




function LedsMask(top,ins)
    maskcb='hsb.blkcb2.BoardHMIOutputsCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='LEDs for target platform';
    fulltext=...
    'Use this block to indicate the signals attached to LEDs on the target platform.';

    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';

    hpg=l_container(ins,ptag,'group','HMIOutputsGroup','LEDs','new','on','on','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'NumLeds','Number of LEDs','1',...
    'on','off','off','on','on',...
    'Specify number of LEDs you want to attach signals to.',...
    '');
    maxBlkCount=num2str(hsb.blkcb2.cbutils('GetSystemConstant','MAX_BLK_HMI_OUTPUTS'));
    l_paramlayout(top,hpg.Name,ptag,'edit',[],...
    'MaxLeds','(available)',maxBlkCount,...
    'on','off','off','off','on',...
    '','','current');
end

function DipswitchesMask(top,ins)
    maskcb='hsb.blkcb2.BoardHMIInputsCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='DIP switches for target platform.';
    fulltext=...
    'Use this block to indicate the signals attached to DIP switches on the target platform.';

    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';

    hmiKind='dipswitches';
    hmiLabel='DS';

    HMIParams(top,ins,ptag,maskcb,hmiKind,hmiLabel);
end
function PushbuttonsMask(top,ins)
    maskcb='hsb.blkcb2.BoardHMIInputsCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Pushbuttons for target platform.';
    fulltext=...
    'Use this block to indicate the signals attached to pushbuttons on the target platform.';

    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';

    hmiKind='pushbuttons';
    hmiLabel='PB';

    HMIParams(top,ins,ptag,maskcb,hmiKind,hmiLabel);
end

function HMIParams(top,ins,ptag,maskcb,hmiKind,hmiLabel)

    hpg=l_container(ins,ptag,'group','HMIInputsGroup',hmiKind,'new','on','on','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'NumHMI',['Number of ',hmiKind],'1',...
    'on','off','off','on','on',...
    '',[maskcb,'(''MaskParamCb'',''NumHMI',ptag,''',gcbh);']);

    l_paramlayout(top,hpg.Name,ptag,'edit',[],...
    'MaxBoardHMI','(available)','1',...
    'on','off','off','off','on',...
    '','','current');

    maxSubsysHMI=hsb.blkcb2.cbutils('GetSystemConstant','MAX_BLK_HMI_INPUTS');
    for idx=1:maxSubsysHMI
        hmiItem=[hmiLabel,num2str(idx)];
        if idx==1,row='new';en='on';
        else,row='current';en='off';
        end
        l_paramlayout(top,hpg.Name,ptag,'radiobutton',{'On','Off'},...
        hmiItem,hmiItem,'Off',...
        'on','on','off',en,'on',...
        '','',row);
    end

    l_param(top,hpg.Name,ptag,'edit',[],...
    'HMISampleTime','Sample time','-1',...
    'on','off','off','on','on',...
    '','');


    l_param(top,hpg.Name,ptag,'popup',{'pushbuttons','dipswitches'},...
    'HMIKind','HMI kind',hmiKind,...
    'on','off','off','off','off',...
    '','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'HMILabel','HMI label',hmiLabel,...
    'on','off','off','off','off',...
    '','');
end




function DummyMasterMask(top,ins)

    top.Initialization='';
    top.SelfModifiable='off';
    top.IconUnits='normalized';

    intro='Create traffic to memory controller.';
    fulltext=...
    ['If a master is not formally part of this model, use a dummy master ',newline,...
    'to emulate memory traffic anticipated in the final, deployed design.'];
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';

    ppg=l_container(ins,ptag,'group','ParameterGroup','Parameters','new','on','on','');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'BurstSize','Burst size (bytes)','256',...
    'on','off','off','on','on',...
    'Size of burst transactions that the dummy master generates.',...
    '');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'TotalBurstRequests','Total burst requests to make','800',...
    'on','off','off','on','on',...
    '','');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'BurstInterAccessTimes','Burst inter-access times (sec)','[10e-6 1e-6 1e-6]',...
    'on','off','off','on','on',...
    ['Three values control how burst requests are made: ',newline,...
    '  * intial request time ',newline,...
    '  * minimum and maximum time between requests',newline,...
    'Use the same min and max times to get a deterministic rate.',newline,...
    'Specify a seed in the configset Hardware Implementation tab to get reproducible',newline,...
    'randomization.'],...
    '');
    l_param(top,ppg.Name,ptag,'checkbox',[],...
    'WaitForDone','Wait for burst done','off',...
    'on','off','off','on','on',...
    ['When enabled, the burst request will only be made after the previous',newline,...
    'burst completes.  When disabled, the burst requests will be made regardless',newline,...
    'of other master traffic.  Keep this deselected to get a known data rate.'],...
    '');

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
end







function MemoryControllerMaskV1(top,ins)




    maskcb='hsb.blkcb2.MemoryControllerCbV1';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Model burst interactions on a shared memory controller connection.';
    fulltext='The block models memory interconnect arbitration and execution.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    ptag='';

    l_dctext(ins,ptag,'CurrHardwareBoardText','Hardware board: ','off','new','on','on','off','');
    l_dchyperlink(top,ptag,'HardwareBoardLink','ZedBoard',...
    [maskcb,'(''MaskLinkCb'',''',['HardwareBoardLink',ptag],''',gcbh);'],...
    'current','on','on','on',...
    'Go to the currently selected target hardware board configset settings.');


    tc=ins.addDialogControl('tabcontainer','TabContainer');

    tcontroller=tc.addDialogControl('Type','tab','Name','MemoryControllerMainTab','Prompt','Controller');
    MemoryControllerParamsTabV1(top,tcontroller,maskcb);

    tdd=tc.addDialogControl('Type','tab','Name','MemoryControllerLegacyTab','Prompt','Debug');
    MemoryControllerLegacyParamsTabV1(top,tdd,maskcb);
end
function MemoryControllerParamsTabV1(top,ins,maskcb)%#ok<INUSD>

    ptag='';


    l_param(top,ins.Name,ptag,'edit',[],...
    'LastTargetBoard','Mem ch block last used target board','ZedBoard',...
    'on','off','off','on','off',...
    '','');

    l_param(top,ins.Name,ptag,'edit',[],...
    'NumMasters','Number of masters','2',...
    'on','off','off','on','on',...
    ['Number of masters connected to the memory interconnect.  A maximum of',newline,...
    'twelve masters may be used with this interconnect.'],...
    '');

    ap=ins.addDialogControl('Type','collapsiblepanel','Name','AdvancedPanel','Prompt','Advanced','AlignPrompts','off');

    l_param(top,ap.Name,ptag,'popup',{'Round robin','Fixed port priority'},...
    'ICArbitrationPolicy','Interconnect arbitration','Round robin',...
    'on','off','off','on','on',...
    ['Arbitration policy when multiple masters make requests of the memory interface.',newline,...
    '''Round robin'' will do a fair arbitration based on last service time.',newline,...
    '''Fixed port priority'' will have a fixed priority of port1, port2, port3, etc.',newline,...
    'Other modes such as ''Equiprobable'', ''Custom port priority'', and ',newline,...
    '''Custom arbitration function'' will be added in the future.'],...
    '');
    tgpg=l_container(ap,ptag,'group','TargetGlobalGroup','','new','on','on','');
    ptag='';
    l_param(top,tgpg.Name,'','checkbox',[],...
    'UseValuesFromTargetHardwareResources','Use values from target hardware resources','off',...
    'on','off','off','on','on',...
    'Use the same values throughout the design, based on the FPGA design parameters in the configset.',...
    [maskcb,'(''MaskParamCb'',''',['UseValuesFromTargetHardwareResources',ptag],''',gcbh);']);
    l_dchyperlink(tgpg,ptag,'UseTHRLink','(settings)',...
    [maskcb,'(''MaskLinkCb'',''',['UseTHRLink',ptag],''',gcbh);'],...
    'current','on','on','on',...
    'Go to the currently selected target hardware board configset settings.');


    cpg=l_container2(tgpg,ptag,'group','ControllerParameterGroup','Controller','new','on','on','');

    l_dctext(cpg,ptag,'ControllerBandwidthText','Bandwidth: 1600 MB/s','off','new','on','on','on','');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'ControllerFrequency','   Frequency (MHz)','200',...
    'on','off','off','on','on',...
    'Frequency of datapath between memory interconnect and memory controller.',...
    '');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'ControllerDataWidth','   Data width (bits)','64',...
    'on','off','off','on','on',...
    'Bit width of datapath between memory interconnect and memory controller.',...
    '');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'BandwidthDerating','   Bandwidth derating (%)','2.0',...
    'on','off','off','on','on',...
    '',...
    '');

    l_dctext(cpg,ptag,'ReqToFirstText','Request to first transfer (in clocks)','off','new','on','on','on','');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'WriteFirstTransferLatency','   Write','35',...
    'on','off','off','on','on',...
    getString(message('codertarget:ui:FPGADesignWriteFirstTransferLatencyToolTip')),...
    '');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'ReadFirstTransferLatency','   Read','15',...
    'on','off','off','on','on',...
    getString(message('codertarget:ui:FPGADesignReadFirstTransferLatencyToolTip')),...
    '');
    l_dctext(cpg,ptag,'LastToDoneText','Last transfer to transaction complete (in clocks)','off','new','on','on','on','');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'WriteLastTransferLatency','   Write','5',...
    'on','off','off','on','on',...
    getString(message('codertarget:ui:FPGADesignWriteLastTransferLatencyToolTip')),...
    '');
    l_param(top,cpg.Name,ptag,'edit',[],...
    'ReadLastTransferLatency','   Read','15',...
    'on','off','off','on','on',...
    getString(message('codertarget:ui:FPGADesignReadLastTransferLatencyToolTip')),...
    '');




    hpg=l_container(ins,ptag,'group','HiddenParameterGroup','(hidden parameters)','new','on','off','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'MAX_NUM_MASTERS','(maximum number of masters)','12',...
    'on','off','off','on','on',...
    '','');

end
function MemoryControllerLegacyParamsTabV1(top,ins,maskcb)

    ptag='';
    lpg=l_container(ins,ptag,'group','LegacyGroup','Legacy','new','on','on','');
    l_param(top,lpg.Name,ptag,'edit',[],...
    'DDRRefreshLength','DDR refresh length (clocks)','4',...
    'on','off','off','on','on',...
    'Number of clocks needed to execute a single refresh cycle on DDR interface.',...
    '');
    l_param(top,lpg.Name,ptag,'edit',[],...
    'DDRRefreshInterval','DDR refresh interval (us)','7.8',...
    'on','off','off','on','on',...
    'Time between refreshes on DDR interface.',...
    '');


    sdg=l_container(ins,ptag,'group','SignalDiagnosticParamGroup','Signal Diagnostics','new','on','on',...
    ['The internal operation of the memory interconnect can be instrumented for debug',newline,...
    'or diagnostic analysis.  When enabled a ''diag'' signal will be added to the outputs.']...
    );
    l_param(top,sdg.Name,ptag,'popup',...
    {'No debug','Basic diagnostic signals','Detailed debug signals'},...
    'DiagnosticLevel','Diagnostic level','No debug',...
    'on','off','off','on','on',...
    '',[maskcb,'(''MaskParamCb'',''DiagnosticLevel'',gcbh);']);

    apg=l_container(ins,ptag,'group','DiagnosticsGroup','Diagnostics','new','on','on','');
    l_param(top,apg.Name,ptag,'edit',[],...
    'PlotTimeResolution','Plot time resolution','100e-6',...
    'off','off','off','on','on',...
    '','');
    btn=l_container(apg,ptag,'pushbutton','PlotBWUsageBtn','Plot Data Throughput','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBWUsageBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgExecTimeBtn','Plot Average Burst Execution Time','new','on','off','');
    btn.Callback=[maskcb,'(''PlotAvgExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgReqToExecTimeBtn','Plot Average Request to Burst Start Time','new','on','off','');
    btn.Callback=[maskcb,'(''PlotAvgReqToExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotBurstsExecutedBtn','Plot Number of Bursts Executed','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBurstsExecutedBtnCb'',gcbh);'];

end












function MemoryChannelMaskV1(top,ins)%#ok<*DEFNU>

    maskcb='hsb.blkcb2.MemoryChannelCbV1';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Model writer-reader channel through shared memory.';
    fulltext='The block includes memory map definition, arbitration between readers and writers, and storage.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    ptag='';

    l_dctext(ins,ptag,'CurrHardwareBoardText','Hardware board: ','off','new','on','on','off','');
    l_dchyperlink(top,ptag,'HardwareBoardLink','ZedBoard',...
    [maskcb,'(''MaskLinkCb'',''',['HardwareBoardLink',ptag],''',gcbh);'],...
    'current','on','on','on',...
    'Go to the currently selected target hardware board configset settings.');
    l_dchyperlink(ins,ptag,'ShowImplementationInfoLink','Show implementation info',...
    [maskcb,'(''MaskLinkCb'',''',['ShowImplementationInfoLink',ptag],''',gcbh);'],...
    'new','on','on','on',...
    'Show information about the implementation of this memory channel such as the physical data width and datapath elements.');

    tc=ins.addDialogControl('tabcontainer','TabContainer');

    tmain=tc.addDialogControl('Type','tab','Name','MainTab','Prompt','Main');
    MemoryChMainTab(top,tmain,maskcb);

    tlegacy=tc.addDialogControl('Type','tab','Name','LegacyTab','Prompt','Legacy');
    MemoryLegacyParamsTab(top,tlegacy,maskcb);

end
function MemoryChMainTab(top,ins,maskcb)%#ok<INUSD>
    ptag='';


    l_param(top,ins.Name,ptag,'edit',[],...
    'LastTargetBoard','Mem ch block last used target board','ZedBoard',...
    'on','off','off','on','off',...
    '','');


    l_param(top,ins.Name,ptag,'edit',[],...
    'Beta2Compatible','Beta2 compatible','on',...
    'on','off','off','on','off',...
    '','');

    l_param(top,ins.Name,ptag,'popup',...
    {'AXI4-Stream to Software via DMA','AXI4-Stream FIFO',...
    'AXI4-Stream Video FIFO','AXI4-Stream Video Frame Buffer',...
    'AXI4 Random Access','Software to AXI4-Stream via DMA'},...
    'ChannelType','Channel type','AXI4-Stream FIFO',...
    'on','off','off','on','on',...
    'Choose the channel type to get specific writer and reader protocol interfaces.',...
    [maskcb,'(''MaskParamCb'',''ChannelType',ptag,''',gcbh);']);




    l_dctext(ins,ptag,'MRRegionSizeText','Region size (bytes): 8192','off','new','on','on','on','');
    l_param(top,ins.Name,ptag,'edit',[],...
    'MRBufferSize','','1024',...
    'on','off','off','on','on',...
    ['When using more than one buffer, the size of the buffer can be smaller than just the region size ',newline,...
    'divided by the buffer count. This allows for meeting memory allocation and descriptor ',newline,...
    'constraints when implementing an FPGA/ASIC and Processor channel.'],...
    '');
    l_param(top,ins.Name,ptag,'edit',[],...
    'MRNumBuffers','','8',...
    'on','off','off','on','on',...
    ['Memory region is managed as a set of uniform buffers. A writer must write a buffer',newline,...
    'before it is available for a reader to read it. You can implement a simple DMA ring buffer this way.',newline,...
    'If the shared memory channel is connecting to FPGA/ASIC cores, this value is set to ''1''.'],...
    '');


    odpg=l_container(ins,ptag,'group','OuputDataTypeGroup','Output data parameters','new','on','on','');
    l_param(top,odpg.Name,ptag,'checkbox',[],...
    'OutSigSpecMatchesInSigSpec','Output data signal matches input','off',...
    'on','off','off','on','on',...
    'Output signal dimensions, datatype, and sample time match the input values.',...
    [maskcb,'(''MaskParamCb'',''',['OutSigSpecMatchesInSigSpec',ptag],''',gcbh);']);
    ptag='ReaderChIf';
    dtypeStringPosition=8;
    ReaderDataAttributeParams(top,odpg,ptag,dtypeStringPosition,'');%#ok<NASGU>


    vpg=l_container(ins,ptag,'group','VideoParameterGroup','Video Parameters','new','on','on','');
    l_param(top,vpg.Name,ptag,'checkbox',[],...
    'InsertInactivePixelClocks','Insert inactive pixel clocks','off',...
    'on','off','off','on','on',...
    ['A channel from memory does not have video timing. This option creates ',newline,...
    'horizontal porch and vertical blanking in the pixel stream. When downstream devices',newline,...
    'drive ~ready, these are not considered when driving inactive pixel clocks. When the',newline,...
    'channel dimensions are non-scalar, the pixel control signals are driven according to',newline,...
    'the location in the video frame for the current sampling time. It is assumed that the',newline,...
    'channel dimensions are aligned with the size of the video line.'],...
    [maskcb,'(''MaskParamCb'',''',['InsertInactivePixelClocks',ptag],''',gcbh);']);
    l_param(top,vpg.Name,ptag,'popup',...
    {'160x120p','480p SDTV (720x480p)','576p SDTV (720x576p)','720p HDTV (1280x720p)','1080p HDTV (1920x1080p)','320x240p','640x480p','800x600p','1024x768p','1280x768p','1280x1024p','1360x768p','1400x1050p','1600x1200p','1680x1050p','1920x1200p','16x12p (test mode)'},...
    'FrameSize','Frame size','160x120p',...
    'on','off','off','on','on',...
    'Dimensions of video frame.','');



    ap=ins.addDialogControl('Type','collapsiblepanel','Name','AdvancedPanel','Prompt','Advanced','AlignPrompts','off');

    blpg=l_container(ap,ptag,'group','BurstLengthGroup','Memory streaming burst length','new','on','on','');
    pbase={'edit',[],...
    'BurstLength','1',...
    'on','off','off','on','on',...
    'Number of data transfers that make up a burst on memory bus.',...
    ''};
    l_param2(top,blpg.Name,'WriterChIf','Writer',pbase{:});
    l_param2(top,blpg.Name,'ReaderChIf','Reader',pbase{:});

    MasterInterconnectParams(top,ap,maskcb);

end
function ins=ReaderDataAttributeParams(top,ins,ptag,dtypeStringPosition,dimcb)

    l_param(top,ins.Name,ptag,'edit',[],...
    'ChDimensions','Dimensions','1',...
    'on','off','off','on','on',...
    'Dimensions of ''data'' signal.',dimcb);
    l_param(top,ins.Name,ptag,...
    ['unidt({a=',num2str(dtypeStringPosition),'|||}{i=Inherit: Same as input}{b=double|single|int8|uint8|int16|uint16|int32|uint32|boolean}{s=UDTBinaryPointMode}{g=UDTSignedSign|UDTUnsignedSign})'],...
    [],...
    'ChTypeWithInh','Datatype','Inherit: Same as input',...
    'on','off','off','on','on',...
    'Datatype of ''data'' signal.','');
end
function MasterInterconnectParams(top,ins,maskcb)%#ok<INUSD>
    ptag='';
    tgpg=l_container(ins,ptag,'group','TargetGlobalGroup','','new','on','on','');
    l_param(top,tgpg.Name,'','checkbox',[],...
    'UseValuesFromTargetHardwareResources','Use values from target hardware resources','off',...
    'on','off','off','on','on',...
    'Use the same values throughout the design, based on the FPGA design parameters in the configset.',...
    [maskcb,'(''MaskParamCb'',''',['UseValuesFromTargetHardwareResources',ptag],''',gcbh);']);
    l_dchyperlink(tgpg,ptag,'UseTHRLink','(settings)',...
    [maskcb,'(''MaskLinkCb'',''',['UseTHRLink',ptag],''',gcbh);'],...
    'current','on','on','on',...
    'Go to the currently selected target hardware board configset settings.');
    l_param(top,tgpg.Name,'','checkbox',[],...
    'ReaderWriterUseSameValues','Reader/Writer use same values','off',...
    'on','off','off','on','on',...
    ['The reader and writer share the same burst and interconnect settings.',newline,...
    'When using target global values, both reader and writer must be the same.'],...
    [maskcb,'(''MaskParamCb'',''',['ReaderWriterUseSameValues',ptag],''',gcbh);']);



    icpg=l_container(tgpg,ptag,'group','InterconnectGroup','Interconnect','new','on','on','');


    l_dctext(icpg,'','FIFODepthRowHdr','FIFO depth (num bursts)','on','new','on','on','on','');
    pbase={'edit',[],...
    'FIFODepth','10',...
    'on','off','off','on','on',...
    'Maximum number of bursts that can be buffered before data is dropped.',...
    ''};
    l_param2(top,icpg.Name,'Writer','   Writer',pbase{:});
    l_param2(top,icpg.Name,'Reader','   Reader',pbase{:});


    l_dctext(icpg,'','FIFOAFullDepthRowHdr','Almost-full depth','on','new','on','on','on','');
    pbase={'edit',[],...
    'FIFOAFullDepth','8',...
    'on','off','off','on','on',...
    ['When the almost full depth is reached, the attached channel protocol interface block ',newline,...
    'asserts backpressure to the data generator.'],...
    ''};
    l_param2(top,icpg.Name,'Writer','   Writer',pbase{:});
    l_param2(top,icpg.Name,'Reader','   Reader',pbase{:});


    l_dctext(icpg,'','ICClockFrequencyRowHdr','Clock Frequency (MHz)','on','new','on','on','on','');
    pbase={'edit',[],...
    'ICClockFrequency','100',...
    'on','off','off','on','on',...
    'Frequency of master datapath to memory interconnect.',...
    ''};
    l_param2(top,icpg.Name,'Writer','  Writer',pbase{:});
    l_param2(top,icpg.Name,'Reader','  Reader',pbase{:});


    l_dctext(icpg,'','ICDataWidthRowHdr','Data width (bits)','on','new','on','on','on','');
    pbase={'edit',[],...
    'ICDataWidth','32',...
    'on','off','off','on','on',...
    'Data width of master datapath to memory interconnect.',...
    ''};
    l_param2(top,icpg.Name,'Writer','   Writer',pbase{:});
    l_param2(top,icpg.Name,'Reader','   Reader',pbase{:});



end
function MemoryLegacyParamsTab(top,ins,maskcb)

    ptag='';

    pgmr=l_container(ins,ptag,'group','MRParameterLegacyGroup','Legacy Region Params','new','on','on',...
    '(legacy params for MemoryRegion tab)');
    l_param(top,pgmr.Name,ptag,'edit',[],...
    'MRBaseAddress','Region base address','hex2dec(''00010000'')',...
    'on','off','off','on','on',...
    '','');
    l_param(top,pgmr.Name,ptag,'edit',[],...
    'MRRegionSize','Region size (bytes)','24576',...
    'on','off','off','on','on',...
    '','');


    pgdi=l_container(ins,ptag,'group','SignalDiagnosticLegacyGroup','Legacy Signal Diagnostics Params','new','on','on',...
    '(legacy params for Debug tab)');
    l_param(top,pgdi.Name,ptag,'popup',...
    {'No debug','Basic diagnostic signals','Detailed debug signals',...
    'Detailed debug signals and memory image dump'},...
    'DiagnosticLevel','Diagnostic level','No debug',...
    'on','off','off','on','on',...
    '','');


    ptag='Writer';
    pgwr=l_container(ins,ptag,'group','MemWrParameterLegacyGroup','Legacy Writer Params','new','on','on',...
'(legacy params for Writer tab)'...
    );
    l_param(top,pgwr.Name,ptag,'popup',...
    {'AXI4-Stream','AXI4-Stream Video','AXI4','AXI4-Stream Software'},...
    'Protocol','Protocol','AXI4-Stream',...
    'on','off','off','on','on',...
    ['Several standard protocols can be used to write to memory.  These protocols',newline,...
    'represent hardware signal interfaces or a software driver interface.'],...
    [maskcb,'(''MaskParamCb'',''Protocol',ptag,''',gcbh);']);

    ptag='WriterChIf';
    dtag='wtop';
    dtypeStringPosition=28;
    dtval=sprintf('hsbmpm.getP(gcb,''%s'',''%s'')',dtag,'ChType');
    l_dparam2(top,pgwr.Name,ptag,dtag,'edit',[],...
    'ChDimensions','(dimensions)','HSBMPM',...
    'on','off','off','on','on',...
    'Dimensions of ''data'' signal.','');
    l_param(top,pgwr.Name,ptag,...
    ['unidt({a=',num2str(dtypeStringPosition),'|||}{b=double|single|int8|uint8|int16|uint16|int32|uint32|boolean}{s=UDTBinaryPointMode}{g=UDTSignedSign|UDTUnsignedSign})'],...
    [],...
    'ChType','Datatype',dtval,...
    'on','off','off','on','on',...
    'Datatype of ''data'' signal.','');
    l_dparam2(top,pgwr.Name,ptag,dtag,'edit',[],...
    'ChFrameSampleTime','(sample time)','HSBMPM',...
    'on','off','off','on','on',...
    'Sample time of ''data'' signal. (For frames, it is the full frame time.)','');

    AddCommonSWAttributeParams(top,pgwr,ptag);



    ptag='Reader';
    pgrd=l_container(ins,ptag,'group','MemRdParameterLegacyGroup','Legacy Reader Params','new','on','on',...
'(legacy params for Reader tab)'...
    );
    l_param(top,pgrd.Name,ptag,'popup',...
    {'AXI4-Stream','AXI4-Stream Video','AXI4-Stream Video with Frame Sync','AXI4','AXI4-Stream Software'},...
    'Protocol','Protocol','AXI4-Stream',...
    'on','off','off','on','on',...
    ['Several standard protocols can be used to read from memory.  These protocols',newline,...
    'represent hardware signal interfaces or a software driver interface.'],...
    [maskcb,'(''MaskParamCb'',''Protocol',ptag,''',gcbh);']);

    ptag='ReaderChIf';
    dtypeStringPosition=33;
    l_param(top,pgrd.Name,ptag,...
    ['unidt({a=',num2str(dtypeStringPosition),'|||}{b=double|single|int8|uint8|int16|uint16|int32|uint32|boolean}{s=UDTBinaryPointMode}{g=UDTSignedSign|UDTUnsignedSign})'],...
    [],...
    'ChType','Datatype','uint32',...
    'on','off','off','on','on',...
    'Datatype of ''data'' signal.','');
    l_param(top,pgrd.Name,ptag,'edit',[],...
    'ChFrameSampleTime','Sample time','1e-6',...
    'on','off','off','on','on',...
    'Sample time of ''data'' signal. (For frames, it is the full frame time.)','');
    l_param(top,pgrd.Name,ptag,'edit',[],...
    'BufferLength','Buffer length (in units of scalar data)','1024',...
    'on','off','off','on','on',...
    ['Number of scalar ''data'' (not number of frames) that make up an ',...
    'entire buffer of the region of a shared memory channel. It is used to ',...
    'signal the end of a buffer to a downstream device.'],...
    '');
    AddCommonSWAttributeParams(top,pgrd,ptag);

end








function MemoryControllerMask(top,ins)




    maskcb='hsb.blkcb2.MemoryControllerCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Model burst interactions on a shared memory controller connection.';
    fulltext='The block models memory interconnect arbitration and execution.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    tc=ins.addDialogControl('tabcontainer','TabContainer');

    tcontroller=tc.addDialogControl('Type','tab','Name','MemoryControllerTab','Prompt','Controller');
    MemoryControllerParamsTab(top,tcontroller,maskcb);

    tdd=tc.addDialogControl('Type','tab','Name','MemoryControllerDebugTab','Prompt','Debug');
    MemoryControllerDebugParamsTab(top,tdd,maskcb);
end
function MemoryControllerParamsTab(top,ins,maskcb)%#ok<INUSD>

    ptag='';

    ddpg=l_container(ins,ptag,'group','ControllerParameterGroup','Controller Parameters','new','on','on','');
    l_param(top,ddpg.Name,ptag,'edit',[],...
    'ControllerFrequency','Controller frequency (MHz)','200',...
    'on','off','off','on','on',...
    'Frequency of datapath between memory interconnect and memory controller.',...
    '');
    l_param(top,ddpg.Name,ptag,'edit',[],...
    'ControllerDataWidth','Controller data width (bits)','64',...
    'on','off','off','on','on',...
    'Bit width of datapath between memory interconnect and memory controller.',...
    '');
    l_param(top,ddpg.Name,ptag,'edit',[],...
    'DDRRefreshLength','DDR refresh length (clocks)','4',...
    'on','off','off','on','on',...
    'Number of clocks needed to execute a single refresh cycle on DDR interface.',...
    '');
    l_param(top,ddpg.Name,ptag,'edit',[],...
    'DDRRefreshInterval','DDR refresh interval (us)','7.8',...
    'on','off','off','on','on',...
    'Time between refreshes on DDR interface.',...
    '');

    icpg=l_container(ins,ptag,'group','ICParameterGroup','Interconnect Parameters','new','on','on','');
    l_param(top,icpg.Name,ptag,'edit',[],...
    'NumMasters','Number of masters','2',...
    'on','off','off','on','on',...
    ['Number of masters connected to the memory interconnect.  A maximum of',newline,...
    'twelve masters may be used with this interconnect.'],...
    '');
    l_param(top,icpg.Name,ptag,'popup',{'Round robin','Fixed port priority'},...
    'ICArbitrationPolicy','Arbitration policy','Round robin',...
    'on','off','off','on','on',...
    ['Arbitration policy when multiple masters make requests of the memory interface.',newline,...
    '''Round robin'' will do a fair arbitration based on last service time.',newline,...
    '''Fixed port priority'' will have a fixed priority of port1, port2, port3, etc.',newline,...
    'Other modes such as ''Equiprobable'', ''Custom port priority'', and ',newline,...
    '''Custom arbitration function'' will be added in the future.'],...
    '');


    hpg=l_container(ins,ptag,'group','HiddenParameterGroup','(hidden parameters)','new','on','off','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'MAX_NUM_MASTERS','(maximum number of masters)','12',...
    'on','off','off','on','on',...
    '','');


...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
end
function MemoryControllerDebugParamsTab(top,ins,maskcb)

    ptag='';

    sdg=l_container(ins,ptag,'group','SignalDiagnosticParamGroup','Signal Diagnostics','new','on','on',...
    ['The internal operation of the memory interconnect can be instrumented for debug',newline,...
    'or diagnostic analysis.  When enabled a ''diag'' signal will be added to the outputs.']...
    );
    l_param(top,sdg.Name,ptag,'popup',...
    {'No debug','Basic diagnostic signals','Detailed debug signals'},...
    'DiagnosticLevel','Diagnostic level','Basic diagnostic signals',...
    'on','off','off','on','on',...
    '',[maskcb,'(''MaskParamCb'',''DiagnosticLevel'',gcbh);']);

    apg=l_container(ins,ptag,'group','AnalysisGroup','Analysis','new','on','on','');
    l_param(top,apg.Name,ptag,'edit',[],...
    'PlotTimeResolution','Plot time resolution','100e-6',...
    'off','off','off','on','on',...
    '','');
    btn=l_container(apg,ptag,'pushbutton','PlotBWUsageBtn','Plot Data Throughput','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBWUsageBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgExecTimeBtn','Plot Average Burst Execution Time','new','on','off','');
    btn.Callback=[maskcb,'(''PlotAvgExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgReqToExecTimeBtn','Plot Average Request to Burst Start Time','new','on','off','');
    btn.Callback=[maskcb,'(''PlotAvgReqToExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotBurstsExecutedBtn','Plot Number of Bursts Executed','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBurstsExecutedBtnCb'',gcbh);'];

end












function MemoryChannelMaskBeta2(top,ins)%#ok<*DEFNU>

    maskcb='hsb.blkcb2.MemoryChannelCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Model writer-reader channel through shared memory.';
    fulltext='The block includes memory map definition, arbitration between readers and writers, and storage.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    tc=ins.addDialogControl('tabcontainer','TabContainer');

    tregion=tc.addDialogControl('Type','tab','Name','MemoryRegionTab','Prompt','Region');
    MemoryRegionParamsTab(top,tregion,maskcb);

    tmw=tc.addDialogControl('Type','tab','Name','MemoryWriterTab','Prompt','Writer');
    MasterWriterParamsTab(top,tmw,maskcb);


    tmr=tc.addDialogControl('Type','tab','Name','MemoryReaderTab','Prompt','Reader');
    MasterReaderParamsTab(top,tmr,maskcb);

    tdd=tc.addDialogControl('Type','tab','Name','MemoryDebugTab','Prompt','Debug');
    MemoryDebugParamsTab(top,tdd,maskcb);

end

function MemoryRegionParamsTab(top,ins,maskcb)%#ok<INUSD>

    ptag='';

    pgv=l_container(ins,ptag,'group','MRParameterGroup','Parameters','new','on','on',...
    ['Masters to memory can be FPGA/ASIC hardware or a processor via a ',newline,...
    '''Channel protocol interface block'' such as a ''Streaming To/From Memory Channel''.',newline,...
    'You can also use dummy masters to generate memory traffic without needing',newline,...
    'to create formal data sources or sinks.']...
    );

    l_param(top,pgv.Name,ptag,'edit',[],...
    'MRBaseAddress','Region base address','hex2dec(''00010000'')',...
    'on','off','off','on','on',...
    '','');
    l_param(top,pgv.Name,ptag,'edit',[],...
    'MRRegionSize','Region size (bytes)','8192',...
    'on','off','off','on','on',...
    '','');
    l_param(top,pgv.Name,ptag,'edit',[],...
    'MRNumBuffers','Num buffers','8',...
    'on','off','off','on','on',...
    ['Memory region is managed as a set of uniform buffers. A writer must write a buffer',newline,...
    'before it is available for a reader to read it. You can implement a simple DMA ring buffer this way.',newline,...
    'If the shared memory channel is connecting to FPGA/ASIC cores, this value is set to ''1''.'],...
    '');
    l_param(top,pgv.Name,ptag,'edit',[],...
    'MRBufferSize','Buffer size (bytes)','1024',...
    'on','off','off','on','on',...
    ['When using more than one buffer, the size of the buffer can be smaller than just the region size ',newline,...
    'divided by the buffer count. This allows for meeting memory allocation and descriptor ',newline,...
    'constraints when implementing an FPGA/ASIC and Processor channel.'],...
    '');



end
function MasterWriterParamsTab(top,ins,maskcb)
    ptag='Writer';
    l_param(top,ins.Name,ptag,'popup',...
    {'AXI4-Stream','AXI4-Stream Video','AXI4','AXI4-Stream Software'},...
    'Protocol','Protocol','AXI4-Stream',...
    'on','off','off','on','on',...
    ['Several standard protocols can be used to write to memory.  These protocols',newline,...
    'represent hardware signal interfaces or a software driver interface.'],...
    [maskcb,'(''MaskParamCb'',''Protocol',ptag,''',gcbh);']);

    ptag='WriterChIf';
    ToMemoryChannelParams(top,ins,ptag,maskcb);
    ptag='Writer';
    MasterMemParams(top,ins,ptag,maskcb);
end
function MasterReaderParamsTab(top,ins,maskcb)
    ptag='Reader';
    l_param(top,ins.Name,ptag,'popup',...
    {'AXI4-Stream','AXI4-Stream Video','AXI4-Stream Video with Frame Sync','AXI4','AXI4-Stream Software'},...
    'Protocol','Protocol','AXI4-Stream',...
    'on','off','off','on','on',...
    ['Several standard protocols can be used to read from memory.  These protocols',newline,...
    'represent hardware signal interfaces or a software driver interface.'],...
    [maskcb,'(''MaskParamCb'',''Protocol',ptag,''',gcbh);']);

    ptag='ReaderChIf';
    FromMemoryChannelParams(top,ins,ptag,maskcb);
    ptag='Reader';
    MasterMemParams(top,ins,ptag,maskcb);
end
function MemoryDebugParamsTab(top,ins,maskcb)%#ok<INUSD>

    ptag='';

    sdg=l_container(ins,ptag,'group','SignalDiagnosticParamGroup','Signal Diagnostics','new','on','on',...
    ['The internal operation of the memory channel can be instrumented for debug',newline,...
    'or diagnostic analysis.  When enabled a ''diag'' signal will be added to the outputs.']...
    );
    l_param(top,sdg.Name,ptag,'popup',...
    {'No debug','Basic diagnostic signals','Detailed debug signals',...
    'Detailed debug signals and memory image dump'},...
    'DiagnosticLevel','Diagnostic level','Basic diagnostic signals',...
    'on','off','off','on','on',...
    '','');

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
end



function ToMemoryChannelParams(top,ins,ptag,maskcb)%#ok<INUSD>

    ppg=l_container(ins,ptag,'group','ToMemChParameterGroup','Memory Parameters','new','on','on','');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'BurstLength','Burst length (in units of scalar data)','256',...
    'on','off','off','on','on',...
    'Number of scalar ''data'' (not number of frames) that make up a burst on memory bus.',...
    '');

    swpg=l_container(ins,ptag,'group','SoftwareSimParameterGroup','Software Simulation Parameters','new','on','on','');
    swpg=AddCommonSWAttributeParams(top,swpg,ptag);%#ok<NASGU>


    ipg=l_container(ins,ptag,'group','ToMemChInputDataParameterGroup','Input Data Parameters','new','on','on','');
    dtypeStringPosition=10;
    ipg=AddCommonDataAttributeParams(top,ipg,ptag,dtypeStringPosition,'');%#ok<NASGU>

end

function FromMemoryChannelParams(top,ins,ptag,maskcb)


    ppg=l_container(ins,ptag,'group','FMCParameterGroup','Memory Parameters','new','on','on','');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'BurstLength','Burst length (in units of scalar data)','256',...
    'on','off','off','on','on',...
    'Number of scalar ''data'' (not number of frames) that make up a burst on memory bus.',...
    '');
    l_param(top,ppg.Name,ptag,'edit',[],...
    'BufferLength','Buffer length (in units of scalar data)','1024',...
    'on','off','off','on','on',...
    ['Number of scalar ''data'' (not number of frames) that make up an ',...
    'entire buffer of the region of a shared memory channel. It is used to ',...
    'signal the end of a buffer to a downstream device.'],...
    '');


    swpg=l_container(ins,ptag,'group','SoftwareSimParameterGroup','Software Simulation Parameters','new','on','on','');
    swpg=AddCommonSWAttributeParams(top,swpg,ptag);%#ok<NASGU>


    opg=l_container(ins,ptag,'group','FMCOutputDataParameterGroup','Output Data Parameters','new','on','on','');
    dtypeStringPosition=22;


    dimcb='';
    opg=AddCommonDataAttributeParams(top,opg,ptag,dtypeStringPosition,dimcb);%#ok<NASGU>


    vpg=l_container(ins,ptag,'group','VideoParameterGroup','Video Parameters','new','on','on','');
    l_param(top,vpg.Name,ptag,'checkbox',[],...
    'InsertInactivePixelClocks','Insert inactive pixel clocks','off',...
    'on','off','off','on','on',...
    ['A channel from memory does not have video timing. This option creates ',newline,...
    'horizontal porch and vertical blanking in the pixel stream. When downstream devices',newline,...
    'drive ~ready, these are not considered when driving inactive pixel clocks. When the',newline,...
    'channel dimensions are non-scalar, the pixel control signals are driven according to',newline,...
    'the location in the video frame for the current sampling time. It is assumed that the',newline,...
    'channel dimensions are aligned with the size of the video line.'],...
    [maskcb,'(''MaskParamCb'',''',['InsertInactivePixelClocks',ptag],''',gcbh);']);

    l_param(top,vpg.Name,ptag,'popup',...
    {'160x120p','480p SDTV (720x480p)','576p SDTV (720x576p)','720p HDTV (1280x720p)','1080p HDTV (1920x1080p)','320x240p','640x480p','800x600p','1024x768p','1280x768p','1280x1024p','1360x768p','1400x1050p','1600x1200p','1680x1050p','1920x1200p','16x12p (test mode)'},...
    'FrameSize','Frame size','160x120p',...
    'on','off','off','on','on',...
    'Dimensions of video frame.',...
    '');

end



function pg=AddCommonDataAttributeParams(top,pg,ptag,dtypeStringPosition,dimcb)

    l_param(top,pg.Name,ptag,'edit',[],...
    'ChDimensions','Dimensions','1',...
    'on','off','off','on','on',...
    'Dimensions of ''data'' signal.',dimcb);






    l_param(top,pg.Name,ptag,...
    ['unidt({a=',num2str(dtypeStringPosition),'|||}{b=double|single|int8|uint8|int16|uint16|int32|uint32|boolean}{s=UDTBinaryPointMode}{g=UDTSignedSign|UDTUnsignedSign})'],...
    [],...
    'ChType','Datatype','uint32',...
    'on','off','off','on','on',...
    'Datatype of ''data'' signal.','');
    l_param(top,pg.Name,ptag,'edit',[],...
    'ChFrameSampleTime','Sample time','10e-9',...
    'on','off','off','on','on',...
    'Sample time of ''data'' signal. (For frames, it is the full frame time.)','');
end
function pg=AddCommonSWAttributeParams(top,pg,ptag)
    switch ptag
    case 'WriterChIf',eidPrompt='Buffer request event';eidDefault='FRAMEREQ';
    case 'ReaderChIf',eidPrompt='Buffer read event';eidDefault='FRAMERDY';
    end
    l_param(top,pg.Name,ptag,'edit',[],...
    'InterruptHandlingTime','Interrupt handling time','10e-6',...
    'on','off','off','on','on',...
    'The interrupt handling time between sending of frames.',...
    '');
    l_param(top,pg.Name,ptag,'edit',[],...
    'BufferEventID',eidPrompt,eidDefault,...
    'off','off','off','on','on',...
    '',...
    '');
end












function ToMemoryMask(top,ins)

    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='A4X to memory state machine.';
    fulltext='The block takes [A4S, A4SV, A4M Write], converts it to bytes, and writes it to addressable memory.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    ptag='wci';
    dpg=l_container(ins,ptag,'group','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');
    dpg=AddChannelInterfaceParams(top,dpg,ptag);
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'MaximumBurstSize','(maximum burst size)','HSBMPM',...
    'on','off','off','on','on',...
    'Maximum burst size (in bytes) to memory, a fixed constant for the system.',...
    '');
end

function FromMemoryMask(top,ins)

    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='A4X from memory logic.';
    fulltext='The block reads from addressable memory, converts from bytes, and drives a [A4S, A4SV, A4M Write] interface.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    ptag='rci';
    dpg=l_container(ins,ptag,'group','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');
    dpg=AddChannelInterfaceParams(top,dpg,ptag);
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'MaximumBurstSize','(maximum burst size)','HSBMPM',...
    'on','off','off','on','on',...
    'Maximum burst size (in bytes) to memory, a fixed constant for the system.',...
    '');
end

function MasterWriterMask(top,ins)

    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Generic writer mem channel logic';
    fulltext='The block takes write access transactions from the protocol s/m and models execution of those transactions.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    dptag='wmic';
    dpg=l_container(ins,dptag,'group','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');
    dpg=AddMasterInterconnectParams(ins,dpg,dptag);

end
function MasterReaderMask(top,ins)
    maskcb='';
    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='Generic reader mem channel logic';
    fulltext='The block takes read access transactions from the protocol s/m and models execution of those transactions.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;




    dptag='rmic';
    dpg=l_container(ins,dptag,'group','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');
    dpg=AddMasterInterconnectParams(ins,dpg,dptag);

end

function dpg=AddChannelInterfaceParams(top,dpg,ptag)




    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChDimensions','(dimensions)','HSBMPM',...
    'on','off','off','on','on',...
    'Dimensions of ''data'' signal.','');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChType','(ch type)','HSBMPM',...
    'on','off','off','on','on',...
    'Datatype of ''data'' signal.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChFrameSampleTime','(sample time)','HSBMPM',...
    'on','off','off','on','on',...
    'Sample time of ''data'' signal. (For frames, it is the full frame time.)','');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChBitPacked','(columns of data are bit-packed/unpacked)','HSBMPM',...
    'on','off','off','on','on',...
    ['Treat last dimension as channel or pixel data that is packed going to memory. ',newline,...
    'For example, 8bit RGB can be represented as [1x3] in Simulink and packed into ',newline,...
    '32bit TDATA for the memory interconnect.'],...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChWidth','(ch width (bits))','HSBMPM',...
    'on','off','off','on','on',...
    'Bit width of ''data'' signal.','');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChTDATAWidth','(ch tdata width (bits))','HSBMPM',...
    'on','off','off','on','on',...
    'Bit width of ''data'' signal implementation. AXI constrains data to certain widths. For example, a 24 bit ''data'' signal is placed on a 32 bit datapath in hardware.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChTDATAPadWidth','(ch tdata padding width (bits))','HSBMPM',...
    'on','off','off','on','on',...
    ['It applies when packing bits for the memory datapath. It specifies the number of bits of',newline,...
    'padding needed to get to a standard sized container.'],...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChCompLength','(ch component length)','HSBMPM',...
    'on','off','off','on','on',...
    ['It applies when packing bits for the memory datapath. It specifies the number of',newline,...
    'channel components that are bit-packed into TDATA. It is the size of',newline,...
    'the last dimension.'],...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChCompBitRanges','(ch component bit ranges)','HSBMPM',...
    'on','off','off','on','on',...
    ['It applies when packing bits for the memory datapath. It specifies the bit locations',newline,...
    'of the individual channel components that are bit-packed into TDATA.'],...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChContainerType','(ch container type)','HSBMPM',...
    'on','off','off','on','on',...
    'Datatype which holds the ''ChTDATAWidth'' bits.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'BurstSize','(burst size (bytes))','HSBMPM',...
    'on','off','off','on','on',...
    'Size of a burst in bytes. It is derived from ''BurstLength'' and ''ChContainerType''.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChGatherBufferBurstCount','(ch gather buffer burst count)','HSBMPM',...
    'on','off','off','on','on',...
    ['Number of bursts (always an integer) held in a gather buffer.',newline,...
    'If ''data'' dimensions are less than a burst, the gather buffer gathers ''data'' transfers until it has a burst.',newline,...
    'If ''data'' dimensions are greater than a burst, the gather buffer fills with one transfer and can represent >1 burst.'],...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChGatherCount','(ch gather count)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of ''data'' transfers needed to gather a full burst.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChGatherBufferSize','(ch gather buffer size (bytes))','HSBMPM',...
    'on','off','off','on','on',...
    'Size of gather buffer in bytes. It is ''ChGatherBurstCount'' times ''BurstSize''.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChFrameGatherBufferSize','(ch frame gather buffer size (bytes))','HSBMPM',...
    'on','off','off','on','on',...
    'Number of bytes that each transfer of ''data'' signal adds to the internal gather buffer.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChTLASTCount','(ch tlast count)','HSBMPM',...
    'on','off','off','on','on',...
    'Count of ''data'' transfers that comprise a memory region buffer. TLAST marks the end of a buffer.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ChLength','(ch length)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of scalar data in each ''data'' transfer. It is the product of ''ChDimensions''.',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'EntityInflowTime','(entity inflow time (s))','HSBMPM',...
    'on','off','off','on','on',...
    ['Pacing of bursts to memory. It only applies if a ''data'' transfer is greater than a burst.',newline,...
    'If ''data'' is less than a burst, time has already been spent gathering the buffer. In this case, the pacing time is 0.'],...
    '');


    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'InsertInactivePixelClocks','(insert inactive pixel clocks)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of active lines in the video frame',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ActiveVideoLines','(active video lines)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of active lines in the video frame',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'ActivePixelsPerLine','(active pixels per line)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of active pixels per line in the video frame',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'BlankingCount','(blanking count)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of inactive lines in the video frame',...
    '');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'PorchCount','(porch count)','HSBMPM',...
    'on','off','off','on','on',...
    'Number of inactive pixels per line in the video frame',...
    '');


    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'InterruptHandlingTime','(interrupt handling time (s))','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'BufferEventID','(buffer event ID)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,ptag,'edit',[],...
    'NumberOfBuffers','(number of buffers)','HSBMPM',...
    'on','off','off','on','on',...
    '','');


end

function dpg=AddMasterInterconnectParams(top,dpg,dptag)

    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'MasterID','(master id)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'MasterKind','(master kind)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'EntityInflowQueueCapacity','(inflow queue capacity)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'EntityInflowTime','(entity inflow time)','HSBMPM',...
    'on','off','off','on','on',...
    '','');


    switch dptag
    case 'rmic',att='ReadAccessBusObj';
    case 'wmic',att='WriteAccessBusObj';
    otherwise,error('do not know how to override AccessTransactionType for ''%s''',dptag);
    end
    l_param(top,dpg.Name,'','edit',[],...
    'AccessTransactionType','(access transaction type)',att,...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'FIFODepth','(FIFO depth)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'FIFOAFullDepth','(FIFO almost full depth)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'BufferLengthInBursts','(Buffer length in bursts)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'ICClockFrequency','(interconnect clock frequency)','HSBMPM',...
    'on','off','off','on','on',...
    '','');
    l_dparam(top,dpg.Name,dptag,'edit',[],...
    'ICDataWidth','(interconnect data width)','HSBMPM',...
    'on','off','off','on','on',...
    '','');

end




function g=l_container(ins,pt,t,n,p,r,e,v,tt)
    g=ins.addDialogControl('Type',t,...
    'Name',[n,pt],'Prompt',p,...
    'Row',r,'Enabled',e,'Visible',v,'Tooltip',tt);

    g.Visible=v;
end
function g=l_container2(ins,pt,t,n,p,r,e,v,tt)
    g=ins.addDialogControl('Type',t,...
    'Name',[n,pt],'Prompt',p,...
    'Row',r,'Enabled',e,'Visible',v,'Tooltip',tt,'AlignPrompts','on');

    g.Visible=v;
end
function g=l_dctext(ins,pt,n,p,ww,r,e,v,hs,tt)
    g=ins.addDialogControl('Type','text',...
    'Name',[n,pt],'Prompt',p,...
    'WordWrap',ww,...
    'Row',r,'Enabled',e,'Visible',v,'HorizontalStretch',hs,...
    'Tooltip',tt...
    );
end
function g=l_dchyperlink(ins,pt,n,p,cb,r,e,v,hs,tt)
    g=ins.addDialogControl('Type','hyperlink',...
    'Name',[n,pt],'Prompt',p,...
    'Callback',cb,...
    'Row',r,'Enabled',e,'Visible',v,'HorizontalStretch',hs,...
    'Tooltip',tt...
    );
end
function g=l_dcimage(ins,pt,n,fp,r,e,v,hs,tt)
    g=ins.addDialogControl('Type','image',...
    'Name',[n,pt],'FilePath',fp,...
    'Row',r,'Enabled',e,'Visible',v,'HorizontalStretch',hs,...
    'Tooltip',tt...
    );
end

function p=l_param(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb)%#ok<INUSL>
    p=top.addParameter('Type',ty,'Container',co,...
    'Name',[na,pt],'Prompt',pr,'Evaluate',ev,'Tunable',tu,...
    'Hidden',hi,'Enabled',en,'Visible',vi,...
    'Callback',cb);
    dc=top.getDialogControl([na,pt]);

    switch(ty)
    case{'popup','radiobutton'}
        p.TypeOptions=to;
    otherwise

    end
    switch(ty)
    case{'checkbox','radiobutton'}

    otherwise
        if~strncmp(ty,'unidt',5)
            dc.PromptLocation='left';
        end
    end

    if strcmp(va,'HSBMPM')
        switch(ty)
        case 'edit'
            p.Value=sprintf('hsbmpm.getP(gcb,''%s''',pt,na);
        otherwise
            error('must use an ''EDIT'' widget for hsbmpm params');
        end
    else
        p.Value=va;
    end
    dc.Tooltip=tt;
end
function p=l_param2(top,co,pt,pr,ty,to,na,va,ev,tu,hi,en,vi,tt,cb)
    p=l_param(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb);
end

function p=l_paramlayout(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb,rowlayout)
    p=l_param(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb);
    dc=top.getDialogControl([na,pt]);
    dc.Row=rowlayout;
end
function p=l_paramlayout2(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb,rowlayout,alignment)
    p=l_param(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb);
    dc=top.getDialogControl([na,pt]);
    dc.Row=rowlayout;
end

function p=l_dparam(top,co,pt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb)%#ok<INUSL>
    p=top.addParameter('Type',ty,'Container',co,...
    'Name',na,'Prompt',pr,'Evaluate',ev,'Tunable',tu,...
    'Hidden',hi,'Enabled',en,'Visible',vi,...
    'Callback',cb);
    dc=top.getDialogControl(na);
    dc.PromptLocation='left';

    assert(strcmp(ty,'edit'),'must use an ''edit'' widget type for hsbmpm derived params');
    p.Value=sprintf('hsbmpm.getP(gcb,''%s'',''%s'')',pt,na);
    dc.Tooltip=tt;
end
function p=l_dparam2(top,co,pt,dt,ty,to,na,pr,va,ev,tu,hi,en,vi,tt,cb)%#ok<INUSL>
    p=top.addParameter('Type',ty,'Container',co,...
    'Name',[na,pt],'Prompt',pr,'Evaluate',ev,'Tunable',tu,...
    'Hidden',hi,'Enabled',en,'Visible',vi,...
    'Callback',cb);
    dc=top.getDialogControl([na,pt]);
    dc.PromptLocation='left';

    assert(strcmp(ty,'edit'),'must use an ''edit'' widget type for hsbmpm derived params');
    p.Value=sprintf('hsbmpm.getP(gcb,''%s'',''%s'')',dt,na);
    dc.Tooltip=tt;
end





function A4SMasterBFMMask(top,ins)
    maskcb='';
    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='A4S master state machine';
    fulltext='The block reads from addressable memory, converts bytes to specified data type, and drives streaming data.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';


    dpg=l_container(ins,ptag,'collapsiblepanel','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');


    dpg=AddChannelInterfaceParams(top,dpg,ptag);%#ok<NASGU>

end

function A4SSlaveBFMMask(top,ins)
    maskcb='';
    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='A4S slave state machine.';
    fulltext='The block takes streaming data, converts it to bytes, and writes it to addressable memory.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';


    dpg=l_container(ins,ptag,'collapsiblepanel','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');


    dpg=AddChannelInterfaceParams(top,dpg,ptag);
    l_param(top,dpg.Name,ptag,'edit',[],...
    'MaximumBurstSize','(maximum burst size)','4096',...
    'on','off','off','on','on',...
    'Maximum burst size (in bytes) to memory, a fixed constant for the system.',...
    '');
end

function A4SVSlaveBFMMask(top,ins)
    maskcb='';
    top.Initialization='';
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='A4SV slave state machine.';
    fulltext='The block takes streaming pixel data, converts it to bytes, and writes it to addressable memory.';
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';


    dpg=l_container(ins,ptag,'collapsiblepanel','DerivedParameterGroup','(derived from top-level mask)','new','on','on','');


    dpg=AddChannelInterfaceParams(top,dpg,ptag);
    l_param(top,dpg.Name,ptag,'edit',[],...
    'MaximumBurstSize','(maximum burst size)','4096',...
    'on','off','off','on','on',...
    'Maximum burst size (in bytes) to memory, a fixed constant for the system.',...
    '');
end

function MemoryDiagnosticsMask(top,ins)

    maskcb='hsb.blkcb2.MemoryDiagnosticsCb';
    top.Initialization=[maskcb,'(''MaskInitFcn'',gcbh);'];
    top.SelfModifiable='on';
    top.IconUnits='normalized';

    intro='View diagnostic waveforms in a Logic Analyzer scope.';
    fulltext=sprintf(...
    'Before using the block, DISABLE the link with the library. To see diagnostic plots, simulate with logging enabled.');
    fullDescr=sprintf('%s\n\n%s\n',intro,fulltext);
    top.Description=fullDescr;

    ptag='';
    ppg=l_container(ins,ptag,'group','ParameterGroup','Parameters','new','on','on','');


    l_param(top,ppg.Name,ptag,'popup',...
    {'No logging','Log basic diagnostic signals','Log detailed debug signals'},...
    'LoggingLevel','Logging level','No logging',...
    'off','off','off','on','on',...
    '',[maskcb,'(''MaskParamCb'',''LoggingLevel'',gcbh);']);
    l_param(top,ppg.Name,ptag,'edit',[],...
    'NumChannels','Number of channels','1',...
    'on','off','off','on','on',...
    '','');

    apg=l_container(ins,ptag,'group','AnalysisGroup','Analysis','new','off','on','');
    l_param(top,apg.Name,ptag,'edit',[],...
    'PlotTimeResolution','Plot time resolution','100e-6',...
    'off','off','off','on','on',...
    '','');
    btn=l_container(apg,ptag,'pushbutton','PlotBWUsageBtn','Plot Data Throughput','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBWUsageBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgExecTimeBtn','Plot Average Burst Execution Time','new','on','on','');
    btn.Callback=[maskcb,'(''PlotAvgExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotAvgReqToExecTimeBtn','Plot Average Request to Burst Start Time','new','on','on','');
    btn.Callback=[maskcb,'(''PlotAvgReqToExecTimeBtnCb'',gcbh);'];

    btn=l_container(apg,ptag,'pushbutton','PlotBurstsExecutedBtn','Plot Number of Bursts Executed','new','on','on','');
    btn.Callback=[maskcb,'(''PlotBurstsExecutedBtnCb'',gcbh);'];


    hpg=l_container(ins,ptag,'group','HiddenParameterGroup','(hidden parameters)','new','on','off','');
    l_param(top,hpg.Name,ptag,'edit',[],...
    'MAX_NUM_CHANNELS','(maximum number of channels)','6',...
    'on','off','off','on','on',...
    '','');
end
