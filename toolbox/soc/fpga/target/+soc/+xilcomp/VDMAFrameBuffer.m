classdef VDMAFrameBuffer<soc.xilcomp.XilinxComponentBase
    properties
readerBuffDepth
writerBuffDepth
numBuff
s2mm_bsize
mm2s_bsize
    end

    methods
        function obj=VDMAFrameBuffer(varargin)

            obj.Configuration={...
            's2mm_addr','0x00000000',...
            's2mm_range','0',...
            'mm2s_addr','0x00000000',...
            'mm2s_range','0',...
            's2mm_mm_dw','32',...
            's2mm_s_dw','16',...
            'mm2s_mm_dw','32',...
            'mm2s_s_dw','16',...
            'diagnostics','0',...
            'mm2s_buf_depth','8',...
            's2mm_buf_depth','8',...
            's2mm_bsize','128',...
            'mm2s_bsize','128',...
            'mem_addr','0x00000000',...
            'mem_range','0',...
            'numBuff','3',...
            'mem_type','memPL',...

            };

            if nargin>0
                obj.Configuration=varargin;
            end

            obj.readerBuffDepth=str2double(obj.Configuration.mm2s_buf_depth);
            obj.writerBuffDepth=str2double(obj.Configuration.s2mm_buf_depth);
            obj.numBuff=str2double(obj.Configuration.numBuff);
            obj.s2mm_bsize=str2double(obj.Configuration.s2mm_bsize);
            obj.mm2s_bsize=str2double(obj.Configuration.mm2s_bsize);



            [readerBuffDepth,mm2s_bsize]=soc.internal.getDMAParams(obj.readerBuffDepth,obj.mm2s_bsize,obj.Configuration.mm2s_mm_dw,obj.Configuration.mm2s_s_dw);
            obj.Configuration={'mm2s_buf_depth',readerBuffDepth};
            obj.Configuration={'mm2s_bsize',mm2s_bsize};


            [writerBuffDepth,s2mm_bsize]=soc.internal.getDMAParams(obj.writerBuffDepth,obj.s2mm_bsize,obj.Configuration.s2mm_mm_dw,obj.Configuration.s2mm_s_dw);
            obj.Configuration={'s2mm_buf_depth',writerBuffDepth};
            obj.Configuration={'s2mm_bsize',s2mm_bsize};


            obj.addAXI4Master('axi_vdma_s2mm_1/m_dest_axi',obj.Configuration.mem_type,obj.Configuration.mem_type);

            obj.addAXI4Slave('axi_vdma_s2mm_1/s_axi','reg','sys',obj.Configuration.s2mm_addr,obj.Configuration.s2mm_range);
            obj.addClk({'axi_vdma_s2mm_1/s_axi_aclk',},'SystemClk');
            obj.addRst('axi_vdma_s2mm_1/s_axi_aresetn','SystemRstn');
            obj.addClk('axi_vdma_s2mm_1/m_dest_axi_aclk',obj.type2ClkName(obj.Configuration.mem_type));
            obj.addRst('axi_vdma_s2mm_1/m_dest_axi_aresetn',obj.type2RstnName(obj.Configuration.mem_type));
            obj.addClk('axi_vdma_s2mm_1/s_axis_aclk','IPCoreClk');


            obj.addAXI4Master('axi_vdma_mm2s_1/m_src_axi',obj.Configuration.mem_type,obj.Configuration.mem_type);

            obj.addAXI4Slave('axi_vdma_mm2s_1/s_axi','reg','sys',obj.Configuration.mm2s_addr,obj.Configuration.mm2s_range);
            obj.addClk({'axi_vdma_mm2s_1/s_axi_aclk',},'SystemClk');
            obj.addRst('axi_vdma_mm2s_1/s_axi_aresetn','SystemRstn');
            obj.addClk('axi_vdma_mm2s_1/m_src_axi_aclk',obj.type2ClkName(obj.Configuration.mem_type));
            obj.addRst('axi_vdma_mm2s_1/m_src_axi_aresetn',obj.type2RstnName(obj.Configuration.mem_type));
            obj.addClk('axi_vdma_mm2s_1/m_axis_aclk','IPCoreClk');




            obj.Instance=[...
            'set axi_vdma_s2mm_1 [ create_bd_cell -type ip -vlnv analog.com:user:axi_dmac:1.0 axi_vdma_s2mm_1 ]\n',...
'set_property -dict [list'...
            ,' CONFIG.CYCLIC {true}',...
            ' CONFIG.DMA_2D_TLAST_MODE {1}',...
            ' CONFIG.DMA_2D_TRANSFER {true} ',...
            ' CONFIG.DMA_LENGTH_WIDTH {24}',...
            ' CONFIG.DMA_TYPE_SRC {1} ',...
            ' CONFIG.DMA_TYPE_DEST {0}',...
            ' CONFIG.DMA_AXI_PROTOCOL_DEST {0} ',...
            ' CONFIG.DMA_DATA_WIDTH_DEST ',obj.Configuration.s2mm_mm_dw,...
            ' CONFIG.DMA_DATA_WIDTH_SRC ',obj.Configuration.s2mm_s_dw,...
            ' CONFIG.FIFO_SIZE ',obj.Configuration.s2mm_buf_depth,...
            ' CONFIG.MAX_BYTES_PER_BURST ',obj.Configuration.s2mm_bsize,...
            ' CONFIG.ENABLE_DIAGNOSTICS_IF ',obj.Configuration.diagnostics,...
            ' CONFIG.ENABLE_FRAME_LOCK {true}',...
            ' CONFIG.SYNC_TRANSFER_START {true}',...
'] $axi_vdma_s2mm_1\n'...
            ,'set axi_vdma_mm2s_1 [ create_bd_cell -type ip -vlnv analog.com:user:axi_dmac:1.0 axi_vdma_mm2s_1 ]\n',...
'set_property -dict [list'...
            ,' CONFIG.CYCLIC {true}',...
            ' CONFIG.DMA_2D_TLAST_MODE {1}',...
            ' CONFIG.DMA_2D_TRANSFER {true} ',...
            ' CONFIG.DMA_LENGTH_WIDTH {24}',...
            ' CONFIG.DMA_TYPE_SRC {0} ',...
            ' CONFIG.DMA_TYPE_DEST {1}',...
            ' CONFIG.DMA_AXI_PROTOCOL_SRC {0} ',...
            ' CONFIG.DMA_DATA_WIDTH_DEST ',obj.Configuration.mm2s_s_dw,...
            ' CONFIG.DMA_DATA_WIDTH_SRC ',obj.Configuration.mm2s_mm_dw,...
            ' CONFIG.FIFO_SIZE ',obj.Configuration.mm2s_buf_depth,...
            ' CONFIG.MAX_BYTES_PER_BURST ',obj.Configuration.mm2s_bsize,...
            ' CONFIG.ENABLE_DIAGNOSTICS_IF ',obj.Configuration.diagnostics,...
            ' CONFIG.ENABLE_FRAME_LOCK {true}',...
            ' CONFIG.SYNC_TRANSFER_START {true}',...
            ' CONFIG.USE_EXT_SYNC {true}',...
'] $axi_vdma_mm2s_1\n'...
            ,'connect_bd_intf_net [get_bd_intf_pins axi_vdma_s2mm_1/m_framelock] [get_bd_intf_pins axi_vdma_mm2s_1/s_framelock]\n',...
            ];
        end

        function result=validateProperties(obj)
            result=soc.internal.validateDMA(obj.readerBuffDepth,obj.Configuration.mm2s_mm_dw,obj.Configuration.mm2s_s_dw,'','Reader',obj.BlkName);
            result=[result,soc.internal.validateDMA(obj.writerBuffDepth,obj.Configuration.s2mm_mm_dw,obj.Configuration.s2mm_s_dw,'','Writer',obj.BlkName)];

            if obj.numBuff<3
                result(end+1)=hdlvalidatestruct(1,message('soc:msgs:checkFrameBufferNumBuffers',obj.BlkName));
            end
        end
    end
end
