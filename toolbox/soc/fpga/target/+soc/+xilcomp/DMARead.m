classdef DMARead<soc.xilcomp.XilinxComponentBase
    properties
burst_size
fifo_depth
    end

    methods
        function obj=DMARead(varargin)

            obj.Configuration={...
            'dev_addr','0x00000000',...
            'dev_range','0',...
            'btt','24',...
            'mm_dw','64',...
            's_dw','32',...
            'sw_dw','32',...
            'bsize','16',...
            'fifo_depth','4',...
            'mem_addr','0x00000000',...
            'mem_range','0',...
            'diagnostics','1',...
            'bufferSize','1024',...
            'mem_type','memPS',...
            };

            if nargin>0
                obj.Configuration=varargin;
            end

            obj.burst_size=str2double(obj.Configuration.bsize);
            obj.fifo_depth=str2double(obj.Configuration.fifo_depth);

            [fifoDepth,burstSize]=soc.internal.getDMAParams(obj.fifo_depth,obj.burst_size,obj.Configuration.mm_dw,obj.Configuration.s_dw);
            obj.Configuration={'fifo_depth',fifoDepth};
            obj.Configuration={'bsize',burstSize};


            obj.addClk('dma_mm2s/s_axi_aclk','SystemClk');
            obj.addRst('dma_mm2s/s_axi_aresetn','SystemRstn');
            obj.addAXI4Slave('dma_mm2s/s_axi','reg','sys',obj.Configuration.dev_addr,obj.Configuration.dev_range);


            obj.addClk('dma_mm2s/m_src_axi_aclk',obj.type2ClkName(obj.Configuration.mem_type));
            obj.addRst('dma_mm2s/m_src_axi_aresetn',obj.type2RstnName(obj.Configuration.mem_type));
            obj.addAXI4Master('dma_mm2s/m_src_axi',obj.Configuration.mem_type,obj.Configuration.mem_type);


            obj.addClk('dma_mm2s/m_axis_aclk','IPCoreClk');


            obj.addInterrupt('dma_mm2s/irq');



            obj.Instance=[...
            'set dma_mm2s [create_bd_cell -type ip -vlnv analog.com:user:axi_dmac:1.0 dma_mm2s]\n',...
            'set_property -dict [list CONFIG.AXI_SLICE_DEST {0}',...
            ' CONFIG.AXI_SLICE_SRC {0}',...
            ' CONFIG.CYCLIC {0}',...
            ' CONFIG.DMA_2D_TRANSFER {0}',...
            ' CONFIG.DMA_DATA_WIDTH_DEST ',obj.Configuration.s_dw,...
            ' CONFIG.DMA_DATA_WIDTH_SRC ',obj.Configuration.mm_dw,...
            ' CONFIG.DMA_LENGTH_WIDTH {24}',...
            ' CONFIG.DMA_TYPE_DEST {1}',...
            ' CONFIG.DMA_TYPE_SRC {0}',...
            ' CONFIG.DMA_AXI_PROTOCOL_SRC {0}',...
            ' CONFIG.FIFO_SIZE ',obj.Configuration.fifo_depth,...
            ' CONFIG.ID {0} ',...
            ' CONFIG.SYNC_TRANSFER_START {0} ',...
            ' CONFIG.MAX_BYTES_PER_BURST ',obj.Configuration.bsize,...
            ' CONFIG.ENABLE_DIAGNOSTICS_IF ',obj.Configuration.diagnostics,...
            ' ] $dma_mm2s\n',...
            ];
        end

        function result=validateProperties(obj)
            result=soc.internal.validateDMA(obj.fifo_depth,obj.Configuration.mm_dw,obj.Configuration.s_dw,obj.burst_size,'Reader',obj.BlkName);
        end
    end
end