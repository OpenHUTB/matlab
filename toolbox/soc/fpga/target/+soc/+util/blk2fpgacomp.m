function fpgacomp=blk2fpgacomp(memMap,vendor,blk,varargin)
    if strcmpi(vendor,'xilinx')
        compType='xilcomp';
    else
        compType='intelcomp';
    end

    switch soc.util.getRefBlk(blk)
    case{'socmemlib/AXI4-Stream to Software','socmemlib/Software to AXI4-Stream'}
        if isWritePort(varargin{1})
            mem_type=get_shared_mem_type(blk);
            mem_info=get_shared_mem_info([blk,'/SimVariant/Accurate/Memory Channel'],'DMAWrite');
            [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'DMAWrite');
            [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
            fpgacomp=soc.(compType).DMAWrite(...
            'dev_addr',dev_addr,...
            'dev_range',[dev_range{:}],...
            'mm_dw',mem_info.mm_dw,...
            's_dw',mem_info.s_dw,...
            'sw_dw',mem_info.sw_dw,...
            'bsize',mem_info.burst_size,...
            'fifo_depth',mem_info.fifo_depth,...
            'mem_addr',mem_addr,...
            'mem_range',[mem_range{:}],...
            'bufferSize',mem_info.bufferSize,...
            'mem_type',mem_type...
            );
        else
            mem_type=get_shared_mem_type(blk);
            mem_info=get_shared_mem_info([blk,'/SimVariant/Accurate/Memory Channel'],'DMARead');
            [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'DMARead');
            [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
            fpgacomp=soc.(compType).DMARead(...
            'dev_addr',dev_addr,...
            'dev_range',[dev_range{:}],...
            'mm_dw',mem_info.mm_dw,...
            's_dw',mem_info.s_dw,...
            'sw_dw',mem_info.sw_dw,...
            'bsize',mem_info.burst_size,...
            'fifo_depth',mem_info.fifo_depth,...
            'mem_addr',mem_addr,...
            'mem_range',[mem_range{:}],...
            'bufferSize',mem_info.bufferSize,...
            'mem_type',mem_type...
            );
        end
        fpgacomp.BlkName=regexprep(blk,'\n',' ');
    case 'socmemlib/AXI4 Video Frame Buffer'
        if strcmpi(vendor,'intel')
            error(message('soc:msgs:checkFpgaVDMAIntel'));
        end
        mem_type=get_shared_mem_type(blk);
        mm2s_mem_info=get_shared_mem_info([blk,'/SimVariant/Accurate/Memory Channel'],'vdmaread');
        s2mm_mem_info=get_shared_mem_info([blk,'/SimVariant/Accurate/Memory Channel'],'vdmawrite');
        [mm2s_addr,mm2s_range]=soc.memmap.getComponentAddress(memMap,'VDMA Frame Buffer Read');
        [s2mm_addr,s2mm_range]=soc.memmap.getComponentAddress(memMap,'VDMA Frame Buffer Write');
        [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
        fpgacomp=soc.xilcomp.VDMAFrameBuffer(...
        'mm2s_addr',mm2s_addr,...
        'mm2s_range',[mm2s_range{:}],...
        's2mm_addr',s2mm_addr,...
        's2mm_range',[s2mm_range{:}],...
        'mm2s_buf_depth',mm2s_mem_info.fifo_depth,...
        's2mm_buf_depth',s2mm_mem_info.fifo_depth,...
        'mm2s_s_dw',mm2s_mem_info.s_dw,...
        'mm2s_mm_dw',mm2s_mem_info.mm_dw,...
        'mm2s_bsize',mm2s_mem_info.burst_size,...
        's2mm_s_dw',s2mm_mem_info.s_dw,...
        's2mm_mm_dw',s2mm_mem_info.mm_dw,...
        's2mm_bsize',s2mm_mem_info.burst_size,...
        'mem_addr',mem_addr,...
        'mem_range',[mem_range{:}],...
        'numBuff',mm2s_mem_info.numBuff,...
        'mem_type',mem_type...
        );
        fpgacomp.BlkName=regexprep(blk,'\n',' ');
    case 'socmemlib/AXI4 Random Access Memory'
        mem_type=get_shared_mem_type(blk);

        [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
        mws=hsb.blkcb2.cbutils('GetDialogParams',[blk,'/SimVariant/Accurate/Memory Channel']);
        if isWritePort(varargin{1})
            fpgacomp=soc.(compType).AXIM(...
            'type','writer',...
            'mem_addr',mem_addr,...
            'mem_range',[mem_range{:}],...
            'mm_dw',num2str(mws.blkDP.wciP.ChTDATAWidth),...
            'mem_type',mem_type);
        else
            fpgacomp=soc.(compType).AXIM(...
            'type','reader',...
            'mem_addr',mem_addr,...
            'mem_range',[mem_range{:}],...
            'mm_dw',num2str(mws.blkDP.rciP.ChTDATAWidth),...
            'mem_type',mem_type);
        end
        fpgacomp.BlkName=regexprep(blk,'\n',' ');
    case 'socmemlib/Memory Channel'
        if any(strcmpi(get_param(blk,'ProtocolReader'),{'AXI4-Stream Software','AXI4-Stream'}))...
            &&any(strcmpi(get_param(blk,'ProtocolWriter'),{'AXI4-Stream Software','AXI4-Stream'}))
            if isWritePort(varargin{1})
                mem_type=get_shared_mem_type(blk);
                mem_info=get_shared_mem_info(blk,'DMAWrite');
                [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'DMAWrite');
                [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
                fpgacomp=soc.(compType).DMAWrite(...
                'dev_addr',dev_addr,...
                'dev_range',[dev_range{:}],...
                'mm_dw',mem_info.mm_dw,...
                's_dw',mem_info.s_dw,...
                'sw_dw',mem_info.sw_dw,...
                'bsize',mem_info.burst_size,...
                'fifo_depth',mem_info.fifo_depth,...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'bufferSize',mem_info.bufferSize,...
                'mem_type',mem_type...
                );
            else
                mem_type=get_shared_mem_type(blk);
                mem_info=get_shared_mem_info(blk,'DMARead');
                [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'DMARead');
                [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
                fpgacomp=soc.(compType).DMARead(...
                'dev_addr',dev_addr,...
                'dev_range',[dev_range{:}],...
                'mm_dw',mem_info.mm_dw,...
                's_dw',mem_info.s_dw,...
                'sw_dw',mem_info.sw_dw,...
                'bsize',mem_info.burst_size,...
                'fifo_depth',mem_info.fifo_depth,...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'bufferSize',mem_info.bufferSize,...
                'mem_type',mem_type...
                );
            end
            fpgacomp.BlkName=regexprep(blk,'\n',' ');
        elseif strcmpi(get_param(blk,'ProtocolReader'),'AXI4-Stream Video with Frame Sync')...
            &&strcmpi(get_param(blk,'ProtocolWriter'),'AXI4-Stream Video')
            if strcmpi(vendor,'intel')
                error(message('soc:msgs:checkFpgaVDMAIntel'));
            end
            mem_type=get_shared_mem_type(blk);
            mm2s_mem_info=get_shared_mem_info(blk,'vdmaread');
            s2mm_mem_info=get_shared_mem_info(blk,'vdmawrite');
            [mm2s_addr,mm2s_range]=soc.memmap.getComponentAddress(memMap,'VDMA Frame Buffer Read');
            [s2mm_addr,s2mm_range]=soc.memmap.getComponentAddress(memMap,'VDMA Frame Buffer Write');
            [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
            fpgacomp=soc.xilcomp.VDMAFrameBuffer(...
            'mm2s_addr',mm2s_addr,...
            'mm2s_range',[mm2s_range{:}],...
            's2mm_addr',s2mm_addr,...
            's2mm_range',[s2mm_range{:}],...
            'mm2s_buf_depth',mm2s_mem_info.fifo_depth,...
            's2mm_buf_depth',s2mm_mem_info.fifo_depth,...
            'mm2s_s_dw',mm2s_mem_info.s_dw,...
            'mm2s_mm_dw',mm2s_mem_info.mm_dw,...
            'mm2s_bsize',mm2s_mem_info.burst_size,...
            's2mm_s_dw',s2mm_mem_info.s_dw,...
            's2mm_mm_dw',s2mm_mem_info.mm_dw,...
            's2mm_bsize',s2mm_mem_info.burst_size,...
            'mem_addr',mem_addr,...
            'mem_range',[mem_range{:}],...
            'numBuff',mm2s_mem_info.numBuff,...
            'mem_type',mem_type...
            );
            fpgacomp.BlkName=regexprep(blk,'\n',' ');
        elseif strcmpi(get_param(blk,'ProtocolReader'),'AXI4')...
            &&strcmpi(get_param(blk,'ProtocolWriter'),'AXI4')
            mem_type=get_shared_mem_type(blk);

            [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
            mws=hsb.blkcb2.cbutils('GetDialogParams',blk);
            if isWritePort(varargin{1})
                fpgacomp=soc.(compType).AXIM(...
                'type','writer',...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'mm_dw',num2str(mws.blkDP.wciP.ChTDATAWidth),...
                'mem_type',mem_type);
            else
                fpgacomp=soc.(compType).AXIM(...
                'type','reader',...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'mm_dw',num2str(mws.blkDP.rciP.ChTDATAWidth),...
                'mem_type',mem_type);
            end
            fpgacomp.BlkName=regexprep(blk,'\n',' ');
        elseif strcmpi(get_param(blk,'ProtocolReader'),'AXI4-Stream Video')...
            &&strcmpi(get_param(blk,'ProtocolWriter'),'AXI4-Stream Video')
            if strcmpi(vendor,'intel')
                error(message('soc:msgs:checkFpgaVDMAIntel'));
            end
            if isWritePort(varargin{1})
                mem_type=get_shared_mem_type(blk);
                mem_info=get_shared_mem_info(blk,'vdmawrite');
                [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'VDMAWrite');
                [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
                fpgacomp=soc.xilcomp.VDMAWrite(...
                'dev_addr',dev_addr,...
                'dev_range',[dev_range{:}],...
                'buf_depth',mem_info.fifo_depth,...
                'mm_dw',mem_info.mm_dw,...
                's_dw',mem_info.s_dw,...
                'bsize',mem_info.burst_size,...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'mem_type',mem_type...
                );
            else
                mem_type=get_shared_mem_type(blk);
                mem_info=get_shared_mem_info(blk,'vdmaread');
                [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,'VDMARead');
                [mem_addr,mem_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
                fpgacomp=soc.xilcomp.VDMARead(...
                'dev_addr',dev_addr,...
                'dev_range',[dev_range{:}],...
                'buf_depth',mem_info.fifo_depth,...
                'mm_dw',mem_info.mm_dw,...
                's_dw',mem_info.s_dw,...
                'bsize',mem_info.burst_size,...
                'mem_addr',mem_addr,...
                'mem_range',[mem_range{:}],...
                'mem_type',mem_type...
                );
                fpgacomp.FrameSize=get_video_frame_size(blk);
            end
            fpgacomp.BlkName=regexprep(blk,'\n',' ');
        end
    case 'socmemlib/Memory Traffic Generator'
        mem_type=get_ATG_mem_type(blk);
        sh_mem_info=get_ATG_mem_info(blk);
        [dev_addr,dev_range]=soc.memmap.getComponentAddress(memMap,get_param(blk,'name'));
        rw_type=lower(get_param(blk,'RequestType'));


        mem_addr=memMap.controllerInfo.([mem_type,'BaseAddr']);
        fpgacomp=soc.(compType).ATG(...
        'dev_addr',dev_addr,...
        'dev_range',[dev_range{:}],...
        'num',num2str(varargin{1}),...
        'rw_dir',rw_type(1),...
        'bsize',sh_mem_info.burstSize,...
        'baddr','0',...
        'mm_dw',sh_mem_info.dw,...
        'period',sh_mem_info.burstAccTimes,...
        'mem_type',mem_type,...
        'mem_addr',mem_addr,...
        'blkName',regexprep(blk,'\n',' ')...
        );
        fpgacomp.BlkName=regexprep(blk,'\n',' ');
    otherwise
        fpgacomp='';
    end

end

function mem_type=get_shared_mem_type(memChBlk)
    if strcmpi(soc.util.getRefBlk(memChBlk),'socmemlib/Memory Channel')
        blkPortHandles=get_param(memChBlk,'porthandles');
        wrBurstReq='/wrBurstReq';
        burstReqPortNum=get_param(strcat(memChBlk,wrBurstReq),'port');
        handleLine=get_param(blkPortHandles.Outport(str2double(burstReqPortNum)),'Line');
        memCtrlBlk=soc.util.getDstBlk(handleLine);
        if any(strcmpi(soc.util.getRefBlk(memCtrlBlk{1}),{'socmemlib/Memory Controller','socmemlib_internal/Memory Controller'}))
            memSel=get_param(memCtrlBlk{1},'MemorySelection');
        else
            error("No Memory Controller attached to Memory Channel block: %s",memChBlk);
        end
    else
        memSel=get_param(memChBlk,'MemorySelection');
        memCtrlBlk=memChBlk;
    end
    switch memSel
    case 'PL memory'
        mem_type='memPL';
    case 'PS memory'
        mem_type='memPS';
    otherwise
        error('Invalid Memory Selection: %s in Memory Controller block: %s ',memSel,memCtrlBlk);
    end
end

function shared_mem_info=get_shared_mem_info(blk,type)
    mws=hsb.blkcb2.cbutils('GetDialogParams',blk,'forceSync','ICDataWidthWriter');
    switch lower(type)
    case{'dmawrite','vdmawrite'}
        shared_mem_info.s_dw=num2str(mws.blkDP.wciP.ChTDATAWidth);
        shared_mem_info.mm_dw=num2str(mws.ICDataWidthWriter);
        shared_mem_info.sw_dw=num2str(mws.blkDP.rciP.ChTDATAWidth);
    case{'dmaread','vdmaread'}
        shared_mem_info.s_dw=num2str(mws.blkDP.rciP.ChTDATAWidth);
        shared_mem_info.mm_dw=num2str(mws.ICDataWidthReader);
        shared_mem_info.sw_dw=num2str(mws.blkDP.wciP.ChTDATAWidth);
    end
    shared_mem_info.fifo_depth=get_fifo_depth(blk,type);
    shared_mem_info.burst_size=get_burst_size(blk,type);

    shared_mem_info.bufferSize=soc.util.getValueString(blk,'MRBufferSize');
    shared_mem_info.numBuff=soc.util.getValueString(blk,'MRNumBuffers');
end

function numBurst=get_fifo_depth(blk,type)

    switch lower(type)
    case{'dmawrite','vdmawrite'}
        numBurst=soc.util.getValueString(blk,'FIFODepthWriter');
    case{'dmaread','vdmaread'}
        numBurst=soc.util.getValueString(blk,'FIFODepthReader');
    end
end

function burstLength=get_burst_size(blk,type)
    switch lower(type)
    case{'dmawrite','vdmawrite'}
        burstLength=soc.util.getValueString(blk,'BurstLengthWriterChIf');
    case{'dmaread','vdmaread'}
        burstLength=soc.util.getValueString(blk,'BurstLengthReaderChIf');
    end
end

function frame_size=get_video_frame_size(blk)
    frame_size=struct('width',[],'height',[],'hporch',[],'vporch',[]);
    mws=hsb.blkcb2.cbutils('GetDialogParams',blk);
    frame_size.width=mws.blkDP.rciP.ActivePixelsPerLine;
    frame_size.height=mws.blkDP.rciP.ActiveVideoLines;
    frame_size.hporch=mws.blkDP.rciP.PorchCount;
    frame_size.vporch=mws.blkDP.rciP.BlankingCount;
end

function mem_type=get_ATG_mem_type(ATGBlk)
    if strcmpi(get_param(ATGBlk,'ShowMemoryControllerPorts'),'on')
        blkPortHandles=get_param(ATGBlk,'porthandles');
        wrBurstReq='/burstReq';
        burstReqPortNum=get_param(strcat(ATGBlk,wrBurstReq),'port');
        handleLine=get_param(blkPortHandles.Outport(str2double(burstReqPortNum)),'Line');
        memCtrlBlk=soc.util.getDstBlk(handleLine);
        if any(strcmpi(soc.util.getRefBlk(memCtrlBlk{1}),{'socmemlib/Memory Controller','socmemlib_internal/Memory Controller'}))
            memSel=get_param(memCtrlBlk{1},'MemorySelection');
        else
            error("No Memory Controller attached to Memory Traffic Generator block: %s",ATGBlk);
        end
    else
        memSel=get_param(ATGBlk,'MemorySelection');
        memCtrlBlk=ATGBlk;
    end
    switch memSel
    case 'PL memory'
        mem_type='memPL';
    case 'PS memory'
        mem_type='memPS';
    otherwise
        error('Invalid Memory Selection: %s in Memory Controller block: %s ',memSel,memCtrlBlk);
    end
end

function sh_mem_info=get_ATG_mem_info(blk)
    if strcmpi(get_param(blk,'ShowMemoryControllerPorts'),'on')
        hPort=get_param(blk,'PortHandles');
        hLine=get_param(hPort.Outport(1),'line');
        if eq(hLine,-1)
            error(message('soc:msgs:burstReqPortDisconnect',blk));
        end
        memCtrlBlk=soc.util.getDstBlk(hLine);
    else
        memCtrlBlk={[blk,'/MemCtrlGate/local/Memory Controller']};
    end
    if any(strcmpi(soc.util.getRefBlk(memCtrlBlk{1}),{'socmemlib/Memory Controller','socmemlib_internal/Memory Controller'}))
        sh_mem_info.dw=get_param(memCtrlBlk{:},'ControllerDataWidth');
        sh_mem_info.burstAccTimes=get_param(blk,'BurstInterAccessTimes');
        sh_mem_info.numBursts=get_param(blk,'TotalBurstRequests');
        sh_mem_info.burstSize=soc.util.getValueString(blk,'BurstSize');
    else
        error(message('soc:msgs:burstReqPortDisconnectMem',blk));
    end
end

function result=isWritePort(portName)
    if any(strcmpi(portName,{'wrdata','wrctrlin','wrctrlout'}))
        result=true;
    else
        result=false;
    end
end
