function socExportReferenceDesign(modelName,varargin)





    soc.internal.validateModelName(modelName);
    modelName=char(modelName);

    p=inputParser;
    addParameter(p,'DUTName','',@(x)validateattributes(x,{'char','string'},{'nonempty'}));
    addParameter(p,'Folder',[modelName,'_refdesign'],@(x)validateattributes(x,{'char','string'},{'nonempty'}));
    addParameter(p,'TargetPlatform','',@(x)validateattributes(x,{'char','string'},{'nonempty'}));
    addParameter(p,'ReferenceDesign','',@(x)validateattributes(x,{'char','string'},{'nonempty'}));

    parse(p,varargin{:});

    dutName=char(p.Results.DUTName);
    folder=char(p.Results.Folder);
    exportDirectory=soc.internal.makeAbsolutePath(folder);
    boardName=char(p.Results.TargetPlatform);
    designName=char(p.Results.ReferenceDesign);


    soc.internal.validateProjectDir(pwd);


    if(~isempty(folder))
        if(~checkVlidname(folder))
            error(message('soc:workflow:NospecialChar',sprintf('{Folder,''%s''}',folder)));
        end
    end


    if(isempty(boardName))
        exportBoardFolder='+exportBoard';
    else
        exportBoardFolder=['+exportBoard','_',regexprep(boardName,'[\W]*','_')];
    end



    if(isempty(designName))
        exportRefFolder='+exportDesign';
    else
        if(~checkVlidname(designName))

        end
        exportRefFolder=['+exportDesign','_',regexprep(designName,'[\W]*','_')];
    end


    if~bdIsLoaded(modelName)
        load_system(modelName);
    end


    intrChBlk=find_system(modelName,'searchdepth',1,'ReferenceBlock','socmemlib/Interrupt Channel');
    if~isempty(intrChBlk)
        error(message('soc:msgs:NoRefDesgnExpSuppForIntrCh'));
    end

    [~,fpgaModelName]=soc.util.getHSBSubsystem(modelName);

    if(isempty(fpgaModelName))
        error(message('soc:msgs:NoFPGAModel',modelName));
    end

    modelDutNames=soc.util.getDUT(fpgaModelName);

    if(isempty(modelDutNames))
        error(message('soc:msgs:checkFpgaNoDUTFound',fpgaModelName));
    end

    if(isempty(dutName))
        if(numel(modelDutNames)==1)
            dutName=modelDutNames{1};
        else
            DutNames=(cellfun(@(x)extractAfter(x,'/'),soc.util.getDUT(fpgaModelName),'UniformOutput',false));
            error(message('soc:workflow:DutFieldRequired',modelName,fpgaModelName,['''',strjoin(DutNames,''' or '''),''''],DutNames{1}));
        end
    end

    if(~any(cellfun(@(x)contains(x,dutName),modelDutNames)))
        error(message('soc:workflow:WrongDutName',dutName,fpgaModelName));
    else
        dutidx=(cellfun(@(x)contains(x,dutName),modelDutNames));
        dutName=get_param(modelDutNames{dutidx},'Name');


        i2c_ip=find_system(modelDutNames{dutidx},'MatchFilter',@Simulink.match.internal.filterOutInactiveVariantSubsystemChoices,'ReferenceBlock','hwlogiciolib/I2C Master');
        if(~isempty(i2c_ip))
            error(message('soc:workflow:NoI2Cdut'));
        end
    end
    prjName=[modelName,'_rdprj'];

    if(isempty(boardName))
        boardName=[get_param(modelName,'HardwareBoard'),' (generated by SoC Blockset)'];
    else
        boardName=[boardName,' (generated by SoC Blockset)'];
    end

    if(isempty(designName))
        designName=['Design exported from ''''',modelName,''''' model'];
    end

    restorepath=pwd;
    if(~exist(exportDirectory,'dir'))
        [~,~,~]=mkdir(exportDirectory);
    else
        warning(message('soc:workflow:FolderExit',exportDirectory));
    end
    cd(exportDirectory);

    soc.internal.createBoardCustfile(exportBoardFolder)
    [boardpkg,~,~]=mkdir(exportBoardFolder);
    cd(exportBoardFolder)

    soc.internal.createRefCustfile(boardName,exportBoardFolder,exportRefFolder);
    if(boardpkg)
        [~,~,~]=mkdir(exportRefFolder);
    end
    cd(restorepath);
    exportBoardDir=fullfile(exportDirectory,exportBoardFolder);
    exportDirectoryFull=fullfile(exportDirectory,exportBoardFolder,exportRefFolder);

    if(exist(fullfile(pwd,prjName),'dir'))
        [~]=rmdir(fullfile(pwd,prjName),'s');
    end

    soc.internal.SoCBuilderGen(modelName,'ExportRD',true,'dutName',dutName,...
    'exportRefDirectory',exportDirectoryFull,'boardName',boardName,...
    'designName',designName,'EnableBitGen',false,'EnableSWMdlGen',false,...
    'exportBoardDirectory',exportBoardDir,'PrjDir',prjName);

    link=sprintf('<a href="matlab:cd %s">%s</a>',exportDirectory,exportDirectory);
    disp(message('soc:workflow:exportDirLink',link).getString);

end
function out=checkVlidname(inputname)
    asciiValue=double(inputname);
    validChar=(any(48<=asciiValue)&&any(asciiValue<=57))||...
    (any(65<=asciiValue)&&any(asciiValue<=90))||...
    (any(97<=asciiValue)&&any(asciiValue<=122))||...
    (any(47==asciiValue))||...
    (any(92==asciiValue))||...
    (any(58==asciiValue))||...
    (any(95==asciiValue))||...
    (any(45==asciiValue));

    firstChar=((48<=asciiValue(1))&&(asciiValue(1)<=57))||...
    ((65<=asciiValue(1))&&(asciiValue(1)<=90))||...
    ((97<=asciiValue(1))&&(asciiValue(1)<=122))||...
    (~ispc&&any(47==asciiValue))||...
    (~ispc&&any(92==asciiValue));
    out=firstChar&&validChar;
end
