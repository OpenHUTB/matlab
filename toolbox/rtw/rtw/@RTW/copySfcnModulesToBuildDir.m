function msg=copySfcnModulesToBuildDir(rtw_sf_name,destDir)








    msg='';
    try
        if exist(rtw_sf_name,'file')==3
            mkpath=which(rtw_sf_name);
            modelname=rtw_sf_name(1:end-3);
            sfcnDir=strrep(mkpath,[rtw_sf_name,'.',mexext],...
            [modelname,'_sfcn_rtw']);
        end

        sfName=[modelname,'_sf'];
        cfiles=dir([sfcnDir,filesep,'*.c']);
        cfiles={cfiles.name};
        cppfiles=dir([sfcnDir,filesep,'*.cpp']);
        cppfiles={cppfiles.name};

        biMat=[sfcnDir,filesep,'buildInfo.mat'];
        if exist(biMat,'file')
            bi4sfcn=load(biMat);
            hfiles=bi4sfcn.buildInfo.getIncludeFiles(0,1,'TFL');
            if slfeature('SupportNonfiniteLiterals')>0
                hfiles=[hfiles,'rt_InitInfAndNaN.h'];
            end
        else
            hfiles={};
        end
        allfiles=[cfiles,cppfiles,hfiles];
        if slfeature('SupportNonfiniteLiterals')>0
            excludes={'rt_nonfinite.h','rt_nonfinite.c','rt_nonfinite.cpp'};
        else
            excludes={'rt_nonfinite.h',...
            'rt_nonfinite.c',...
            'rt_nonfinite.cpp',...
            'rt_InitInfAndNaN.c',...
            'rt_InitInfAndNaN.cpp',...
            'rt_InitInfAndNaN.h',...
            'rtIsInf.c',...
            'rtIsInfF.c',...
            'rtIsNaN.c',...
            'rtIsNaNF.c',...
            'rtGetInf.c',...
            'rtGetInfF.c',...
            'rtGetMinusInf.c',...
            'rtGetMinusInfF.c',...
            'rtGetNaN.c',...
'rtGetNaNF.c'...
            ,'rtIsInf.cpp',...
            'rtIsInfF.cpp',...
            'rtIsNaN.cpp',...
            'rtIsNaNF.cpp',...
            'rtGetInf.cpp',...
            'rtGetInfF.cpp',...
            'rtGetMinusInf.cpp',...
            'rtGetMinusInfF.cpp',...
            'rtGetNaN.cpp',...
'rtGetNaNF.cpp'...
            ,'rtIsInf.h',...
            'rtIsInfF.h',...
            'rtIsNaN.h',...
            'rtIsNaNF.h',...
            'rtGetInf.h',...
            'rtGetInfF.h',...
            'rtGetMinusInf.h',...
            'rtGetMinusInfF.h',...
            'rtGetNaN.h',...
'rtGetNaNF.h'...
            };
        end

        allfiles=setdiff(allfiles,excludes);

        if~isempty(allfiles)
            for fileIdx=1:length(allfiles)
                nameSrcFile=allfiles{fileIdx};

                fullSrcName=fullfile(sfcnDir,nameSrcFile);
                fullDesName=fullfile(destDir,nameSrcFile);
                existSrcFile=dir(fullSrcName);
                existDesFile=dir(fullDesName);
                if~isempty(existSrcFile)&&...
                    (isempty(existDesFile)||(existSrcFile.datenum>existDesFile.datenum))


                    loc_copyfile(fullSrcName,fullDesName,sfName);
                end
            end
        end
    catch me
        msg=me.message;
    end


    function loc_copyfile(src,des,sfName)

        fid_src=fopen(src,'rt');

        if fid_src==-1
            DAStudio.error('RTW:utility:fileIOError',src,'open');
        end
        fulltext=fscanf(fid_src,'%c');
        if ischar(fulltext)&&isempty(regexp(fulltext,['#include\s+"',sfName,'_private.h"'],'once'))
            fid_des=fopen(des,'wt+');
            fseek(fid_src,0,'bof');
            fwrite(fid_des,fread(fid_src,'char'),'char');
            fclose(fid_des);
        end
        fclose(fid_src);




