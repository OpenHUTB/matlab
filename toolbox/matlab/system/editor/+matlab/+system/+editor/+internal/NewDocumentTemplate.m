classdef NewDocumentTemplate







    methods(Static)
        function createBasic(varargin)
            newFile=matlab.desktop.editor.newDocument;

            basicTemplateCode=[...
            basicClassStart(getClassName(newFile)),...
            propertiesSection,...
            methodsStart,...
            methodsSection('',{'setupImpl','stepImpl','resetImpl'},true),...
            methodsEnd,...
            classEnd];

            populateTemplate(newFile,basicTemplateCode,varargin{:});
        end

        function createAdvanced(varargin)
            newFile=matlab.desktop.editor.newDocument;

            advancedTemplateCode=[...
            advancedClassStart(getClassName(newFile)),...
            propertiesSection(true),...
            constructorMethod(getClassName(newFile)),...
            methodsStart,...
            methodsSection('%% Common functions',...
            {'setupImpl','stepImpl','resetImpl'}),...
            methodsSection('%% Backup/restore functions',...
            {'saveObjectImpl','loadObjectImpl'}),...
            methodsSection('%% Advanced functions',...
            {'validateInputsImpl','validatePropertiesImpl',...
            'getDiscreteStateImpl','processTunedPropertiesImpl',...
            'isInputSizeMutableImpl','isInactivePropertyImpl'},true),...
            methodsEnd,...
            classEnd];

            populateTemplate(newFile,advancedTemplateCode,varargin{:});
        end

        function createSimulinkExtension(varargin)
            newFile=matlab.desktop.editor.newDocument;

            simulinkTemplateCode=[...
            simulinkClassStart(getClassName(newFile)),...
            propertiesSection(true),...
            constructorMethod(getClassName(newFile)),...
            methodsStart,...
            methodsSection('%% Common functions',...
            {'setupImpl','stepImpl','resetImpl'}),...
            methodsSection('%% Backup/restore functions',...
            {'saveObjectImpl','loadObjectImpl'}),...
            methodsSection('%% Simulink functions',...
            {'getDiscreteStateImpl','isInputSizeMutableImpl',...
            'getOutputSizeImpl','getIconImpl'},true),...
            methodsEnd,...
            newline,...
            methodsStaticStart,...
            methodsSection('%% Simulink customization functions',...
            {'getHeaderImpl','getPropertyGroupsImpl'},true),...
            methodsEnd,...
            classEnd];

            populateTemplate(newFile,simulinkTemplateCode,varargin{:});
        end

        function createBasicDiscreteEventSystem(varargin)
            newFile=matlab.desktop.editor.newDocument;

            basicTemplateCode=[...
            basicDiscreteEventClassStart(getClassName(newFile)),...
            propertiesSection,...
            methodsDesStart,...
            methodsSection('',{'entry'},true),...
            methodsEnd,...
            newline,...
            methodsStart,...
            methodsSection('',{'setupImpl','resetImpl'},true),...
            methodsEnd,...
            classEnd];

            populateTemplate(newFile,basicTemplateCode,varargin{:});
        end

        function newFile=createEnumeration(enumName,defaultValue,setValues,varargin)
            newFile=matlab.desktop.editor.newDocument;
            enumTemplateCode=[...
            basicEnumStart(enumName),...
            enumStart,...
            enumValues(defaultValue,setValues),...
            methodsEnd,...
            classEnd];
            populateTemplate(newFile,enumTemplateCode,varargin{:});
        end
    end
end

function code=basicEnumStart(enumName)

    code=sprintf([...
'classdef %s < int32'...
    ,'\n'],enumName);
end

function code=enumStart

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=[indent,sprintf('enumeration\n')];
end

function code=enumValues(defaultValue,setValues)
    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);

    setValues=string(setValues);
    setValues(setValues==defaultValue)=[];
    code=[indent,indent,sprintf('%s (%d)\n',defaultValue,0)];
    for kndx=1:setValues.length
        code=[code,indent,indent,sprintf('%s (%d)\n',setValues(kndx),kndx)];
    end
end

function populateTemplate(newFile,code,varargin)


    p=inputParser;
    p.addParameter('FilePathChangeFcn',[]);
    p.parse(varargin{:});
    results=p.Results;


    drawnow();
    newFile.appendText(code);
    drawnow();
    newFile.goToPositionInLine(1,1);
    drawnow();






    if isa(newFile.Editor,'matlab.desktop.editor.RtcEditorDocument')
        com.mathworks.system.editor.toolstrip.SystemLiveEditorToolstripTabContributor.showSystemObjectToolstrip(newFile.Editor.LiveEditorClient);%#ok<*JAPIMATHWORKS>
    elseif isa(newFile.Editor,'matlab.desktop.editor.MotwEditorDocument')


    else
        com.mathworks.system.editor.toolstrip.SystemEditorToolstripTabContributor.showSystemObjectToolstrip(newFile.Editor.JavaEditor);
    end
    drawnow();

    if~isempty(results.FilePathChangeFcn)
        matlab.system.editor.internal.DocumentAction.setFilePathChangeFcn(newFile.Filename,results.FilePathChangeFcn);
    end
end

function name=getClassName(document)
    [~,name]=fileparts(document.Filename);
end



function code=basicClassStart(name)

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=sprintf([...
'classdef %s < matlab.System\n'...
    ,indent,'%% %s Add summary here\n'...
    ,indent,'%%\n'...
    ,indent,'%% This template includes the minimum set of functions required\n'...
    ,indent,'%% to define a System object with discrete state.\n'...
    ,'\n'],name,name);
end

function code=basicDiscreteEventClassStart(name)

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=sprintf([...
'classdef %s < matlab.DiscreteEventSystem\n'...
    ,indent,'%% %s Add summary here\n'...
    ,indent,'%%\n'...
    ,indent,'%% This template includes the minimum set of functions required\n'...
    ,indent,'%% to define a Discrete Event System object.\n'...
    ,'\n'],name,name);
end

function code=advancedClassStart(name)

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=sprintf([...
'classdef %s < matlab.System\n'...
    ,indent,'%% %s Add summary here\n'...
    ,indent,'%%\n'...
    ,indent,'%% NOTE: When renaming the class name %s, the file name\n'...
    ,indent,'%% and constructor name must be updated to use the class name.\n'...
    ,indent,'%%\n'...
    ,indent,'%% This template includes most, but not all, possible properties,\n'...
    ,indent,'%% attributes, and methods that you can implement for a System object.\n'...
    ,'\n'],name,name,name);
end

function code=simulinkClassStart(name)

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=sprintf([...
'classdef (StrictDefaults) %s < matlab.System\n'...
    ,indent,'%% %s Add summary here\n'...
    ,indent,'%%\n'...
    ,indent,'%% NOTE: When renaming the class name %s, the file name\n'...
    ,indent,'%% and constructor name must be updated to use the class name.\n'...
    ,indent,'%%\n'...
    ,indent,'%% This template includes most, but not all, possible properties, attributes,\n'...
    ,indent,'%% and methods that you can implement for a System object in Simulink.\n'...
    ,'\n'],name,name,name);
end

function code=classEnd
    code=['end',newline];
end



function code=propertiesSection(includeNumeric)

    if nargin<1
        includeNumeric=false;
    end

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);


    code=sprintf([...
    indent,'%% Public, tunable properties\n'...
    ,indent,'properties\n'...
    ,'\n'...
    ,indent,'end\n'...
    ,'\n']);


    if includeNumeric
        code=[code,...
        sprintf([...
        indent,'%% Public, non-tunable properties\n'...
        ,indent,'properties (Nontunable)\n'...
        ,'\n'...
        ,indent,'end\n'...
        ,'\n'])];
    end


    code=[code,...
    sprintf([...
    indent,'properties (DiscreteState)\n'...
    ,'\n'...
    ,indent,'end\n'...
    ,'\n'...
    ,indent,'%% Pre-computed constants\n'...
    ,indent,'properties (Access = private)\n'...
    ,'\n'...
    ,indent,'end\n'...
    ,'\n'])];
end



function code=constructorMethod(name)

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent1x=repmat(' ',1,spacesPerIndent);
    indent2x=repmat(' ',1,2*spacesPerIndent);


    code=sprintf([...
    indent1x,'methods\n'...
    ,indent2x,'%% Constructor\n']);


    code=[code,...
    matlab.system.editor.internal.CodeTemplate.getSystemObjectMethodCode(...
    'System object constructor',2*spacesPerIndent,'SystemName',name)];


    code=[code,sprintf([indent1x,'end\n\n'])];
end



function code=methodsStart

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=[indent,sprintf('methods (Access = protected)\n')];
end

function code=methodsStaticStart

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=[indent,sprintf('methods (Static, Access = protected)\n')];
end

function code=methodsDesStart

    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=sprintf([...
    indent,'%% Discrete-event algorithms\n'...
    ,indent,'methods\n']);
end

function code=methodsSection(header,methodsList,suppressLastNewLine)

    if nargin<3
        suppressLastNewLine=false;
    end

    spacesPerIndent=2*matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    if isempty(header)
        code='';
    else
        code=[repmat(' ',1,spacesPerIndent),sprintf('%s\n',header)];
    end

    numMethods=numel(methodsList);
    for k=1:numMethods
        code=[code,...
        matlab.system.editor.internal.CodeTemplate.getSystemObjectMethodCode(methodsList{k},spacesPerIndent,...
        'InputNames',{'u'},...
        'OutputNames',{'y'})];
        if(k<numMethods)||~suppressLastNewLine
            code=[code,newline];%#ok<*AGROW>
        end
    end
end

function code=methodsEnd
    spacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
    indent=repmat(' ',1,spacesPerIndent);
    code=[indent,sprintf('end\n')];
end
