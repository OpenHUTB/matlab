classdef CodeTemplate






    properties(Constant)


        AllSystemObjectMethodNames=[getDESDocumentedMethodNames,getDESUndocumentedMethodNames,...
        getCoreDocumentedMethodNames,getCoreUndocumentedMethodNames];




        AllSystemObjectMethodNamesNoDES=[getCoreDocumentedMethodNames,getCoreUndocumentedMethodNames];
    end


    properties(Constant,Hidden)





        AllVisibleSystemObjectMethodNames=[getDESDocumentedMethodNames,getCoreDocumentedMethodNames];




        SystemObjectMethodNames=[getDESDocumentedMethodNames,{...
...
        'stepImpl',...
        'setupImpl',...
        'resetImpl',...
        'releaseImpl',...
...
        'System object constructor',...
...
        'validatePropertiesImpl',...
        'processTunedPropertiesImpl',...
        'isTunablePropertyDataTypeMutableImpl',...
        'isInactivePropertyImpl',...
        'getDiscreteStateImpl',...
        'isDiscreteStateSpecificationMutableImpl',...
...
        'validateInputsImpl',...
        'isInputSizeMutableImpl',...
        'isInputComplexityMutableImpl',...
        'isInputDataTypeMutableImpl',...
        'processInputSpecificationChangeImpl',...
        'getNumInputsImpl',...
        'getNumOutputsImpl',...
...
        'loadObjectImpl',...
        'saveObjectImpl',...
        'isDoneImpl',...
        'infoImpl',...
...
        'getIconImpl',...
        'getInputNamesImpl',...
        'getOutputNamesImpl',...
...
        'getOutputSizeImpl',...
        'getOutputDataTypeImpl',...
        'isOutputComplexImpl',...
        'isOutputFixedSizeImpl',...
        'getDiscreteStateSpecificationImpl',...
        'getSampleTimeImpl',...
        'getImpulseResponseLengthImpl',...
        'getInputDimensionConstraintImpl',...
        'getOutputDimensionConstraintImpl',...
...
        'updateImpl',...
        'outputImpl',...
        'isInputDirectFeedthroughImpl',...
...
        'supportsMultipleInstanceImpl',...
        'allowModelReferenceDiscreteSampleTimeInheritanceImpl',...
        'getGlobalNamesImpl',...
        'getSimulinkFunctionNamesImpl',...
...
        'isInputComplexityLockedImpl',...
        'isInputSizeLockedImpl',...
        'isOutputComplexityLockedImpl',...
        'isOutputSizeLockedImpl',...
        'processInputSizeChangeImpl',...
        }]




        SystemObjectStaticMethodNames={...
...
        'getHeaderImpl',...
        'getPropertyGroupsImpl',...
        'getSimulateUsingImpl',...
        'showSimulateUsingImpl',...
        'showFiSettingsImpl',...
        }


        SystemObjectMethodsWithSystemIOArguments={
        'validateInputsImpl','isInputDirectFeedthroughImpl','outputImpl',...
        'getInputNamesImpl','getOutputNamesImpl',...
        'getOutputSizeImpl','getOutputDataTypeImpl','isOutputComplexImpl','isOutputFixedSizeImpl'
        }


        DiscreteEventSystemSealedMethodNames={...
        'stepImpl','showFiSettingsImpl',...
        'isOutputFixedSizeImpl','supportsMultipleInstanceImpl',...
        'allowModelReferenceDiscreteSampleTimeInheritanceImpl',...
        'isInputDirectFeedthroughImpl','validateInputsImpl','outputImpl','updateImpl'}


        SystemObjectMethodsUsingStates={
        'resetImpl','getDiscreteStateImpl',...
        }
    end

    methods(Static)
        function names=discreteEventSystemClassSealedMethodNames






            persistent sealedNames;
            if isempty(sealedNames)

                mc=meta.class.fromName('matlab.DiscreteEventSystem');
                methodList=mc.MethodList;
                allSealedMethods=methodList([methodList.Sealed]);
                allSealedMethodNames={allSealedMethods.Name};


                allSysobjMethodNames=matlab.system.editor.internal.CodeTemplate.AllSystemObjectMethodNames;
                sealedNames=intersect(allSysobjMethodNames,allSealedMethodNames,'stable');
            end
            names=sealedNames;
        end

        function spacesPerIndent=getSpacesPerIndent
            s=settings;
            spacesPerIndent=double(s.matlab.editor.tab.IndentSize.ActiveValue);
        end

        function[access,attributes,mixin]=getSystemObjectMethodInfo(name)



            access='protected';
            attributes={};
            mixin='';

            staticMethodNames=matlab.system.editor.internal.CodeTemplate.SystemObjectStaticMethodNames;
            switch(name)
            case staticMethodNames
                attributes={'Static'};
            case 'isDoneImpl'
                mixin='matlab.system.mixin.FiniteSource';
            case{'System object constructor','setupEvents','generate',...
                'entry','exit','timer','iterate','blocked','destroy',...
                'testEntry','modified','resourceAcquired','resourceReleased'}
                access='public';
            end
        end

        function code=getSystemObjectMethodCode(name,initialSpaces,varargin)


            initialIndent=repmat(' ',1,initialSpaces);



            defaultSpacesPerIndent=matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent;
            defaultIndent=repmat(' ',1,defaultSpacesPerIndent);

            p=inputParser;
            p.addParameter('InputNames',{},@iscellstr);
            p.addParameter('OutputNames',{},@iscellstr);
            p.addParameter('UseOptionalInputs',false,@islogical);
            p.addParameter('UseOptionalOutputs',false,@islogical);
            p.addParameter('StateNames',{},@iscellstr);
            p.addParameter('IconImageFile','',@ischar);
            p.addParameter('UseTextIcon',false,@islogical);
            p.addParameter('SystemName','');
            p.KeepUnmatched=true;
            p.parse(varargin{:});
            args=p.Results;

            if isempty(args.InputNames)
                inputString='';
            else
                inputString=[',',strjoin(args.InputNames,',')];
            end

            switch(name)
            case 'System object constructor'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,['function obj = ',args.SystemName,'(varargin)'],...
                initialIndent,defaultIndent,'% Support name-value pair arguments when constructing object',...
                initialIndent,defaultIndent,'setProperties(obj,nargin,varargin{:})',...
                initialIndent,'end');
            case 'setupImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function setupImpl(obj)',...
                initialIndent,defaultIndent,'% Perform one-time calculations, such as computing constants',...
                initialIndent,'end');
            case 'stepImpl'
                if args.UseOptionalInputs
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function y = stepImpl(obj,varargin)',...
                    initialIndent,defaultIndent,'% Implement algorithm. Calculate y as a function of inputs and',...
                    initialIndent,defaultIndent,'% discrete states.',...
                    initialIndent,defaultIndent,'y = varargin{1};',...
                    initialIndent,'end');
                elseif args.UseOptionalOutputs
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function varargout = stepImpl(obj,u)',...
                    initialIndent,defaultIndent,'% Implement algorithm. Calculate outputs as a function of input',...
                    initialIndent,defaultIndent,'% u and discrete states.',...
                    initialIndent,defaultIndent,'varargout = cell(1, nargout);',...
                    initialIndent,defaultIndent,'varargout{1} = u;',...
                    initialIndent,'end');
                else
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function y = stepImpl(obj,u)',...
                    initialIndent,defaultIndent,'% Implement algorithm. Calculate y as a function of input u and',...
                    initialIndent,defaultIndent,'% discrete states.',...
                    initialIndent,defaultIndent,'y = u;',...
                    initialIndent,'end');
                end
            case 'resetImpl'
                code=sprintf('%s%s\n%s%s%s\n',...
                initialIndent,'function resetImpl(obj)',...
                initialIndent,defaultIndent,'% Initialize / reset discrete-state properties');
                stateNames=args.StateNames;
                for stateInd=1:numel(stateNames)
                    code=[code,sprintf('%s%sobj.%s = 0;\n',initialIndent,defaultIndent,stateNames{stateInd})];
                end
                code=[code,sprintf('%s%s\n',initialIndent,'end')];
            case 'releaseImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function releaseImpl(obj)',...
                initialIndent,defaultIndent,'% Release resources, such as file handles',...
                initialIndent,'end');
            case 'saveObjectImpl'
                code=sprintf('%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function s = saveObjectImpl(obj)',...
                initialIndent,defaultIndent,'% Set properties in structure s to values in object obj',...
                initialIndent,defaultIndent,'% Set public properties and states',...
                initialIndent,defaultIndent,'s = saveObjectImpl@matlab.System(obj);',...
                initialIndent,defaultIndent,'% Set private and protected properties',...
                initialIndent,defaultIndent,'%s.myproperty = obj.myproperty;',...
                initialIndent,'end');
            case 'loadObjectImpl'
                code=sprintf('%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function loadObjectImpl(obj,s,wasLocked)',...
                initialIndent,defaultIndent,'% Set properties in object obj to values in structure s',...
                initialIndent,defaultIndent,'% Set private and protected properties',...
                initialIndent,defaultIndent,'% obj.myproperty = s.myproperty; ',...
                initialIndent,defaultIndent,'% Set public properties and states',...
                initialIndent,defaultIndent,'loadObjectImpl@matlab.System(obj,s,wasLocked);',...
                initialIndent,'end');
            case 'validateInputsImpl'

                if isempty(inputString)
                    inputString=',u';
                end
                code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,sprintf('function validateInputsImpl(obj%s)',inputString),...
                initialIndent,defaultIndent,'% Validate inputs to the step method at initialization',...
                initialIndent,'end');
            case 'getDiscreteStateImpl'
                code=sprintf('%s%s\n%s%s%s\n',...
                initialIndent,'function ds = getDiscreteStateImpl(obj)',...
                initialIndent,defaultIndent,'% Return structure of properties with DiscreteState attribute');
                stateNames=args.StateNames;
                if isempty(stateNames)
                    code=[code,sprintf('%s%s%s\n',initialIndent,defaultIndent,'ds = struct([]);')];
                else
                    for stateInd=1:numel(stateNames)
                        name=stateNames{stateInd};
                        code=[code,sprintf('%s%sds.%s = obj.%s;\n',initialIndent,defaultIndent,name,name)];
                    end
                end
                code=[code,sprintf('%s%s\n',initialIndent,'end')];
            case 'isDiscreteStateSpecificationMutableImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isDiscreteStateSpecificationMutableImpl(obj)',...
                initialIndent,defaultIndent,'% Return false if states cannot change size, data type,',...
                initialIndent,defaultIndent,'% or complexity between calls to the System object',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'validatePropertiesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function validatePropertiesImpl(obj)',...
                initialIndent,defaultIndent,'% Validate related or interdependent property values',...
                initialIndent,'end');
            case 'processTunedPropertiesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function processTunedPropertiesImpl(obj)',...
                initialIndent,defaultIndent,'% Perform actions when tunable properties change',...
                initialIndent,defaultIndent,'% between calls to the System object',...
                initialIndent,'end');
            case 'isTunablePropertyDataTypeMutableImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isTunablePropertyDataTypeMutableImpl(obj)',...
                initialIndent,defaultIndent,'% Return false if tunable properties cannot change data type',...
                initialIndent,defaultIndent,'% between calls to the System object',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'isInputSizeMutableImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isInputSizeMutableImpl(obj,index)',...
                initialIndent,defaultIndent,'% Return false if input size cannot change',...
                initialIndent,defaultIndent,'% between calls to the System object',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'isInputComplexityMutableImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isInputComplexityMutableImpl(obj,index)',...
                initialIndent,defaultIndent,'% Return false if input complexity cannot change',...
                initialIndent,defaultIndent,'% between calls to the System object',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'isInputDataTypeMutableImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isInputDataTypeMutableImpl(obj,index)',...
                initialIndent,defaultIndent,'% Return false if input data type cannot change',...
                initialIndent,defaultIndent,'% between calls to the System object',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'processInputSpecificationChangeImpl'
                if args.UseOptionalInputs
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function processInputSpecificationChangeImpl(obj,varargin)',...
                    initialIndent,defaultIndent,'% Perform actions when the input size, data type,',...
                    initialIndent,defaultIndent,'% or complexity changes',...
                    initialIndent,'end');
                else
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function processInputSpecificationChangeImpl(obj,u)',...
                    initialIndent,defaultIndent,'% Perform actions when the input size, data type,',...
                    initialIndent,defaultIndent,'% or complexity changes',...
                    initialIndent,'end');
                end
            case 'isInactivePropertyImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = isInactivePropertyImpl(obj,prop)',...
                initialIndent,defaultIndent,'% Return false if property is visible based on object ',...
                initialIndent,defaultIndent,'% configuration, for the command line and System block dialog',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'getNumInputsImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function num = getNumInputsImpl(obj)',...
                initialIndent,defaultIndent,'% Define total number of inputs for system with optional inputs',...
                initialIndent,defaultIndent,'num = 1;',...
                initialIndent,defaultIndent,'% if obj.UseOptionalInput',...
                initialIndent,defaultIndent,'%',defaultIndent,' num = 2;',...
                initialIndent,defaultIndent,'% end',...
                initialIndent,'end');
            case 'getNumOutputsImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function num = getNumOutputsImpl(obj)',...
                initialIndent,defaultIndent,'% Define total number of outputs for system with optional',...
                initialIndent,defaultIndent,'% outputs',...
                initialIndent,defaultIndent,'num = 1;',...
                initialIndent,defaultIndent,'% if obj.UseOptionalOutput',...
                initialIndent,defaultIndent,'%',defaultIndent,' num = 2;',...
                initialIndent,defaultIndent,'% end',...
                initialIndent,'end');
            case 'isDoneImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function status = isDoneImpl(obj)',...
                initialIndent,defaultIndent,'% Return true if end of data has been reached',...
                initialIndent,defaultIndent,'status = false;',...
                initialIndent,'end');
            case 'infoImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function s = infoImpl(obj)',...
                initialIndent,defaultIndent,'% Return structure of information about object obj',...
                initialIndent,defaultIndent,'s = struct([]);',...
                initialIndent,'end');
            case 'getIconImpl'
                if args.UseTextIcon
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function icon = getIconImpl(~)',...
                    initialIndent,defaultIndent,'% Define icon for System block',...
                    initialIndent,defaultIndent,'icon = "My System";',...
                    initialIndent,defaultIndent,'% icon = ["My","System"]; % Example: multi-line text icon',...
                    initialIndent,'end');
                elseif~isempty(args.IconImageFile)
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s%s%s\n%s%s\n',...
                    initialIndent,'function icon = getIconImpl(~)',...
                    initialIndent,defaultIndent,'% Define icon for System block',...
                    initialIndent,defaultIndent,'icon = matlab.system.display.Icon("',args.IconImageFile,'");',...
                    initialIndent,'end');
                else
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function icon = getIconImpl(obj)',...
                    initialIndent,defaultIndent,'% Define icon for System block',...
                    initialIndent,defaultIndent,'icon = mfilename("class"); % Use class name',...
                    initialIndent,defaultIndent,'% icon = "My System"; % Example: text icon',...
                    initialIndent,defaultIndent,'% icon = ["My","System"]; % Example: multi-line text icon',...
                    initialIndent,defaultIndent,'% icon = matlab.system.display.Icon("myicon.jpg"); % Example: image file icon',...
                    initialIndent,'end');
                end
            case 'getInputNamesImpl'
                code=getIONamesMethodCode(args.InputNames,initialIndent,defaultIndent,...
                'getInputNamesImpl','varargin','Return input port names for System block','u');
            case 'getOutputNamesImpl'
                code=getIONamesMethodCode(args.OutputNames,initialIndent,defaultIndent,...
                'getOutputNamesImpl','varargout','Return output port names for System block','y');
            case 'getHeaderImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function header = getHeaderImpl',...
                initialIndent,defaultIndent,'% Define header panel for System block dialog',...
                initialIndent,defaultIndent,'header = matlab.system.display.Header(mfilename("class"));',...
                initialIndent,'end');
            case 'getPropertyGroupsImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function group = getPropertyGroupsImpl',...
                initialIndent,defaultIndent,'% Define property section(s) for System block dialog',...
                initialIndent,defaultIndent,'group = matlab.system.display.Section(mfilename("class"));',...
                initialIndent,'end');
            case 'getSimulateUsingImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function simMode = getSimulateUsingImpl',...
                initialIndent,defaultIndent,'% Return only allowed simulation mode in System block dialog',...
                initialIndent,defaultIndent,'simMode = "Interpreted execution";',...
                initialIndent,'end');
            case 'showSimulateUsingImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = showSimulateUsingImpl',...
                initialIndent,defaultIndent,'% Return false if simulation mode hidden in System block dialog',...
                initialIndent,defaultIndent,'flag = false;',...
                initialIndent,'end');
            case 'supportsMultipleInstanceImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = supportsMultipleInstanceImpl(obj)',...
                initialIndent,defaultIndent,'% Return true if System block can be used inside a For Each',...
                initialIndent,defaultIndent,'% subsystem, which requires multiple object instances',...
                initialIndent,defaultIndent,'flag = true;',...
                initialIndent,'end');
            case 'getOutputSizeImpl'
                code=getPropagatorMethodCode(args.OutputNames,initialIndent,defaultIndent,...
                'getOutputSizeImpl','Return size for each output port','size','[1 1]','propagatedInputSize');
            case 'getOutputDataTypeImpl'
                code=getPropagatorMethodCode(args.OutputNames,initialIndent,defaultIndent,...
                'getOutputDataTypeImpl','Return data type for each output port','data type','"double"','propagatedInputDataType');
            case 'isOutputComplexImpl'
                code=getPropagatorMethodCode(args.OutputNames,initialIndent,defaultIndent,...
                'isOutputComplexImpl','Return true for each output port with complex data','complexity','true','propagatedInputComplexity');
            case 'isOutputFixedSizeImpl'
                code=getPropagatorMethodCode(args.OutputNames,initialIndent,defaultIndent,...
                'isOutputFixedSizeImpl','Return true for each output port with fixed size','fixed-size status','true','propagatedInputFixedSize');
            case 'getDiscreteStateSpecificationImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [sz,dt,cp] = getDiscreteStateSpecificationImpl(obj,name)',...
                initialIndent,defaultIndent,'% Return size, data type, and complexity of discrete-state',...
                initialIndent,defaultIndent,'% specified in name',...
                initialIndent,defaultIndent,'sz = [1 1];',...
                initialIndent,defaultIndent,'dt = "double";',...
                initialIndent,defaultIndent,'cp = false;',...
                initialIndent,'end');
            case 'getSampleTimeImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n%s%s%s%s%s\n%s%s\n',...
                initialIndent,'function sts = getSampleTimeImpl(obj)',...
                initialIndent,defaultIndent,'% Define sample time type and parameters',...
                initialIndent,defaultIndent,'sts = obj.createSampleTime("Type", "Inherited");',...
                initialIndent,defaultIndent,'% Example: specify discrete sample time',...
                initialIndent,defaultIndent,'% sts = obj.createSampleTime("Type", "Discrete", ...',...
                initialIndent,defaultIndent,'% ',defaultIndent,'"SampleTime", 1);',...
                initialIndent,'end');
            case 'getImpulseResponseLengthImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function len = getImpulseResponseLengthImpl(obj)',...
                initialIndent,defaultIndent,'% Return impulse response length as the number of input samples',...
                initialIndent,defaultIndent,'% that affect any output of the block. You may be able to use',...
                initialIndent,defaultIndent,'% the following functions/tools, if applicable, to determine',...
                initialIndent,defaultIndent,'% the impulse response length of a block: impz, impzlength,',...
                initialIndent,defaultIndent,'% fvtool, tfestimate, dspunfold. Please consider relationship',...
                initialIndent,defaultIndent,'% between sizes of input and output data when returning the ',...
                initialIndent,defaultIndent,'% impulse response length.',...
                initialIndent,defaultIndent,'len = Inf; % System object with infinite impulse response length',...
                initialIndent,defaultIndent,'% len = 0; % System object with zero impulse response length',...
                initialIndent,'end');
            case 'getInputDimensionConstraintImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function dc = getInputDimensionConstraintImpl(obj,index)',...
                initialIndent,defaultIndent,'% Define input dimension constraint',...
                initialIndent,defaultIndent,'dc = inputDimensionConstraint(obj);',...
                initialIndent,defaultIndent,'% dc = inputDimensionConstraint(obj, "MinimumSize", 2, "Concatenable", true);',...
                initialIndent,'end');
            case 'getOutputDimensionConstraintImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function dc = getOutputDimensionConstraintImpl(obj,index)',...
                initialIndent,defaultIndent,'% Define output dimension constraint',...
                initialIndent,defaultIndent,'dc = outputDimensionConstraint(obj);',...
                initialIndent,defaultIndent,'% dc = outputDimensionConstraint(obj, "MinimumSize", 1);',...
                initialIndent,'end');
            case 'isInputDirectFeedthroughImpl'
                if isempty(inputString)
                    inputString=',u';
                end
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,sprintf('function flag = isInputDirectFeedthroughImpl(obj%s)',inputString),...
                initialIndent,defaultIndent,'% Return true if input u is needed to calculate the output at',...
                initialIndent,defaultIndent,'% the same time',...
                initialIndent,defaultIndent,'flag = true;',...
                initialIndent,'end');
            case 'outputImpl'
                if args.UseOptionalOutputs
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,sprintf('function varargout = outputImpl(obj%s)',inputString),...
                    initialIndent,defaultIndent,'% Calculate outputs as a function of discrete states and direct',...
                    initialIndent,defaultIndent,'% feedthrough inputs',...
                    initialIndent,'end');
                else
                    code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,sprintf('function y = outputImpl(obj%s)',inputString),...
                    initialIndent,defaultIndent,'% Calculate output y as a function of discrete states and',...
                    initialIndent,defaultIndent,'% direct feedthrough inputs',...
                    initialIndent,'end');
                end
            case 'updateImpl'
                if args.UseOptionalInputs
                    code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function updateImpl(obj,varargin)',...
                    initialIndent,defaultIndent,'% Update discrete states as a function of inputs',...
                    initialIndent,'end');
                else
                    code=sprintf('%s%s\n%s%s%s\n%s%s\n',...
                    initialIndent,'function updateImpl(obj,u)',...
                    initialIndent,defaultIndent,'% Update discrete states as a function of input u',...
                    initialIndent,'end');
                end
            case 'showFiSettingsImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = showFiSettingsImpl',...
                initialIndent,defaultIndent,'% Return true if fixed-point tab appears in System block dialog',...
                initialIndent,defaultIndent,'flag = true;',...
                initialIndent,'end');
            case 'allowModelReferenceDiscreteSampleTimeInheritanceImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function flag = allowModelReferenceDiscreteSampleTimeInheritanceImpl(obj)',...
                initialIndent,defaultIndent,'% Return true if sample time inheritance is allowed in Model',...
                initialIndent,defaultIndent,'% blocks',...
                initialIndent,defaultIndent,'flag = true;',...
                initialIndent,'end');
            case 'getGlobalNamesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function names = getGlobalNamesImpl(obj)',...
                initialIndent,defaultIndent,'% Return names of global variables defined in Data Store Memory',...
                initialIndent,defaultIndent,'% blocks',...
                initialIndent,defaultIndent,'names = strings(0);',...
                initialIndent,'end');
            case 'getSimulinkFunctionNamesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function names = getSimulinkFunctionNamesImpl(obj)',...
                initialIndent,defaultIndent,'% Return names of functions that will call Simulink',...
                initialIndent,defaultIndent,'% functions. For example, ["mySimulinkFunction", "myStateflowFunction"]',...
                initialIndent,defaultIndent,'names = "myFunction";',...
                initialIndent,'end');
            case 'getEntityTypesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function entityTypes = getEntityTypesImpl(obj)',...
                initialIndent,defaultIndent,'% Return entity type structures with fields specifying',...
                initialIndent,defaultIndent,'% properties such as name, size, data type, and complexity',...
                initialIndent,defaultIndent,'entityTypes = obj.entityType(''entity'');',...
                initialIndent,'end');
            case 'getEntityStorageImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [storageSpec,I,O] = getEntityStorageImpl(obj)',...
                initialIndent,defaultIndent,'% Return entity storage specification and connectivity',...
                initialIndent,defaultIndent,'% information from input ports and output ports to storage',...
                initialIndent,defaultIndent,'storageSpec = obj.queueFIFO(''entity'', 10);',...
                initialIndent,defaultIndent,'I = 1;',...
                initialIndent,defaultIndent,'O = 1;',...
                initialIndent,'end');
            case 'getEntityPortsImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [inputTypes,outputTypes] = getEntityPortsImpl(obj)',...
                initialIndent,defaultIndent,'% Specify entity input and output ports. Return entity types at',...
                initialIndent,defaultIndent,'% a port as strings in a cell array. Use empty string to',...
                initialIndent,defaultIndent,'% indicate a data port.',...
                initialIndent,defaultIndent,'inputTypes = {''entity''};',...
                initialIndent,defaultIndent,'outputTypes = {''entity''};',...
                initialIndent,'end');
            case 'getResourceNamesImpl'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function resourceNames = getResourceNamesImpl(obj)',...
                initialIndent,defaultIndent,'% Defines resource pool names from which an entity in this',...
                initialIndent,defaultIndent,'% discrete event system can acquire resources from.',...
                initialIndent,defaultIndent,'resourceNames = obj.resourceType(''entity'', {''Resource1''});',...
                initialIndent,'end');
            case 'setupEvents'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function events = setupEvents(obj)',...
                initialIndent,defaultIndent,'% Set up entity generation events at start of simulation',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'generate'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = generate(obj,storage,entity,tag)',...
                initialIndent,defaultIndent,'% Specify event actions when entity generated in storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'entry'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = entry(obj,storage,entity,source)',...
                initialIndent,defaultIndent,'% Specify event actions when entity enters storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'exit'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function events = exit(obj,storage,entity,destination)',...
                initialIndent,defaultIndent,'% Specify event actions when entity exits from storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'timer'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = timer(obj,storage,entity,tag)',...
                initialIndent,defaultIndent,'% Specify event actions when entity timer completed',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'iterate'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events,next] = iterate(obj,storage,entity,tag,position)',...
                initialIndent,defaultIndent,'% Specify event actions when entity iterated in storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,defaultIndent,'next = true;',...
                initialIndent,'end');
            case 'blocked'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = blocked(obj,storage,entity,destination)',...
                initialIndent,defaultIndent,'% Specify event actions when entity blocked from storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'destroy'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function events = destroy(obj,storage,entity)',...
                initialIndent,defaultIndent,'% Specify event actions when entity destroyed in storage',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'testEntry'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function accept = testEntry(obj,storage,entity,source)',...
                initialIndent,defaultIndent,'% Specify event actions when entity wants to enter a storage',...
                initialIndent,defaultIndent,'accept = true;',...
                initialIndent,'end');
            case 'modified'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function events = modified(obj,storage,entity)',...
                initialIndent,defaultIndent,'% specifies event actions of the object after an entity is modified',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'resourceAcquired'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = resourceAcquired(obj,storage,entity,resources,tag)',...
                initialIndent,defaultIndent,'% specifies event action upon successful acquisition of a resource',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            case 'resourceReleased'
                code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
                initialIndent,'function [entity,events] = resourceReleased(obj,storage,entity,resources,tag)',...
                initialIndent,defaultIndent,'% specifies event actions upon successful resource release',...
                initialIndent,defaultIndent,'events = [];',...
                initialIndent,'end');
            end
        end

        function code=getNewPropertyBlockCode(initialSpaces,name,args)

            initialIndent=repmat(' ',1,initialSpaces);
            defaultIndent=repmat(' ',1,matlab.system.editor.internal.CodeTemplate.getSpacesPerIndent);



            [attributesCode,mcosValidators]=matlab.system.editor.internal.CodeTemplate.getPropertyAttributesCode(args.SetAccess,args.GetAccess,args.Attributes);
            if isempty(attributesCode)
                code=sprintf('%sproperties\n%s%s%s%s\n%send\n',...
                initialIndent,initialIndent,defaultIndent,name,mcosValidators,initialIndent);
            else
                code=sprintf('%sproperties (%s)\n%s%s%s%s\n%send\n',...
                initialIndent,attributesCode,initialIndent,defaultIndent,name,mcosValidators,initialIndent);
            end
        end

        function[code,mcosValidators]=getPropertyAttributesCode(setAccess,getAccess,attributes)






            validatorAttribute=intersect(attributes,{'PositiveInteger';'Logical'});

            switch(string(validatorAttribute))
            case 'PositiveInteger'
                mcosValidators=' (1, 1) {mustBePositive, mustBeInteger} = 1 ';
            case 'Logical'
                mcosValidators=' (1, 1) logical ';
            otherwise
                mcosValidators='';
            end
            attributes=setdiff(attributes,validatorAttribute);

            if ismember('Constant',attributes)
                if strcmp(getAccess,'public')
                    code='';
                else
                    code=sprintf('GetAccess = %s',getAccess);
                end
            elseif ismember('DiscreteState',attributes)
                if strcmp(setAccess,'public')
                    code='';
                else
                    code=sprintf('SetAccess = %s',setAccess);
                end
            elseif strcmp(setAccess,'public')&&strcmp(getAccess,'public')
                code='';
            elseif strcmp(setAccess,getAccess)
                code=sprintf('Access = %s',setAccess);
            elseif strcmp(setAccess,'public')
                code=sprintf('GetAccess = %s',getAccess);
            elseif strcmp(getAccess,'public')
                code=sprintf('SetAccess = %s',setAccess);
            else
                code=sprintf('SetAccess = %s, GetAccess = %s',setAccess,getAccess);
            end


            for k=1:numel(attributes)
                attribute=attributes{k};
                if isempty(code)
                    code=attribute;
                else
                    code=sprintf('%s, %s',code,attribute);
                end
            end
        end

        function code=getNewMethodBlockCode(initialSpaces,methodCode,args)

            initialIndent=repmat(' ',1,initialSpaces);
            attributesCode=matlab.system.editor.internal.CodeTemplate.getMethodAttributesCode(args.Access,args.Attributes);
            if isempty(attributesCode)
                code=sprintf('%smethods\n%s%send\n',initialIndent,methodCode,initialIndent);
            else
                code=sprintf('%smethods (%s)\n%s%send\n',initialIndent,attributesCode,methodCode,initialIndent);
            end
        end

        function code=getMethodAttributesCode(access,attributes)

            code='';


            if~strcmp(access,'public')
                code=sprintf('Access = %s',access);
            end


            for k=1:numel(attributes)
                attribute=attributes{k};
                if isempty(code)
                    code=attribute;
                else
                    code=sprintf('%s, %s',code,attribute);
                end
            end
        end
    end
end

function code=getIONamesMethodCode(outputNames,initialIndent,defaultIndent,...
    methodName,varargsInput,methodDescription,defaultValue)

    numOutputs=numel(outputNames);
    if numOutputs==0||(numOutputs==1&&~strcmp(outputNames{1},varargsInput))

        code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s\n',...
        initialIndent,sprintf('function name = %s(obj)',methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription),...
        initialIndent,defaultIndent,sprintf('name = ''%s'';',defaultValue),...
        initialIndent,'end');
    elseif numOutputs==1

        code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s%s\n%s%s%s\n%s%s\n',...
        initialIndent,sprintf('function varargout = %s(obj)',methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription),...
        initialIndent,defaultIndent,'varargout = cell(1,nargout);',...
        initialIndent,defaultIndent,'for k = 1:nargout',...
        initialIndent,defaultIndent,defaultIndent,sprintf('varargout{k} = sprintf(''%s%%u'',k);',defaultValue),...
        initialIndent,defaultIndent,'end',...
        initialIndent,'end');
    else



        headerCode='[name,';
        bodyCode=sprintf('%s%s%s\n',...
        initialIndent,defaultIndent,sprintf('name = ''%s'';',defaultValue));
        hasVarargout=false;
        numRequiredOutputs=1;
        for k=2:numOutputs
            if strcmp(outputNames{k},varargsInput)
                headerCode=[headerCode,'varargout'];%#ok<*AGROW>
                hasVarargout=true;
            else
                numRequiredOutputs=numRequiredOutputs+1;
                outputName=sprintf('name%u',k);
                headerCode=[headerCode,outputName];
                bodyCode=[bodyCode,sprintf('%s%s%s%s\n',...
                initialIndent,defaultIndent,outputName,sprintf(' = ''%s%u'';',defaultValue,k))];
            end

            if k<numOutputs
                headerCode=[headerCode,','];
            else
                headerCode=[headerCode,']'];
            end
        end
        code=[sprintf('%s%s\n%s%s%s\n',...
        initialIndent,sprintf('function %s = %s(obj)',headerCode,methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription)),...
        bodyCode];


        if hasVarargout
            code=[code,sprintf('\n%s%s%s\n%s%s%s\n%s%s%s%s\n%s%s%s\n%s%s\n',...
            initialIndent,defaultIndent,sprintf('varargout = cell(1,nargout-%u);',numRequiredOutputs),...
            initialIndent,defaultIndent,sprintf('for k = %u:nargout',numRequiredOutputs+1),...
            initialIndent,defaultIndent,defaultIndent,sprintf('varargout{k-%u} = sprintf(''%s%%u'',k);',numRequiredOutputs,defaultValue),...
            initialIndent,defaultIndent,'end',...
            initialIndent,'end')];
        else
            code=[code,sprintf('%s%s\n',...
            initialIndent,'end')];
        end
    end
end

function code=getPropagatorMethodCode(outputNames,initialIndent,defaultIndent,...
    methodName,methodDescription,attribute,defaultValue,utilityMethodName)

    numOutputs=numel(outputNames);
    if numOutputs==0||(numOutputs==1&&~strcmp(outputNames{1},'varargout'))

        code=sprintf('%s%s\n%s%s%s\n%s%s%s\n\n%s%s%s\n%s%s%s\n%s%s\n',...
        initialIndent,sprintf('function out = %s(obj)',methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription),...
        initialIndent,defaultIndent,sprintf('out = %s;',defaultValue),...
        initialIndent,defaultIndent,sprintf('%% Example: inherit %s from first input port',attribute),...
        initialIndent,defaultIndent,sprintf('%% out = %s(obj,1);',utilityMethodName),...
        initialIndent,'end');
    elseif numOutputs==1

        code=sprintf('%s%s\n%s%s%s\n%s%s%s\n%s%s%s\n%s%s%s%s\n\n%s%s%s%s\n%s%s%s%s\n%s%s%s\n%s%s\n',...
        initialIndent,sprintf('function varargout = %s(obj)',methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription),...
        initialIndent,defaultIndent,'varargout = cell(1,nargout);',...
        initialIndent,defaultIndent,'for k = 1:nargout',...
        initialIndent,defaultIndent,defaultIndent,sprintf('varargout{k} = %s;',defaultValue),...
        initialIndent,defaultIndent,defaultIndent,sprintf('%% Example: inherit %s from first input port',attribute),...
        initialIndent,defaultIndent,defaultIndent,sprintf('%% varargout{k} = %s(obj,1);',utilityMethodName),...
        initialIndent,defaultIndent,'end',...
        initialIndent,'end');
    else



        headerCode='[out,';
        bodyCode=sprintf('%s%s%s\n',...
        initialIndent,defaultIndent,sprintf('out = %s;',defaultValue));
        hasVarargout=false;
        numRequiredOutputs=1;
        for k=2:numOutputs
            if strcmp(outputNames{k},'varargout')
                headerCode=[headerCode,'varargout'];%#ok<*AGROW>
                hasVarargout=true;
            else
                numRequiredOutputs=numRequiredOutputs+1;
                outputName=sprintf('out%u',k);
                headerCode=[headerCode,outputName];
                bodyCode=[bodyCode,sprintf('%s%s%s%s\n',...
                initialIndent,defaultIndent,outputName,sprintf(' = %s;',defaultValue))];
            end

            if k<numOutputs
                headerCode=[headerCode,','];
            else
                headerCode=[headerCode,']'];
            end
        end
        code=[sprintf('%s%s\n%s%s%s\n',...
        initialIndent,sprintf('function %s = %s(obj)',headerCode,methodName),...
        initialIndent,defaultIndent,sprintf('%% %s',methodDescription)),...
        bodyCode];


        if hasVarargout
            code=[code,sprintf('\n%s%s%s\n%s%s%s\n%s%s%s%s\n\n%s%s%s%s\n%s%s%s%s\n%s%s%s\n%s%s\n',...
            initialIndent,defaultIndent,sprintf('varargout = cell(1,nargout-%u);',numRequiredOutputs),...
            initialIndent,defaultIndent,sprintf('for k = %u:nargout',numRequiredOutputs+1),...
            initialIndent,defaultIndent,defaultIndent,sprintf('varargout{k-%u} = %s;',numRequiredOutputs,defaultValue),...
            initialIndent,defaultIndent,defaultIndent,sprintf('%% Example: inherit %s from first input port',attribute),...
            initialIndent,defaultIndent,defaultIndent,sprintf('%% varargout{k-%u} = %s(obj,1);',numRequiredOutputs,utilityMethodName),...
            initialIndent,defaultIndent,'end',...
            initialIndent,'end')];
        else
            code=[code,sprintf('\n%s%s%s\n%s%s%s\n%s%s\n',...
            initialIndent,defaultIndent,sprintf('%% Example: inherit %s from first input port',attribute),...
            initialIndent,defaultIndent,sprintf('%% out = %s(obj,1);',utilityMethodName),...
            initialIndent,'end')];
        end
    end
end

function methods=getCoreDocumentedMethodNames

    methods={...
...
    'stepImpl',...
    'setupImpl',...
    'resetImpl',...
    'releaseImpl',...
...
    'System object constructor',...
...
    'validatePropertiesImpl',...
    'processTunedPropertiesImpl',...
    'isTunablePropertyDataTypeMutableImpl',...
    'isInactivePropertyImpl',...
    'getDiscreteStateImpl',...
    'isDiscreteStateSpecificationMutableImpl',...
...
    'validateInputsImpl',...
    'isInputSizeMutableImpl',...
    'isInputComplexityMutableImpl',...
    'isInputDataTypeMutableImpl',...
    'processInputSpecificationChangeImpl',...
    'getNumInputsImpl',...
    'getNumOutputsImpl',...
...
    'loadObjectImpl',...
    'saveObjectImpl',...
    'isDoneImpl',...
    'infoImpl',...
...
    'getHeaderImpl',...
    'getPropertyGroupsImpl',...
    'getSimulateUsingImpl',...
    'showSimulateUsingImpl',...
    'showFiSettingsImpl',...
...
    'getIconImpl',...
    'getInputNamesImpl',...
    'getOutputNamesImpl',...
...
    'getOutputSizeImpl',...
    'getOutputDataTypeImpl',...
    'isOutputComplexImpl',...
    'isOutputFixedSizeImpl',...
    'getDiscreteStateSpecificationImpl',...
    'getSampleTimeImpl',...
    'getImpulseResponseLengthImpl',...
    'getInputDimensionConstraintImpl',...
    'getOutputDimensionConstraintImpl',...
...
    'updateImpl',...
    'outputImpl',...
    'isInputDirectFeedthroughImpl',...
...
    'supportsMultipleInstanceImpl',...
    'allowModelReferenceDiscreteSampleTimeInheritanceImpl',...
    'getGlobalNamesImpl',...
'getSimulinkFunctionNamesImpl'
    };

end

function methods=getCoreUndocumentedMethodNames

    methods={};
end

function methods=getDESDocumentedMethodNames

    methods={...
...
    'getEntityTypesImpl',...
    'getEntityPortsImpl',...
    'getEntityStorageImpl',...
    'getResourceNamesImpl',...
...
    'setupEvents',...
    'generate',...
    'entry',...
    'exit',...
    'timer',...
    'iterate',...
    'blocked',...
    'destroy',...
    'testEntry',...
    'modified',...
    'resourceAcquired',...
'resourceReleased'
    };
end

function methods=getDESUndocumentedMethodNames

    methods={};
end
