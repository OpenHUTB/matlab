classdef FigureToolstripActionFactory < handle

    properties ( Access = private, Constant )
        ActionMapping = {
            {  ...
            char( "motw.embeddedfigures.grid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "Grid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.GRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "on", "on", "on" } )
            },  ...
            {  ...
            char( "motw.embeddedfigures.xgrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "XGrid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.XGRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "on", "off", "off" },  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.ygrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "YGrid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.YGRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "off", "on", "off" },  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.zgrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "ZGrid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.ZGRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "off", "off", "on" },  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.rgrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "RGrid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.RGRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "on", "off" },  ...
            'polaraxes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.thetagrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "ThetaGrid", "on" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.THETAGRID_ADDED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "off", "on" },  ...
            'polaraxes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.removegrid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localGrid( ax, "Grid", "off" ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.GRID_REMOVED,  ...
            @( ax, opts )matlab.graphics.controls.selectors.GridSelector( ax, opts ),  ...
            { "off", "off", "off" } )
            },  ...
            {  ...
            char( "motw.embeddedfigures.title" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localLabel( ax, 'Title' ),  ...
            false,  ...
            "",  ...
            @( ax )matlab.graphics.controls.selectors.TitleSelector( ax ) )
            },  ...
            {  ...
            char( "motw.embeddedfigures.xlabel" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localLabel( ax, 'XLabel' ),  ...
            false,  ...
            "",  ...
            @( ax )matlab.graphics.controls.selectors.XLabelSelector( ax ),  ...
            [  ],  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.ylabel" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localLabel( ax, 'YLabel' ),  ...
            false,  ...
            "",  ...
            @( ax )matlab.graphics.controls.selectors.YLabelSelector( ax ),  ...
            [  ],  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.zlabel" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localLabel( ax, 'ZLabel' ),  ...
            false,  ...
            "",  ...
            @( ax )matlab.graphics.controls.selectors.ZLabelSelector( ax ),  ...
            [  ],  ...
            'axes' )
            },  ...
            {  ...
            char( "motw.embeddedfigures.legend" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localAxesProp( ax, 'Legend', 'on' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LEGEND_ADDED,  ...
            @( ax )matlab.graphics.controls.selectors.LegendSelector( ax ) )
            },  ...
            {  ...
            char( "motw.embeddedfigures.removelegend" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localAxesProp( ax, 'Legend', 'off' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LEGEND_REMOVED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.colorbar" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localAxesProp( ax, 'Colorbar', 'on' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.COLORBAR_ADDED,  ...
            @( ax )matlab.graphics.controls.selectors.ColorbarSelector( ax ) )
            },  ...
            {  ...
            char( "motw.embeddedfigures.removecolorbar" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Axes',  ...
            @( ax, ~ )localAxesProp( ax, 'Colorbar', 'off' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.savefigure" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )filemenufcn( fig, 'FileSave' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.saveasfigure" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )filemenufcn( fig, 'FileSaveAs' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.basicfit" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localBasicFitting( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.datastats" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )basicfitdatastat( 'bfit', fig, 'ds' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.datalink" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )linkdata( fig, 'showdialog', 4 ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, options )matlab.graphics.internal.toolstrip.plotEditHelper( fig, options ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.close" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.plotEditHelper( fig, 'off' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.colormapeditor" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localColormapFcn( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.inspector" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )matlab.graphics.internal.toolstrip.inspectorHelper( selObj ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'show' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.close" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'close' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.orbit" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'orbit', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.pan" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'pan', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.dollyhv" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'dollyhv', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.dollyfb" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'dollyfb', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.zoom" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'zoom', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.roll" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, val )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'roll', val ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.resetx" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'x' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.resety" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'y' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.resetz" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'z' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.resetnone" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'none' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.togglescenelight" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'togglescenelight' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.orthographic" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'orthographic' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.perspective" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'perspective' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.resetcameralight" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'resetcameralight' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.camera.stop" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.cameratoolbarHelper( fig, 'stop' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.annotations.textarrow" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localAnnotation( fig, 'TextArrow' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.annotations.arrow" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localAnnotation( fig, 'Arrow' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.annotations.doublearrow" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localAnnotation( fig, 'DoubleArrow' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.annotations.line" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localAnnotation( fig, 'Line' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.linkedplot" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )locallinkedplotcallback( fig, true ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.copyfigure" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )copygraphics( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.font" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, value )localFontType( fig, value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.FONT_NAME )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.text.font" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selectedObj, value )localPropFcn( selectedObj, 'FontName', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.scaleUpFont" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, value )localFontIncrease( fig ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.FONT_INCREASE )
            },  ...
            {  ...
            char( "motw.embeddedfigures.scaleDownFont" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localFontDecrease( fig ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.FONT_DECREASE )
            },  ...
            {  ...
            char( "motw.embeddedfigures.undo1" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localUndo( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.redo1" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )localRedo( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.export" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.exportHelper( fig, '' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.exportPDF" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.exportHelper( fig, 'pdf' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.exportPNG" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )matlab.graphics.internal.toolstrip.exportHelper( fig, 'png' ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.print" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, ~ )printdlg( fig ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.bold" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'FontWeight', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.italics" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'FontAngle', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.alignleft" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'left', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.aligncenter" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'center', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.alignright" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'right', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.text.fontColor" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'FontColor', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.COLOR_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.backgroundColor" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'BackgroundColor', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.COLOR_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.edgeColor" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'EdgeColor', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.COLOR_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineStyle.solid" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'LineStyle', '-' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineStyle.dashed" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'LineStyle', '--' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineStyle.dotted" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'LineStyle', ':' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineStyle.dashdot" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'LineStyle', '-.' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineStyle.none" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'LineStyle', 'none' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.all.lineWidth" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, value )localAllLinePropFcn( fig, 'LineWidth', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_WIDTH_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.lineWidth" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localLinePropFcn( selObj, 'LineWidth', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.plotedit.fontSize" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, value )localPropFcn( selObj, 'FontSize', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.TEXT_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.all.lineColor" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, value )localAllLinePropFcn( fig, 'Color', value ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_COLOR_EDITED )
            } ...
            , {  ...
            char( "motw.embeddedfigures.showHideCode" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Figure',  ...
            @( fig, value )localShowHideCode( fig, value ),  ...
            false )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.circle" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'o' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.plus" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '+' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.asterisk" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '*' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.point" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '.' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.cross" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'x' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.horizontal" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '_' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.vertical" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '|' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.square" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 's' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.diamond" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'd' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.up" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '^' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.down" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'v' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.left" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '<' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.right" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', '>' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.pentagram" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'p' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.hexagram" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'h' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED ) ...
            },  ...
            {  ...
            char( "motw.embeddedfigures.lineMarker.none" ),  ...
            matlab.graphics.internal.toolstrip.FigureToolstripActionFactory.createRegistration(  ...
            'Selection',  ...
            @( selObj, ~ )localLinePropFcn( selObj, 'Marker', 'none' ),  ...
            false,  ...
            matlab.internal.editor.figure.ActionID.LINE_PROP_EDITED )
            } ...
            };
    end

    properties ( SetObservable = true, SetAccess = 'protected', GetAccess = 'public', Dependent = false, Hidden = false )
        ActionMap;

        Selections;

        IsColdStart = true;


        CodeGenEnableState = matlab.graphics.internal.toolstrip.FigureToolstripManager.isMATLABOnline(  );
    end

    methods ( Static, Access = 'public' )

        function obj = getInstance(  )
            persistent factoryInstance;
            mlock;
            if isempty( factoryInstance )
                factoryInstance = matlab.graphics.internal.toolstrip.FigureToolstripActionFactory;
                factoryInstance.createFactoryMaps(  );
            end
            obj = factoryInstance;

        end

        function s = createRegistration( type, action, doMorph, varargin )
            s = struct( 'ActionType', type, 'Action', action,  ...
                'Morph', doMorph );

            if ~isempty( varargin )

                s.CodeGenId = varargin{ 1 };

                if nargin > 4
                    s.SelectionAffordance = varargin{ 2 };
                end

                if nargin > 5
                    s.SelectionOptions = varargin{ 3 };
                end

                if nargin > 6
                    s.TargetType = varargin{ 4 };
                end
            end
        end

        function result = isCodeGenEnabled(  )
            import matlab.graphics.internal.toolstrip.*;

            factory = FigureToolstripActionFactory.getInstance(  );

            result = factory.CodeGenEnableState;
        end

        function setCodeGenEnabledState( value )
            arguments
                value matlab.lang.OnOffSwitchState;
            end

            import matlab.graphics.internal.toolstrip.*;

            factory = FigureToolstripActionFactory.getInstance(  );

            factory.CodeGenEnableState = value;
        end
    end

    methods ( Access = private )
        function obj = FigureToolstripActionFactory(  )
        end

        function createFactoryMaps( this )
            this.ActionMap = this.createMapping( this.ActionMapping );
        end

        function map = createMapping( ~, mapping )
            keyset = cell( 1, length( mapping ) );
            valueset = cell( 1, length( mapping ) );

            for i = 1:length( mapping )
                keyset{ i } = mapping{ 1, i }{ 1, 1 };
                valueset{ i } = mapping{ 1, i }{ 1, 2 };
            end

            map = containers.Map( keyset',  ...
                valueset' );
        end
    end

    methods ( Access = public )
        function dismissSelectors( this )

            if ~isempty( this.Selections )
                for i = 1:numel( this.Selections )
                    delete( this.Selections{ i } );
                end
            end
        end

        function executeAction( this, key, varargin )
            import matlab.plottools.service.*;
            try
                a = this.getAction( key );


                if isempty( a )
                    return ;
                end


                fig = get( groot, 'CurrentFigure' );
                ax = matlab.graphics.axis.Axes.empty;
                if ~isempty( fig )
                    ax = fig.CurrentAxes;
                end

                if isfield( a, 'TargetType' )
                    allAxes = findall( fig, 'type', a.TargetType,  ...
                        'Visible', 'on', 'HandleVisibility', 'on' );

                    if numel( allAxes ) == 1 && ax ~= allAxes( 1 )
                        ax = allAxes( 1 );
                    end
                else
                    allAxes = findall( fig, '-isa', 'matlab.graphics.axis.AbstractAxes',  ...
                        'Visible', 'on', 'HandleVisibility', 'on' );
                end

                useSelectionMode = numel( allAxes ) > 1;

                if useSelectionMode
                    service = MetadataService.getInstance(  );
                    isUnifiedChart = service.isUnifiedChart( allAxes );


                    useSelectionMode = useSelectionMode && ~isUnifiedChart;
                end


                this.dismissSelectors(  );



                if ~isempty( fig ) && a.Morph
                    matlab.ui.internal.prepareFigureFor( fig, mfilename( 'fullpath' ) );
                end



                if this.IsColdStart && isfield( a, 'SelectionAffordance' )


                    matlab.graphics.internal.toolstrip.FigureToolstripManager.updateGalleryState(  ...
                        "motwToolstrip.figureToolstripToolsGallery.tools.gallery", "busy" );

                    this.IsColdStart = false;
                end

                if useSelectionMode && isfield( a, 'SelectionAffordance' )

                    this.Selections = cell( numel( allAxes ), 1 );


                    for i = 1:numel( allAxes )
                        ax = allAxes( i );

                        if isfield( a, 'SelectionOptions' ) && ~isempty( a.SelectionOptions )
                            select = a.SelectionAffordance( ax, a.SelectionOptions );
                        else
                            select = a.SelectionAffordance( ax );
                        end

                        select.enable(  );

                        this.Selections{ i } = select;
                    end


                    return ;
                end

                codeGenObj = [  ];



                matlab.graphics.internal.toolstrip.FigureToolstripManager.setFigureFocus( fig );

                switch a.ActionType
                    case 'Base'
                        a.Action( varargin{ : } );
                    case 'Axes'
                        if ~isempty( ax )
                            a.Action( ax, varargin{ : } );
                            codeGenObj = ax;
                        end
                    case 'Figure'
                        if ~isempty( fig )
                            a.Action( fig, varargin{ : } );
                            codeGenObj = fig;
                        end
                    case 'Selection'
                        if ~isempty( fig )
                            selectedObjects = findall( fig, 'Selected', 'on' );


                            selectedAnnotationObjs = findall( selectedObjects, '-isa', 'matlab.graphics.shape.Arrow',  ...
                                '-or', '-isa', 'matlab.graphics.shape.Line',  ...
                                '-or', '-isa', 'matlab.graphics.shape.DoubleEndArrow',  ...
                                '-or', '-isa', 'matlab.graphics.shape.TextArrow' );
                            if ~isempty( selectedAnnotationObjs ) && isCodeGenActionRegistratorExists( fig )


                                fig.CodeGenerationProxy.ActionRegistrator.put( fig, matlab.internal.editor.figure.ActionID.ANNOTATION_ADDED );
                                for k = 1:numel( selectedAnnotationObjs )
                                    fig.CodeGenerationProxy.ActionRegistrator.put( selectedAnnotationObjs( k ), matlab.internal.editor.figure.ActionID.ANNOTATION_ADDED );
                                end
                            end

                            for l = 1:numel( selectedObjects )


                                if isfield( a, "CodeGenId" ) && isCodeGenActionRegistratorExists( fig )
                                    fig.CodeGenerationProxy.ActionRegistrator.put( selectedObjects( l ), a.CodeGenId );
                                end
                            end
                            a.Action( selectedObjects, varargin{ : } );
                            codeGenObj = fig;
                        end
                end


                if isfield( a, "CodeGenId" ) && ~isempty( codeGenObj )
                    this.generateCode( codeGenObj, a.CodeGenId );
                end
            catch


            end
        end

        function action = getAction( this, key )
            action = [  ];

            keyList = string( keys( this.ActionMap ) );

            if any( key == keyList )
                action = this.ActionMap( key );
            end
        end

        function generateCode( ~, hObj, codeGenActionID )

            import matlab.graphics.internal.toolstrip.*;

            factory = FigureToolstripActionFactory.getInstance(  );
            if factory.isCodeGenEnabled
                obj = hObj;
                if numel( hObj ) > 1
                    obj = hobj( 1 );
                end

                fig = ancestor( obj, 'figure' );
                if isprop( fig, 'FigureCodeGenController' )
                    matlab.graphics.interaction.generateLiveCode( hObj, codeGenActionID );
                end
            end
        end

        function generatePropCode( this, selObj, propName )

            obj = selObj;
            useSetSyntax = false;
            useAxesGcaSyntax = false;
            useAxesLoopSyntax = false;

            if numel( selObj ) > 1
                obj = selObj( 1 );
                useSetSyntax = true;
            end

            fig = ancestor( obj, 'figure' );

            if isprop( fig, 'FigureCodeGenController' )

                if ~isprop( fig, 'CodeGenCache' )
                    pCodeGenCache = addprop( fig, 'CodeGenCache' );
                    pCodeGenCache.Transient = true;
                    pCodeGenCache.Hidden = true;

                    fig.CodeGenCache = {  };
                end

                propVal = get( obj, propName );

                fig.CodeGenCache{ end  + 1 } = struct( 'useSetSyntax', useSetSyntax,  ...
                    'Prop', propName, 'Value', this.stringify( propVal ),  ...
                    'useAxesGcaSyntax', useAxesGcaSyntax, 'useAxesLoopSyntax', useAxesLoopSyntax );

                fig.FigureCodeGenController.CodeGenerationProxy.notify( 'PropSetOccurred' );
            end
        end

        function generateFontChangeCode( this, selObj, propName )

            obj = selObj;
            useSetSyntax = true;
            useAxesGcaSyntax = false;
            useAxesLoopSyntax = false;
            setProp = false;

            if numel( selObj ) > 1
                obj = selObj( 1 );
            end

            if numel( selObj ) > 1
                useAxesLoopSyntax = true;
            else
                useAxesGcaSyntax = true;
            end

            fig = ancestor( obj, 'figure' );

            if isprop( fig, 'FigureCodeGenController' )

                if ~isprop( fig, 'CodeGenCache' )
                    pCodeGenCache = addprop( fig, 'CodeGenCache' );
                    pCodeGenCache.Transient = true;
                    pCodeGenCache.Hidden = true;

                    fig.CodeGenCache = {  };
                end

                propVal = get( obj, propName );

                for len = 1:numel( fig.CodeGenCache )
                    if strcmp( propName, 'FontSize' )
                        if strcmp( fig.CodeGenCache{ len }.Prop, 'FontSize' )
                            setProp = true;
                            fig.CodeGenCache{ len }.Value = this.stringify( propVal );
                        end
                    elseif strcmp( propName, 'FontName' )
                        if strcmp( fig.CodeGenCache{ len }.Prop, 'FontName' )
                            setProp = true;
                            fig.CodeGenCache{ len }.Value = this.stringify( propVal );
                        end
                    end
                end
                if ~setProp
                    fig.CodeGenCache{ end  + 1 } = struct( 'useSetSyntax', useSetSyntax,  ...
                        'Prop', propName, 'Value', this.stringify( propVal ),  ...
                        'useAxesGcaSyntax', useAxesGcaSyntax, 'useAxesLoopSyntax', useAxesLoopSyntax );
                end

                fig.FigureCodeGenController.CodeGenerationProxy.notify( 'PropSetOccurred' );
            end
        end

        function str = stringify( ~, val )
            str = val;
            if isscalar( str ) || ischar( str )
                if ischar( str ) || isstring( str )
                    str = strcat( """", str, """" );
                else
                    str = string( val );
                end
            else
                str = "[";
                for i = 1:numel( val )
                    str = strcat( str, string( val( i ) ) );
                    if i ~= numel( val )
                        str = strcat( str, ", " );
                    end
                end

                str = strcat( str, "]" );
            end
        end
    end
end

function localAxesProp( ax, name, value )

service = matlab.plottools.service.MetadataService.getInstance(  );
adapter = service.getMetaDataAccessor( ax );

lastValue = adapter.get( name );

if strcmpi( value, lastValue )
    return ;
end

fcn = @( adapter, ~ )set( adapter, name, value );
invfcn = @( adapter, ~ )set( adapter, name, lastValue );
localEvaluateAsUndoable( adapter, fcn, invfcn, lower( name ) );

end

function localLabel( ax, actionId )


matlab.graphics.internal.toolstrip.labelHelper( ax, actionId );

end

function localGrid( ax, types, values )

service = matlab.plottools.service.MetadataService.getInstance(  );
adapter = service.getMetaDataAccessor( ax );

lastValues = adapter.get( types );



fcn = @( adapter, ~ )set( adapter, types, values );
invfcn = @( adapter, ~ )set( adapter, types, lastValues );
localEvaluateAsUndoable( adapter, fcn, invfcn, 'grid' )

end

function localFontIncrease( fig )


fcn = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, 'increase' );
invfcn = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, 'decrease' );
localEvaluateAsUndoable( fig, fcn, invfcn, 'font increase' )

end

function localFontDecrease( fig )


fcn = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, 'decrease' );
invfcn = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, 'increase' );
localEvaluateAsUndoable( fig, fcn, invfcn, 'font decrease' )

end

function localFontType( fig, value )

lastType = get( fig.CurrentAxes, 'FontName' );

matlab.graphics.internal.toolstrip.fontHelper( fig, value );
cmd.Name = [ 'FontName' ];
cmd.Function = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, value );
cmd.InverseFunction = @( fig, ~ )matlab.graphics.internal.toolstrip.fontHelper( fig, lastType );
cmd.Varargin = { fig };
cmd.InverseVarargin = { fig };
uiundo( fig, 'function', cmd );

end

function localLinePropFcn( selectedObjs, prop, value )


if isempty( selectedObjs )
    selectedObjs = findall( gcf, 'type', 'line', '-or', 'type', 'lineshape' );
end

localPropFcn( selectedObjs, prop, value );
end

function localAllLinePropFcn( fig, prop, value )


if ~isempty( fig )
    selectedObjs = findall( fig, 'type', 'line', '-or', 'type', 'lineshape' );
    localPropFcn( selectedObjs, prop, value );
end
end

function localPropFcn( selectedObjs, prop, value )


propValue = value;
propName = prop;

switch prop
    case 'FontColor'
        if all( isprop( selectedObjs, 'TextColor' ) )
            propName = 'TextColor';
        else
            propName = 'Color';
        end
    case 'FontWeight'
        if value
            propValue = 'bold';
        else
            propValue = 'normal';
        end
    case 'FontAngle'
        if value
            propValue = 'italic';
        else
            propValue = 'normal';
        end
    case { 'left', 'center', 'right' }
        propValue = prop;
        propName = 'HorizontalAlignment';
    case 'BackgroundColor'
        if all( ~isprop( selectedObjs, 'BackgroundColor' ) ) &&  ...
                all( isprop( selectedObjs, 'Color' ) )
            propName = 'Color';
        elseif all( ~isprop( selectedObjs, 'BackgroundColor' ) ) &&  ...
                all( isprop( selectedObjs, 'FaceColor' ) )
            propName = 'FaceColor';
        elseif all( ~isprop( selectedObjs, 'BackgroundColor' ) ) &&  ...
                all( isprop( selectedObjs, 'MarkerFaceColor' ) )
            propName = 'MarkerFaceColor';
        end
    case 'EdgeColor'
        if all( ~isprop( selectedObjs, 'EdgeColor' ) ) &&  ...
                all( isprop( selectedObjs, 'Color' ) )
            propName = 'Color';
        elseif all( ~isprop( selectedObjs, 'EdgeColor' ) ) &&  ...
                all( isprop( selectedObjs, 'MarkerEdgeColor' ) )
            propName = 'MarkerEdgeColor';
        end
    case 'XScale'
        if all( isa( selectedObjs, 'matlab.graphics.axis.PolarAxes' ) )
            propName = 'AlphaScale';
        end
end



selectedObjs = selectedObjs( isprop( selectedObjs, propName ) );

inversePropValue = get( selectedObjs, propName );

fcn = @( selectedObjs, ~ )set( selectedObjs, propName, propValue );
invFcn = @( selectedObjs, ~ )set( selectedObjs, propName, inversePropValue );

localEvaluateAsUndoable( selectedObjs, fcn, invFcn, propName );

end

function localUndo( f )
f.uitools_FigureToolManager;
cm = f.uitools_FigureToolManager.CommandManager;
cm.undo;
if isprop( f, "FigureCodeGenController" )
    f.FigureCodeGenController.CodeGenerationProxy.notify( 'InteractionOccured' );
end

matlab.graphics.internal.toolstrip.FigureToolstripManager.updategcf;
end

function localRedo( f )
f.uitools_FigureToolManager;
cm = f.uitools_FigureToolManager.CommandManager;
cm.redo;
if isprop( f, "FigureCodeGenController" )
    f.FigureCodeGenController.CodeGenerationProxy.notify( 'InteractionOccured' );
end

matlab.graphics.internal.toolstrip.FigureToolstripManager.updategcf;
end

function localEvaluateAsUndoable( hObj, fcn, invfcn, name )



feval( fcn, hObj );
localRegisterAsUndoable( hObj, fcn, invfcn, name );

end

function localRegisterAsUndoable( hObj, fcn, invfcn, name )


cmd.Name = name;
cmd.Function = fcn;
cmd.InverseFunction = invfcn;
cmd.Varargin = { hObj };
cmd.InverseVarargin = { hObj };

fig = ancestor( hObj, 'figure' );

if isempty( fig ) && isprop( hObj, 'ReferenceObject' )
    fig = ancestor( hObj.ReferenceObject, 'figure' );
end

uiundo( fig, 'function', cmd );

end

function localAnnotation( fig, value )

try
    modeManager = uigetmodemanager( fig );
    inPlotEdit = ~isempty( modeManager ) && ~isempty( modeManager.CurrentMode ) &&  ...
        strcmp( modeManager.CurrentMode.Name, 'Standard.EditPlot' );


    if isprop( fig, 'MOLToolstripModeListener' )
        fig.MOLToolstripModeListener.Enabled = false;
    end

    startscribeobject( lower( value ), fig );



    if ~inPlotEdit

        plotmgr = matlab.graphics.annotation.internal.getplotmanager;

        if ~isprop( fig, 'PlotSelectListener' )
            addprop( fig, 'PlotSelectListener' );
        end

        fig.PlotSelectListener = event.listener( plotmgr,  ...
            'PlotSelectionChange', @( e, s )localChangedSelectedObjectsCallback( e, s, fig ) );
    else


        if isprop( fig, 'MOLToolstripModeListener' )
            fig.MOLToolstripModeListener.Enabled = true;
        end
    end
catch
    if isprop( fig, 'MOLToolstripModeListener' )
        fig.MOLToolstripModeListener.Enabled = true;
    end
end
end

function localChangedSelectedObjectsCallback( ~, obj, fig )
if obj.Figure == fig
    if ~isa( obj.SelectedObjects, 'matlab.graphics.shape.internal.ScribeObject' ) ...
            && ~isempty( obj.SelectedObjects )

        if isactiveuimode( fig, 'Standard.EditPlot' )
            activateuimode( fig, '' );
        end


        if isprop( fig, 'PlotSelectListener' )
            delete( fig.PlotSelectListener )
            fig.PlotSelectListener = [  ];
        end


        if isprop( fig, 'MOLToolstripModeListener' )
            fig.MOLToolstripModeListener.Enabled = true;
        end
    end
end
end

function localBasicFitting( fig )
basicfitdatastat( 'bfit', fig, 'bf' )
end

function localColormapFcn( fig )



cmapObj = get( fig, 'CurrentAxes' );
if isempty( cmapObj )
    cmapObj = fig;
end
colormapeditor( cmapObj );
end

function localShowHideCode( fig, value )


fig.isCodeGenCheckboxSelected = value;
end

function locallinkedplotcallback( fig, value )
if ~isempty( fig )
    if value
        datamanager.linkbtnoncallback( 'on', fig );
    else
        linkdata( fig, 'off' );
    end
end

end

function ret = isCodeGenActionRegistratorExists( fig )


ret = isprop( fig, 'CodeGenerationProxy' ) &&  ...
    isvalid( fig.CodeGenerationProxy ) && isprop( fig.CodeGenerationProxy, 'ActionRegistrator' ) &&  ...
    isvalid( fig.CodeGenerationProxy.ActionRegistrator );
end
