function jmaab_jc_0603







    rec=ModelAdvisor.Check('mathworks.jmaab.jc_0603');
    rec.Title=DAStudio.message('ModelAdvisor:jmaab:jc_0603_title');
    rec.CSHParameters.MapKey='ma.mw.jmaab';
    rec.CSHParameters.TopicID=rec.ID;
    rec.setCallbackFcn(@(system,checkObj)Advisor.Utils.genericCheckCallback(...
    system,checkObj,'ModelAdvisor:jmaab:jc_0603',@checkCallBack),...
    'None','DetailStyle');

    rec.TitleTips=[DAStudio.message('ModelAdvisor:jmaab:jc_0603_guideline'),newline,newline,DAStudio.message('ModelAdvisor:jmaab:jc_0603_tip')];
    rec.setLicense({styleguide_license});
    rec.Value=true;
    rec.SupportHighlighting=true;
    rec.SupportLibrary=true;
    rec.SupportExclusion=true;
    rec.setInputParametersLayoutGrid([1,4]);
    rec.setSupportedReportStyles({'ModelAdvisor.Report.StandardStyle'});

    inputParamList{1}=ModelAdvisor.InputParameter;
    inputParamList{end}.Name=DAStudio.message('ModelAdvisor:jmaab:jc_0603_SubCheckA');
    inputParamList{end}.Type='bool';
    inputParamList{end}.RowSpan=[1,1];
    inputParamList{end}.ColSpan=[1,2];
    inputParamList{end}.Visible=false;
    inputParamList{end}.Enable=true;
    inputParamList{end}.Value=true;

    inputParamList{end+1}=ModelAdvisor.InputParameter;
    inputParamList{end}.Name=DAStudio.message('ModelAdvisor:jmaab:jc_0603_SubCheckB');
    inputParamList{end}.Type='bool';
    inputParamList{end}.RowSpan=[2,2];
    inputParamList{end}.ColSpan=[1,2];
    inputParamList{end}.Visible=false;
    inputParamList{end}.Enable=true;
    inputParamList{end}.Value=true;


    inputParamList{end+1}=Advisor.Utils.createStandardInputParameters('find_system.FollowLinks');
    inputParamList{end}.RowSpan=[4,4];
    inputParamList{end}.ColSpan=[1,2];
    inputParamList{end}.Value='on';
    inputParamList{end+1}=Advisor.Utils.createStandardInputParameters('find_system.LookUnderMasks');
    inputParamList{end}.RowSpan=[4,4];
    inputParamList{end}.ColSpan=[3,4];
    inputParamList{end}.Value='graphical';

    inputParamList{end+1}=ModelAdvisor.InputParameter;
    inputParamList{end}.Name=DAStudio.message('ModelAdvisor:jmaab:jc_0603_BlockType');
    inputParamList{end}.Type='Enum';
    inputParamList{end}.Entries={'Annotation','Doc Block','Model Info Block'};
    inputParamList{end}.RowSpan=[5,5];
    inputParamList{end}.ColSpan=[1,2];
    inputParamList{end}.Visible=false;
    inputParamList{end}.Enable=true;
    inputParamList{end}.Value='Annotation';

    inputParamList{end+1}=ModelAdvisor.InputParameter;
    inputParamList{end}.Name=DAStudio.message('ModelAdvisor:jmaab:jc_0603_KeyWords');
    inputParamList{end}.Type='String';
    inputParamList{end}.RowSpan=[6,7];
    inputParamList{end}.ColSpan=[1,4];
    inputParamList{end}.Visible=false;
    inputParamList{end}.Enable=true;
    inputParamList{end}.Value='Input:,Description:,Output:';

    rec.setInputParameters(inputParamList);
    mdladvRoot=ModelAdvisor.Root;
    mdladvRoot.publish(rec,{sg_maab_group,sg_jmaab_group});
end

function FailingObjs=checkCallBack(system)

    mdlAdvObj=Simulink.ModelAdvisor.getModelAdvisor(system);
    [FailingNamesNF,FailingNamesNC]=checkAlgo(mdlAdvObj,system);

    subCheckA=mdlAdvObj.getInputParameterByName(DAStudio.message('ModelAdvisor:jmaab:jc_0603_SubCheckA')).Value;
    subCheckB=mdlAdvObj.getInputParameterByName(DAStudio.message('ModelAdvisor:jmaab:jc_0603_SubCheckB')).Value;
    FailingObjs=[];

    if subCheckA
        ElementResults=Advisor.Utils.createResultDetailObjs(FailingNamesNF,...
        'Description',DAStudio.message('ModelAdvisor:jmaab:jc_0603_tip'),...
        'Status',DAStudio.message('ModelAdvisor:jmaab:jc_0603_fail'),...
        'RecAction',DAStudio.message('ModelAdvisor:jmaab:jc_0603_recAction'));
        FailingObjs=[FailingObjs,ElementResults];

    end
    if subCheckB
        ElementResults1=Advisor.Utils.createResultDetailObjs(FailingNamesNC,...
        'Description',DAStudio.message('ModelAdvisor:jmaab:jc_0603_tip'),...
        'Status',DAStudio.message('ModelAdvisor:jmaab:jc_0603_fail_1'),...
        'RecAction',DAStudio.message('ModelAdvisor:jmaab:jc_0603_recAction_1'));
        FailingObjs=[FailingObjs,ElementResults1];
    end

end

function[FailingNamesNF,FailingNamesNC]=checkAlgo(mdlAdvObj,system)








    FailingNamesNF={};
    FailingNamesNC={};


    maskTypes=getMaskTypes();


    FollowLinks=Advisor.Utils.getStandardInputParameters(mdlAdvObj,'find_system.FollowLinks');
    LookUnderMasks=Advisor.Utils.getStandardInputParameters(mdlAdvObj,'find_system.LookUnderMasks');

    DescriptionType=mdlAdvObj.getInputParameterByName(DAStudio.message('ModelAdvisor:jmaab:jc_0603_BlockType')).Value;
    DescKeyWord=mdlAdvObj.getInputParameterByName(DAStudio.message('ModelAdvisor:jmaab:jc_0603_KeyWords')).Value;

    subCheckB=mdlAdvObj.getInputParameterByName(DAStudio.message('ModelAdvisor:jmaab:jc_0603_SubCheckB')).Value;

    DescKeyWord=strsplit(DescKeyWord,',');
    DescKeyWord=cellfun(@(x)strtrim(x),DescKeyWord,'UniformOutput',false);
    countOfKey=length(DescKeyWord);



    SSBlocks=find_system(system,'FollowLinks',FollowLinks.Value,...
    'MatchFilter',@Simulink.match.internal.filterOutInactiveVariantSubsystemChoices,...
    'LookUnderMasks',LookUnderMasks.Value);

    SSBlocks=mdlAdvObj.filterResultWithExclusion(SSBlocks);

    layers=unique(get_param(SSBlocks,'Parent'));






    if length(layers)==1
        layers=SSBlocks;
        idx=true;
    else




        idx=~ismember(get_param(layers(3:end),'MaskType'),maskTypes);
        idx=[false;true;idx];
    end
    layers=layers(idx);


    DocAndMdlInfoBlock=find_system(system,'FollowLinks',FollowLinks.Value,...
    'MatchFilter',@Simulink.match.internal.filterOutInactiveVariantSubsystemChoices,...
    'LookUnderMasks','on','regexp','on','MaskType','(CMBlock)|(DocBlock)');
    layers=setdiff(layers,DocAndMdlInfoBlock);

    for n=1:length(layers)


        curLayer=layers{n};
        if Stateflow.SLUtils.isStateflowBlock(curLayer)

            continue
        end


        if strcmp(DescriptionType,'Annotation')

            DescBlk=find_system(curLayer,'SearchDepth','1','MatchFilter',@Simulink.match.allVariants,'FollowLinks','on','LookUnderMasks','on','FindAll','on','Type','annotation');
        elseif strcmp(DescriptionType,'Doc Block')



            DescBlk=find_system(get_param(curLayer,'handle'),'SearchDepth','1','FollowLinks','on','LookUnderMasks','on','BlockType','SubSystem','MaskType','DocBlock');
        elseif strcmp(DescriptionType,'Model Info Block')
            DescBlk=find_system(curLayer,'SearchDepth','1','FollowLinks','on','LookUnderMasks','on','BlockType','SubSystem','MaskType','CMBlock');
        end

        if isempty(DescBlk)

            FailingNamesNF=[FailingNamesNF;curLayer];
        elseif subCheckB





            if strcmp(DescriptionType,'Annotation')

                DescForm=get_param(DescBlk,'PlainText');
            elseif strcmp(DescriptionType,'Doc Block')


                DescForm=get_param(DescBlk,'UserData');
                if~iscell(DescForm)
                    DescForm={DescForm};
                end
                DescForm=arrayfun(@(x)DescForm{x}.content,(1:length(DescBlk)),'UniformOutput',false);
            elseif strcmp(DescriptionType,'Model Info Block')


                DescForm=get_param(DescBlk,'MaskValues');


                DescForm=arrayfun(@(x)DescForm{x}(2),(1:length(DescBlk)));
            end
            if ischar(DescForm)
                DescForm={DescForm};
            end




            DescKeyWordCopy=DescKeyWord;
            DescKeyWord=strrep(DescKeyWord,'[','\[');
            DescKeyWord=strrep(DescKeyWord,']','\]');
            DescKeyWord=strrep(DescKeyWord,'(','\(');
            DescKeyWord=strrep(DescKeyWord,')','\)');
            DescKeyWord=strrep(DescKeyWord,'{','\{');
            DescKeyWord=strrep(DescKeyWord,'}','\}');

            regVal={};
            for g=1:length(DescKeyWord)



                tmpVal=['(?<=(\n\s*|^))',DescKeyWord{g}];
                regVal=[regVal;tmpVal];
            end

            for k=1:length(DescForm)
                DescTxt=DescForm{k};



                if any(~cellfun(@(x)contains(DescTxt,x),DescKeyWordCopy))


                    flag=true;
                    continue;
                end

                ind=regexp(DescTxt,regVal);


                if any(cellfun(@(x)isempty(x),ind))||any(cellfun(@(x)length(x),ind)>1)||~issorted(cell2mat(ind))
                    flag=true;
                else
                    flag=false;
                    break;
                end
            end
            if true==flag
                FailingNamesNC=[FailingNamesNC;curLayer];
            end
        end
    end
end

function maskTypes=getMaskTypes()
    maskTypes={'Atomic Subsystem',...
    'Band-Limited White Noise.',...
    'Bit Clear',...
    'Bit Set',...
    'Bitwise Operator',...
    'Block Support Table',...
    'CMBlock',...
    'Checks_DGap',...
    'Checks_DMax',...
    'Checks_DMin',...
    'Checks_DRange',...
    'Checks_Gradient',...
    'Checks_Resolution',...
    'Checks_SGap',...
    'Checks_SMax',...
    'Checks_SMin',...
    'Checks_SRange',...
    'Code Reuse Subsystem',...
    'Compare To Constant',...
    'Compare To Zero',...
    'Conversion Inherited',...
    'Coulombic and Viscous Friction',...
    'Counter Free-Running',...
    'Counter Limited',...
    'Data Type Propagation',...
    'Data Type Propagation Examples',...
    'Dead Zone Dynamic',...
    'Decrement Time To Zero',...
    'Decrement To Zero',...
    'Detect Change',...
    'Detect Decrease',...
    'Detect Fall Negative',...
    'Detect Fall Nonpositive',...
    'Detect Increase',...
    'Detect Rise Nonnegative',...
    'Detect Rise Positive',...
    'Difference',...
    'Discrete Derivative',...
    'DocBlock',...
    'Enabled And Triggered Subsystem',...
    'Enabled Subsystem',...
    'Enumerated Constant',...
    'Environment Controller',...
    'Extract Bits',...
    'First Order Transfer Fcn',...
    'Fixed-Point State-Space',...
    'For Each Subsystem',...
    'For Iterator Subsystem',...
    'Function-Call Generator',...
    'Function-Call Subsystem',...
    'If Action Subsystem',...
    'Initialize Function Subsystem',...
    'Interval Test',...
    'Interval Test Dynamic',...
    'Lead or Lag Compensator',...
    'Lookup Table Dynamic',...
    'ManualVariantSink',...
    'ManualVariantSource',...
    'MinMax Running Resettable',...
    'PID 1dof',...
    'PID 2dof',...
    'Ramp',...
    'Rate Limiter Dynamic',...
    'Real World Value Decrement',...
    'Real World Value Increment',...
    'Repeating Sequence Interpolated',...
    'Repeating Sequence Stair',...
    'Repeating table',...
    'Reset Function Subsystem',...
    'Resettable Subsystem',...
    'Run First Subsystem',...
    'Run Last Subsystem',...
    'S-Function Builder',...
    'S-Function Examples',...
    'Saturation Dynamic',...
    'Scaling Strip',...
    'Sigbuilder block',...
    'SignalEditor',...
    'Simulink Function Subsystem',...
    'Sine and Cosine',...
    'Slider Gain',...
    'Stored Integer Value Decrement',...
    'Stored Integer Value Increment',...
    'Subsystem Examples',...
    'Switch Case Action Subsystem',...
    'Tapped Delay Line',...
    'Terminate Function Subsystem',...
    'Timed Linearization',...
    'Transfer Fcn Direct Form II',...
    'Transfer Fcn Direct Form II Time Varying',...
    'Transfer Fcn Real Zero',...
    'Triggered Linearization',...
    'Triggered Subsystem',...
    'Variant Model',...
    'Variant Subsystem',...
    'Virtual Subsystem',...
    'WaveformGenerator',...
    'While Iterator Subsystem',...
    'Wrap To Zero',...
    'XY scope.',...
    'chirp',...
    'PWM',...
    'Hermitian',...
    'IsOrthogonal',...
    'MatrixInverse',...
    'Transpose'};

end
