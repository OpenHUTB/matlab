function DO178B_MathOperationsBlocksUsage



    rec=ModelAdvisor.Check('mathworks.do178.MathOperationsBlocksUsage');
    rec.Title=DAStudio.message('ModelAdvisor:do178b:MathOpsBlocksUsageTitle');
    rec.setCallbackFcn(@MathBlockCallback,'None','StyleOne');
    rec.TitleTips=DAStudio.message('ModelAdvisor:do178b:MathOpsBlocksUsageTip');
    rec.CSHParameters.MapKey='ma.do178b';
    rec.CallbackContext='PostCompile';
    rec.Value=false;
    rec.CSHParameters.TopicID='MathBlockUsageTitle';
    rec.setLicense({do178b_license});
    rec.SupportExclusion=true;

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
    mdladvRoot=ModelAdvisor.Root;
    mdladvRoot.register(rec);





    function ResultDescription=MathBlockCallback(system)
        ResultDescription={};

        mdlAdvObj=Simulink.ModelAdvisor.getModelAdvisor(system);
        mdlAdvObj.setCheckResultStatus(false);
        finalResult=true;
        xlateTagPrefix='ModelAdvisor:do178b:';

...
...
...
...
...
...
...
...
...
...
        isSubcheckEnabled=true(1,7);

        if any(isSubcheckEnabled)


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_absBlock(system,xlateTagPrefix,isSubcheckEnabled(1));
            ResultDescription=[ResultDescription,aliasResultDescription];
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_gainBlock(system,xlateTagPrefix,isSubcheckEnabled(2));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_logMathFctBlock(system,xlateTagPrefix,isSubcheckEnabled(3));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_log10MathFctBlock(system,xlateTagPrefix,isSubcheckEnabled(4));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_remMathFctBlock(system,xlateTagPrefix,isSubcheckEnabled(5));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_reciprocalMathFctBlock(system,xlateTagPrefix,isSubcheckEnabled(6));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            [Result,aliasResultDescription]=ModelAdvisor.Common.modelAdvisorCheck_assignmentBlock(system,xlateTagPrefix,isSubcheckEnabled(7));
            ResultDescription=[ResultDescription,aliasResultDescription];
            ResultDescription{end}.setSubBar(true);
            finalResult=finalResult&&Result;


            ResultDescription{1}.setCheckText(DAStudio.message('ModelAdvisor:do178b:MathOpsBlocksUsageCheckText'));


            ResultDescription{end}.setSubBar(false);

        else
            ft=ModelAdvisor.FormatTemplate('ListTemplate');
            ft.setCheckText(DAStudio.message('ModelAdvisor:do178b:MathOpsBlocksUsageCheckText'));
            ft.setSubResultStatus('Pass');
            ft.setSubResultStatusText(DAStudio.message([xlateTagPrefix,'NoSubcheckSelected']));
            ft.setSubBar(false);
            ResultDescription{end+1}=ft;
            finalResult=true;
        end

        mdlAdvObj.setCheckResultStatus(finalResult);